{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/tranquilpeak/source/assets/css/font-awesome.css","path":"assets/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/thumbs.css","path":"assets/css/thumbs.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/jquery.fancybox.css","path":"assets/css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/favicon.ico","path":"assets/images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/thumbs.js","path":"assets/js/thumbs.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/tranquilpeak.js","path":"assets/js/tranquilpeak.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/tranquilpeak.css","path":"assets/css/tranquilpeak.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.woff","path":"assets/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.woff2","path":"assets/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/style.css","path":"assets/css/style.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/css/style-1udptkpril81ozu8ifd8zpujn7ipu7lefxsiu5gxx0dpnzntdx6dusvki3ao.min.css","path":"assets/css/style-1udptkpril81ozu8ifd8zpujn7ipu7lefxsiu5gxx0dpnzntdx6dusvki3ao.min.css","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/FontAwesome.otf","path":"assets/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.ttf","path":"assets/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.eot","path":"assets/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/jquery.fancybox.js","path":"assets/js/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/script-yhuo2grt8r7qkqumzgjoglkfbicl1thukjgmla6jopu56zpcowfedi5zjcor.min.js","path":"assets/js/script-yhuo2grt8r7qkqumzgjoglkfbicl1thukjgmla6jopu56zpcowfedi5zjcor.min.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/cover.jpg","path":"assets/images/cover.jpg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/jquery.js","path":"assets/js/jquery.js","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/images/cover-v1.2.0.jpg","path":"assets/images/cover-v1.2.0.jpg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.svg","path":"assets/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/tranquilpeak/source/assets/js/script.js","path":"assets/js/script.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fdf7e508cc8cb183172a3226c3444d2b8dec23fc","modified":1530849471635},{"_id":"source/CNAME","hash":"8cad7fbefaa02e0236206e8be932594f8fe4bd6c","modified":1488355022000},{"_id":"themes/tranquilpeak/.eslintignore","hash":"1f78f00553adf9ee374b343191ed809b0f8ba073","modified":1521447429000},{"_id":"themes/tranquilpeak/.eslintrc","hash":"b8227472c86456e77c456748f72fcbf93ea955ac","modified":1521447424000},{"_id":"themes/tranquilpeak/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521448452000},{"_id":"source/favicon.ico","hash":"5d0d4bc08a9aa3d5b30fa5d32d4ad6753bfede6d","modified":1488357095000},{"_id":"themes/tranquilpeak/.gitignore","hash":"fa1331ae3eafab39a5b40cf5a011154043f9bf0e","modified":1521447429000},{"_id":"themes/tranquilpeak/.travis.yml","hash":"8a462414dfc70a5b30b97c1ea51185f3e4745ca1","modified":1521447431000},{"_id":"themes/tranquilpeak/DOCUMENTATION.md","hash":"af0d04f6d24fe9decb4ebf618ea37e3c5fd8d72e","modified":1521448349000},{"_id":"themes/tranquilpeak/Gruntfile.js","hash":"b2b078651cf8c5dcde2e847169ce242ad3319ca3","modified":1521447424000},{"_id":"themes/tranquilpeak/LICENSE","hash":"7a3b30ddb56760b35a6b7cd210aeb271cd292b60","modified":1521447424000},{"_id":"themes/tranquilpeak/README.md","hash":"e79c4571bda71a2b982162d5af27d4f876c2e652","modified":1521447429000},{"_id":"themes/tranquilpeak/_config.yml","hash":"0069da294d573233bccabb21f76448986ea55254","modified":1550482908851},{"_id":"themes/tranquilpeak/package.json","hash":"867285db4cc67e1c780251a16c2fc87375b53cf8","modified":1521447429000},{"_id":"source/all-archives/index.md","hash":"d3cf9594f2951ad8804d659a3fce9e449145c3cf","modified":1487037716000},{"_id":"source/_posts/.DS_Store","hash":"69a4ee89de7b88ec6c4afdc231a61943ee3a569a","modified":1530949003546},{"_id":"source/_posts/RunLoop.md","hash":"a46b9f8330413a5096cd541a3a996dbf8f378ff5","modified":1527651384958},{"_id":"source/_posts/Swift-与函数式编程的那些事.md","hash":"083b3fcca815d71a7d462f4e3d2453b60a93d77b","modified":1552292164343},{"_id":"source/_posts/Swift-中的-Sequence-协议.md","hash":"37f42add86da96a6b062281f45f5323337076b8d","modified":1531015193308},{"_id":"source/_posts/Swift构造器.md","hash":"97d8fcc3e4840cb2f96436e7d6fdc605fbcd31f3","modified":1527380048333},{"_id":"source/_posts/Swift-面向协议编程的那些事.md","hash":"6c6f9e15a083eec36718968b36d2224a16b63606","modified":1552130299789},{"_id":"source/_posts/iOS-应用启动流程分析-dyld.md","hash":"15affe6134746e76f5b18cb2d82b0c2916016f06","modified":1550195953581},{"_id":"source/_posts/Swift中的rethrows.md","hash":"5c97992b6dfcf31d72d0786f4a2b4a62d38ce9a9","modified":1490159290000},{"_id":"source/_posts/iOS渲染原理.md","hash":"3be88aecd36181e2e6869fd3995c2034a897b0f2","modified":1487907328000},{"_id":"source/_posts/iOS核心动画-Core-Animation.md","hash":"ba81d23e3ef78c6966f2f19919141476a516df90","modified":1527304002136},{"_id":"source/_posts/xcodebuild的使用.md","hash":"f94eb551174ed377b7e37b734f7388ac0a493178","modified":1550195966091},{"_id":"source/_posts/从零开始开发一个-Status-Bar-App.md","hash":"8f5d32b9d7b48fcdbee9771fd4950b492822d356","modified":1550197164072},{"_id":"source/_posts/使用Core-Graphics绘制图形.md","hash":"051d1eaf4468df714dc6609e5489bef3742c6ede","modified":1527303682950},{"_id":"source/_posts/入坑Webpack.md","hash":"e50dd4ba60c8d3113685bf4f16b7fe20f89483f0","modified":1527331610221},{"_id":"source/_posts/使用一个UIImageView实现轮播控件.md","hash":"9740b7e10e4bf707a57e622403d11450d638b4bf","modified":1488345397000},{"_id":"source/_posts/初识Core-Data.md","hash":"d38d3ad51883447415f16a1c70eda1245a15d544","modified":1527651434108},{"_id":"source/_posts/如何发布自己的开源框架到CocoaPods.md","hash":"2ea9856edf58d092ba80ec054e4cb32b6bf27f02","modified":1527651450940},{"_id":"source/_posts/属性-你真的弄明白了吗.md","hash":"8498d1ff628ba91ddc8b699170dd5d4bd148de7c","modified":1488354000000},{"_id":"source/_posts/在-Swift-中使用值类型.md","hash":"d2e39207ef486177a3de2f60f6b80fc0253f0b7b","modified":1552304789355},{"_id":"source/_posts/快速搭建基于HLS和RTMP的视频推流.md","hash":"7bc661752bd8ef69af197ac5a7f228b5d42712a1","modified":1527379825832},{"_id":"source/_posts/开启 RxSwift 之旅——开篇.md","hash":"0d6d0c989ad623c631d76091f0040eb893a4cade","modified":1527651474643},{"_id":"source/_posts/打造一个流畅的UITableView.md","hash":"552dbdf35cc59a760713b289af6f79c814212de4","modified":1527379873253},{"_id":"source/_posts/用 Swift 写一个响应式编程库.md","hash":"b3ea03c8120d98971e9c7dce3ea466ef4c249a14","modified":1527651498281},{"_id":"source/_posts/教你如何用Swift写个json转模型的开源库.md","hash":"8eeb3ab8228c977c972dc6ffc26da53afdf90454","modified":1527390130136},{"_id":"source/_posts/被误解的MVC.md","hash":"ed3607aeb423dbe64d0c1bf224772b002439288b","modified":1527379940586},{"_id":"source/_posts/由一道swift面试题引发的对方法调度的思考(上).md","hash":"44e21524d5661762dd031a629bff0adb46018a6d","modified":1490159376000},{"_id":"source/_posts/组件生命周期管理和通信方案.md","hash":"371bfcd3badb76a055c621037cfdcc74baf0fd35","modified":1550286811942},{"_id":"source/_posts/说说iOS多线程.md","hash":"de9121785abde1787e8f490ebbb6ed9260065011","modified":1527379740286},{"_id":"source/_posts/设计模式—开篇.md","hash":"3de9460f98fc053030f0782aeed97543fe39a841","modified":1527332799476},{"_id":"source/all-tags/index.md","hash":"06dce847b31efeae3a5e0e678e7e8e0af982947c","modified":1487037722000},{"_id":"themes/tranquilpeak/.github/CONTRIBUTING.md","hash":"0b6315c32c306f7f11fde868e235537dc34e9f90","modified":1521447429000},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE.md","hash":"ec6bf3eb708f8eb62736ede6d2080f6610849802","modified":1521447429000},{"_id":"source/all-categories/index.md","hash":"7725b9fa95f5f9c39d0827e692f38cd8820512ac","modified":1487823954000},{"_id":"themes/tranquilpeak/.github/PULL_REQUEST_TEMPLATE.md","hash":"625c6d04c0c4264a0dd6fb275bcc8dee096f0813","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/de-DE.yml","hash":"2dbdaadd412778cfc8190ce79511b6cae0653538","modified":1527300970261},{"_id":"themes/tranquilpeak/languages/en.yml","hash":"1bf6118684a9e9f119892aa72c0de33fe8bce049","modified":1527300849969},{"_id":"themes/tranquilpeak/languages/es.yml","hash":"9ded4692d918f6119e2049387de9d9f6049e3dab","modified":1527300982355},{"_id":"themes/tranquilpeak/languages/fr-FR.yml","hash":"f3aa504b13a84e7e0bc75466abcea8e7e90838be","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/fa.yml","hash":"d1013afe247b2a240f5d03d25e2c870994af6d3d","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/it-IT.yml","hash":"2511c1dd63ac6c6c2c4da4e4aeaaf81eb5efb20d","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/ja.yml","hash":"8c46dcbdfa981e614cf019b9b03c2d56b464a059","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/pt-br.yml","hash":"e800caa9b58c5c07b0d7cf26abf74514121cb9eb","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/ru.yml","hash":"b7f4d4df152d6e4a791958b7682c04fcd146c35e","modified":1521447429000},{"_id":"themes/tranquilpeak/languages/zh-cn.yml","hash":"534446033c6e81f350f22247bdfd7c2f3f089c2b","modified":1527301016430},{"_id":"themes/tranquilpeak/languages/zh-tw.yml","hash":"b1918a8911418d8a98e782dee8f303d1cb8b89f9","modified":1521447429000},{"_id":"themes/tranquilpeak/layout/all-archives.ejs","hash":"28a4e97d1cfe4730dbcc8fde27b079320b5eec35","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/all-tags.ejs","hash":"aabb765f51a8d7582a5bafdbc8876b46ff1e6ea1","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/all-categories.ejs","hash":"fa6f71b9543644df38cc1f33f8ed8223f91cc7a6","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/archive.ejs","hash":"0df1edf4ed40b316715ef1949b09aa9c98d22359","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/category.ejs","hash":"67902c418e299399133fe2a7ebc39cadd17de861","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/index.ejs","hash":"36e89b37f520533bef85fb32b714214257fad1d0","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/layout.ejs","hash":"29c1291c7ca3f5da7bee6385b7f716d179199933","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/page.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/post.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/tag.ejs","hash":"72bff1ae241fbe2ddca0537e8ed77c791a7d1766","modified":1521447424000},{"_id":"themes/tranquilpeak/scripts/.eslintrc.json","hash":"4cd7451f0bc15440bc8147912c63a11acd0e280f","modified":1521447429000},{"_id":"themes/tranquilpeak/tasks/pipeline.js","hash":"9c35bf63e39dcf989adf35b39c587290e6943e11","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/.gitmodules","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1416529720000},{"_id":"themes/tranquilpeak/source/_fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521447424000},{"_id":"source/_posts/Swift-面向协议编程的那些事/binarysearch2.png","hash":"24f5e80e27da950f2b048a0ab910018ac46e3354","modified":1552037286101},{"_id":"source/_posts/Swift-面向协议编程的那些事/render2.png","hash":"4190377a8eaa9a12eccc8724941b6a6496f0cd60","modified":1552033406034},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/04.png","hash":"da0827f0ae655bf586741f05a913b32818e8bbc5","modified":1548386310799},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/02.png","hash":"4439ba2f87cfb44d22ec8cbd0f3108542b19edc5","modified":1548318391965},{"_id":"source/_posts/iOS核心动画-Core-Animation/cover.jpg","hash":"aba7b949bcb38b492598e277770b8443b5450756","modified":1500633454000},{"_id":"source/_posts/iOS渲染原理/18436043320170222134916051.jpg","hash":"b2bc02bc74926800a3c4ea2b9d72860d02031f8e","modified":1500633540000},{"_id":"source/_posts/xcodebuild的使用/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1527332720818},{"_id":"source/_posts/初识Core-Data/18436043320170227154154030_640.png","hash":"c197c38e68896b61097952a6af5e2f493cc5b99a","modified":1500633446000},{"_id":"source/_posts/初识Core-Data/18436043320170227155859067_640.jpg","hash":"fa2a9d8a1d676880b541a91d33a8c3eeed6f5a0a","modified":1500633438000},{"_id":"source/_posts/初识Core-Data/18436043320170227160223054_640.jpg","hash":"8d5f25b6acb39477db993897d3fa2008e03011f9","modified":1500633430000},{"_id":"source/_posts/从零开始开发一个-Status-Bar-App/thumbnail.png","hash":"e5fd562933485222d551c7d28930b5113dfa0388","modified":1527583868923},{"_id":"source/_posts/开启 RxSwift 之旅——开篇/rxlogo.png","hash":"5cb49133c0f2a784ef399ceb73e4bb1e96789885","modified":1527376447991},{"_id":"source/_posts/设计模式—开篇/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1527331495253},{"_id":"source/_posts/组件生命周期管理和通信方案/protocol-class.jpg","hash":"9175f4cebdc96de18266079de4a0bee62720ce5c","modified":1550284630823},{"_id":"themes/tranquilpeak/layout/_partial/about.ejs","hash":"3e16c7ab5d2036576e92b618f735aca24b820a43","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/archive-post.ejs","hash":"e19455749c5c1bf773214d965f173613dd8f30f6","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/archive.ejs","hash":"bdd73d1f70bd91533863943f940f8193d44e0fdd","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/cover.ejs","hash":"18b9a620fca9b648fd59467a66b3f4fdbba42613","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/baidu-analytics.ejs","hash":"736eca2ecf6fdeea032d47c02c51688f006cafb4","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/footer.ejs","hash":"67962257d9e3cb6a4d56e3f0263f192ba9a413dd","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/google-analytics.ejs","hash":"0d0bc2c67d2cfab5fbf3d5d21c209d799f5de528","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/header.ejs","hash":"9579d6aa6011d927d079639e80b28763a57f6b0b","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/head.ejs","hash":"ac9c12399954eb27036e55e2a85f1ea5e9b8b00b","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/index.ejs","hash":"e5d658bff9a942d6dee027fea96e49c7a3668f57","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/pagination.ejs","hash":"207dd207e01eacda76b89e88a2ce95d898eadfca","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post.ejs","hash":"a05df5b3c970e5a1a93bd2d49344d6983183fc94","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/script.ejs","hash":"7493818bcce1cf2e436225e6b48af808b0eb74c9","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/search.ejs","hash":"c2e7449b4a980197f73c1cb163ab21fdc673351e","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/sidebar.ejs","hash":"737f5df45d478f64143c0a2e03707f08776759b0","modified":1521447424000},{"_id":"themes/tranquilpeak/scripts/filters/excerpt.js","hash":"5e0e473d46f8c7aac988ebf0b25ab2eab0af73bb","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/filters/thumbnail_image_url.js","hash":"0ad2d9304c991e2989708bdbfa6a59030ee691d3","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/helpers/absolute_url.js","hash":"0d520a946b6f0abbac60529017ed3133265aac60","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/helpers/generate_sharing_link.js","hash":"89069677e8acddef5fba0d3093f5f73fde4fa485","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/helpers/is_remote_url.js","hash":"471237ea295bcc9a392a5bb6738ef4c6ab673afb","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/helpers/json_ld.js","hash":"875f3a04b789ebb392169aca9f53c5e6cd4f8c35","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/helpers/resolve_asset_url.js","hash":"c813e9daaed374b386b91876923f10c0cf1d624c","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/tags/alert.js","hash":"5b86358dd53c9b0d44c385ec12cf9e76383e229a","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/tags/fancybox.js","hash":"55ce02f9ef084f43932eb9b0f10db1d5e9c3a250","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/tags/highlight_text.js","hash":"8e093f21e9a4b10c19be6f300dc90bcc39685ec9","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/tags/image.js","hash":"ab6b04db8fe2ad21ec52dac5e1c3ee76400c6a79","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/tags/tabbed_codeblock.js","hash":"7dccd36bdd85c96eb7af125b30d634f44125700c","modified":1521447429000},{"_id":"themes/tranquilpeak/scripts/tags/wide_image.js","hash":"d3596c62694548a3a684e8dfeb5372038ef6f450","modified":1521447429000},{"_id":"themes/tranquilpeak/node_modules/.bin/acorn","hash":"385d05081580db6a79c543e00f9b934da7a209e0","modified":1515483524000},{"_id":"themes/tranquilpeak/node_modules/.bin/escodegen","hash":"ea70dd92f7321b01fd3aea944059dfc7ab7ff82e","modified":1430234946000},{"_id":"themes/tranquilpeak/node_modules/.bin/esparse","hash":"3d6b8fda44ca6d8f347c35d442c6dd838646f8f1","modified":1481604347000},{"_id":"themes/tranquilpeak/node_modules/.bin/esgenerate","hash":"00b8be70a2983d1dffae6c1395a70ea39f0f3a53","modified":1430234946000},{"_id":"themes/tranquilpeak/node_modules/.bin/sshpk-sign","hash":"75271a4b0392b5549555f50085b991e8d9a3bd0c","modified":1461292363000},{"_id":"themes/tranquilpeak/node_modules/.bin/esvalidate","hash":"368bdfb162d02492c660e74657608f0ce4865eaf","modified":1481604347000},{"_id":"themes/tranquilpeak/node_modules/.bin/sshpk-conv","hash":"ef58cd3dce531e6a04e6557610f52be2688b8568","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/abab/CHANGELOG.md","hash":"357bc45fe1d94c48b926ee4c8bdd1a089d099f84","modified":1505957314000},{"_id":"themes/tranquilpeak/node_modules/abab/index.js","hash":"3e14bbc1d5a0d7f5d81b65ee4e368027c63ba8ad","modified":1505957314000},{"_id":"themes/tranquilpeak/node_modules/.bin/sshpk-verify","hash":"a74dd8749820e0a9e9d334bd09665d6e3e4885f2","modified":1452565517000},{"_id":"themes/tranquilpeak/node_modules/.bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1462408202000},{"_id":"themes/tranquilpeak/node_modules/abab/package.json","hash":"c32ebf69671b94f2608baf748985035e9cfbdd8c","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/abab/LICENSE.md","hash":"2ef4a0a4b2756fc60cf4c6fb4b9bb231054126bc","modified":1505957314000},{"_id":"themes/tranquilpeak/node_modules/abab/README.md","hash":"3dd81380844ea60d27d89589d648df685f411f4e","modified":1505957314000},{"_id":"themes/tranquilpeak/node_modules/acorn/AUTHORS","hash":"6f4b6a55d960cb60474a9706ae2688df8c29c413","modified":1519717264000},{"_id":"themes/tranquilpeak/node_modules/.bin/uuid","hash":"c5b3ec4d8a8f620420aa52a8f3a7cfdff1197667","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/acorn/LICENSE","hash":"c68e9597fe0b6ee46f64adb92942b38f82ddbf1d","modified":1515741694000},{"_id":"themes/tranquilpeak/node_modules/acorn/README.md","hash":"f838a2668b3c84345276ae0afa481c35111326f1","modified":1519286989000},{"_id":"themes/tranquilpeak/node_modules/acorn/CHANGELOG.md","hash":"84a665b4e4cda0db37f08db3cef82c5c483ee73f","modified":1520501102000},{"_id":"themes/tranquilpeak/node_modules/acorn/yarn-error.log","hash":"eb65e451fed0fb0141b5e749092ca2237bf06b69","modified":1520501352000},{"_id":"themes/tranquilpeak/node_modules/ajv/LICENSE","hash":"62f08d093123f54dbadafa64fde0392ae22a7846","modified":1513455711000},{"_id":"themes/tranquilpeak/node_modules/ajv/.tonic_example.js","hash":"4234fa9e49ee50602f9877e95bf46cdfaf4f618f","modified":1493406434000},{"_id":"themes/tranquilpeak/node_modules/ajv/package.json","hash":"88c91f859c12c3727d421bed9fb2de1ac4efd9f7","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/acorn/package.json","hash":"d36ece8e5ded56e6144971eca2ae18d5bb21ca5a","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/acorn-globals/package.json","hash":"97085e0b4a85fbff051acc1a7aa5172649350356","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/acorn-globals/README.md","hash":"db9e6a11b0a15a15244286a11cf99d0e71747030","modified":1498216735000},{"_id":"themes/tranquilpeak/node_modules/acorn-globals/LICENSE","hash":"c10025d9f88d74d08d60f8e092ac3e038ce180c4","modified":1427570062000},{"_id":"themes/tranquilpeak/node_modules/array-equal/.npmignore","hash":"72f049ce24b9ea4d151bab8d777c8e6cb35e4a25","modified":1398762919000},{"_id":"themes/tranquilpeak/node_modules/array-equal/index.js","hash":"8ff8d3fe9c77d8ddac6d2b6f6380bf38585515bb","modified":1398762902000},{"_id":"themes/tranquilpeak/node_modules/array-equal/package.json","hash":"bc6eb406ad947d63fa4b819f48d620a019aa22c0","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/array-equal/LICENSE","hash":"b559c45c8d07f2679620d9771e68696ee3d5964b","modified":1398762928000},{"_id":"themes/tranquilpeak/node_modules/array-equal/README.md","hash":"a0dc601039e6014ad76404c61de273592a013705","modified":1398763016000},{"_id":"themes/tranquilpeak/node_modules/acorn-globals/index.js","hash":"a5adc5e17aaf337a83c8b0a41bf9ba8446483532","modified":1508886306000},{"_id":"themes/tranquilpeak/node_modules/array-equal/component.json","hash":"8550fcbb9ff1c9dab0c0851f2e1385154c706078","modified":1398762967000},{"_id":"themes/tranquilpeak/node_modules/asn1/.npmignore","hash":"e4d8961c077c0e5648b0dcf3e885a607190674c2","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/.travis.yml","hash":"ccb3d08679457eddf37ce946ffab66f6440f70da","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/LICENSE","hash":"724e48cfc739674999ff82b4e49d76d5376818e9","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/README.md","hash":"71e6a47944ebaefe5d5357a7b6f46df9c389316f","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/package.json","hash":"65039c1b4fa293b45047d9efa99a8571f843edee","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/assert-plus/assert.js","hash":"8103ced007b61b3e45a420607de576faf7e1e0e4","modified":1453920717000},{"_id":"themes/tranquilpeak/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1453918488000},{"_id":"themes/tranquilpeak/node_modules/assert-plus/CHANGES.md","hash":"b27cef2253f8ff8a83584bf1a55cec9d4dfbf517","modified":1453920717000},{"_id":"themes/tranquilpeak/node_modules/assert-plus/package.json","hash":"7e14fd1078d46187ab5b6bffa43ac34b412615d7","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/assert-plus/README.md","hash":"d6771de291034391f0ec79175fff3428ed6d82b8","modified":1453920717000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/.travis.yml","hash":"4119aeca7589bde9656cbec8fff0fc06c3ef3400","modified":1505148098000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/LICENSE","hash":"1673c3c0b15c89245a6330bd44d0673371334d15","modified":1505145562000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/index.js","hash":"807aa8e19c376fef94638cd849713c7baefd70dd","modified":1505141104000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/package.json","hash":"929ee398b46a3f64c36215b42a28ed64282b588f","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/readme.md","hash":"e331c5f64148cbf776af71b7644856103c8a2908","modified":1505148098000},{"_id":"themes/tranquilpeak/node_modules/asynckit/LICENSE","hash":"9171131798797e013e6c922921540694b1e3542d","modified":1463552412000},{"_id":"themes/tranquilpeak/node_modules/asynckit/index.js","hash":"9201eacd2650642ff12a8af5fd1dbf7dc7848bee","modified":1463795005000},{"_id":"themes/tranquilpeak/node_modules/asynckit/README.md","hash":"030a12b4b2a9151538e9491d3a4f23dfe9848f32","modified":1465928899000},{"_id":"themes/tranquilpeak/node_modules/asynckit/bench.js","hash":"8dacd95640ad3d0ae47aebf5bd1ba4d83f6a1f1d","modified":1463686174000},{"_id":"themes/tranquilpeak/node_modules/asynckit/package.json","hash":"79898548f6dc413cfa77f3f4a88808f207f2c4f0","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/asynckit/parallel.js","hash":"ecead062825e6790ce70c1879c745808c8ce7528","modified":1465665593000},{"_id":"themes/tranquilpeak/node_modules/asynckit/serial.js","hash":"9af5e746a0a9f8ba24926bc2fbb9786cf13f081b","modified":1465665583000},{"_id":"themes/tranquilpeak/node_modules/asynckit/serialOrdered.js","hash":"26f4cadf2685ee07af06e82803171847f74b9fb3","modified":1465665610000},{"_id":"themes/tranquilpeak/node_modules/aws-sign2/index.js","hash":"fb21f9e87275ef41a4901fa4bf0680d1bf0f0605","modified":1492024121000},{"_id":"themes/tranquilpeak/node_modules/aws-sign2/package.json","hash":"0c483b9500168a4cccd45a29308a173a37f48feb","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/asynckit/stream.js","hash":"c8bde32c80d2f3ecb33462a0aed86851c4c7e9e6","modified":1465859636000},{"_id":"themes/tranquilpeak/node_modules/aws-sign2/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1492024121000},{"_id":"themes/tranquilpeak/node_modules/aws-sign2/README.md","hash":"5e8e0e7c811b1f319c0e94ff08f38ecf4896e3c9","modified":1492024121000},{"_id":"themes/tranquilpeak/node_modules/aws4/.npmignore","hash":"c2ad4c3e5e24417715cba447a66fa2a024477584","modified":1456867923000},{"_id":"themes/tranquilpeak/node_modules/aws4/.tern-port","hash":"8db710197696210837bb654bcdc25d6c523c1150","modified":1371607454000},{"_id":"themes/tranquilpeak/node_modules/aws4/aws4.js","hash":"3af299bb062502fec5a6e688db29e39df752a807","modified":1486481903000},{"_id":"themes/tranquilpeak/node_modules/aws4/LICENSE","hash":"9ba903f14c37d0ab0250a8e6920e7269bdc5b294","modified":1384232184000},{"_id":"themes/tranquilpeak/node_modules/aws4/lru.js","hash":"015965230b90e69906f66fca1792c4557336336f","modified":1462643151000},{"_id":"themes/tranquilpeak/node_modules/aws4/.travis.yml","hash":"73c40717fe695caf839f2bc871320837b3c2abae","modified":1451426685000},{"_id":"themes/tranquilpeak/node_modules/aws4/package.json","hash":"bbec067cf699f9467327e4a0d2d9db5b08e1a43a","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/aws4/README.md","hash":"8c7e5705921c53e38919481a09ad2d545422648c","modified":1476225268000},{"_id":"themes/tranquilpeak/node_modules/bcrypt-pbkdf/README.md","hash":"1ab2ae999a63598c7e6128ac485fc9515e9cb6f1","modified":1486007492000},{"_id":"themes/tranquilpeak/node_modules/bcrypt-pbkdf/package.json","hash":"febcbde092505aab8acf47d0acaef363aff39623","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/bluebird/LICENSE","hash":"59002342e7a5468c5b5b9ae6fb4eb41bbc7f33ae","modified":1488577289000},{"_id":"themes/tranquilpeak/node_modules/bcrypt-pbkdf/index.js","hash":"4be9d75ea7a7a9c91fe8436f52ebd113fdc674f3","modified":1486007667000},{"_id":"themes/tranquilpeak/node_modules/bluebird/package.json","hash":"246da8da8db6444f18146dc1068cdefa44177ecb","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/bluebird/README.md","hash":"4e1269bd88d06bc10978da978e28e4b2276a2450","modified":1493061424000},{"_id":"themes/tranquilpeak/node_modules/bluebird/changelog.md","hash":"bc6df7caea3b83fa361fa0a96c9b34c09465a93a","modified":1472620968000},{"_id":"themes/tranquilpeak/node_modules/boom/package.json","hash":"e04c95be48642d2128df8fb197f2264ed3fa5aba","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/browser-process-hrtime/index.js","hash":"71c850ab1e53a10d05445d59f5816831463e5d61","modified":1438733861000},{"_id":"themes/tranquilpeak/node_modules/boom/README.md","hash":"5a4005863b398a9a0d787d673ed1ea54b1bfba40","modified":1490708319000},{"_id":"themes/tranquilpeak/node_modules/browser-process-hrtime/.npmignore","hash":"1f1020cd1355a5a633d0e14ac0f1a87c3632f107","modified":1438731271000},{"_id":"themes/tranquilpeak/node_modules/browser-process-hrtime/README.md","hash":"2cce6cc05bf2a57be0791fd82beb99c4297a7d60","modified":1438731271000},{"_id":"themes/tranquilpeak/node_modules/browser-process-hrtime/package.json","hash":"7f66a02973c78a26c9f102d9045cd8479a514f32","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/camel-case/camel-case.js","hash":"6828b41a59ec548d513d5a7f1c91f7e683f926ce","modified":1465692324000},{"_id":"themes/tranquilpeak/node_modules/boom/LICENSE","hash":"9e7b89cb8edfe6dafb7a8821827c9097454ac230","modified":1490707307000},{"_id":"themes/tranquilpeak/node_modules/camel-case/package.json","hash":"1f28355eab5c62382ea0d1c7de96198481ee6fa5","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/caseless/index.js","hash":"49a6a654b1bdc4e119895edc96a1ee4bb519a38c","modified":1485466642000},{"_id":"themes/tranquilpeak/node_modules/caseless/package.json","hash":"7b30c164ee470906b62d7318959f9c397db1138c","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/camel-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1465681882000},{"_id":"themes/tranquilpeak/node_modules/camel-case/camel-case.d.ts","hash":"30e10eb66736cbb97c906af8b2ceb7b4755e6259","modified":1465681882000},{"_id":"themes/tranquilpeak/node_modules/caseless/README.md","hash":"5770b9496fb480f7c403b6c38759a27d6170e882","modified":1414608769000},{"_id":"themes/tranquilpeak/node_modules/caseless/LICENSE","hash":"48f9e0a4c07f36c07d47962212fe022d0417c90f","modified":1435268329000},{"_id":"themes/tranquilpeak/node_modules/caseless/test.js","hash":"9cbbc1b43bd3b86518885b2c82f0d8c302e68ed9","modified":1485466642000},{"_id":"themes/tranquilpeak/node_modules/co/LICENSE","hash":"286d14ca126cee1bc2678589c3d5b21b88dbddf2","modified":1436480846000},{"_id":"themes/tranquilpeak/node_modules/co/History.md","hash":"96b4f024ec3a3b94fa0ba3b71e2218e755b9713e","modified":1436480979000},{"_id":"themes/tranquilpeak/node_modules/co/index.js","hash":"1f5838a875ef7d84f39ce4563028ce1033a04c0d","modified":1436480946000},{"_id":"themes/tranquilpeak/node_modules/co/package.json","hash":"249cd17430e8a5a3e9709e555443eb8f77658a59","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/combined-stream/package.json","hash":"d0d72b46d139240148225bc68fb7e973d6de3c30","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/co/Readme.md","hash":"c0bb1b2618735c6191d24763bed0ee1c8415ec23","modified":1436480846000},{"_id":"themes/tranquilpeak/node_modules/combined-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1518224813000},{"_id":"themes/tranquilpeak/node_modules/content-type-parser/package.json","hash":"c4a4908cd08ae4921a65fedec5bb3c2bc3637cab","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/content-type-parser/LICENSE.txt","hash":"75a7010f177dd65249a42042aa44e893faa9dc07","modified":1508716730000},{"_id":"themes/tranquilpeak/node_modules/combined-stream/Readme.md","hash":"0e4384a6edea7b3a580ffa5b32236b7f8b251834","modified":1518224813000},{"_id":"themes/tranquilpeak/node_modules/content-type-parser/README.md","hash":"0ba4728c1fcf2cd596378f85a2f2586e84fa415f","modified":1476566611000},{"_id":"themes/tranquilpeak/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/tranquilpeak/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/tranquilpeak/node_modules/core-util-is/package.json","hash":"03913f5f593960dc3da4b9347d3084f4332e4005","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/tranquilpeak/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/index.js","hash":"db81cb7b0c65f5b0dfe1b81f2217a6277bc4822a","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/LICENSE","hash":"45c1476739d0c028c845b2c90c401c3a4435de04","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/README.md","hash":"179da75e34197ceca8bc1b79ce95c9ab7f13c43c","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/package.json","hash":"2c068177831df874d7a55438c6e913e3af9cc52f","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/LICENSE","hash":"f899339cfe3a8c144703ad7fba998fc94f0d5137","modified":1495952606000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/.npmignore","hash":"175bc9c7a20bf41efc1d77f2c62fd59c6a3515f2","modified":1495952374000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/package.json","hash":"77fbb15960e0e8611f39d36acb75556b590f929b","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/README.md","hash":"e1fd1e3f53a6c1cbc8dd1fe9240e6f10c904677d","modified":1495952606000},{"_id":"themes/tranquilpeak/node_modules/cssom/LICENSE.txt","hash":"efc03835c50d60940a3c8cdc0f2f3e3ea1215905","modified":1472868517000},{"_id":"themes/tranquilpeak/node_modules/cssom/package.json","hash":"6fe38061bdbca95e1f0a0792b0c35987cfaf6242","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/cssom/README.mdown","hash":"710822e0b75faf3387ebc35b9de7ea69cd75cefb","modified":1448519786000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/MIT-LICENSE.txt","hash":"b55f34bb984c002888a386201ed49df4b3514750","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/.npmignore","hash":"8e7fecc234961702a6a7b86f92385b0721e51af0","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/package.json","hash":"3c9d1ef1739ac95ff1c148012d1590db20a063d3","modified":1521447496000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/README.md","hash":"5c4db2fa72c331ca976db638c9e7351eeaf7badf","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/dashdash/CHANGES.md","hash":"d4c1434f92782308105f24a11c0bdb076127be5e","modified":1479854012000},{"_id":"themes/tranquilpeak/node_modules/dashdash/LICENSE.txt","hash":"427497f949741f3f7e72ea1e62749908e9c4f5b9","modified":1451581401000},{"_id":"themes/tranquilpeak/node_modules/dashdash/README.md","hash":"e40739349732594d5d96438bd27aa444915d3f79","modified":1453144686000},{"_id":"themes/tranquilpeak/node_modules/dashdash/package.json","hash":"daf67ba889f881991a4fad58ed295e5f59045f66","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/delayed-stream/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1430430799000},{"_id":"themes/tranquilpeak/node_modules/delayed-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1430160212000},{"_id":"themes/tranquilpeak/node_modules/delayed-stream/package.json","hash":"61a12f13b5dedb8d902a4605784bed1b657f76e3","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/delayed-stream/Makefile","hash":"1d88cf18c0fef56e91425a086590e31271a7c4d5","modified":1430160212000},{"_id":"themes/tranquilpeak/node_modules/deep-is/.travis.yml","hash":"40a8dc83132dd64dbfe1294f6355f9a88edd52ef","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/deep-is/LICENSE","hash":"4c5d1ca79ad3d544442c39f03be407dfa4788fd7","modified":1408910573000},{"_id":"themes/tranquilpeak/node_modules/delayed-stream/Readme.md","hash":"21db9b7ec97b7028a031a18867aab00575b09850","modified":1430160212000},{"_id":"themes/tranquilpeak/node_modules/deep-is/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/deep-is/index.js","hash":"51b4b7a1952ea939b7ac8cd5fd6ce6b62fa52f7a","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/deep-is/README.markdown","hash":"d534a29d57b10d8ab4f60aa900de96fa94f7e4d0","modified":1408910573000},{"_id":"themes/tranquilpeak/node_modules/deep-is/package.json","hash":"6cdc918f9eccceb769a2710ea386a0280b49ee00","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/domexception/package.json","hash":"21390f9ce92bf9acfddb1719234392d8ce12bb99","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/domexception/LICENSE.txt","hash":"448c397e2b36e3868c7085b6765b5336dd0b3ae0","modified":1502679486000},{"_id":"themes/tranquilpeak/node_modules/domexception/README.md","hash":"14c3c12cb46133330f7ff81854dae782c3acd533","modified":1502680048000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/LICENSE","hash":"d9dddd103d636dbaa178cd222de612fd923f62da","modified":1393978405000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/README.md","hash":"97cb1bdec48ebb5e46e64fc5441c79d3d38a3c82","modified":1408853444000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/.npmignore","hash":"4eb6d3215a6bbe8de1dd28113d86860c61a5531e","modified":1393978405000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/index.js","hash":"13c052ad0b0507a4203d5d1274fdfa049a6c1339","modified":1448288282000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/test.js","hash":"9709f584f556ceb8acaa0fd746029dcb58390eb4","modified":1408853485000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/package.json","hash":"d9b895e883d667f07738d5722059a0458a0bcf51","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/esprima/LICENSE.BSD","hash":"26dd70b52c7c7111ca8913fc0bc240dc28ca15c0","modified":1481604347000},{"_id":"themes/tranquilpeak/node_modules/esprima/ChangeLog","hash":"1267c969559f329291049abe0e65be1454093bb9","modified":1482462906000},{"_id":"themes/tranquilpeak/node_modules/esprima/README.md","hash":"53a9b2c2206e6660146b160eb6f56454178c62c2","modified":1482462891000},{"_id":"themes/tranquilpeak/node_modules/estraverse/.babelrc","hash":"a743adcbd00acf0782a92921d872e9d93052df82","modified":1457386039000},{"_id":"themes/tranquilpeak/node_modules/esprima/package.json","hash":"e8dda72c81a436bb45cef4054fe998dd0948b4d8","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/estraverse/LICENSE.BSD","hash":"e74ff75ee8a455b69f308ecaeef9804e6c9c8fd8","modified":1457386039000},{"_id":"themes/tranquilpeak/node_modules/estraverse/gulpfile.js","hash":"1b430ab8fe6438e61ac5f3585a9243b2db260748","modified":1457386039000},{"_id":"themes/tranquilpeak/node_modules/estraverse/package.json","hash":"9733d11ba6e5e25b0fff888a43627f77fa31f6aa","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/extend/.eslintrc","hash":"c952dbfd41704936c0d02e3d130710c6addf8ed8","modified":1493352097000},{"_id":"themes/tranquilpeak/node_modules/extend/.jscs.json","hash":"0298367603c396b3e1509cebc137fe3878468815","modified":1493352100000},{"_id":"themes/tranquilpeak/node_modules/estraverse/estraverse.js","hash":"7d1e064e097dd4f1921f0e65acf515a570585556","modified":1457646267000},{"_id":"themes/tranquilpeak/node_modules/extend/.travis.yml","hash":"bd5e57098ba697b7e9266f333498b013a57dc04b","modified":1493352185000},{"_id":"themes/tranquilpeak/node_modules/extend/.npmignore","hash":"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3","modified":1435780828000},{"_id":"themes/tranquilpeak/node_modules/extend/CHANGELOG.md","hash":"f2282029a70955bb79b3c3a9c92d6bafaeb100fd","modified":1493352287000},{"_id":"themes/tranquilpeak/node_modules/extend/index.js","hash":"20ee480421ab46f05aa6b92b2111cecc53d273a7","modified":1493093625000},{"_id":"themes/tranquilpeak/node_modules/extend/package.json","hash":"f5f3f181795b415f08b9bc9181875652027f1237","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/extend/LICENSE","hash":"bed93ae1abcd71e5d1c9c363595dd24bb1b9016c","modified":1435780828000},{"_id":"themes/tranquilpeak/node_modules/estraverse/.jshintrc","hash":"fa79fa14ae122f25b9af0bc7295c50bda9d31950","modified":1457386039000},{"_id":"themes/tranquilpeak/node_modules/extend/README.md","hash":"25aa925ed3ef4f533976a45cece2cc8159993783","modified":1453840681000},{"_id":"themes/tranquilpeak/node_modules/extend/component.json","hash":"07af5d609ee23647ce3238a0e1322c35b385fc45","modified":1435783532000},{"_id":"themes/tranquilpeak/node_modules/esutils/package.json","hash":"b3485c346e0180d68afc69c1e98dcd5c2ec0ab5c","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/esutils/LICENSE.BSD","hash":"e74ff75ee8a455b69f308ecaeef9804e6c9c8fd8","modified":1403624915000},{"_id":"themes/tranquilpeak/node_modules/esutils/README.md","hash":"969462acf211c83f3f10b9ae323b330f796959e3","modified":1426086716000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1416529581000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/.npmignore","hash":"f6f25c76813204f78147a50d49d3b6a9a4282201","modified":1416529581000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/package.json","hash":"d8e028ffee2b917a55eb155b0e2387cf9bf9073d","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/Makefile","hash":"49da84d8f9e1db5727d0a881ef0382e45f26492d","modified":1425686217000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/jsl.node.conf","hash":"7197578b829d6c93d8356bf114c7f3d26722ec0b","modified":1416529581000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/README.md","hash":"4226a704e2766b5069bb6636555517ed866be6f1","modified":1425686198000},{"_id":"themes/tranquilpeak/node_modules/fast-deep-equal/index.js","hash":"d5291144137272dee9afcb913050f343746d91c0","modified":1519590680000},{"_id":"themes/tranquilpeak/node_modules/fast-deep-equal/package.json","hash":"8dde707d875d35d6828ad50108e3e446c2ad1ca8","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/fast-deep-equal/LICENSE","hash":"44bdc0699c385cdf423dbadea7355ff72e5adc36","modified":1519590513000},{"_id":"themes/tranquilpeak/node_modules/fast-deep-equal/README.md","hash":"e69e5e582b327e7a080ae52872ea4cdd6b5b36ad","modified":1519590513000},{"_id":"themes/tranquilpeak/node_modules/fast-deep-equal/index.d.ts","hash":"c2f05139dccaac36615727a10d7b0b31082a0e98","modified":1519591012000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/Makefile.targ","hash":"f66e38899fc918aac830c478ae402c66d8793bc7","modified":1416529581000},{"_id":"themes/tranquilpeak/node_modules/escodegen/LICENSE.BSD","hash":"e74ff75ee8a455b69f308ecaeef9804e6c9c8fd8","modified":1406347108000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/.eslintrc.yml","hash":"e557873fb13e67775c12f025f7254f12547784bc","modified":1508841234000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/.npmignore","hash":"079203ff3bee95cc2b071f1e8b15fec2111f1930","modified":1508866028000},{"_id":"themes/tranquilpeak/node_modules/escodegen/README.md","hash":"9e1a4d32be20da5764956042ea921e6365c0efcd","modified":1517380049000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1508836326000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/index.js","hash":"81aef05bcfffb0f8804dc9684dd6283f0024bd2d","modified":1508865839000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/package.json","hash":"dc2e050f22b50d43287613f61bb33946f5d2d095","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/README.md","hash":"994000bfa12b63fed32d4c13e91f158097d7f888","modified":1508866787000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/.travis.yml","hash":"4c08200f6602d0fb52c7d3659131401a78f4e34a","modified":1508840229000},{"_id":"themes/tranquilpeak/node_modules/fast-levenshtein/LICENSE.md","hash":"f4d345fe51b02cb9554b5abf0456a9d3dd3c33b4","modified":1417834589000},{"_id":"themes/tranquilpeak/node_modules/fast-levenshtein/README.md","hash":"6de838e59675b67da149927d714a3861b9d90210","modified":1473223877000},{"_id":"themes/tranquilpeak/node_modules/fast-levenshtein/levenshtein.js","hash":"bb60393cef66503d477e1f5e4a4ce3fa86924757","modified":1482873174000},{"_id":"themes/tranquilpeak/node_modules/forever-agent/index.js","hash":"a96917d5912eef5a8ed12a4b1f3a41400eac80d1","modified":1428426146000},{"_id":"themes/tranquilpeak/node_modules/fast-levenshtein/package.json","hash":"01c337f883e3b0db872fd260b0ad3ffda0b6fb30","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/forever-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1426938522000},{"_id":"themes/tranquilpeak/node_modules/forever-agent/package.json","hash":"445bfddc5e79b75d84d7781ee97b2c0754df4c18","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/escodegen/package.json","hash":"a36aaf580723c2cc1f3cf347e8058bebdc97d8c4","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/form-data/package.json","hash":"b960890c5026a210ea96b457277bb984a4095d8b","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/forever-agent/README.md","hash":"fd2b1d08b55284aa2abc72d199e3c487744a0c31","modified":1426938522000},{"_id":"themes/tranquilpeak/node_modules/har-schema/LICENSE","hash":"57fc502455231f1d10c4d2e67c261f0fc56bb17d","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/form-data/README.md.bak","hash":"91dbdbd25f0e985599bc346b478eacc1a4f05c51","modified":1518546191000},{"_id":"themes/tranquilpeak/node_modules/har-schema/README.md","hash":"ade485d13a06d1d75c93216ed9276c86a9b4ace0","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/package.json","hash":"3907d18e9067448d82c7cf2a84453b1413067be0","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/getpass/.travis.yml","hash":"4f7f46c996ede594c41fefbe08df3248206d895d","modified":1461270363000},{"_id":"themes/tranquilpeak/node_modules/getpass/.npmignore","hash":"013de6e5745b61fd07777e2bff18d3d44c11c0a1","modified":1461270348000},{"_id":"themes/tranquilpeak/node_modules/getpass/README.md","hash":"72706fc471e2713656e5dbc049a4c1a2c418b2e7","modified":1461275519000},{"_id":"themes/tranquilpeak/node_modules/getpass/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1493163595000},{"_id":"themes/tranquilpeak/node_modules/form-data/README.md","hash":"b4949ff4469d4325a83d16ba687fdc8c11cfd305","modified":1518568341000},{"_id":"themes/tranquilpeak/node_modules/har-validator/package.json","hash":"a3adbeb745c4f202546222891c006bf6ed0d9995","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/har-validator/LICENSE","hash":"57fc502455231f1d10c4d2e67c261f0fc56bb17d","modified":1494776680000},{"_id":"themes/tranquilpeak/node_modules/har-validator/README.md","hash":"39ed1b1294fbb5a8fddb7c934804a4d7a1fa4bb7","modified":1494776680000},{"_id":"themes/tranquilpeak/node_modules/getpass/package.json","hash":"59c24c4ddb4eaea51b3bd500835012e3b4f72635","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/hawk/.npmignore","hash":"238a8f98083c0f9e10a54555d1e27535c4910ebe","modified":1486872079000},{"_id":"themes/tranquilpeak/node_modules/hawk/LICENSE","hash":"7d83787bf95e0ebcc68d12f9d556bd7deb057db6","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hawk/README.md","hash":"fd73ab59b442c50c45f5712d712f658035911a6a","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hawk/package.json","hash":"accc797fc9ed5e4ee8ba6c06844b37cbfeb99185","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/.eslintrc","hash":"2c4a55a386408308d637f658a4b2f5e82f4e58db","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hawk/client.js","hash":"494d163aa5a906d52df5fe53321254d881799129","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/.npmignore","hash":"8e028ac8e9925655e0f8f3df33ed78df98334074","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/form-data/License","hash":"1d11381521bdc7e7df9bb1d7bf85341ffca266d9","modified":1354688992000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/.jscsrc","hash":"5f410f9c9caedfdd1eabb1571de1f8f9014eefb6","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/.eslintignore","hash":"0abf1c392f32bdf193fe824ead96926f550a85ae","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/highlight_alias.json","hash":"1b97a5e9c73b876d73375cf36106e74b89dea155","modified":1513837686000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/package.json","hash":"29db90e35354fc8fca3b908e7d4b3514513fda32","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/CHANGELOG.md","hash":"aa50cb035f402b4e58e4053ef5c541601153fc3f","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/LICENSE","hash":"fecd013bdadc9ead2732027f06bf8fc19761efcb","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/LICENSE","hash":"cd25196630fe891662ad77810f0f6dee5bc85ddc","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/README.md","hash":"65707c36c6bd911b9e4a7b07cb5603954faf5afd","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/yarn.lock","hash":"f7ffba7f02541ecdb34c63ba45e43754e0504d10","modified":1513819544000},{"_id":"themes/tranquilpeak/node_modules/hoek/package.json","hash":"66c6e00a89969b3bc0e9db27a7c2a96478cb8020","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/README.md","hash":"087887d419ba2c138058e6fac56c24d838bb4114","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/package.json","hash":"151f470df72a6616515dd4d29d0d4eee95edd312","modified":1521447496000},{"_id":"themes/tranquilpeak/node_modules/html-encoding-sniffer/package.json","hash":"ebdccd1e27ccb3e26f44d28ca640935f80f201bb","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/html-encoding-sniffer/LICENSE.txt","hash":"75a7010f177dd65249a42042aa44e893faa9dc07","modified":1508717716000},{"_id":"themes/tranquilpeak/node_modules/hoek/.npmignore","hash":"6e7e77819d8fc8bcaacbf4dd22851af4a3e30eb5","modified":1506469116000},{"_id":"themes/tranquilpeak/node_modules/html-encoding-sniffer/README.md","hash":"7898e6a8634c538af0d21edc9f2cb5d4f6a632b1","modified":1476587149000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/hoek/README.md","hash":"eba36a215444fa3fdd8c66ee6b9180217118e928","modified":1506469116000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/README.md","hash":"3880a58a50ef7514317c4f47b5707d4fd0106c9c","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/hoek/LICENSE","hash":"bb1d85a360ac166fe9ca7d7efb9fb0b0cbe04884","modified":1518711578000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/html-entities/index.js","hash":"eb15b4fed782c7736a02ad14c97901080ab85f44","modified":1421057245000},{"_id":"themes/tranquilpeak/node_modules/html-entities/package.json","hash":"29c1585a945957ed1bd2459e20daee9335c3144c","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/package.json","hash":"d292aa255a4278f7eb4dab7a0803558c51c232e8","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/html-entities/README.md","hash":"15dea62352c313d8eee8b0069a5b0a8a9294e5c6","modified":1493034265000},{"_id":"themes/tranquilpeak/node_modules/html-entities/LICENSE","hash":"f10f3a5e9b16a526fbf6abc4be406e6f07ecad93","modified":1408403203000},{"_id":"themes/tranquilpeak/node_modules/http-signature/package.json","hash":"8459560e9610c8074093522482e17c8fc9f1f1e8","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/http-signature/.dir-locals.el","hash":"bda1c75ba87348876340908be6799d6ac3a4b807","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/http-signature/.npmignore","hash":"8992dfba5fdf2ba23c1da7e57021d6b1274f2456","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/http-signature/CHANGES.md","hash":"59a2ab5cc1ac7f7691560038beb2349e628eeacc","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/http-signature/http_signing.md","hash":"945eb22661d1c43e547371ac8d354a4b761eab09","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/http-signature/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/.travis.yml","hash":"1c523d707b2938ebadfba5abe992ba63cdbe4b27","modified":1497366543000},{"_id":"themes/tranquilpeak/node_modules/http-signature/README.md","hash":"5847fa2ec86a2ca744776acd5528fdfd6c3377fc","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/package.json","hash":"806d9a1e8632e83795cc2431bec00b0a5071d8a8","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/.npmignore","hash":"5cfbed04fc2a98e6586bb158d9a735881f04e40d","modified":1411054178000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/LICENSE","hash":"4f3ca49a793f6bb8465a3731fd965a128757b8ce","modified":1320857905000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/Changelog.md","hash":"f3ed6c854f72907cecdaf0ee30df3a1c74cbae44","modified":1505013341000},{"_id":"themes/tranquilpeak/node_modules/is-typedarray/index.js","hash":"b7ff45ac41fdcb4bb75dd771d6cb9bfbd129e56d","modified":1431824601000},{"_id":"themes/tranquilpeak/node_modules/is-typedarray/package.json","hash":"4147f9f84c31ca5e5865132f61fa96a69e1d21c4","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/isexe/README.md","hash":"5245f0db9a9f95b37f4cac50e75dc66e2ea8e1a5","modified":1490230327000},{"_id":"themes/tranquilpeak/node_modules/isexe/.npmignore","hash":"5c82cb364ccc42139031fc6519c138ef81f2df26","modified":1453008305000},{"_id":"themes/tranquilpeak/node_modules/isexe/mode.js","hash":"5f33b53cc6b89f9ebe2ebd1dcfeb434cd96a3192","modified":1490230193000},{"_id":"themes/tranquilpeak/node_modules/isexe/index.js","hash":"9348ece80fd6208f0b8740d43cd652db4a5f06e6","modified":1490229856000},{"_id":"themes/tranquilpeak/node_modules/isexe/package.json","hash":"e3cfe091ec20682fc3b8a9250e381ee04e8c443e","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/README.md","hash":"ef8bf42dd8c3230521dce8a7ea32bddf7ff87902","modified":1492765319000},{"_id":"themes/tranquilpeak/node_modules/isexe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1454992766000},{"_id":"themes/tranquilpeak/node_modules/is-typedarray/README.md","hash":"8f33b0dd445cfa2ab6712dee34df082f480a5a76","modified":1401649785000},{"_id":"themes/tranquilpeak/node_modules/is-typedarray/LICENSE.md","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1401649683000},{"_id":"themes/tranquilpeak/node_modules/isstream/.jshintrc","hash":"61590c8e7282c327fe7f2987a3c5a7514446561d","modified":1396828238000},{"_id":"themes/tranquilpeak/node_modules/isstream/isstream.js","hash":"db3d8708d100bdb66fd33e1eeb6d2b232016934b","modified":1396827239000},{"_id":"themes/tranquilpeak/node_modules/isstream/package.json","hash":"e65f4e3f1d682431de989ac5867db74faf76f01a","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/isexe/windows.js","hash":"1a6d0c635f67223d5e3890068f32f2da46e45151","modified":1490229931000},{"_id":"themes/tranquilpeak/node_modules/isstream/.npmignore","hash":"ecb39380a39d86a6861344abf98891016990e2c5","modified":1396757852000},{"_id":"themes/tranquilpeak/node_modules/isstream/.travis.yml","hash":"890d1669abc18b7c0541df1483b9f27c60063712","modified":1396829306000},{"_id":"themes/tranquilpeak/node_modules/isstream/README.md","hash":"0563c8dd8178c335de8d882a14c0408ba179789b","modified":1425687291000},{"_id":"themes/tranquilpeak/node_modules/isstream/test.js","hash":"3c3c171729a3738bd73b12d311265c7fcfb2a9fa","modified":1396831146000},{"_id":"themes/tranquilpeak/node_modules/is-typedarray/test.js","hash":"c3aa563061f8d086aaf066b389b0e811444e3913","modified":1401649839000},{"_id":"themes/tranquilpeak/node_modules/jquery/README.md","hash":"6dcb1f8f5ec099574814b37adea7e64952d18790","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/LICENSE.txt","hash":"06aa223caa312d21c3e406cc25a763621c859255","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/AUTHORS.txt","hash":"b63aa163b6fb81b3fc5f3a3a1a01cab80a004227","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/package.json","hash":"6ba69dbe838e8bd7a006be367cf6009055de5126","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/jsdom/package.json","hash":"0a04f1d8b8c130fe966337f880e0527145be98bb","modified":1521447496000},{"_id":"themes/tranquilpeak/node_modules/jsdom/LICENSE.txt","hash":"0e478f455cef14d7d2ff25d4d620a4a9233f3bcf","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsbn/.npmignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1457730283000},{"_id":"themes/tranquilpeak/node_modules/jsbn/LICENSE","hash":"d9b1b910dfea689402ffdb75f5467ec263f8480d","modified":1486885358000},{"_id":"themes/tranquilpeak/node_modules/jsdom/README.md","hash":"279c213f05a56c174ff44317366c267aa1a9ecbf","modified":1511132198000},{"_id":"themes/tranquilpeak/node_modules/jsbn/README.md","hash":"6db673c03e15b4e75f95e25ba87177799511ad0c","modified":1486885358000},{"_id":"themes/tranquilpeak/node_modules/isstream/LICENSE.md","hash":"3fc5bd6825a9d8fd53c0cd8de0bd16d1c1a7f37a","modified":1425687271000},{"_id":"themes/tranquilpeak/node_modules/jsbn/package.json","hash":"1c1f9368ac2f66937113ac73b37af44834e924a2","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/jsbn/example.js","hash":"ba7f33b1196eca41a007177372fe237ac7a85c1b","modified":1486885358000},{"_id":"themes/tranquilpeak/node_modules/jsbn/example.html","hash":"ec1f94b093e0f1457642f8647294be35d4af033f","modified":1486885358000},{"_id":"themes/tranquilpeak/node_modules/jsbn/index.js","hash":"0a4334c7b70f87e13dbd14b0938106ac0d6beebb","modified":1486886477000},{"_id":"themes/tranquilpeak/node_modules/jquery/bower.json","hash":"000530ba7ab5ff636b103baf460e5fb7035ee5d0","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/json-schema/README.md","hash":"9065e9ab354ce910706716a42584222674fe1470","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/package.json","hash":"f023c085e1ab14f3bbbd744a24571002f7562496","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/.travis.yml","hash":"4c08200f6602d0fb52c7d3659131401a78f4e34a","modified":1496691900000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/.eslintrc.yml","hash":"b80233178c09213e16f8daace837fb9581ec401b","modified":1496692552000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-zyp-json-schema-04.xml","hash":"02845f4b0406bffb06ff5cb01eca43f492db6901","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-zyp-json-schema-03.xml","hash":"da15453583b019a448fae4b857fe29a583bc1a38","modified":1307480092000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/index.js","hash":"924bc6421973702598d91d20be93b1710089bd67","modified":1497479051000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/package.json","hash":"bab6798c178f90c5b20af4203003e1081fa4796f","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/README.md","hash":"b68c4c3a40fee8a5913e0ea1087f0ddec6b036c2","modified":1497557677000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/.npmignore","hash":"20985760b40bfe6b534deb2881224b44b71ac389","modified":1496691791000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/LICENSE","hash":"44bdc0699c385cdf423dbadea7355ff72e5adc36","modified":1496601632000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/stringify.js","hash":"b36a3a8d0f794fae13dc8e1c93bd4a8cae311bf2","modified":1431999708000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/package.json","hash":"5aa7cb9cc38f0b43d324666e48c7595cb75bdb51","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/CHANGELOG.md","hash":"d9b3407ce2eef8d2dadc6b2839a8b16b783eef47","modified":1431999690000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999719000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/.npmignore","hash":"454bf1af6e2932c514862b67b108ef4ad00d7c1a","modified":1431999690000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/Makefile","hash":"589819e00a30573f50fa4a11ddb22fb45b372a65","modified":1431999690000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/README.md","hash":"a2972dd72d8ec7c8b1f229f7732f911ed721dbca","modified":1431999690000},{"_id":"themes/tranquilpeak/node_modules/jsprim/package.json","hash":"5faa8dad0d9d680b77ef5ba988526d105ef4b231","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/jsprim/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1416249172000},{"_id":"themes/tranquilpeak/node_modules/jsprim/CONTRIBUTING.md","hash":"9147b55a7f13fa4e1db7fe3f83d4415be389ab8a","modified":1501690329000},{"_id":"themes/tranquilpeak/node_modules/left-pad/index.js","hash":"46f07b2a72595f36fd96e58d5f5d5501daaeadc9","modified":1510897670000},{"_id":"themes/tranquilpeak/node_modules/jsprim/CHANGES.md","hash":"671e4e43c6ee6fc2d711052a7933ebd3cd29a46e","modified":1501690556000},{"_id":"themes/tranquilpeak/node_modules/left-pad/package.json","hash":"98db8a3967387df8b12c09101f730a037791435f","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/left-pad/.npmignore","hash":"d261811e9c274faa8786b7f47b77a0dbb67711c8","modified":1503988113000},{"_id":"themes/tranquilpeak/node_modules/left-pad/COPYING","hash":"636a16f50d5a5de0a831bdb880352e746866564f","modified":1503988113000},{"_id":"themes/tranquilpeak/node_modules/left-pad/index.d.ts","hash":"758850ee5ce38ae5ab6caf6fc3b8729586560fbf","modified":1510897670000},{"_id":"themes/tranquilpeak/node_modules/jsprim/README.md","hash":"9274fef622af8e283f2f1d023a5b17fa2f7623c4","modified":1501690357000},{"_id":"themes/tranquilpeak/node_modules/left-pad/README.md","hash":"fefaa1f7f221a37d6cbd41ada153c796ab7dd84f","modified":1510897670000},{"_id":"themes/tranquilpeak/node_modules/left-pad/test.js","hash":"279d9f985f10723f6556a1c5ae97997971b91cfd","modified":1510897705000},{"_id":"themes/tranquilpeak/node_modules/levn/LICENSE","hash":"7bc795bf398cfa51e99e85dc51931c3b0d1b5a79","modified":1428793638000},{"_id":"themes/tranquilpeak/node_modules/levn/README.md","hash":"2cf8339d3d22e4da8301490886198be36bc5df7f","modified":1451368360000},{"_id":"themes/tranquilpeak/node_modules/lodash.sortby/package.json","hash":"33c1b3992b41e50412d78ae7693a73812acefa77","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/levn/package.json","hash":"3267ca4af0b17d4c4ed1d08838836ba86e0a3a25","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/lodash.sortby/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109624000},{"_id":"themes/tranquilpeak/node_modules/lower-case/lower-case.js","hash":"6c8e4acdd39af940362a63b3fdd40d98bce5b073","modified":1487963775000},{"_id":"themes/tranquilpeak/node_modules/lodash.sortby/README.md","hash":"76100469e7c80ccc65b7ef61e7535202859c6fed","modified":1471109685000},{"_id":"themes/tranquilpeak/node_modules/left-pad/.travis.yml","hash":"3fb09bd2b978facd0b47758aafec148eaadcce97","modified":1503988113000},{"_id":"themes/tranquilpeak/node_modules/lower-case/package.json","hash":"854176c228bdb59468ca8e9c717f5b2c84a47c3a","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/lru-cache/index.js","hash":"5b9f4e1668f06b23323eedc5e307d767089e7575","modified":0},{"_id":"themes/tranquilpeak/node_modules/lru-cache/package.json","hash":"668d98b66651068f0953e0333f72321aa0b45adf","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/lower-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1487963775000},{"_id":"themes/tranquilpeak/node_modules/lower-case/README.md","hash":"69ed872fccaa2ae235890bf01958115a178ca713","modified":1487963775000},{"_id":"themes/tranquilpeak/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":0},{"_id":"themes/tranquilpeak/node_modules/mime-db/index.js","hash":"31180f8d0ae079b1bee7ee03e77ea5323583eb06","modified":1502153377000},{"_id":"themes/tranquilpeak/node_modules/mime-db/package.json","hash":"1310a2902ad570a4522ef37ea659cf0e18aed972","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/mime-db/LICENSE","hash":"b559c45c8d07f2679620d9771e68696ee3d5964b","modified":1502153377000},{"_id":"themes/tranquilpeak/node_modules/mime-db/HISTORY.md","hash":"9fa66e4169dd8767d43495555db0fe11f88e2fdd","modified":1518757257000},{"_id":"themes/tranquilpeak/node_modules/mime-types/index.js","hash":"8d1f07ae6192c4dd6bc08a9247a91af4a0a51eca","modified":1518797976000},{"_id":"themes/tranquilpeak/node_modules/mime-types/package.json","hash":"3f6c09e47e01b1bcca02a2dad726b89561473d86","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/lower-case/lower-case.d.ts","hash":"f6cc8841b3395a746a5984327edb3c6411302b11","modified":1487963775000},{"_id":"themes/tranquilpeak/node_modules/mime-types/LICENSE","hash":"f027af3e61af3880fd7f7b8ba9452a85dd215738","modified":1502805458000},{"_id":"themes/tranquilpeak/node_modules/mime-types/HISTORY.md","hash":"cde432c1ca703b4d0782e98491fc6249d6a6554d","modified":1518801331000},{"_id":"themes/tranquilpeak/node_modules/no-case/no-case.js","hash":"9c9bed3c4f4bd9cd9c74b8384e17170677e7cdc3","modified":1483587492000},{"_id":"themes/tranquilpeak/node_modules/no-case/package.json","hash":"832743527254cbf4de396fb186837cdee24ef5bf","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/no-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1465675303000},{"_id":"themes/tranquilpeak/node_modules/lru-cache/README.md","hash":"23e985d22bf54841a67846263f0da11cf315e615","modified":0},{"_id":"themes/tranquilpeak/node_modules/no-case/README.md","hash":"c45012f78b5fb4f4423a5e087603003ab34d43b4","modified":1504890971000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/LICENSE","hash":"98869c580f9a8dc617c9fdf0597bc3603a1e6424","modified":1520285925000},{"_id":"themes/tranquilpeak/node_modules/mime-db/README.md","hash":"7a1b162a44f0fdb98b186e4ade693b4668bd39e3","modified":1511971573000},{"_id":"themes/tranquilpeak/node_modules/mime-types/README.md","hash":"3f25621607960c6e73fc4f9b8bf97327e210a9f2","modified":1518797976000},{"_id":"themes/tranquilpeak/node_modules/oauth-sign/index.js","hash":"fb3d1f2193e77b18089fad077d3133143811f554","modified":1462396251000},{"_id":"themes/tranquilpeak/node_modules/oauth-sign/package.json","hash":"d454d1e2273809d4c3f68178863da02dba71dc8d","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/oauth-sign/README.md","hash":"9f943ef5e4c1e530314bee287c8fd5b8addbc808","modified":1462396251000},{"_id":"themes/tranquilpeak/node_modules/no-case/no-case.d.ts","hash":"fd30ef64614965e6d611b05aaa579e1abb2bfa70","modified":1465680417000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/README.md","hash":"a8b6323bd0cfa96bd0731e9e86e7c854aa542bd9","modified":1507750895000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/package.json","hash":"bf1153d8f08a357103b56ab9ec31c83ac05a879e","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/parse5/package.json","hash":"e67aa5f554f89ebc7e956cfe2c55fb1c113acd5b","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/oauth-sign/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1462396251000},{"_id":"themes/tranquilpeak/node_modules/parse5/README.md","hash":"07776ad5fd5633838c0356d2c47c7976c644b6e1","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/optionator/README.md","hash":"46da3fe21be7078363c40d29daa7c01233be67a4","modified":1474486969000},{"_id":"themes/tranquilpeak/node_modules/parse5/LICENSE","hash":"fd7d460a4017bae630e249e3aef46c111a991ede","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/optionator/CHANGELOG.md","hash":"b6a6e7e0fe3c69d30a6fe9f1bdbf50d384aafa55","modified":1474486945000},{"_id":"themes/tranquilpeak/node_modules/optionator/LICENSE","hash":"7bc795bf398cfa51e99e85dc51931c3b0d1b5a79","modified":1412127403000},{"_id":"themes/tranquilpeak/node_modules/optionator/package.json","hash":"3e883dc6f306bfe3737248936c6f9752dfe11e0c","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/performance-now/package.json","hash":"14c840cc522225e99fcf1b61a35b77f9bbe0cd24","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/performance-now/.npmignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1483443554000},{"_id":"themes/tranquilpeak/node_modules/performance-now/.tm_properties","hash":"5c5e5a43a6bb68e67a644fc5726f90cfbe1218cc","modified":1483443554000},{"_id":"themes/tranquilpeak/node_modules/performance-now/README.md","hash":"1d0d3237cc6e91952e690fdad3beef7ffebb94db","modified":1483850811000},{"_id":"themes/tranquilpeak/node_modules/pseudomap/map.js","hash":"f0d63208dec47fe1d9c69ab74fdf54298406dce4","modified":1451963009000},{"_id":"themes/tranquilpeak/node_modules/pseudomap/package.json","hash":"87bd0b00e15203429f3835b4cba00538e962e82b","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/performance-now/.travis.yml","hash":"73c068ae853eb29403f51762ea2ba273e4f3ae0c","modified":1487513562000},{"_id":"themes/tranquilpeak/node_modules/performance-now/license.txt","hash":"7dabcaa93e54d0a7328e689b637f990f1ec73d8f","modified":1483718998000},{"_id":"themes/tranquilpeak/node_modules/pn/_promise.js","hash":"c2950fdd42269ea677040abbd66110cac74e0a63","modified":1445977477000},{"_id":"themes/tranquilpeak/node_modules/pn/_promisify.js","hash":"9e9fecb52f8c64226f0da8a18ce0a4cb44ad6486","modified":1515010679000},{"_id":"themes/tranquilpeak/node_modules/pseudomap/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1448659987000},{"_id":"themes/tranquilpeak/node_modules/pseudomap/README.md","hash":"93ca8dd88b562f1cd856143e500bdb679419e088","modified":1448749520000},{"_id":"themes/tranquilpeak/node_modules/pseudomap/pseudomap.js","hash":"34cddc0bc6daaf6c7092d2659612969b8700d8fa","modified":1451963009000},{"_id":"themes/tranquilpeak/node_modules/pn/.travis.yml","hash":"88850ed730b8a575930f5837e8e54ec57b13564b","modified":1515008892000},{"_id":"themes/tranquilpeak/node_modules/pn/README.md","hash":"2c199447f460987754ab64ccc2dde787b6af3c4b","modified":1514969150000},{"_id":"themes/tranquilpeak/node_modules/pn/async_hooks.js","hash":"cc8a65bf11d1e7d29d5f5ad8320744bff33d7be8","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/assert.js","hash":"228197c61a63b034f5b23e3a828c5b441a851ed2","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/buffer.js","hash":"8bf146430282acae59382ec12cf0329f032c6c6b","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/cluster.js","hash":"b560d3db571a969d9fc418cae9b4ed9a110217c3","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/child_process.js","hash":"78196b7e978e4332cf1d40c85647a9a2a57ee069","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/fs.js","hash":"de089b87205019cd95bc5fc7fa87d2d8cb705746","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/crypto.js","hash":"7778b9a4d74a87202479f2d2dcf72cc2e306ae32","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/console.js","hash":"3141e9855767a05eb8324aecdfff74d6805662ff","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/dgram.js","hash":"a3fd69643001e2b1e37eb0faeab11285d909858a","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/http.js","hash":"ed8686d23d8320d02c6e31133747b4f74b60eb2f","modified":1515010292000},{"_id":"themes/tranquilpeak/node_modules/pn/http2.js","hash":"435ae3db055fae3d815f38641808a86792f0ffc0","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/domain.js","hash":"4e72de34e43f7328cd988ca4b5b0192a13587fd8","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/dns.js","hash":"85e6274a893158bc8281139194dbe0873ed5526c","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/path.js","hash":"dfc7b0153a904bf9821f5a2d930fe858e82aa181","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/events.js","hash":"5f7098d7c66def67d5cc26cc05481897905e29e1","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/https.js","hash":"389320b2aa3d2226be8ecb713e4a07203d0e9e22","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/inspector.js","hash":"e0f2c6f39470f22681ef381764c2ad5c7098b22f","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/perf_hooks.js","hash":"da996013ce97b10cea5b81e93bd38e3a2ed68e25","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/net.js","hash":"941d29432b299db51953966b6a915bd708589503","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/package.json","hash":"defe3623082abd7617581d9ccc9ed9cfe027e34b","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/pn/process.js","hash":"7dcff11d95aa10a3593159504d9d2d708dcaca58","modified":1515010892000},{"_id":"themes/tranquilpeak/node_modules/pn/os.js","hash":"3bf810acfb755da059819d45910f485ecc1d8ff1","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/querystring.js","hash":"fadf1cf517fc5478fe6a2ba7d40b6bc3b190a1b0","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/repl.js","hash":"09422f86a6495eeb9c10fe0164a59f4a03d18029","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/readline.js","hash":"c2e411a01269539849d583198a7c26a5356f5795","modified":1515010293000},{"_id":"themes/tranquilpeak/node_modules/pn/stream.js","hash":"a24f16de260be122d16880f6c2adc4f4a981d6e1","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/timers.js","hash":"cdd93f11907a81cc86598359534c0b71b4617460","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/tls.js","hash":"49e26c2f0ee3af72779daf70e6d036f0a4301c25","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/punycode.js","hash":"a1f2da02c947b074a51ee399f5124883be18b525","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/string_decoder.js","hash":"8ec7d6073f8d0f41e0ed659c5ff685664f3bd171","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/v8.js","hash":"1162191048ce9cefbf0a8f5ff4f5de01ef4e4fcb","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/vm.js","hash":"b1d6c2725476ecbff5269400dc357e187beb9f23","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/tty.js","hash":"9d113bbc4005671383e3a9ea13874ffc8c1bd638","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/pn/util.js","hash":"73acdc9bb25ab21f9823b9fed9680927e1567387","modified":1515010926000},{"_id":"themes/tranquilpeak/node_modules/pn/zlib.js","hash":"6625b8548f3ca885a2cdad6a437a56b7a276564d","modified":1515010308000},{"_id":"themes/tranquilpeak/node_modules/qs/.eslintignore","hash":"7b8fdc232fc9b1a8050da3c419dea3d23b5da9c5","modified":1495598988000},{"_id":"themes/tranquilpeak/node_modules/qs/.eslintrc","hash":"de26eacf7bfef078086ce93497aeed386e6acba3","modified":1504939734000},{"_id":"themes/tranquilpeak/node_modules/qs/package.json","hash":"4ddd274effe3ab35ea19555943561c535f544921","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/qs/CHANGELOG.md","hash":"9b7503f02f9b320601ce135b59e8eed5ce4c5d07","modified":1504939871000},{"_id":"themes/tranquilpeak/node_modules/pn/url.js","hash":"960b18e0648a34b41f5bcb91e03409567f728423","modified":1515010282000},{"_id":"themes/tranquilpeak/node_modules/qs/.editorconfig","hash":"482f35688b4e4f8b77ee64b804fca396e2a23022","modified":1504932985000},{"_id":"themes/tranquilpeak/node_modules/qs/README.md","hash":"ac4ad81116c9e9e06c46433b58220bc94660ac9e","modified":1497472480000},{"_id":"themes/tranquilpeak/node_modules/punycode/LICENSE-MIT.txt","hash":"d7384cd3ed0c9614f87dde0f86568017f369814c","modified":1408532732000},{"_id":"themes/tranquilpeak/node_modules/punycode/README.md","hash":"c332a96ebde88c232159d794e4d417a6d834e1e1","modified":1424815497000},{"_id":"themes/tranquilpeak/node_modules/request/index.js","hash":"c62c4d3004ac33bfd8e85d9545814592701ed0f8","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/punycode/package.json","hash":"dd03dbda4132db9241e6be5c4177d0c15ffffdd6","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/request/package.json","hash":"9503bf52eedd5712e780ab06c6b20cebded484e0","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/request/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/request.js","hash":"8ba7576052a2f4bea46ff4c1d627554ac5225287","modified":1520850483000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/.npmignore","hash":"bf345c06675f9c3d7ab0c25777cda673ec6483be","modified":1468199112000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/package.json","hash":"58529ff9897931f8736f1a82f06ab98086f84f67","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/qs/LICENSE","hash":"ddf13f1b7345d730677237125bc2e46fbbfbbf32","modified":1495598988000},{"_id":"themes/tranquilpeak/node_modules/request/README.md","hash":"92960fef5010090b29e5c66cfa7dff3c4311600e","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/README.md","hash":"9d6f8c06a6d995b3ec9af8eb28a3b57ebd38c18c","modified":1470652546000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/errors.js","hash":"9731a5073ab89b07f5c0ec37b3e7603af4159664","modified":1465070200000},{"_id":"themes/tranquilpeak/node_modules/request-promise-native/package.json","hash":"1a17359a89f0540b0acbc22e4efddf3c09589c76","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/request-promise-native/.npmignore","hash":"bf345c06675f9c3d7ab0c25777cda673ec6483be","modified":1468199107000},{"_id":"themes/tranquilpeak/node_modules/punycode/punycode.js","hash":"cc7535a3f0235f4b3ad0030b16f418eb2abf454c","modified":1458437195000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/LICENSE","hash":"51b90ec5dffcc96a67ad05482c10105c3825fed5","modified":1467933494000},{"_id":"themes/tranquilpeak/node_modules/safe-buffer/index.js","hash":"f67b8decb99eed068f28c9ae56df08c21bf4c33d","modified":1498076348000},{"_id":"themes/tranquilpeak/node_modules/safe-buffer/package.json","hash":"f9e2073297fc54e72006640ea850863d58eebdc5","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/request-promise-native/errors.js","hash":"6eb5aa243f1f1c3ebca593ab9c8914a3f30de7e9","modified":1470655112000},{"_id":"themes/tranquilpeak/node_modules/safe-buffer/.travis.yml","hash":"3923a0917e881c4269a097918307f0f63d90f7ac","modified":1464584257000},{"_id":"themes/tranquilpeak/node_modules/safe-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":1452656263000},{"_id":"themes/tranquilpeak/node_modules/sax/package.json","hash":"8acf07e4ae124c9d00eee109281e24f41721faca","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/safe-buffer/test.js","hash":"66ce1eafbd2161cd00e087ec90a8cbe79b4527e8","modified":1496440362000},{"_id":"themes/tranquilpeak/node_modules/request-promise-native/LICENSE","hash":"0759cd9539c8d4a9f631cebd91c31741dc8939f2","modified":1494207818000},{"_id":"themes/tranquilpeak/node_modules/sax/LICENSE","hash":"fe4ff75272675c27279ddf101a2d6d7cd1e9ad64","modified":1471034108000},{"_id":"themes/tranquilpeak/node_modules/request-promise-native/README.md","hash":"49ab82e70646685ad7535d97d413d9b2a57b1151","modified":1506098858000},{"_id":"themes/tranquilpeak/node_modules/sntp/package.json","hash":"3f564fe856c7c42bfa40601ce8eac148c7f9f502","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/sntp/.npmignore","hash":"175bc9c7a20bf41efc1d77f2c62fd59c6a3515f2","modified":1508970994000},{"_id":"themes/tranquilpeak/node_modules/sntp/LICENSE","hash":"6af1a0eb68ef379fe1dc5d3488e7a699a055c91c","modified":1508979193000},{"_id":"themes/tranquilpeak/node_modules/safe-buffer/README.md","hash":"75916065970faa645bca603327ecbaea09afe12e","modified":1490137762000},{"_id":"themes/tranquilpeak/node_modules/sntp/README.md","hash":"5b5b1348b73a5ba7293f5924937015c6b6350b6d","modified":1508979193000},{"_id":"themes/tranquilpeak/node_modules/sax/README.md","hash":"c199b68fe859344fef10880cfbe52793ffbb0d1a","modified":1458356601000},{"_id":"themes/tranquilpeak/node_modules/sshpk/.npmignore","hash":"695019f4a886543f630c962200d822a468757eb0","modified":1452565517000},{"_id":"themes/tranquilpeak/node_modules/sshpk/.travis.yml","hash":"1cc0c8e1f34a6f75f2cd25a733c765ac6ea793d3","modified":1461292363000},{"_id":"themes/tranquilpeak/node_modules/sshpk/package.json","hash":"dbe36880cfcffb6df10b43d8e9e0be3f79361e89","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/sshpk/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1446856544000},{"_id":"themes/tranquilpeak/node_modules/sshpk/README.md","hash":"1716cf8d873c6600648814b6b08c5ef3f838d697","modified":1492046321000},{"_id":"themes/tranquilpeak/node_modules/lodash/_DataView.js","hash":"f5780de8f4171ced0e5f4c52aba30e58660070e4","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Hash.js","hash":"572ffd33bbac9360f2d2591f7b44f72077d52297","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_LazyWrapper.js","hash":"9fc0cec80e680d4fe00cf4e33672e7f06d4b9b79","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/README.md","hash":"b7f86de7a772af7c577bba16502b49ad93dc2b08","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/LICENSE","hash":"4aa67fb8f8b16d40701f21a8089a410a7d178ede","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_ListCache.js","hash":"6df951af4fe1c2e428720e3fea6f7be3e6c64edc","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_LodashWrapper.js","hash":"d1b595bd38e7764539f2cf99d2374f5c5aa72d70","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Symbol.js","hash":"1d38c59f19e1b038981b4f0093d5b504d647c694","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Map.js","hash":"d58862090ce31a3295cb1dae73e44dcdba9b70bc","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_MapCache.js","hash":"afed02775f092be6e7328f19b6991a419baac9c7","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Promise.js","hash":"7c7b81e303018a3045ca269b1be551224b607790","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Uint8Array.js","hash":"9aca80cbc7c3b25813dbeb9561324d3d6ff7700a","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Stack.js","hash":"581507149d88de85ca4bed49ea0c22467d4e65e6","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_apply.js","hash":"cf8c13531bb2ebaaa912ed42cd51d35749780b49","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_Set.js","hash":"d55df157d59851d181aae5086ac2b703f41e422d","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_SetCache.js","hash":"20a1a687b681a839dec78ee9b1c07e0fcee4cdda","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayEach.js","hash":"904f07de69303a57591f6f012ae390d37af3f595","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayEachRight.js","hash":"d9c9880639a791b9b7a50fa4b9d95987a9adb530","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayEvery.js","hash":"1c52b5548127fec0d8e876e6612bc7579b64c88b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayFilter.js","hash":"de05ba1636ccd6f97f5527aaaa7bcd355ef96a3b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayAggregator.js","hash":"4c46ec909fd72aca86fbba95f8042b39875a2fc2","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayIncludesWith.js","hash":"ae055079baa36a646be539921afb899598b99ade","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_WeakMap.js","hash":"f384e74a27955f5ab92345281a5fcb7d95111b58","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayMap.js","hash":"50a635afd8bfba130f5ec9cc693c06eb0ed57690","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayPush.js","hash":"8b9d6d4bcd8f6661ee23634aecda75d5395db2cc","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayReduceRight.js","hash":"59ee39e14d1be368c9de8d06b8a62ba7a57f9c18","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arraySample.js","hash":"8b9ade97c8c183d58e1bcfbdcdf4b77b44c38245","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arraySampleSize.js","hash":"cfe8e3d04b52e678f1475ed3df969bc5eedea859","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayIncludes.js","hash":"c1211511564c2074c24cd0a45e2fc63b94017d42","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayLikeKeys.js","hash":"3e0338e1cbbfb9c9f1b00adf873e176478b985c2","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayReduce.js","hash":"87b47db2e2ffbf2d671e1a974eec644d16424412","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arraySome.js","hash":"b3e385ef53a7d44b49f705315ae30efc4b81d5b9","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_asciiToArray.js","hash":"4331bba9d396c601f9ac9e676283bc3ac25ccf8d","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_asciiWords.js","hash":"164db22da4ac8a77d75ff57a1d63d0c4b9e48388","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_assignMergeValue.js","hash":"7fd48396b2393692858a13cd1d9fee4f9f56c034","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_assignValue.js","hash":"8889cd8e010ef1ab8259b9401f1ace23164a676a","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseAssign.js","hash":"b12b76d29619f0fadf5c75c2b1f4d9c5a140af4d","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_arrayShuffle.js","hash":"7023c88e8b1fd408755327bf70fe8d58c9496607","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseAggregator.js","hash":"a0f27fd540785f2f3d54913950fcd555ca789b4f","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseAssignIn.js","hash":"1e9e2424746865f1ea7c278592329917a2d2ddd8","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseAt.js","hash":"93dcc3d90a67de6c407d3f6ccda164d3fac140b9","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseClamp.js","hash":"ce109abcb1e12c30e97c79917e51520aa544db9a","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseClone.js","hash":"f294126ff721d47b196d14eed6c662f605144809","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_asciiSize.js","hash":"befe650097f784878651dd1881da7efb3c0d0e73","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_assocIndexOf.js","hash":"b557d0550d466f2e0a20697d953061c8198bc3f2","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseAssignValue.js","hash":"c09bc3ff6aa7082144eef5b7583f795f7d16ac19","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseConforms.js","hash":"f518eceb5bf9e6dc4c9cf811e07c3ff8469c902b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseConformsTo.js","hash":"f2f1431ffc02fb8ab64d86abecdcfe2685d2eb4b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseEach.js","hash":"8df288083999c6711cdddc83d3f62ee092e0bd35","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseDelay.js","hash":"2a9133e727e4b0a6a9ec776addec9c791c812a4f","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseEvery.js","hash":"6e445241a2ceb58e400c619247c7f1d5a9ad76da","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseEachRight.js","hash":"f8f31ce8197c50e01ffe073be5e329bb95c5dd7f","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseCreate.js","hash":"202aced68f2ce65d35a3d9e7ee56e373de463233","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseDifference.js","hash":"b3dc957d88a325a9c4e11645134bc92eb807dec8","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFilter.js","hash":"aa90047b0a1231f770807422c67a36a4c3524365","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFindKey.js","hash":"dc99c1f56a9a4559ae3fc9f3dbd7f8cfac677949","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFill.js","hash":"474427d0d470b473ac37456e9ba151a966b2ade7","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseExtremum.js","hash":"931adb7b69f0e4683324797c8522f4f6c9ad6321","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFlatten.js","hash":"045ce95760998450c806995fd49db7ce8fd96982","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseForOwnRight.js","hash":"29a6ce1c8ff0893a7a5021a5b54d3303dc7e9ef5","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseForOwn.js","hash":"8977ba022a8d144093f35c729822e6161d5fd291","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseGetTag.js","hash":"b66f083cb3c9fac408a18fa8e104a20e64355d45","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFor.js","hash":"6d4e2744c99f75df073ca2e005317feea00533f6","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseForRight.js","hash":"2d3155596f8e8420da54564a69dadfadbd84cd67","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFindIndex.js","hash":"a6811f11035fd20ebedd10b014566614f1fee155","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseFunctions.js","hash":"17d2e75a62a380223a943a07c0726c2d101c59ff","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseGet.js","hash":"2c7bfaa44754b5302e3bd2137d95b4e045bc4c85","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseGt.js","hash":"7368ca132e9b25b5f2ae74cfc01d619f284e84d3","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseInRange.js","hash":"5186220a6519de4a9b0882ccbe565b74caea68cf","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseHasIn.js","hash":"e11103f369bb4fef0cbd193622c7126c70e0fc8c","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseGetAllKeys.js","hash":"f7c042fc3a0e1f89ee6f0ab2765615983796b303","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIndexOf.js","hash":"554c47e0383ef62d126d9d66aeb416e8e75ebf3b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseHas.js","hash":"0643a432e7d64d10615b4cd7092f2483c317cda7","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIndexOfWith.js","hash":"bf10b85520bfc5add8a38c341e95a985e1ab3626","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseInverter.js","hash":"84de1267be8b3b1973a696826a66247ff88e7c25","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsArguments.js","hash":"6c428b2e543a752140ee6b1223a659f45025a71c","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsDate.js","hash":"c21fd699a4d3d38d28770746f33992778c3e2e94","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIntersection.js","hash":"deed35c6297d406b8f5e0672a4cc99cbc95fd0b1","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseInvoke.js","hash":"b287bbe200beaf0e4825bc7bccb7ff702e0eff74","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsEqual.js","hash":"7f9ae050c867190bf8379e97f1fd9d01cc2c96f3","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsEqualDeep.js","hash":"becc7c47d3ad5aaf2a6e5df7038595f21ff92bb3","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsMap.js","hash":"b28a7248f4a44300ecc8080ad259944d4bb9a356","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsNaN.js","hash":"01512b16931316dc87e670d11c3b3d7c354366a9","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsNative.js","hash":"1f36b939f5e5b0dc5f28ba7c47206d717b966c7e","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsArrayBuffer.js","hash":"f154818234664296ec6c8496be8cbe77c6909c8e","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsRegExp.js","hash":"663e2101fd6aa3086bddedb08f0d2e7bbc30c0f9","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIteratee.js","hash":"032e8e56ae36205075f11cef6a7e91890a8425bd","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsMatch.js","hash":"68d520389a8b2d00f0b649787df02734bc00ad9f","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsTypedArray.js","hash":"291f63ba52ab97764a33305efd699a2e394b2517","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseIsSet.js","hash":"52795ae38cc0426dca2468342cf28dc2f78775f2","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseLt.js","hash":"92e621a7798bec567f79b006e1608a434b18d22c","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseKeys.js","hash":"29d99b03db5dad4affa41a388470c89595e44991","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseLodash.js","hash":"dfebf25a399f77aa4b416e1a92ba11ca59c2a8e9","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseKeysIn.js","hash":"eb88d9e4d4f429c250f3ee2f22312b885ce7a75d","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseMap.js","hash":"e4d4a4031106e999c0f44a81dd62afc0f84f3fe0","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseMerge.js","hash":"66a8b1af03443b624349e9251cc9570e44b5820a","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseMatchesProperty.js","hash":"0a4a914477d3d5a170f0c5bc7c5b2abd106bbfbf","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseMergeDeep.js","hash":"c4bec83e7ade0c434e15a312701bdb5cc160e452","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseNth.js","hash":"7afabca34c7963943eab1dc70a433231283cc8c5","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseMean.js","hash":"0e536b0da31875ca4a97989a76d851b5589cc867","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseOrderBy.js","hash":"c76b0438a27df64a71220d2e819d9baa79d9641f","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_basePick.js","hash":"1eb8ddfe3a55363b22404e9cfe3723a56c9715cf","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_basePickBy.js","hash":"2749eb539f38c35b694e6b8f74d20f5cdc37ca15","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseProperty.js","hash":"31d8d961f7383f581a360947b0b752e95d35cd14","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseMatches.js","hash":"bb2332567191ebdf1e2414efb7279d989fa223ed","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_basePropertyDeep.js","hash":"b9329f5af409f1578f2fb9fd34ccbdf8cbe54070","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_basePropertyOf.js","hash":"33b60f71f3cbf5f26607a2b7356070f8f6953223","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseRandom.js","hash":"86fe0bbec2bf3b242a8d861abd894f9281c2408a","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseReduce.js","hash":"96e87d251b7bbf30707b39b529243e5d3a7f5c2f","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseRange.js","hash":"8816c954f5f5c9c100a51ae5be416a4661e418ed","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseRepeat.js","hash":"e5acd9c33e9026b8848de16db87d9ee1dfe293db","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_basePullAll.js","hash":"a140d4775d1ee69b9d6d434d5729f82b7e55bc8e","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSample.js","hash":"bf50189b8b304ff4bafec174b108a7fe25a6a003","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_basePullAt.js","hash":"7b291db76db38fc2850529f7e519f5a273dd1f5b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSet.js","hash":"0d99172a2005d7c0dfa71114b0cb0aca9cafd47a","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseRest.js","hash":"e31a38bffa598aef97317e7b1970a212a4d44d00","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSetToString.js","hash":"4fa840e62be63264b265b19fff3dbad4540a376b","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseShuffle.js","hash":"62b58e90df1ca7ee5d44cd923fd531f1964f37a7","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSlice.js","hash":"959756556fea236343ff752adb6b869bcac82e4b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSome.js","hash":"4be43bfa949a8292f8f780eeeb83bb5da00f58b7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSortedIndex.js","hash":"6a353c6feb19a86665f9ea37ae0ff7f5ff5a1d9b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSortedIndexBy.js","hash":"23b9368bcfe7afb35249a3a2bf880a170cc72ccb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSortBy.js","hash":"77483347d5381f336bed3174c5b301f40dfc7a24","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSampleSize.js","hash":"b05eb913d80f60e274e00632d5499319bd0204f2","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSum.js","hash":"e96a801668916a3027558a8795a4957e11c791f1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseTimes.js","hash":"7f3edc2bfd65d843b592ff123759c9d616ce3a64","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSortedUniq.js","hash":"c2ad97df99636c7977b6374e44cb61dedd64aece","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseToNumber.js","hash":"1d6f1a52fdbddf557ef5d870c3ad6fecb7089af9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseToPairs.js","hash":"d6ad1c204c16fee82d17a5b4febca922a78cda47","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseUnary.js","hash":"5dbba7edab4fb0d361906358fa2d49dc35c1e603","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseUniq.js","hash":"ae7942f5facf5430171081eb0d2ee341f69c9fd2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseUnset.js","hash":"d9a16888d3995c743789eb2003d8d5c438f00ca5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseUpdate.js","hash":"12682de8a3a7f8d6e89f4872bbc2bf1c2b66f8b0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseValues.js","hash":"a8cfeda4f95c958cb46ac71f77a631e57617c1f7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseWhile.js","hash":"4fb4c4f09282c0e560a1bb289caaac7d58d64a10","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseToString.js","hash":"f2a75bd83872d649b56a1c0fe7b785ee13ac3cf5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseWrapperValue.js","hash":"1b1d0a42b03e95693fc88d6a24e4a3473d15392c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseZipObject.js","hash":"7995093c8f43666bf1f2dc15cc1d752dacc55e35","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseXor.js","hash":"0077b838e654fac3f5ebcc99ab1dafbd158e4e71","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_castArrayLikeObject.js","hash":"0a049ad2b5e466bb2173738787645d6aa97b9e03","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cacheHas.js","hash":"d676b44402e7e4ff04011e54a086f7efe819ef81","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_castFunction.js","hash":"af88042305fb1cc58dde3bca997c206dd0359bf7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_castPath.js","hash":"a7a03888171be1aa22a92d12b9a02b8c8798375c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_castSlice.js","hash":"9b963fc73a75bdb6cde5c38b2ab1fac07835a800","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_charsEndIndex.js","hash":"4164a27a922efe0dfb1dc15496d199152fd96599","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_baseSetData.js","hash":"fa3ddde4d03be0d225fb7e96d1b5f86f0e321453","modified":1517704208000},{"_id":"themes/tranquilpeak/node_modules/lodash/_charsStartIndex.js","hash":"c4db2a95b12b0a442f73d3ad3d27c0048193b216","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cloneArrayBuffer.js","hash":"ffbada38bb191bc5290fc3ae51f6c01c3f8f6d7f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cloneBuffer.js","hash":"f0b54438e44d83118f342434cabe99dc438d19c3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cloneRegExp.js","hash":"d0318f8d44ff0e8720cf498982e3183e23579919","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cloneSymbol.js","hash":"8b27dca2415595e97e38d9fa7fb3f854c4051048","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cloneDataView.js","hash":"c8e9d1cd47aab00655a7ad7d3103cdddf2fd92a6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_cloneTypedArray.js","hash":"b50a151594d841fdb56e8cf04619529fed4891f7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_compareAscending.js","hash":"456fc00f7549c8ea36a3d2f3b818b50bfcf016e6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_castRest.js","hash":"82020a1342ba8656765ac9141410d1af2b7730f0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_compareMultiple.js","hash":"798b323506b11fa866904e39771daf98df260bca","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_composeArgs.js","hash":"18e0c7dbd15ff30fb10ccaa4ef651751eea88ff7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_composeArgsRight.js","hash":"b826dac099cb5bdc350361b3fb6df6a3c743b49d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_copyArray.js","hash":"cec6a29544aa38261f7cfc1bf123f3289d22c377","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_copyObject.js","hash":"3bfeeec32b43433683d931621a2bf53dbc3db3d0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_countHolders.js","hash":"9ff8f78133806ffbcc60d281c0152897aa7640bf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_coreJsData.js","hash":"15e60e7a6363ae6df943c85e4b9e1078457b06e6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_copySymbolsIn.js","hash":"92a72efc51ad106ed6bc2e4dc03d0f23751523fd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createAggregator.js","hash":"261d83069fe95d76ef0dcf16aecf4d21af132baf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createBaseEach.js","hash":"ade31f23b8e144e8588af940219fc4c8bda2ce53","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createAssigner.js","hash":"0125f6e53a2b16619993e408f3511862079717e5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createBaseFor.js","hash":"77c64903d26461aaff6bb22d3e2739a5ac9a5e0e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createBind.js","hash":"56e3d29a4d8774c9709ba42dd15e204a693a8a42","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createCaseFirst.js","hash":"4eda4cc9710593950268262489e79a507679356f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createCurry.js","hash":"30c237eecdcbbf00b48be6b716264799e0f32c1e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createCompounder.js","hash":"195c16455366a158b8b855547fafdc602f0be9e9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_copySymbols.js","hash":"871986e31fddf247cd65b93aa92b69392b9bde8d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createFlow.js","hash":"c9408be96649f6431781578ada26509a567005a8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createFind.js","hash":"3eb3975cd88173810656e3ab17de9c210773a1f4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createInverter.js","hash":"3b149fffb0fb7fe82cf00dbd794973ddc33f33e4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createHybrid.js","hash":"15282c26201bfcfdc26829ced58fa9785f1db1fe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createPartial.js","hash":"2dc87c9d5a3fa04f144a85d4d90cfd55a4e4b208","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createPadding.js","hash":"0597ae4997016438b3d7629560c03d260f2b51a0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createOver.js","hash":"ba8f63fcb4755dc9023793118e5f8180e86c4c64","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createRecurry.js","hash":"fa869537d2d2bb656d1a7876435dc4c79f57575e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createMathOperation.js","hash":"d02710cbdbf76e2b2001750b355238b9a0e951c9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createRange.js","hash":"1c65b8adbfe1a38fb5827f584a454bc8218050ac","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createRound.js","hash":"f6d9e30f03e0b5af47f9be48bea3399d9c684191","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createSet.js","hash":"c213de450f86338c23b81de1c99f8136a7538ba3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createToPairs.js","hash":"b16382972bd68fefa26ec9672c3935cfc1af1b7c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createRelationalOperation.js","hash":"428d4535498e0c63f8a998bca3403d36ddbf8004","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_customDefaultsAssignIn.js","hash":"3cfaa6d8045c1f0217366218ad4340b50de5ceef","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_deburrLetter.js","hash":"65de6e749f5e37659ce5798a558a9aa1b50bec5c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createCtor.js","hash":"12be272e2dcd00624119d859d78459c9dae1baa0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_defineProperty.js","hash":"308f9b9c0f8822351b71d5801be25a8326bc5584","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_customDefaultsMerge.js","hash":"9378ba434e10108ffac43ded9d6d28e32fac527e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_customOmitClone.js","hash":"2bf571311b6785fd53ae57ec710ed05ebad80ab7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_createWrap.js","hash":"3cf0222feec115f3d4b71c1adbfe4aca7555ebe6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_freeGlobal.js","hash":"df0709e144040efc52114c69b7977ab04f3a799d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_equalByTag.js","hash":"bd57ba1568c522e436bd1af7ec860bcb1e274b85","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_escapeStringChar.js","hash":"d011ca793a93e44d7e6928cced2055ea47f6c39e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_flatRest.js","hash":"1a96086a9a21bff7890036498a1e161fe7955194","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_escapeHtmlChar.js","hash":"d1da9dd2828cdd0071b82ffea56eab694bafbe37","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getAllKeys.js","hash":"9fcb354c326cd308df841e6846d506165842f9a3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getAllKeysIn.js","hash":"4c08d556179109df462c2ffdecef2d6486315062","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getData.js","hash":"2fea3c244fa4625b978cea63124835c16aefe660","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getFuncName.js","hash":"dd42afbc814c94e5bdd2fbef652efb7801403f6e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getMapData.js","hash":"f8986a4db2b55203a3237e5472a4620816306331","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getRawTag.js","hash":"08573f8b464cf110d0873d475890f499a9620d80","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_equalArrays.js","hash":"dd3a74350ab4d89beb889ba94510b3e5723b6209","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_equalObjects.js","hash":"6e408bc1b739bd195adea727a0f9dfdfb778a214","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getMatchData.js","hash":"221908980050132b19c79c53c1b7d78ef5b93d59","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getNative.js","hash":"a3c1a7f525a79c6216c2bd72810ccb1d8afefd9a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getSymbols.js","hash":"1c87ed98ef573b41c8a015c15857a0991603eaa6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getTag.js","hash":"e74c13874eca982f0fd30b1e35dd05e0664c6af3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getValue.js","hash":"aaeaa4d7600367187650a1ef2d6949e2f788cf76","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getPrototype.js","hash":"150397078aa95ac1ace14e9547b7c28eba508353","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getWrapDetails.js","hash":"ab6c90ec5be32187a6cfe2c9e798e7d298263dd4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hasUnicode.js","hash":"2ead86c95243b0dac220736e198e0a14e68c2982","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getHolder.js","hash":"86951aac23219e1a51267bf5fd7a38da110c877b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hashClear.js","hash":"7a6f43944d3ff13552dcbe9ceb972ae5a83e8b1b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hasUnicodeWord.js","hash":"254386bb9e3c37c9f53d068c485b3f41348dd56b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hashHas.js","hash":"aec7a8cd442a620d0073260ab7dc03960f6c85c5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getView.js","hash":"3a642a1adfccdac302261e31fadd3918e623d6f6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hashDelete.js","hash":"5b552f18bab9b54a3192e193d44188e1656556d8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_getSymbolsIn.js","hash":"0bae489598ad76c4f2faaf33bcc1b3bf34e4772b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hashGet.js","hash":"5645b9091466891d4c892c6b3bd220ebbd3a3d00","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_initCloneArray.js","hash":"7385f50c6d9fd89db402b725dfcd5b0d6b314c55","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_initCloneByTag.js","hash":"a38217b57e875466ed7d07578884c51a4e318560","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_initCloneObject.js","hash":"f2ee8035eaa7751ff081de5681c6603da177f8f6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_insertWrapDetails.js","hash":"07c0c750900d12cf01ff9d99e429c6be76790f4b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isFlattenable.js","hash":"f2cfab82055d2ca693f33a874c57d8250467fc04","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isIndex.js","hash":"f08242d01da4236214f75e0221fe25c270f46dbf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hashSet.js","hash":"13d89d46c86111ca9941d0c35c29a84b2fb97a87","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isKey.js","hash":"e68a3f3cc1d7942c51ce0e8d927c0eb1896bc46e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isKeyable.js","hash":"89389f3a2f157c03608bcce01baf751018f25fa8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isLaziable.js","hash":"857a630edb35c21d76e6e2fd6daed3f3b51ea6a9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_hasPath.js","hash":"f300ab1b5c17494a458e38d10eb815f5c1c95b76","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isPrototype.js","hash":"6ebbd7e2661dbf8b6e35f36d680b7117fcc6b2c0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isMasked.js","hash":"c001b1b4f9d3f7ece2e7263350f081da707804a5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isMaskable.js","hash":"54963a24b696b2c57b2e8d2a873ed7db9abe6b11","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_iteratorToArray.js","hash":"0512af6634544643fd2dacfb328aa8fca1770d72","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_lazyClone.js","hash":"528f2c4e0ddaadd246d07757608fafc02842508b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_lazyReverse.js","hash":"a16d79ce7d467ebd00332162dafae250f726fe17","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isStrictComparable.js","hash":"1db231f38b860e0a94e052c232829f8e8d31eb74","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_lazyValue.js","hash":"8e87e755c6f452304a814a29998fe145065aac74","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_listCacheDelete.js","hash":"1421610bad35fbee226a1a6bf8e7edb8958a4d6e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_listCacheClear.js","hash":"cab24e3a5aa064726b71f761bac42e765a21517b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_listCacheSet.js","hash":"cf902d42ba5e57849d08b0c03d2003c56bbc0dde","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_listCacheGet.js","hash":"266ac036effbb03c4a20397401900068f25ee510","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_isIterateeCall.js","hash":"8116de0f8e735fb8c0a9d263a369be4b74f5f09c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mapCacheClear.js","hash":"0eff5c92ebddbff48603ec60a32720c48fcdfd2a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_listCacheHas.js","hash":"2070fe4515274fd0445b01ccbdad8acbc6b7c9a3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mapCacheDelete.js","hash":"830ab65244dcd7c5a00fec9be355e9f713e6ea3f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mapCacheSet.js","hash":"745d2c8aab1a63cd28192eea4ac7bd86d5050b02","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mapToArray.js","hash":"ba760ad87c596f8a038240cdb8eb21c8f441a288","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mapCacheHas.js","hash":"a0104808ea49ff57061f2b4a6ec4ef5f28e20601","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_memoizeCapped.js","hash":"6e577b3ba7b897f8a8e6277cee2a9c0d296608d9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_matchesStrictComparable.js","hash":"886455dc09cdf350cadc57a4bb14cf8d700db358","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mergeData.js","hash":"88ffb153b2cf2792dd67b70ef0f7ba1715c991fa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_nativeKeys.js","hash":"9cddc8c7f8efeffa319763be371897c861027d65","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_nativeCreate.js","hash":"d77d487728a34b77fe91c07ed4a2ca41a7265b43","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_objectToString.js","hash":"c489ccc8b47254177546b747476ca6b4a339437c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_metaMap.js","hash":"6fe08e4a7c81c515eb34e464db1fe31d20bc8ff6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_nodeUtil.js","hash":"eb7f154a395ddfa64aa04fcc8da030a58b78c197","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_overRest.js","hash":"7020d98e117801d3a38b53367295588fe9574282","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_overArg.js","hash":"1fd1876980219dfd22c7ad86a49994f6ad1ffb0d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_nativeKeysIn.js","hash":"d11eee972281d8eb8c93724d6a9088faf33e9679","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_reEvaluate.js","hash":"01062fe9dad608255c7e341c6d3e145c9ae6912b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_reInterpolate.js","hash":"1f30c7932ca224ade79f3b50991da604fdc93c0f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_parent.js","hash":"a509f65490a88db6e1469ba7d8eacf86f11e7578","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_root.js","hash":"da38a7e1c62b9dec425d3354b1ae5b2f1473ed41","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_reEscape.js","hash":"1956c226d87ffb9bfb9d0b443e5e7c6665e222a9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_reorder.js","hash":"f9ebaaf8bddda0f54270363ed88d8eeb4b0acf95","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_realNames.js","hash":"1d70870e01638a3ba3e742bf871a5618ba866480","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_safeGet.js","hash":"801e94f91005b995403d05ca61b52790e8ebb52f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_replaceHolders.js","hash":"c24095b10ee93a2b1c4eabe187a37eb54a74b47c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_mapCacheGet.js","hash":"2f580dedb6aa86e87c9931a6bb2275df8fe8608a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setCacheHas.js","hash":"6b635d8cd68ddaf51b359bd7e89532dbbd5d259d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setToArray.js","hash":"8aa29aac79d989a3642638ba90120860d6e7cfd0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setCacheAdd.js","hash":"3e8d192f136058af7953acb255f3452e25f9dbd5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setData.js","hash":"27ba08bcf3045df1eb5bc20514f6532d51049445","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setWrapToString.js","hash":"e1129dc30bd9fe222dc11cf9d319f2d16cf02f82","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_shuffleSelf.js","hash":"d384018a208bad370c0fa749fe1a7abdcf7d1550","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setToPairs.js","hash":"8f144b728d7afc8059364769d27708f6f30f1bc9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stackClear.js","hash":"f10a4d85636bf0a0495cb7222575c139c2963466","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stackGet.js","hash":"edd10aa8b1688c112def671585164abd168f7dc7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_shortOut.js","hash":"2b821fd23499f0583817e801c9ec1aa7fabac0b5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_setToString.js","hash":"525d4e7a92d2f5de834b7199c926bf05e5863e02","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stackDelete.js","hash":"0035fcf868dd14e85188c010466ead0b44caddc4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stackSet.js","hash":"54d1b0f6e92c9327efb7142d082bea43f49521a4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_strictIndexOf.js","hash":"4d373aae516f6097b486413f2e0815c73aa37bdb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_strictLastIndexOf.js","hash":"541978faa200571da921f5cee0c141cca0436237","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stringToArray.js","hash":"051613c1b18c5156a676b197586fb0e2c1acd0ec","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stackHas.js","hash":"2c66efa2be2222610dae4edfe711b8b0d9a55a60","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stringToPath.js","hash":"90f48337b274bc8475116e992fa8cad995a4029e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_toKey.js","hash":"e24143e8602a9acd35301e6462b03c6ef0d94bc9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_toSource.js","hash":"12282cc7f18c3c7446129f547741c3998b6caf18","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_unescapeHtmlChar.js","hash":"345300e6aa36d8b10133adfc3672efc630f77822","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_unicodeToArray.js","hash":"a9378af7302c381a5f82467c32de3111ca597877","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_unicodeSize.js","hash":"4ef1b8b07c56ba22c273f20ce1f43c99d9e646af","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_stringSize.js","hash":"2c19f863e40752a52b8d3347e8b05c8afb61a4d6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_updateWrapDetails.js","hash":"2ef2e983cdda0be8c850d7e59d570862ce6b64d7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_unicodeWords.js","hash":"70d7dad3b79c471cce28fb00f4d9491c6d14de30","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/after.js","hash":"4d65d6ae8537ba01400d74e3540b52b463dc86eb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/_wrapperClone.js","hash":"c54b050119a2a1ad75146508a03ed4a78ab9b5fb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/array.js","hash":"ac9338e3493fec2bb6d7a1dcef45ef9819b20649","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/assign.js","hash":"c80789cd7fd35c7190290526e466eed28caafa80","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/ary.js","hash":"6db228f04677c2724e6b8438681c4c0fff0c998c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/assignInWith.js","hash":"7e951bb44bd108e1024ea5c691d9bf9449c112fc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/assignIn.js","hash":"166da8ae436b3ede129a5842457d68d6fdc9616a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/at.js","hash":"cf037c2d8d960fa96854f59381675ee196cf4069","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/assignWith.js","hash":"98f683f41fd043bead258cfc6e61bd6765eea779","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/add.js","hash":"69ccfa17792261411f27bd7166a6760e3e6e653d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/before.js","hash":"bc0b86f3e03b7056b39193a03c5d39ee4fef4023","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/attempt.js","hash":"6b981c1f3ff53c572ebd08babf8799c8f118f6f6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/bindAll.js","hash":"cfd017286d7a7497547755272e1a55d39dc4beef","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/bindKey.js","hash":"b54c9311a7c9550ffceda021af5c995eee09f693","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/camelCase.js","hash":"1db1aa1a3c7a3a703a33c660526ef141c0bd3b94","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/capitalize.js","hash":"cf956ec612dfed45fdab26ab30cac6f46d738119","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/chain.js","hash":"e51b12d085b20c8676bf3297d9d0a8acb3871e4f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/chunk.js","hash":"8e0f7e51303031640b539758ed6fa3e48e761783","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/castArray.js","hash":"8dd901032216d00cf43986adaf961ad7422a64bd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/cloneDeep.js","hash":"fcbe65493c8f2c4fb574dbdafaab5ec22ad3ac42","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/bind.js","hash":"6b960133235c585a9b461e19df07cdd6edff118c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/ceil.js","hash":"13eff7a830076aeea2ffabd36b8d0d3254849953","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/clone.js","hash":"1268809f4924a5640d425e56eb4cb71df51ccb72","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/clamp.js","hash":"0c356936d91c87fe7938faa3e1bb61b8334e7f0b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/cloneWith.js","hash":"e9108f222791a26a83106488509053910d8460b5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/collection.js","hash":"235db0c51d2fbba77c1c0ab2f25617e3c02d9e5d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/cloneDeepWith.js","hash":"2be99cb83b8e6ac3f488963b433a8dd1829d3599","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/commit.js","hash":"f2962f416c4427b7d5fd2fe8f752c41a8e6ee53f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/cond.js","hash":"3df6aa9c3966438f382511f0b5ab7647ef5da87c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/compact.js","hash":"f747cf703e5627de69652da7ef01299274cf48e7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/concat.js","hash":"16777de6eeb0cb2828722e48c32e900256c21bd0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/conformsTo.js","hash":"db8ff09750867c73d76ad1275a5cd8c2bc93b873","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/conforms.js","hash":"e226b49b5c96a85b5a1796b7a708c3e3fdd9fd9c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/core.min.js","hash":"ce44a55949e0a34daf0321bc85e7a16b87e92fa5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/constant.js","hash":"0227ab051a5a8ca5e0fc7934bcea54ec25f90292","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/countBy.js","hash":"048867f03021430a606b699403133e2e234777a4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/curryRight.js","hash":"61586b4ac19da0224a3262027f2d280f25bd70e2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/curry.js","hash":"cd66258e0cf4fc625293d358d15a7bda051bfa67","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/date.js","hash":"6466f5749384af915c2b6a449e74e14e320f4e11","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/debounce.js","hash":"9c880591c7ba76d446abd004232d5bfec35234a0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/deburr.js","hash":"460705fd44df7613129dc58981966abcc45f9488","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/defaultTo.js","hash":"07e0f352f98a791be53a0a6eb43dedd756acbfbf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/defaults.js","hash":"1f12f29efd3d103440d5c2cf8895119205ec67eb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/create.js","hash":"41e8f34b4e9429b4b7ab26264bc570214164a5b4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/differenceBy.js","hash":"ff88a7541ee0b628ea3bbd923077facde3dbab36","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/defer.js","hash":"471017a76ca3f3f71a111ccf7b487f89a50327db","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/difference.js","hash":"7a2a5465430dd730ff198a6ffcd5a3de8660c7b3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/divide.js","hash":"b21dc4cea11b1da27812a545fa75aa0d6b9a834c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/defaultsDeep.js","hash":"bf8d24913d8a34b40f1190a2d4fd01cadde49263","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/drop.js","hash":"6e25554b3f395b8e55d6b291451e7cac2149c7af","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/delay.js","hash":"d7b8c52b90e17f9e42413ac7ea16d39a8e96bd4d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/differenceWith.js","hash":"0f2a92e973c183bdcff6395d840f683f318c3424","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/dropRight.js","hash":"e77c7613539baf9a222fcc57142d5a808263688e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/dropRightWhile.js","hash":"f9ccd85e2dc3364b0fdfbc824632e9f792b5a11d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/dropWhile.js","hash":"f710aa52d7e2a9b128e647ec58b24e3c37660790","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/endsWith.js","hash":"0d8fd73985ee8c845b0c851704c8700f1055863d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/eq.js","hash":"bc3769b5b5cb8262834ac0a28cc4cbe71257ce94","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/escape.js","hash":"60bec78e2fd63cbd52dc8f4f5f5b242bfc9449a5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/escapeRegExp.js","hash":"91892447637ec6b53595e90a9817241b536f5fbe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/every.js","hash":"6da415b41c0bae9c96fd40df253df2de7d965f4c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fill.js","hash":"bb9b5af63b9b43626fc4db976072b045976ea77a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/filter.js","hash":"5e630c86a2bd2a83a887241037b6d714401502d8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/find.js","hash":"bb6c19af408438f6a0e19998a230880354afd814","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/findIndex.js","hash":"2fc5db1562e58221e0aafbbd317240704eb29985","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/findLastIndex.js","hash":"05743b963c7370d830ce76ddc5da4d85ba687935","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/findLast.js","hash":"1f3be6d3e3eb97733c9a648872b4b3366d590257","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flatMap.js","hash":"78f9ce2566f143366b0998ef02dd8dc89e004133","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/findKey.js","hash":"eecde37bba06739228e5f93eac97aeaab4a91d4f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flatMapDepth.js","hash":"fb4c4fc58c11b646dfdac83443e7495829da8f45","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flatMapDeep.js","hash":"76d3ae49d148850472922956935d294957f6f04f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flatten.js","hash":"72364918453483de6a71137a9a8003973c141fad","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flattenDepth.js","hash":"537a4e7196561ecae367985622872417cb19eabf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flattenDeep.js","hash":"422f037a6379f0db6258b9337261c1a9cc719faa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flip.js","hash":"67207c1ba95e6881968ff8fd5542f29e259aa3d7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/findLastKey.js","hash":"9ba6afda847da380659ae98f0cb575566a0dc85c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/floor.js","hash":"dcc9365721002de964aa2439793b7a10419d3dad","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flow.js","hash":"7d9e4b712b68551d5b932bd4ed88d15b4aa1722f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/flowRight.js","hash":"3e028361a9b090f8e4166d89fba374d65d52711f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/forEach.js","hash":"0f3074268fefe6db115334ca5dd1b89eb56a8a3d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/forEachRight.js","hash":"654c60d4bb9737aa9fa3a7ac55e889f3dc2b50e3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/forIn.js","hash":"61f83e8b63f97c099842046983acd61ac1b31ff2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/forInRight.js","hash":"6a060f1b26a6be2a99c48eb56d104c4684b9bb30","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/forOwn.js","hash":"3e351a24c7fdf0593c116f361f59739cfb447950","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp.js","hash":"15a13940a645e776e00a229a7bec48f6af716505","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fromPairs.js","hash":"9a5f37cb42d2839c2637ca1792fcc1cd4333c56d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/forOwnRight.js","hash":"91e99b73af52bd6155bef7a259aa2e763aa4b885","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/function.js","hash":"23850ac10d90d3b9eee8723beaa3af727330323e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/functionsIn.js","hash":"29e78c6d69d36b48c62e4374c6cd1c02da73da40","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/gt.js","hash":"8446ef3704d57dd44214e6513a6889f4d9db658a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/functions.js","hash":"0ef50ad30d371a2b7ecf4363fd7862b5417130af","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/gte.js","hash":"ec5d91c1d30601111dd6a41af35d55c2c27498ce","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/get.js","hash":"fd2860fd39bfc6e8c44bae101e133effe6373734","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/hasIn.js","hash":"8a4bf01f81a8d508b322441659f9c74f38998c3b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/has.js","hash":"c3c35131b701a60eb1f6bf9e530c78d123268cf9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/head.js","hash":"374b879fa821ee60e31efa35f0b847ac5ba770af","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/identity.js","hash":"af8a8f8af76663a408cf9f29e5723d05f79eb236","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/includes.js","hash":"b5d81439dbbb9b6558c9148e37bf5db918a42d1e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/inRange.js","hash":"38cdcc3285d54fcce6a7b362642c8c93305782f4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/index.js","hash":"14d8b25e9e35c7f1b551d732fb814c982fc5301e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/indexOf.js","hash":"eec5a54dc7285759af46028f7a7c1ec3479993f4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/initial.js","hash":"c366df8c3c272bbc5fded392830b438d30d8c4a0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/intersectionBy.js","hash":"969e82efd3befe0749085336f9568eb81f55d7b5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/intersection.js","hash":"b51e7675e09c00ab99a632cdf1fac769f1a874ff","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/intersectionWith.js","hash":"1e1c0b6cf9c37aa60ea316a1540245bbff6f7a8a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isArray.js","hash":"c6d5635dc764c9acf7395abde2230c43121641a0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/invoke.js","hash":"5bdfcbcf073fddbf4f00903e4a8db0f1b868c8e8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/invert.js","hash":"c9547b3840dfef6cb81c6507f35a5109798f1a7c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/invertBy.js","hash":"1d85aa7dd69490d38441a0206246460fd4c0f95d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isArguments.js","hash":"b9214a907e11a8e2321e6adf907ecde99b9920d8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/invokeMap.js","hash":"bfbac7243fe9a57276626d7090d473d9a3b2d796","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isArrayBuffer.js","hash":"b682ff167ce2b34539afe73df93f2abe81b8aac5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isArrayLikeObject.js","hash":"300effec49e91a13bfaf9b6a9dda4ea2c4d45d92","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isArrayLike.js","hash":"88d7cd3fc8a6075777cef6c16e1cc4931734159a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isBuffer.js","hash":"246d03a17c274bdcf3acb909f2337c695c9aea45","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isDate.js","hash":"3a7813e7ff48c9ac6ce3bbbc8584b1ce22c4ea1c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isBoolean.js","hash":"ace779f61262f820f5f4ed39695bddaa7ebd08a3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isElement.js","hash":"652c3967fe6b11419aaa8652a8d8d6e35f15a76e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isEmpty.js","hash":"935d1e74c2b8a3deb928af20d4440894368ccacb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isFunction.js","hash":"6cb0b30f9e48fc93016a3f34d124224af7901908","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/groupBy.js","hash":"18d1063f6af8b9cb6901c5ad3257db49027ab77b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isEqual.js","hash":"370af44d612ddc96cdc52779fcc844fdf4ae00ae","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isEqualWith.js","hash":"3e9d8f6214fbb2f859254ea9c4b8f9da58ac15a0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isInteger.js","hash":"ac93647df1dbe92f6358a992b1d5e7039cf85514","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isFinite.js","hash":"388faf4e73347a1c0d77c98a3ac92be8902c5f36","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isLength.js","hash":"45606d651b8071d8ef73beb03d31d6073ade0df4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isMap.js","hash":"d19970b50ffa3f5e8345e84c635dc7b553bca992","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isMatch.js","hash":"29b9682a150068960adbf9ffa6b1da7f2a45477b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isMatchWith.js","hash":"60bf9f292afffa501f83381428457dc7567ee4cf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isNaN.js","hash":"711cb119497d074148b07dda40eef0fa7519de8d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isObjectLike.js","hash":"7213913d764526ff2189c115d354bb940470bfde","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isObject.js","hash":"38f00e3e4772d23d56550ef75959d10f92448e3f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isNative.js","hash":"58dd206b6a97ede6c6c786ae029a36739c5efe7d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isNull.js","hash":"bd68451baaba662307893e3216b99ed20cf8a0d2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isNumber.js","hash":"75152f3218ff6f88b1ad22a258b16c85ebbf9408","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isString.js","hash":"7eb7706298dea12e813be37db6cdc8ea92177630","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isPlainObject.js","hash":"104adb7c6dc9854cb91ac5995b17969c44614262","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isNil.js","hash":"5780b6ca6e7dee6c2599a9ac77eb302812a373ca","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isRegExp.js","hash":"af11b03682761c1292525e290f0312da974c02c9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isUndefined.js","hash":"4e087abc1b0997f71bbf33e2065b40d438511e2e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isSafeInteger.js","hash":"18473b31325225abe68ccaa69aa84635ab02b651","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isSymbol.js","hash":"aaa0f4e5003e5d33ed7d67b8a274a9a14c3cd64f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isTypedArray.js","hash":"d92eaa92fa13419d2df184ff11f270c266590f66","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isSet.js","hash":"8753a0c0f5a73feb22942035f87351120db0f402","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isWeakMap.js","hash":"d88fd7f6dab0bc1a14c8b7b9f5adabf3d5430ef6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isWeakSet.js","hash":"2582214ba7a25b23bebf2ef4ad8a799248a5e5f8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/iteratee.js","hash":"5e22aa3f442a49c5061a7328b39c7ef197b9a249","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/join.js","hash":"236f8abe4dfa446351d07525089fabee2e2d3f0b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/kebabCase.js","hash":"ed770da5a2e3ada160f9dcd625a94d16ffa8fef0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/keyBy.js","hash":"96e32f75404ee87c0fe8bf2d8b7a2c69cee308a7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/keys.js","hash":"84fe8dcc57c7b368d5fbd3ccf0c194cde0c78515","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/keysIn.js","hash":"e444c4b265f9f39968467a82c09935bfa1be501a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/last.js","hash":"dcdc5c04379818603815dfc64e96bd5e2626fd29","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lastIndexOf.js","hash":"64b8f7981a889c14b785738da32da89ea7b06519","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lang.js","hash":"2e1998c6fa6bd4a5c691edd1eb1fffaea2a35b85","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/isError.js","hash":"b184db78799044db3af29c3f6224d8e2213c9985","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lowerFirst.js","hash":"6b7a190cd8d1f01254d0556b7725ed8ad3ee9cb3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lowerCase.js","hash":"6280f901a37fb21a9acc5df8678661c1dd47d425","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lt.js","hash":"244011c8209227a5d714f5843106b13de0f5fc15","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/mapKeys.js","hash":"6c2885c6249ff8dbd5c18910338240ddcd441e48","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/map.js","hash":"484de2e64aa6e9cadbac92703bf79be5dbd53942","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lte.js","hash":"02b0d1b5d68ff6e8cabda05c1e5a4c9675b10479","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/matches.js","hash":"b760524ca6b6ba617641aa4353e7598c0cebe50a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/mapValues.js","hash":"7d273ea92cb971d298e84137f49b89c5d7249336","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/maxBy.js","hash":"85f841238f0c60a3496eecb25a3bf7aec5fc36fc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/matchesProperty.js","hash":"993988bbf9037d03aa3ec66e3d6ba3db185a58e9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/max.js","hash":"2c5910535b9bc06c066c57f71b5b02965b894cfe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/mean.js","hash":"17efb674e29e2456f3b1e595210a9929480e14a3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/meanBy.js","hash":"5a9d6be568a698c6ef430a07f3431c11bbba3dcb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/math.js","hash":"09b7cdb94b0829a362572cd9eb490c6b86471f35","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/memoize.js","hash":"507cd3e0ae52967b105d0452fd0f93fbbc69bfc9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/mergeWith.js","hash":"18a5592394d4cf1a0772e6ff38bacb9b547105f6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/merge.js","hash":"20f06dc73414778002395627c8d4316699ff947b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/method.js","hash":"6dedac7c45efb248890558a8d42a2656623ce0a5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/min.js","hash":"0ca11cbe1894931dd09246e001badc22eb734887","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/methodOf.js","hash":"6af752f45f4152f036fb378075d72f6ab82573ea","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/minBy.js","hash":"8fa3de3c1efcc246ee906a281757f905cb13507e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/mixin.js","hash":"813b628b7fe94024fa308fbc6d06d1883dee9325","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/multiply.js","hash":"47e4d5d6014da46305a0be1082d66d2f41928e82","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/next.js","hash":"8504ac753cf6e3e19d811038503ee000b7829e8a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/noop.js","hash":"35300b7ebb741e7a54fe528a8a718b26c35bf698","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/now.js","hash":"ddba13c834824d9467e379769e67f414a6179d15","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/nth.js","hash":"4c0c437715ed4fb0942b8dee7273b9d0dc5f62e0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/nthArg.js","hash":"47191997e9ebf3b2b8dd667ee362e48d381217fb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/negate.js","hash":"a01d8c228ce6992ec79ee4146677e52dcc487254","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/number.js","hash":"8c2564ca466fcb7f4f0decd5eb79f803f39983f9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/omitBy.js","hash":"4216fc454388cdba0292cc5199b2d28d7484ac7b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/object.js","hash":"4b9c99e1cb054bfcb6777077f59a2a53a4759490","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/omit.js","hash":"874d0d4204aa0cd72c79d7b3a4c80a577f46b564","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/once.js","hash":"5bb536b8c7f08f94ccc9019a51601cc97d9b24d3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/over.js","hash":"e28a6b283217955bd749ce30edeba3e6b977273f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/overEvery.js","hash":"03c5153a4c43d913a9162032f5041cc1f982250d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/overSome.js","hash":"153452d7a4349ee32447e45f59e975f929de5c19","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/package.json","hash":"164234b06dbd020a5610532f8e8c4652913e40bd","modified":1521447496000},{"_id":"themes/tranquilpeak/node_modules/lodash/overArgs.js","hash":"e60acc78f35d412319457c41a3bcecc898f9653e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pad.js","hash":"b6a0479a2ce0289d29214e8f7ff83a0074406d25","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/orderBy.js","hash":"7665eee9891d204d48cdd799992dbd6a9678125a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/parseInt.js","hash":"786b6be24ff93b68962925663708aca1236f2cc8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/padStart.js","hash":"d6ea6887328ca596d505af7b181edcad862865f4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/partialRight.js","hash":"7c551ed65cc1b160ab8a7abb78b9e37c3b426e5f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/padEnd.js","hash":"5973017726462db292d41c2f28b53b8a4a24c507","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/partial.js","hash":"5c9f9b1c6719f70ceaa7fa314193f7ed4ed5770e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/partition.js","hash":"36957b0323cbd50f5ec8e4be3b5cf571241407da","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pick.js","hash":"9c8c0c82b1db06c624523239aea143410c5258be","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pickBy.js","hash":"99eb4eed1acb33f67be3b41f359601f0f6d75ae3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/plant.js","hash":"2b370614388e8fc4a0e12d2eaa644c25622de026","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/property.js","hash":"276a7afddaacbac4fa184f0096a92f32ee517ced","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/propertyOf.js","hash":"d23f88041fae20fcd9b92740fffd39016a6715ff","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pull.js","hash":"e40207e049af5517cc5cfd59ffd23b1c3a1406dc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pullAll.js","hash":"1bb4ac35a97475e16cfa8a10abfc5d911c58d743","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pullAllBy.js","hash":"5dc628f7fe0c8e71edf931bebecdaeb0e30d6f2e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pullAllWith.js","hash":"f205f46a35a1b3d40f86c92dd9488e25c59cf5b9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/random.js","hash":"d64df688329131b297c269ce8e10b44cabe52e66","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/pullAt.js","hash":"176790538e4f38124826d06462d089f8acfe1b0e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/rangeRight.js","hash":"6640704aba8af652f6f8d13758946125dc324e08","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/range.js","hash":"6bc797b60a5f0b1fe8e93c0c4c41361c7f8f1189","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/rearg.js","hash":"ef1d75bb13e2f07e1737b028878775f67ed2b50a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/reduce.js","hash":"a6da684222d6a2179aa409e3728758572961152f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/reduceRight.js","hash":"8c8897c831800592470dc2fec9f1f575f844b2fe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/reject.js","hash":"6b18138c39a26986320b80d9748bf5385c2b0c71","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/repeat.js","hash":"8a5c222ac1514d5732374f165d8df9dc0274bd71","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/replace.js","hash":"a35231e4112316c03e6c65162affe9effee35922","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/remove.js","hash":"a91465f281fb69fc2cf3a9fa751acfe89c5d95fb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/rest.js","hash":"61b930cc021a8f03bb466ac833596d6d37416714","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/result.js","hash":"7180962c1b72ea113dd6516d5c28d006080e97f5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/reverse.js","hash":"09f86bfe19d080bb52606967a9df5f017333e963","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/round.js","hash":"629b46fafec63f591a3c6b02ee03529ef43a8acf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/seq.js","hash":"e8dae0be3b8ece53ea5d6594d0b45d221f643576","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sampleSize.js","hash":"7a14f0d38676fcf8ed64a12ac379c8203eda1e4a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sample.js","hash":"b861fdd759aa14bb6747b0e333df66b8995300b2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/set.js","hash":"bd5aefade6c00bbf37fd21dcd79e0ffd085a6084","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/setWith.js","hash":"012090d3598aeb4e36cadb5fb3ee7ecd9d184211","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/size.js","hash":"baeb54345201e06c8c096f9a4f62192c8584f982","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/snakeCase.js","hash":"b95290beac2d4eb4436d72bde0b191a8db147970","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/slice.js","hash":"fffe0c44921ec28dd2fc1512493b912411d06628","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/shuffle.js","hash":"1d035fe3d9776decf38cab2e19e2b2da99aa5dfe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/some.js","hash":"b6d44fdefb9894407b8d48ff379c6288fec935ee","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortBy.js","hash":"5f928288640eec63d9ce82e3c16750b4952f5aa1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedIndexBy.js","hash":"785066b03fae1e7fa508b7380f95727d02284d7f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedIndex.js","hash":"e31955eb8a9dcf9868e2df8f112a8ef873709970","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedIndexOf.js","hash":"21e71189ed17c2769fcd2c91625af1a65b84591b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedUniq.js","hash":"612a221cb2088447b6510930f35f7140ecf41d1f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedUniqBy.js","hash":"e9ee6345a66fbef43ac161edd568feb2f197a2ce","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedLastIndex.js","hash":"b886560112d50f2aef5f1acdcc5cd9296ff6f8b7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/split.js","hash":"f33b9e68923d6bd511a37658a794104452f1bacd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedLastIndexOf.js","hash":"f4a56782a4a913c330d832d80000e0340093e020","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sortedLastIndexBy.js","hash":"4bf9117b8f1d0161a8369f127220b897819cd6a9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/spread.js","hash":"b5e45484e55917c836dfc464d1c1dfb5e016a53b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/startCase.js","hash":"5cae4afa2846579e8173a62ae27253a75fb57119","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/startsWith.js","hash":"10e9857ce37a805453b6e1c5e0caac454d08ba89","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/string.js","hash":"9da506e6420a685f56f77ccdcdd4dfe0ffe552b0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/stubArray.js","hash":"bdc0e5ed494f2924ffd64e91620fbcd8161f7223","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/stubFalse.js","hash":"e5b35ac8e1872e9c87f126c972891005c94e7d19","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/stubString.js","hash":"053b1bf13c37041494b3afed57eea26d24b46c59","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/stubObject.js","hash":"dc710610031cb2255019c0bd8465df0d6db0111e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/stubTrue.js","hash":"35d765e8ae55e010a1b5eda7aa6596a14a052ef6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/tail.js","hash":"9f994bae44d6e96a75142cfdbfb362f1f8190d8b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/subtract.js","hash":"6927a0ddb3037e644d7d49f7aadd99f45ac2226d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sum.js","hash":"b468caad43dbd33443e584c510697155ec12a71c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/take.js","hash":"07615e176130761c61262b882598a6aab8bbbd48","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/sumBy.js","hash":"9a28d421380fb4347c651dd4935461c69a465251","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/takeRightWhile.js","hash":"b4562aaf5ce999f9c4b68b1bb5296da5799e4e37","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/takeWhile.js","hash":"7ab5baee95d7a1aa64183a266176725180d74c8d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/takeRight.js","hash":"aecb30e9e3d49c9194b57e4c7988a11b4e911170","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/tap.js","hash":"a1f5e1966c3620b69def36154a27a8d9893d87f1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/throttle.js","hash":"dc6c20077c14d5b184f3471924032e242c9ec3b9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/template.js","hash":"a0d4d446da57415c4afbb6e3da20d6a6b5efc518","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/thru.js","hash":"d006fad2ab19f7bc90e0ec69eb5037f081d99bee","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/templateSettings.js","hash":"fa92b30409e71f025035d7a47921a061b46f70df","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toArray.js","hash":"5cde4e05caa391716f89e179755c861677498c0c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/times.js","hash":"ee9fd905cf9b189471102ac6b4a75b745085ce48","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toInteger.js","hash":"06e857ac41a5b7056f7b522db601b4679f04f5ee","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toFinite.js","hash":"44b15d3279c2f94ac2098503c427e1e0eb34c3f4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toIterator.js","hash":"f8fc807ff29125bb2dab968633ad964ec94194b0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toJSON.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toLength.js","hash":"9a0a62cbf4f795ff3efba1fd3b1a84cd5ec94ee1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toLower.js","hash":"3cf1e67f3e193b9f982b8814fec29cdf99b6b038","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toNumber.js","hash":"2b6f75e579b5ec0e84426be3ce1fd0d3a1abec18","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toSafeInteger.js","hash":"c49cb9237787895a00956b20b569bd384c684269","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toPairs.js","hash":"48dbccab7f479c713471fa2378d5ffa402745f77","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toPairsIn.js","hash":"ddc2a974ba685da424c9de9e2f7949b662844273","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toPath.js","hash":"973bea7fc9852f05f88b1e11a768b7b7ab786990","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toPlainObject.js","hash":"4e96ce3252e389b1633a2c73fc9d68031a12df29","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toString.js","hash":"6c4365360e107172a439c756d9be5db5470b1142","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/trimEnd.js","hash":"c18ce828f8e810a17d423d75705261ff77b34462","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/trimStart.js","hash":"fdf32db72208d65d988d3a7672d2d22a2bce89b3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/unary.js","hash":"079326455dbdd90b20704f1a3abf73cfab59d088","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/truncate.js","hash":"24f4a9506442f2cafc20a024b9d79fb6e5df3326","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/unescape.js","hash":"89bc8a104147bab3b23f5e6f1f1c3819c6168293","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/transform.js","hash":"2cb75bbd3d23239daa2681abefea716e5f7e0bfe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/toUpper.js","hash":"5e6fa81c32735a5c142884a1da0b1d88b780d05d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/union.js","hash":"2cd89b9ad0a574cfddd5daa4c5c95ad71db6b4ee","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/unionBy.js","hash":"0d110e48caa5b130f45e00bb7d65dcebe66e275c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/unionWith.js","hash":"16881474335022100f41832178f2109f7525061d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/uniq.js","hash":"2b735c46c626dba6b45907c8c70f17475366016f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/uniqWith.js","hash":"0a37f6a99454364d2683df713e678bc9669d6684","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/uniqueId.js","hash":"0809eace58255a033eb37e73ce581e2cc6fe26d1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/uniqBy.js","hash":"5591128502a52624cfadfc2d4c7b20db4011267b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/unzipWith.js","hash":"13255720f48e23ba96205aa49fe5bb538b3c640c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/unzip.js","hash":"9adc3e8903f6134c27951f3a558286a7667656d9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/update.js","hash":"abae1fa2fd4b937bb1cf1f4a0fb4a73eb9d4aaab","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/updateWith.js","hash":"dd63e7b716f897c2bc9f7d39884e0282ba81bccf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/upperCase.js","hash":"4ce59b5839e848688ed76fc99d62f35168f9f46c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/upperFirst.js","hash":"091005e45cf8b9ce4f51e1b2ff2da30558b40714","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/util.js","hash":"9e3bd39fa03689fa7d9897be9c2387e19646662f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/value.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/values.js","hash":"6304ca5a2c8a30cb1eef8cfb80aed716e29d3495","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/valueOf.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/valuesIn.js","hash":"5d6cd8fa3358eafef39b236579720c3d6c4450c0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/without.js","hash":"979bbb5dc3e1e17ea311c4d85a47b5b8b5c9c58a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/words.js","hash":"74ebd3c81508567ca14f57f717488d4cf337101f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/wrap.js","hash":"956d1896e8a55677cef08f879674d4de21d45184","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/wrapperAt.js","hash":"4974d8fad13c6913d78fe90db2de8cd83a811f47","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/wrapperReverse.js","hash":"2318334d83fc88acd2b7fa81c1a709b957719f4a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/wrapperLodash.js","hash":"b20f7aa45935b9d38b954bc7fc07b0a15298df77","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/wrapperChain.js","hash":"0b6afa60d6fedd5ae935c2127562ba2a590b5b14","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/wrapperValue.js","hash":"dcf31c73fbacb8ab409179125d9ffe51e1ec8696","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/xorBy.js","hash":"5e7d74900860098de29d83658deb9eccc1f7b840","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/xor.js","hash":"77e7c70d299ec7430efd31d411e46bac4dd0450d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/zip.js","hash":"2df2c5d391c0c7fb710357e33d6a9f16425d66fa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/xorWith.js","hash":"ceb3b359ce93812b82f622e0c117585ba83b2996","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/zipObject.js","hash":"fa1c2ef419f663fe0b552effed4b64428cb52f15","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/trim.js","hash":"de870b0426ce1ef6506652312b8298aa7caa16fc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/zipWith.js","hash":"8cb8637b0b2b1174922ef35138408a777911267a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/stealthy-require/package.json","hash":"87af1c3f25bb54aba95494ad054b29e72195f6df","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/lodash/zipObjectDeep.js","hash":"a4cd8a063e87152a2229d1493af4fdd0419d3ff0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/stealthy-require/LICENSE","hash":"0759cd9539c8d4a9f631cebd91c31741dc8939f2","modified":1493067079000},{"_id":"themes/tranquilpeak/node_modules/stealthy-require/README.md","hash":"4a52831cbca9bb3cfb329d63ab6d30bd6e62d3d3","modified":1494301514000},{"_id":"themes/tranquilpeak/node_modules/lodash/unset.js","hash":"5f2a9664870f21d2b7dcf0255f50ad9b37a6c850","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/CHANGELOG.md","hash":"7ae87fdbd050fa1fa16729c490de36f7c6f9489c","modified":1431657567000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/LICENSE","hash":"7bc795bf398cfa51e99e85dc51931c3b0d1b5a79","modified":1412127778000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/package.json","hash":"b57e9dd9dfa47e830734c7e4d3ba25cb09af8862","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/stealthy-require/.npmignore","hash":"bf345c06675f9c3d7ab0c25777cda673ec6483be","modified":1468865013000},{"_id":"themes/tranquilpeak/node_modules/stringstream/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1340796033000},{"_id":"themes/tranquilpeak/node_modules/stringstream/package.json","hash":"ec7651b609201e92ad16d7fa9ca72fce11498336","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/stringstream/stringstream.js","hash":"400fe756da898736fe0642a709c7f88e21fda352","modified":1363491475000},{"_id":"themes/tranquilpeak/node_modules/strip-indent/index.js","hash":"f09dc95c800739d2d0367c367428f9d93f81aa5a","modified":1461295088000},{"_id":"themes/tranquilpeak/node_modules/stringstream/.npmignore","hash":"e31bf1a44ac82728f64fe63d5fc691f3111103e4","modified":1340414943000},{"_id":"themes/tranquilpeak/node_modules/strip-indent/package.json","hash":"7b52e9040aa6e86589e4b5981f5c7286ac2ed28f","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/stringstream/LICENSE.txt","hash":"e957fbece098eddf6df809165d5e73c2c1b2e10a","modified":1445815621000},{"_id":"themes/tranquilpeak/node_modules/stringstream/example.js","hash":"17a98e07a319edf8fbeeea49d83515304922b1b4","modified":1361939998000},{"_id":"themes/tranquilpeak/node_modules/stringstream/README.md","hash":"33c7843dec1919a17daad5a5ae2fb06d54018b38","modified":1358765250000},{"_id":"themes/tranquilpeak/node_modules/strip-indent/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/tranquilpeak/node_modules/strip-indent/readme.md","hash":"7155400ace3c601db99559f4095cf596df56bc08","modified":1461295001000},{"_id":"themes/tranquilpeak/node_modules/striptags/package.json","hash":"c1d96410c346594eca5ac54878cd5d8954f0c91a","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/striptags/.travis.yml","hash":"d9c5d47c7c006d737ad01c2a1f10d42206189a33","modified":1484743147000},{"_id":"themes/tranquilpeak/node_modules/striptags/striptags.js","hash":"b76eaea01c6f86d3a6f187ca1e4b30e7f059ab07","modified":1484743003000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/README.md","hash":"dcc23563003f5a244fa3d10243f50a46d8313f11","modified":1412127778000},{"_id":"themes/tranquilpeak/node_modules/striptags/.npmignore","hash":"631c0bbafc06a9acdf32b5f1d0a32b425d5327a9","modified":1484106258000},{"_id":"themes/tranquilpeak/node_modules/striptags/README.md","hash":"312dad4632c3d8c145980983451c551bfcf1c352","modified":1484743376000},{"_id":"themes/tranquilpeak/node_modules/striptags/bower.json","hash":"721bd625f002394f7422251062ee4cd8e409388c","modified":1484106258000},{"_id":"themes/tranquilpeak/node_modules/source-map/CHANGELOG.md","hash":"30497f61c3317cab69ac398e6a1bbb3ced8165f2","modified":1492467890000},{"_id":"themes/tranquilpeak/node_modules/source-map/LICENSE","hash":"914d42b13ad394be4aa75b4d93fde94b1e79cbbd","modified":1492467890000},{"_id":"themes/tranquilpeak/node_modules/source-map/README.md","hash":"2ba19c8a33cf6196178891f454f98068f202ab6e","modified":1506355788000},{"_id":"themes/tranquilpeak/node_modules/striptags/LICENSE","hash":"88d9c86133613e38d3fcdc5766654e81d0cf0205","modified":1484716669000},{"_id":"themes/tranquilpeak/node_modules/source-map/package.json","hash":"01b5e84c265c83a5af6bf8cfe34b2da69debffcd","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/source-map/source-map.d.ts","hash":"5bbd72110452608820b81dc1323c208f13c0047a","modified":1492467891000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/package.json","hash":"2f4da3770e7deb23debe149525c6e8a42881357e","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/package.json","hash":"83f9f67be3390b020b5a74426f1008d38280c428","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/LICENSE","hash":"4a83221ab3d6c912541e94c598d9e6823479641b","modified":1436902550000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/README.md","hash":"a0e56c5c667e54f8c5296aec6008824bbce398db","modified":1486846682000},{"_id":"themes/tranquilpeak/node_modules/source-map/source-map.js","hash":"54dd50c132e3a298bcad252861389300ac0ce265","modified":1506367807000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/README.md","hash":"a2ed92dfcc06fa9b69430c4c0378e4bcca2d52ac","modified":1519683727000},{"_id":"themes/tranquilpeak/node_modules/tr46/package.json","hash":"b44a81865a9214bd245132dbe41b456b880e3c08","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/tr46/README.md","hash":"466645e1fca683d449f24042e901bab27e232f19","modified":1504404475000},{"_id":"themes/tranquilpeak/node_modules/tunnel-agent/index.js","hash":"61c5cadcb5f04336e11d95cb55f86f18cb986f9f","modified":1488673752000},{"_id":"themes/tranquilpeak/node_modules/tunnel-agent/package.json","hash":"da3a4666bd0e8f72373321d2c9ffaca2d50288d3","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/LICENSE","hash":"d453b8d6be98bbb6cff7074794f5776ff3a17115","modified":1519683727000},{"_id":"themes/tranquilpeak/node_modules/tr46/index.js","hash":"d6dc779dbb32df32f917a8fa29fa29d93c619b54","modified":1504404479000},{"_id":"themes/tranquilpeak/node_modules/upper-case/package.json","hash":"82a16b76b4258a8cbeff4a4430dfc3f4d6f8eca3","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/tr46/LICENSE.md","hash":"9a4bb15fac72b22140d8f816f5458f78d6b6552d","modified":1495888608000},{"_id":"themes/tranquilpeak/node_modules/upper-case/upper-case.js","hash":"cc2dbbcf88c099a8c8a4db4c424e663ce9826a5b","modified":1450225475000},{"_id":"themes/tranquilpeak/node_modules/tunnel-agent/README.md","hash":"fab5bff0eba532373f36d827d9775105d64ff719","modified":1366607489000},{"_id":"themes/tranquilpeak/node_modules/tunnel-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1366607489000},{"_id":"themes/tranquilpeak/node_modules/upper-case/README.md","hash":"2eeec02b0cf6dfdd2881c754a3ef3340f7cbc348","modified":1450225513000},{"_id":"themes/tranquilpeak/node_modules/upper-case/upper-case.d.ts","hash":"a5610dcff5a1a1f54b45b84e2f82b8393aeaa682","modified":1450225534000},{"_id":"themes/tranquilpeak/node_modules/uuid/AUTHORS","hash":"55ad68da17b6319a39a82d7c7f7a3ea1e951dee8","modified":1490956608000},{"_id":"themes/tranquilpeak/node_modules/uuid/CHANGELOG.md","hash":"a0459326808a25568103193ecd56cbd0a33b3065","modified":1516124673000},{"_id":"themes/tranquilpeak/node_modules/uuid/LICENSE.md","hash":"65e6555c3308c1d9538808d6c67e75924b8ad912","modified":1490956608000},{"_id":"themes/tranquilpeak/node_modules/uuid/README.md","hash":"f1730b65bc3e2a769bedfba65060f3e8a0fed94c","modified":1516124695000},{"_id":"themes/tranquilpeak/node_modules/upper-case/LICENSE","hash":"3a7f886b632d2197676a40020d354e84b7860604","modified":1450225475000},{"_id":"themes/tranquilpeak/node_modules/uuid/v1.js","hash":"02e4c5e78eb8183c890753bb6ce6f1aa7479bf38","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/index.js","hash":"8e8abb1384d04d1ec5745c9824eee400f77536c0","modified":1498280690000},{"_id":"themes/tranquilpeak/node_modules/uuid/package.json","hash":"e79a54c1fdc2005d5a982d8679c0bf316615f15c","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/uuid/v4.js","hash":"af1ab906dd54d3df6319d096b3d5f10686aa7331","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/README_js.md","hash":"58e2418907131ae07fa5135ecf1985576dfd7fcc","modified":1516113876000},{"_id":"themes/tranquilpeak/node_modules/uuid/v5.js","hash":"5666846c28ee13c09c22763866145dffe92762bf","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/v3.js","hash":"8815de1e54c316b5fc537712462a07a45e229fec","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/verror/CONTRIBUTING.md","hash":"9147b55a7f13fa4e1db7fe3f83d4415be389ab8a","modified":1475636976000},{"_id":"themes/tranquilpeak/node_modules/verror/package.json","hash":"f0c7ed81df7d029e378d3b2f497c248125eeee48","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/verror/.npmignore","hash":"e9062d79bd70146c728778571cbdec1dfa54bcd0","modified":1475636976000},{"_id":"themes/tranquilpeak/node_modules/verror/CHANGES.md","hash":"557736d3be5363b84f160d480fd2143bbe324c36","modified":1493743176000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/index.js","hash":"3be166488a6ae06c43efb2532226d916f7ea0b3d","modified":1514857170000},{"_id":"themes/tranquilpeak/node_modules/verror/LICENSE","hash":"ca9d7f4229b385ade88c365257829b4005e85b9e","modified":1475636976000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/package.json","hash":"76be15fac6a3e214b04e8839e95d7a92605e025b","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/verror/README.md","hash":"4464bdc3da677f07d0f22e1b14f81a81cdee75f0","modified":1493743176000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/CHANGELOG.md","hash":"2dc8e5e372b3b1286185c68df547d8d515e2da5c","modified":1514946796000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/README.md","hash":"e61643ec10f2046daf30332d2c8fd55c1cb147c2","modified":1514945956000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/AUTHORS.md","hash":"f075e705a5f8e8ff0e7842de6a26ebf53e08f745","modified":1481623354000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/.npmignore","hash":"11c8e36af35ec98e1a2d7eddf45646dcb6653169","modified":1460742445000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/CHANGELOG.md","hash":"06dec0b7fb3130df4b0fdd1f8122bf2cd196e900","modified":1481626689000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/PULL_REQUEST_TEMPLATE.md","hash":"e88e8e670a11b57fc18bb19a15c1c0df04517a09","modified":1481623354000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1481623354000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/README.md","hash":"cf98261b2d1bc21a11ab1f28ee70cc2597205802","modified":1481627238000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/nacl-fast.min.js","hash":"08db9a8b57304c3c117c2a5ba117e25a0d816b34","modified":1481623484000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/nacl.d.ts","hash":"074079a1aca6756d5a4fec3f3fd4a9f6e9c00f66","modified":1481623733000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/nacl-fast.js","hash":"b8caf62487ca1fcba5ed9e47571bdff0806b8fc1","modified":1460742445000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/nacl.js","hash":"523fe36259524a0f35d056416a18de5ae96027a3","modified":1460742445000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/nacl.min.js","hash":"ab05565ba3e2cf29401962ddcd94912e54d916f3","modified":1481623482000},{"_id":"themes/tranquilpeak/node_modules/webidl-conversions/package.json","hash":"5336f3cf7e1af94c19db1e2e14d4a318bb1dd0ab","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/whatwg-encoding/package.json","hash":"865c92ee8c4e2f1217196a421fe6deba64074200","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/tweetnacl/package.json","hash":"3fdd56eb798c57a50d93420f2edf30ae1e34aa5d","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/webidl-conversions/LICENSE.md","hash":"60314089ff0e607f8aaf708db9791993dc91ce21","modified":1486836785000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/package.json","hash":"2842e26fd4d7a51d7a6805951e9fa4ce407e4b44","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/whatwg-encoding/LICENSE.txt","hash":"75a7010f177dd65249a42042aa44e893faa9dc07","modified":1508717590000},{"_id":"themes/tranquilpeak/node_modules/webidl-conversions/README.md","hash":"252e8c1ecf6fd2f02c38798bdfef6c16a51c2daa","modified":1487625478000},{"_id":"themes/tranquilpeak/node_modules/which/CHANGELOG.md","hash":"a7bf611b2407953d87e7a4618a18ed3462fc22be","modified":1501548883000},{"_id":"themes/tranquilpeak/node_modules/which/package.json","hash":"5fb3fb9946299cdf6c5721bd32ab52af3c176b29","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/whatwg-encoding/README.md","hash":"808b7a6cb33500319acaf30582facf6f69c49007","modified":1476582230000},{"_id":"themes/tranquilpeak/node_modules/which/which.js","hash":"f39455d215c8d397782f1efbc6e52254d0f9a4ab","modified":1501540268000},{"_id":"themes/tranquilpeak/node_modules/uuid/.eslintrc.json","hash":"cb4d88ea242b9938ab64c0445baa41f9ef366a02","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/LICENSE.txt","hash":"5cd9badc23e4c735ca1cbb6d65110c93c843b9b0","modified":1460756393000},{"_id":"themes/tranquilpeak/node_modules/which/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1416911659000},{"_id":"themes/tranquilpeak/node_modules/which/README.md","hash":"880b21360637c36418d55dd08211f1017c881df1","modified":1501540268000},{"_id":"themes/tranquilpeak/node_modules/type-check/LICENSE","hash":"7bc795bf398cfa51e99e85dc51931c3b0d1b5a79","modified":1428793762000},{"_id":"themes/tranquilpeak/node_modules/type-check/README.md","hash":"b24649e95ad0b070fbb84aae7a3b25147cad305a","modified":1451367634000},{"_id":"themes/tranquilpeak/node_modules/type-check/package.json","hash":"0702f0c6809ec3bdecc98e5f29379f58f90bfe5f","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/ws/index.js","hash":"9498ad1513c805bf0d295a1b7b85cec951a03a35","modified":1517814396000},{"_id":"themes/tranquilpeak/node_modules/ws/package.json","hash":"f66de6eb91e879d214b9df6aee9517ccfa640051","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/xml-name-validator/package.json","hash":"a2d9403a9095c73c5ff8b031736ca2ec8ec9fe99","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/ws/LICENSE","hash":"5267b8c02607adefda571a85283fcd110ae081ba","modified":1515071231000},{"_id":"themes/tranquilpeak/node_modules/ws/README.md","hash":"29fa3c5f213e299aded7a4c3db40f4a6caf915ae","modified":1519285790000},{"_id":"themes/tranquilpeak/node_modules/yallist/package.json","hash":"1d0d04aaf2a9d4486172c56ab147e7597d9fab61","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/xml-name-validator/LICENSE.txt","hash":"a6a5418b4d67d9f3a33cbf184b25ac7f9fa87d33","modified":1485727000000},{"_id":"themes/tranquilpeak/node_modules/xml-name-validator/README.md","hash":"1bc8e7409c9f0eb0d0d2d56887389881845c16f5","modified":1424801291000},{"_id":"themes/tranquilpeak/node_modules/yallist/yallist.js","hash":"c042dba0e8d1672a56531936a03533f5aaaca9de","modified":1489443354000},{"_id":"themes/tranquilpeak/node_modules/yallist/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1450425977000},{"_id":"themes/tranquilpeak/node_modules/yallist/README.md","hash":"930460a06c3414c2dceeeca378fbe0057779fab5","modified":1450554690000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/README.md","hash":"0c67cdf40a0c856aed5ce59fbd7bf12e6b0b0105","modified":1512513494000},{"_id":"themes/tranquilpeak/node_modules/yallist/iterator.js","hash":"baf1ff1052a38543b84d4bba85a62dc78b1ab107","modified":1489370602000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1431018471000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/index.js","hash":"756e8b536a238426b7eb92e4eb6d2e5ef938eccf","modified":1431018454000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/package.json","hash":"fa398415764dd34b59b5cd8e41c33c3bb6925851","modified":1521447495000},{"_id":"themes/tranquilpeak/source/_css/tranquilpeak.scss","hash":"e69c62b19ece4ab35d992e163b47f2a8374d7611","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/README.markdown","hash":"2c6150a823511e8ae14eaa7bc26334a1b8fc49f3","modified":1431018454000},{"_id":"themes/tranquilpeak/source/_js/about.js","hash":"47ecaf9e4532f4e36cf505de49a6a4357be030b2","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/.eslintrc.json","hash":"27d4e7223eee3eca7eb717bea2d28d35714eccbc","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/categories-filter.js","hash":"a5f3c4b9bbef1c8ec881eb39551060ca95bfbb33","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/archives-filter.js","hash":"8b8998b0e67c745a20450001c0739f6977b63309","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/codeblock-resizer.js","hash":"391c2c9135579ea50c2060e0612e7105e06a8ff7","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/fancybox.js","hash":"659aaad375ecff9748a5d3b0ff1378a549236513","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/header.js","hash":"c274adf8f8010b9f4ba46896063859ae3e413e97","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/image-gallery.js","hash":"90efc47246af69b7e17fab6e0bd1578043fcc2b0","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/post-bottom-bar.js","hash":"11502f8c52489350c857b935a1a63f46d7ca5496","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/search-modal.js","hash":"7ea9ab668bc3118c28e6212516f366ef764d3550","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/share-options.js","hash":"c2046697540786721ff7c4754774f94fcaf32696","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/smartresize.js","hash":"7342a21f94d7bb0525ccbd917d43a6824d7ae63e","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/sidebar.js","hash":"18dc623dd237c519bb79ce93283a5446cc11a487","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/tabbed-codeblocks.js","hash":"465a7a60c609a3b2ac182ac164feea2fea00e0ec","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_js/tags-filter.js","hash":"d33625df51d7b9788eeea338626f04387c96f053","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/clean.js","hash":"ea70743eb4ed0d9ead68d6fc8b65b9f936229a00","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/copy.js","hash":"9642e62ef9640bca9423dabefad8d0d1557cdcfa","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/concat.js","hash":"0c2c4dbbfac52f20a3035a2f8cd1c24f1759b17e","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/replace.js","hash":"30fbbf51b8b41a70f5e76a335b50565f280f29e0","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/cssmin.js","hash":"352185864437728c9c19169f4fec6fc3308e8b6d","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/sails-linker.js","hash":"c1103119ec7d1f04cfbb1cda83b40d11e8f2d218","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/sass.js","hash":"79d65bad62ca0c2a8a155a76faa2be3b0c361bf0","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/sync.js","hash":"fbc09d0ed201993bc1918223b8f8ad5b68f50490","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/watch.js","hash":"933eecd8a2506c627dbb9a1137305a16dd2d9f9a","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/config/uglify.js","hash":"57c7341a004b61539f5b3f02bd772f40494b8306","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/build.js","hash":"959da556fe191cf51b6349f4f499be91ad2d501b","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/compileAssets.js","hash":"a65122ba0d1a1b6044e3b635a644882577b628ba","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/buildProd.js","hash":"5d9e617bc926e1a9edd9d1baedc2e9e66e715a19","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/default.js","hash":"80174db9b8a729980770e639e70999ce5a816b78","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/eslint.js","hash":"718cd8a80d060e2587b84e0e20ceaa39c2cc9411","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/linkAssets.js","hash":"079cd274cb29f9984eb7150d88f61819d2ef6235","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/linkAssetsProd.js","hash":"37f2fab80f25757be3e34b40bc5a26a82f088491","modified":1521447424000},{"_id":"themes/tranquilpeak/tasks/register/syncAssets.js","hash":"0813093c3e252a58371db53e914183a97e3186a1","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_images/favicon.ico","hash":"5d0d4bc08a9aa3d5b30fa5d32d4ad6753bfede6d","modified":1527390039726},{"_id":"source/_posts/Swift-面向协议编程的那些事/binarysearch1.png","hash":"457a1acc0f931b39abc97df20b418fb07c04ed0b","modified":1552036545977},{"_id":"source/_posts/iOS核心动画-Core-Animation/1843604332017022316310707.png","hash":"41c7898879bcf58a79bbdda865e9f6b5c693fd0a","modified":1500633483000},{"_id":"source/_posts/iOS渲染原理/18436043320170222133323050.png","hash":"94b536b67a14b850316a0a9ed3acc01329681cc2","modified":1500633549000},{"_id":"source/_posts/使用Core-Graphics绘制图形/18436043320170222133323050.png","hash":"94b536b67a14b850316a0a9ed3acc01329681cc2","modified":1500633549000},{"_id":"source/_posts/使用Core-Graphics绘制图形/18436043320170222164112080.png","hash":"553d765b1615fc67fc3bf96b5fc516b0b30e5037","modified":1500633534000},{"_id":"source/_posts/初识Core-Data/18436043320170227162725013_640.png","hash":"ed8eefb5b661298c4ee555c7c2745fa1ce615f15","modified":1500633423000},{"_id":"source/_posts/在-Swift-中使用值类型/array_in_stack.png","hash":"055f229379b38fa686b0d0670b2c5503380564ec","modified":1552302872838},{"_id":"source/_posts/设计模式—开篇/design-patterns.png","hash":"67533076a4c1113fa7043599e3863553d01a44fc","modified":1527330631112},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/.keep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1448291593000},{"_id":"themes/tranquilpeak/node_modules/ajv/README.md","hash":"6ebc96729e4448008cb6dbf74129077aea5720c0","modified":1513455711000},{"_id":"themes/tranquilpeak/node_modules/escodegen/escodegen.js","hash":"a6e62a5a578beb2eede7d4e199dca523932f9d56","modified":1519667262000},{"_id":"themes/tranquilpeak/node_modules/jsdom/Changelog.md","hash":"9bd31f8e7ff1a4a40f6694653276ef3445c3f53b","modified":1517279423000},{"_id":"themes/tranquilpeak/node_modules/lodash.sortby/index.js","hash":"0048908d1fed5fb2aa127e7c1e42c75daed1f08f","modified":1471109685000},{"_id":"themes/tranquilpeak/node_modules/request/CHANGELOG.md","hash":"46ea7d087c5a3601be35a5ac891e117b338e2c2f","modified":1520851050000},{"_id":"themes/tranquilpeak/node_modules/lodash/core.js","hash":"78c0690a9b6fbe65dc7fb93bf3d4ef1c58a40afb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/lodash.min.js","hash":"38d456e835c954d1719caa4535cb0433aae78183","modified":1517704209000},{"_id":"source/_posts/Swift-中的-Sequence-协议/Swift_logo.png","hash":"5bde55ab659eac3e838d3b6ab637a246ac9e24d2","modified":1530877989402},{"_id":"source/_posts/从零开始开发一个-Status-Bar-App/cover.png","hash":"e762f5a2d1229cf8302c92685845fe61ffed5a06","modified":1527583877150},{"_id":"source/_posts/打造一个流畅的UITableView/yellow.png","hash":"543c810887bb14240c0cbb3d3f1b52200556a926","modified":1500633557000},{"_id":"source/_posts/打造一个流畅的UITableView/18436043320170221103826037.png","hash":"0dae4c64b2eb6b4c8c6e7104771a9857e2bea509","modified":1500633584000},{"_id":"source/_posts/打造一个流畅的UITableView/opaque.png","hash":"a8867b6e8c753898958feb33744908587b328813","modified":1500633566000},{"_id":"source/_posts/打造一个流畅的UITableView/18436043320170221104310077.png","hash":"70abecd7d9de35202ccc27687b05da265d952969","modified":1500633573000},{"_id":"themes/tranquilpeak/layout/_partial/post/actions.ejs","hash":"7f34de188df5a6ab277e0bd51298e979eaaacdee","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/category.ejs","hash":"d4b26aa8c66aa8dbfae7a4aafed874745efb2f8e","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/disqus.ejs","hash":"9e0d238ed918e3138d5a9bb23a90408669e19169","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/duoshuo.ejs","hash":"992368f8863f34d1dccf90c0cabc33d5dcdbe92a","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/gallery.ejs","hash":"09cd44fb300031266d04e7b2a4292f1a3ad5b574","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/header.ejs","hash":"3c7d8aaf9ab28a3afb435b567f892729778adf08","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/gitment.ejs","hash":"1dcfdca4d20bab5a43bda44cf37df506ab3a0fb7","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/meta.ejs","hash":"f13cb5089b0d5898c9606519d1c872725a63a5f9","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/header-cover.ejs","hash":"4d3a73d0c6f26769f778d02a559e5055ef1ee0ca","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/share-options.ejs","hash":"b9b8b62345194f07542332771e71dad37f991847","modified":1521447424000},{"_id":"themes/tranquilpeak/layout/_partial/post/tag.ejs","hash":"2a52f38fa359f8ec8ae776e44e92c48795e31272","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/abab/lib/atob.js","hash":"109fab4513b54f8893a6f22e843c12791ce98968","modified":1505957314000},{"_id":"themes/tranquilpeak/node_modules/abab/lib/btoa.js","hash":"11acd3ce99cd56feddba76e097165608168e6b2d","modified":1505957314000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/bower.json","hash":"8adb28494ef699ad1fe1accbd55fe77c6c3ddedb","modified":1490384385000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/gulpfile.js","hash":"11c31d66def6ee7d8f00abccc47a2c90ff147f40","modified":1489094010000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/package.json","hash":"f56fe5e4082f29fc76d4cc9e5a1bc8cbdbe55e12","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/README.md","hash":"93372703e5c10b8563012ebdf265226dde2505a4","modified":1496937320000},{"_id":"themes/tranquilpeak/node_modules/acorn/bin/acorn","hash":"385d05081580db6a79c543e00f9b934da7a209e0","modified":1515483524000},{"_id":"themes/tranquilpeak/node_modules/acorn/bin/_acorn.js","hash":"785a5a080fee18f8b43868d3f95f73a49996f3cd","modified":1518779934000},{"_id":"themes/tranquilpeak/node_modules/acorn/bin/test262.whitelist","hash":"7f0a0fe3a3bb1e64f60134727f0e870584886dd3","modified":1519286989000},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/acorn_loose.es.js","hash":"4744d05dba488545bacef3c5c4fb680103ac75d1","modified":1520501710000},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/walk.es.js","hash":"24873548ac8838b4be07810776537f8139682216","modified":1520335444000},{"_id":"themes/tranquilpeak/node_modules/acorn/bin/run_test262.js","hash":"836a56e1e530aedd6e3c5536b4372aeb8f9b0262","modified":1519287379000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/$data.js","hash":"5f17432e27da3807ae81e22675f57e3ebb8b7c0e","modified":1513455711000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/cache.js","hash":"ca2c2b8d327699c615a231ce5b3d2ea2207ca558","modified":1482868041000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/ajv.js","hash":"c8816bfe886c18246ca2835cb8dc97d626544380","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/walk.js","hash":"30c6c1fb8c1fd78e20ee5dad98eff4e7b34e00af","modified":1520335444000},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/acorn_loose.js","hash":"3633269a725a0c273dfe43e387633018e83687f3","modified":1520501710000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/keyword.js","hash":"126487f787ba5ecce7e2d6453bf758702b6e2d34","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/ajv.d.ts","hash":"dfe87dc9ac17bb3522c0f963b7ca9d9a250b49b9","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/patternGroups.js","hash":"f84d362d56b013e28659f14fe59c55ab92199f17","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/scripts/.eslintrc.yml","hash":"a9741a141e6a7184474a2cce07fa3b6651edd8d8","modified":1489340100000},{"_id":"themes/tranquilpeak/node_modules/ajv/scripts/compile-dots.js","hash":"4d065f52ccb7866d81ebb7fb707348505a9c93f2","modified":1509199092000},{"_id":"themes/tranquilpeak/node_modules/ajv/scripts/bundle.js","hash":"11eba606302f969b6d27975408a41b622a81f1e2","modified":1495201015000},{"_id":"themes/tranquilpeak/node_modules/ajv/scripts/prepare-tests","hash":"026a06e1e82e631f048ea3e1a92c93f4b21bce8a","modified":1489340100000},{"_id":"themes/tranquilpeak/node_modules/ajv/scripts/info","hash":"a95450a7ad65a96a1c5e6c35cf4b58b765d24753","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/asn1/lib/index.js","hash":"cbff145d47fb41eb1262f012a7024e7b0e527d6c","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/ajv/scripts/travis-gh-pages","hash":"d4319e13aaa6fab37f07912157029797da9ce24e","modified":1492433195000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/coverage.json","hash":"b1aa162a9facc96568432ccf22d7a16b5b2ba6a5","modified":1505146634000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov.info","hash":"63a8a1dcf572505ef3227284769d0be5d384b413","modified":1505146634000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/abort.js","hash":"440629b13ff27be58720005cb549f38903d80737","modified":1465585654000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/async.js","hash":"c5d0ae608872e8fcc47a465d51564b6576c49401","modified":1463755306000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1463755276000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/iterate.js","hash":"219e4942b78515ab728825d33473715c246fd081","modified":1465585679000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/state.js","hash":"fa825d1971532d33a039d634de8aed494c09c08a","modified":1465664364000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/terminator.js","hash":"1f8a78f42a386e65c9fb5cf621a90a2792dbb63c","modified":1465665521000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/readable_asynckit.js","hash":"6a883852b3639a6c4a7e7e4fdefa2bd08c6ecedf","modified":1465752133000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/readable_parallel.js","hash":"55538262a65702eb61a29e2ea3a20637490f96d9","modified":1465716911000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/readable_serial.js","hash":"05bbc69be79b76f58faeb2805697ea9469c60d89","modified":1465715271000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/readable_serial_ordered.js","hash":"bf2240383cb36d9a191d5ed87abb5d8674ddd8d4","modified":1465859663000},{"_id":"themes/tranquilpeak/node_modules/asynckit/lib/streamify.js","hash":"cad24d3ac61e7d9ad281c5190c5cc4e4ba8e6f3b","modified":1465693502000},{"_id":"themes/tranquilpeak/node_modules/boom/lib/index.js","hash":"ea4dc209106e75bc76727813437fd42b0dc24cc6","modified":1490707345000},{"_id":"themes/tranquilpeak/node_modules/combined-stream/lib/combined_stream.js","hash":"90d3d9ce7524d0d4ab781e30bac86a79613ec29a","modified":1518452880000},{"_id":"themes/tranquilpeak/node_modules/combined-stream/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1518452620000},{"_id":"themes/tranquilpeak/node_modules/content-type-parser/lib/content-type-parser.js","hash":"b6b908d4503b4dd50f33ec5f8afcea6caff05b70","modified":1476565909000},{"_id":"themes/tranquilpeak/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/lib/enoent.js","hash":"6318a907092ab4ff4ff31305e4a272f5fd877a9e","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/lib/hasBrokenSpawn.js","hash":"bb8d6bdbd5251c907d86a4d57cd6623b3ade53c0","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/lib/parse.js","hash":"d2fa758fe5a3f564c953b1e9203d4eea138102ab","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cross-spawn/lib/resolveCommand.js","hash":"2d7efa07faaa5429bd7ac215ec720fcc3d0657e9","modified":1474803762000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/lib/index.js","hash":"b40ca0c2e3fddb112493d7740f3710cf186e138b","modified":1495952606000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSDocumentRule.js","hash":"0ee1f0b41c721f75eed11c4f7fb1e87f585edc5b","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSFontFaceRule.js","hash":"f1e699079b71a477dc9fc46a1f1bb9007017d0ae","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSHostRule.js","hash":"7c7f61ef2195e042bb8a1fb43d60a7b7c41b1915","modified":1472868517000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSImportRule.js","hash":"1081c7a454a5ec42e04aa8e7f9cba5906b4f6bbb","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSKeyframeRule.js","hash":"f5d25f1a629f3a82f9de69af784fa18ee5e58045","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSKeyframesRule.js","hash":"56c4495b14eebac5959c5535b35922382ecf12cd","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSMediaRule.js","hash":"8b11323965629b2ba9aedda39e647ea6d08730ff","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSRule.js","hash":"483fe6b20de46c2badf3c4f91c5ee34bc5ff4758","modified":1472868517000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSStyleDeclaration.js","hash":"7b6c91c5d0cc6718b0a7f3c46c3ab58f987fc38b","modified":1472868517000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSStyleRule.js","hash":"3cb2d96d5b34e38eb010c11f91ab4ecc3f347a92","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSStyleSheet.js","hash":"9d17a8969e2b4a1e99d9797faf01f9adda9a0928","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSValue.js","hash":"0e3fb84d1cae4ada0688ea12f9f53449214ae05b","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSValueExpression.js","hash":"3331e6fa0a0e1434772b11fade8cce0dbc9c866c","modified":1392302520000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/MatcherList.js","hash":"31523605a86e9f7ed2ee1ef5ad8f2afd2104e103","modified":1361221576000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/MediaList.js","hash":"96d0254ca720a8ad15134de3dce2cc1218902ee1","modified":1361221576000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/CSSOM.js","hash":"de6a578e0b719a26280bed0f83436a57259af7d3","modified":1361220883000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/StyleSheet.js","hash":"2a58c6d74043ac82e4b92a3ba689441e4205553b","modified":1361221576000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/clone.js","hash":"796ddf9440b55a5503fd07476d1244786ed0712b","modified":1386274514000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/index.js","hash":"69169ea98493bbd40bc5949c69eb3f0297067649","modified":1361220883000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/parse.js","hash":"2027b43fe7bbb8872c285d85f9277384df227733","modified":1484955905000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/Parser.js","hash":"ec29a22b0fdb15654cec80a37b91c4f2b7aec76c","modified":1299423232000},{"_id":"themes/tranquilpeak/node_modules/cssom/lib/snapshot.js","hash":"87095715792357d363969f09660584ce2c723030","modified":1324770278000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/CSSStyleDeclaration.js","hash":"4d19555e852a9b7b179506002a39bf34ec8be618","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/parsers.js","hash":"3fffc495ed77b6e3671bc239e618662e4ccc0df1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/scripts/generate_properties.js","hash":"91344319ed43613651aa4b6acd1b9ff3daef9c77","modified":1471063283000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/scripts/run_tests.sh","hash":"103fcadde5c5652110f44563b7ea096762fc1eea","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/tests/tests.js","hash":"de1d2beb9a9305fdb358aef4f7a3d8caddc73859","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/dashdash/etc/dashdash.bash_completion.in","hash":"749ea2069b183cd2ef4e83f496ca754eef30c3fd","modified":1479854012000},{"_id":"themes/tranquilpeak/node_modules/delayed-stream/lib/delayed_stream.js","hash":"097ab12e3837896d11d3f1d2c7a891d177b493c4","modified":1430160544000},{"_id":"themes/tranquilpeak/node_modules/dashdash/lib/dashdash.js","hash":"bcac2fce732aa9b1084e924d9ea49189d20cf60c","modified":1464847153000},{"_id":"themes/tranquilpeak/node_modules/deep-is/example/cmp.js","hash":"1425f9e4b03be1f7749131d0faa996e4fa9c5fb5","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/domexception/lib/DOMException-impl.js","hash":"1ac133b4f8fb20662b0b218161c6baed86bdcaa0","modified":1502680457000},{"_id":"themes/tranquilpeak/node_modules/domexception/lib/DOMException.js","hash":"2f2d3577414424f668c2393a480fe765a30def1d","modified":1516581143000},{"_id":"themes/tranquilpeak/node_modules/domexception/lib/legacy-error-codes.json","hash":"af64c843886906c43c12732f2e86bb9c3a79835d","modified":1502679486000},{"_id":"themes/tranquilpeak/node_modules/domexception/lib/public-api.js","hash":"55499e302b579a4670efcdf03703c5a037a7c902","modified":1502679486000},{"_id":"themes/tranquilpeak/node_modules/domexception/lib/utils.js","hash":"c9f031b70bd3dea6748a32902aa40bd7f56efcde","modified":1516581143000},{"_id":"themes/tranquilpeak/node_modules/deep-is/test/NaN.js","hash":"f910aeb95568f18c50e23a8abba0c3501109c730","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/deep-is/test/cmp.js","hash":"b90e11d68471e025811f705870bf50b57e158126","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/deep-is/test/neg-vs-pos-0.js","hash":"87116cb7972211ca6c25d48045941cae2bc46c54","modified":1408910480000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/lib/ec.js","hash":"d9a60c831fe91bd2c62ff3e3c9675b0379ef504c","modified":1448288163000},{"_id":"themes/tranquilpeak/node_modules/esprima/bin/esparse.js","hash":"3d6b8fda44ca6d8f347c35d442c6dd838646f8f1","modified":1481604347000},{"_id":"themes/tranquilpeak/node_modules/esprima/bin/esvalidate.js","hash":"368bdfb162d02492c660e74657608f0ce4865eaf","modified":1481604347000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/lib/LICENSE-jsbn","hash":"4f94910918b5e57f3e55c7387f43b0d6293a4319","modified":1394075812000},{"_id":"themes/tranquilpeak/node_modules/ecc-jsbn/lib/sec.js","hash":"b1632526290dfddc063f05ac6ed29cc40bd9e221","modified":1448288300000},{"_id":"themes/tranquilpeak/node_modules/extsprintf/lib/extsprintf.js","hash":"2331ac9de23b7cc92510c3ead98efa1a8a2de8f8","modified":1425687068000},{"_id":"themes/tranquilpeak/node_modules/esutils/lib/ast.js","hash":"646109f8189f1a1b89e7a14354413dcdd7c6a5af","modified":1426086716000},{"_id":"themes/tranquilpeak/node_modules/esutils/lib/utils.js","hash":"e5d06e7c38a9578a0d95375acab763b5b8e0480c","modified":1426086716000},{"_id":"themes/tranquilpeak/node_modules/escodegen/bin/escodegen.js","hash":"ea70dd92f7321b01fd3aea944059dfc7ab7ff82e","modified":1430234946000},{"_id":"themes/tranquilpeak/node_modules/esutils/lib/code.js","hash":"dafc933c43857065c4f3fb9239efdd5c0d4aebb8","modified":1426352525000},{"_id":"themes/tranquilpeak/node_modules/escodegen/bin/esgenerate.js","hash":"00b8be70a2983d1dffae6c1395a70ea39f0f3a53","modified":1430234946000},{"_id":"themes/tranquilpeak/node_modules/esutils/lib/keyword.js","hash":"12efd22a7f3c5b9718de1ba4d0e10c432bed524a","modified":1426261746000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/example/nested.js","hash":"1259337a975367c26a59b9d8dfaa91e0f0a612b5","modified":1508836326000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/example/key_cmp.js","hash":"9e5797f7e3c351f6bfe5c4c72304b3048d1515c8","modified":1508836326000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/example/str.js","hash":"9145496a1e5d513eda1a10298b412b3becf68d71","modified":1508836326000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/example/value_cmp.js","hash":"71a64ddc23c9ded23dc156a9a2a7baf55846c1ec","modified":1508836326000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/benchmark/index.js","hash":"17619f7e28ced52a18ff262b4e16d4dad2105deb","modified":1508860414000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/test/cmp.js","hash":"deff3391b199444278e9cc781fdf41b9ccf5bc98","modified":1508841742000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/benchmark/test.json","hash":"9fe75dfdacdf2fa66188890ed112d4da355815f7","modified":1508861235000},{"_id":"themes/tranquilpeak/node_modules/form-data/lib/populate.js","hash":"1808bbf4f1478a79ea4f00b38bf46983e48c0ff3","modified":1472196493000},{"_id":"themes/tranquilpeak/node_modules/form-data/lib/form_data.js","hash":"0597bc0beff7f785b19e8be3e7565d183fb642e6","modified":1503584376000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/test/nested.js","hash":"1d7b098c0ce2bdc5549c083ab09a2d7470734a90","modified":1508841718000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/afterRequest.json","hash":"f7f70adc3b0512cc2e04133192ea4f87e0146ab1","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/beforeRequest.json","hash":"0722001e46c933b79fec640cae9cd1ffa39dcca7","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/browser.json","hash":"4db37d46769f3ecf86aa5224c185d04d4c83f56a","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/cache.json","hash":"50bb69d7fdbbb6155f26a04ff72d00551eb36202","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/cookie.json","hash":"752404cc8cbd04ce0ac8c1fa32eb2dd8e248826d","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/content.json","hash":"81d4f4003ddd3350eff241826c14c0b9cc6d7444","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/creator.json","hash":"1b471a27337a94c37d4c5ddc6e15b6ba14b7f422","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/entry.json","hash":"ec3c862d75ce851061e3c9c41dab28e3f7290795","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/har.json","hash":"e91c94dc990dce4a0f4f20f3972fd34d4a40cb76","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/test/str.js","hash":"1e4807d200cc96dcddbb34ad2777a0b86060661c","modified":1508866010000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/header.json","hash":"751bf4dbbefb43a6f8752ae6c82b1c18be523cee","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/index.js","hash":"1e6ac13e2a43e93530c96896efbf395028e621a1","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/page.json","hash":"684677171808e6ca501390734f451eebfc981213","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/pageTimings.json","hash":"2646f23aaf7706b16932e2d0e0f407a685483b90","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/postData.json","hash":"753ec1ce064487fab23fbb0dc8cd3c14fdafc904","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/query.json","hash":"da4c7add90f000ded1e872114ba3630460ccea61","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/request.json","hash":"799df36973dfea0675ee63e187a05e831ee74361","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/response.json","hash":"7a5c6856928f38525919c20e71c8cb10664f240f","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/log.json","hash":"39e98d99850119a095f065ab923ac951ef2e55ef","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/fast-json-stable-stringify/test/to-json.js","hash":"2928abc4469f3b1b8af084795138a4eb82d83375","modified":1508841670000},{"_id":"themes/tranquilpeak/node_modules/form-data/lib/browser.js","hash":"0ae55bb7ee9e39bd3dda8d9b6e6d6bff3855d121","modified":1478555747000},{"_id":"themes/tranquilpeak/node_modules/har-schema/lib/timings.json","hash":"2f02b1a5200eea10b0171913e032cc4d74f015b1","modified":1492544568000},{"_id":"themes/tranquilpeak/node_modules/har-validator/lib/error.js","hash":"80e4d7c599adb31f6245d6b79bcc190f6ca061f5","modified":1494776680000},{"_id":"themes/tranquilpeak/node_modules/har-validator/lib/promise.js","hash":"795a6e0ce4e19873a294c0d77171f6ffa116c03a","modified":1494776680000},{"_id":"themes/tranquilpeak/node_modules/hawk/lib/client.js","hash":"dde7c346aa41dd6c86ba29f234a6fe1a95e9d1d6","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hawk/lib/crypto.js","hash":"830f7ae29a9afab503a2273fb1032c6d0eb24efe","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hawk/lib/index.js","hash":"b688552e098a688d71ed25f5dc588292267146c7","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hawk/lib/server.js","hash":"3fcfe52b86c1eebccf8ef78f3fbb54b2f84359ab","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hawk/lib/utils.js","hash":"60568c4e6b504e9881ed1f288528ccd3413beaac","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/har-validator/lib/async.js","hash":"c6ddce14dd933af753159927bd44344fca94f973","modified":1494776680000},{"_id":"themes/tranquilpeak/node_modules/getpass/lib/index.js","hash":"3e1d47c5742292c6964267fe3b1ef54a5918f419","modified":1493163595000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/cache_stream.js","hash":"9346587fa9871e9a4529592e91a997e5b0a41ae9","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/camel_case_keys.js","hash":"0e506d8ee3dfae6ab57d1a04c7e6e4d82287b1db","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/escape_diacritic.js","hash":"9b62a42bde7671daba738e6652baee44ba30d6ba","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/escape_html.js","hash":"f3c3f1a422cd2e519a805fbdbf5f20b63a10fd9a","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hawk/lib/browser.js","hash":"75bce661dbc1f292b33a1d7a6f7568dcaffe5e73","modified":1500338377000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/escape_regexp.js","hash":"c74fc0d14a2930007336aa11e8af4224cefac86c","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/hash.js","hash":"95b9f5fe38c62a76eff26c6e9771a4267a0e284d","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/html_tag.js","hash":"38f1df0d200011332249bf599980f1476f723d9c","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/highlight.js","hash":"8d40d3394f4351a49ba5fc3a4b56d5b32e93d1b5","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/index.js","hash":"721f908f2c5e561a11cbee61f2f3b753066c1618","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/pattern.js","hash":"384485bf36b97513c7b61bff21af43570ca2c8fb","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/permalink.js","hash":"0ac9bb1eb47dcb79cff07a6631fe2714eac5fe1c","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/slugize.js","hash":"662f671305418218da6c22af093dafa90b21c674","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/spawn.js","hash":"8f3edb5b5268cf7d3abc1c86989d01da95f8a8f5","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/truncate.js","hash":"102d57d757c88853ccc57e81747a843a0acb7eb7","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/word_wrap.js","hash":"68a9e133470558981bf038a75ef9f11c5145955b","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/lib/strip_html.js","hash":"f20be4f49702fd241dcbf65fa73f01ff42028550","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/highlight.js","hash":"b7e74cd3626a38b9fa3e14ea310331e16e1d8df6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/hawk/dist/browser.js","hash":"403f1bab7ff688915a7b56214033aa65ee83978f","modified":1500338423000},{"_id":"themes/tranquilpeak/node_modules/hexo-util/scripts/build_highlight_alias.js","hash":"8a999b74cd11da29e6092a26469b29a770981436","modified":1513819513000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/index.js","hash":"0d21a2bfc605735e074bd0fd91a69bff56b758fe","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/api.rst","hash":"7ea61691713b45ca2bba06ccd64d382d05296ccd","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/building-testing.rst","hash":"435f8700ad54ebdc199fea29bd5709cb50c16356","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/index.rst","hash":"64ff5bc891f7cc8bf28d987efe64328d981c6f25","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/css-classes-reference.rst","hash":"639242ca0eaa4a055b47fa12740da8287bc7c74d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/language-contribution.rst","hash":"755e23f46a3ff5d2f59ebef2a6c6d7a5317bcc40","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/language-guide.rst","hash":"5a7cf267ab1661bef71913c7d16167043e3d2657","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/line-numbers.rst","hash":"fb2b891ec631ba4e18214d467114bfb026e42c5c","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/release-process.rst","hash":"f33baf124c0d5fc87b00ba4d6a391ee8eff0900e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/reference.rst","hash":"e43d2d965426401ff22c72b60fcfe77a08b745ed","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/hoek/lib/escape.js","hash":"c3d4649b8dee9ae95fa19e5c352be2562cd5bb88","modified":1518711578000},{"_id":"themes/tranquilpeak/node_modules/hoek/lib/index.js","hash":"74a37df150f078e36f4cdb15979105ee1c0566e4","modified":1518711930000},{"_id":"themes/tranquilpeak/node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js","hash":"19e5c9eed0c33b3ce951991a2f57754fd65797cc","modified":1476591711000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/style-guide.rst","hash":"6348488507d7deaf05b6c8c43470b033aef090d5","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/docs/language-requests.rst","hash":"d5de8f9936fa7450384696c4d2454e28c5102a6f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/darcula.css","hash":"7740224d07375ddc321147dffabbfa83e39f0d8b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/purebasic.css","hash":"f353a2cedf3f261a0676fce7c824bdd2e8197775","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/xt256.css","hash":"bbe28ec69177699cb6300d777598adf6323f7861","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/font-awesome.less","hash":"9ffe7422dc235450a21f019f410ed359ed151f4b","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/mixins.less","hash":"3c5b36b0069372b525ed8bbbcf6b3d4d2bed4e78","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/icons.less","hash":"0285a999eb1adad868366678c2d9365b77186a45","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/path.less","hash":"1afb4a849059631f76ed2a519d7fb1bd0af14802","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/variables.less","hash":"8a5c800747705df16117cc598c1b9f512e873bfe","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/html-entities/lib/html4-entities.js","hash":"a96528844c399772b52fbbac531b405990b16e5f","modified":1493034265000},{"_id":"themes/tranquilpeak/node_modules/html-entities/lib/xml-entities.js","hash":"4cbf15e7e85a5d7b7af287f48efc75bf66701e1f","modified":1493034265000},{"_id":"themes/tranquilpeak/node_modules/html-entities/lib/html5-entities.js","hash":"e596021d6845ca29a00a19e65bc8134b7a642101","modified":1493034265000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/less/screen-reader.less","hash":"71139132f170ebe7712836210f4d2c4905151899","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_animated.scss","hash":"8daf189b2f8a404495b8424b6fd1ba630dd1c2dc","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_bordered-pulled.scss","hash":"164b6a0a2b307cd293f4a914ab0fcdf643950374","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_core.scss","hash":"55a14a34267edc401b82e5ee41d8bd84fbb5da3f","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_fixed-width.scss","hash":"224417ca266c657849afb2bbcb6dc455894ff387","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_list.scss","hash":"4b53ee01513df8b9ce76442b2d8f1851613a435c","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_mixins.scss","hash":"4f3881034a4c11cae8cc915f288477b498a357a2","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_larger.scss","hash":"940e1c5ebc690283bfaee92560cf15fabedbf6a9","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_icons.scss","hash":"830e0183337d16c07b1c63838f7593a33ee87b15","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_rotated-flipped.scss","hash":"ca08a0af3da63c2f2a7d3c27a8747637744cc785","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_stacked.scss","hash":"cf6752ee609af36eb293a7197c88d31ecacbbc74","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_screen-reader.scss","hash":"2d8563c488f68e75a28d540dd89301ee4ee08c97","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/http-signature/lib/index.js","hash":"996c8efa1d7896034c980e498bec866824662d52","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/http-signature/lib/parser.js","hash":"993a592d1b1c86a21b77a66f84e8cdeb7b6b780b","modified":1503689277000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_path.scss","hash":"080158aeb1bf6df59ec98b2bbed44da61d9c9ca3","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/http-signature/lib/signer.js","hash":"65d73fbe8f2c699e36d290e0784ec926d68b06ae","modified":1503624550000},{"_id":"themes/tranquilpeak/node_modules/http-signature/lib/utils.js","hash":"dce96d033869c424854178ae71991fe39b7c58b5","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/http-signature/lib/verify.js","hash":"f0603457d003b72d484d608b266566e771644438","modified":1503623992000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/lib/bom-handling.js","hash":"5c6518ce3acc35c3e1da961bc02c110e08f81db2","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/lib/extend-node.js","hash":"8e7df0d4fa736d8b3b9c1ea262fbcac929b4d3e8","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/lib/index.js","hash":"c1bb64e3c5923c70bce885990f25f186be9a8a38","modified":1505011847000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/font-awesome.scss","hash":"dd83648ea5bc832f87c3c1bf956c54dec065a9bd","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/lib/streams.js","hash":"3982c3e4c6abe5ec4064a8c5196395067d0c504b","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/scss/_variables.scss","hash":"0d6d70535104b42e60d7f44ae6ccf9de023a7b8b","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/lib/index.d.ts","hash":"13f473bf92d94868d3d1942fd367370928f4d482","modified":1493615205000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/dbcs-data.js","hash":"1cccef8583ac6e070e9d911760633ca8d9f7ca8c","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/sbcs-codec.js","hash":"e66737b7b86d85e7caf45dc7553f327d0aafea8d","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/internal.js","hash":"a74238a0b21cf96d189f97efa9b9c53bf22cc6fa","modified":1505012421000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/sbcs-data.js","hash":"c62371ecaf00a91881b8bd38af18940a44a3844c","modified":1505012421000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/sbcs-data-generated.js","hash":"8ceb7540842b7fb237391ec3c324035a3feb7336","modified":1505014655000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/utf16.js","hash":"2a3ac83eea5de8423f678e5fec4a013a779d5d84","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/index.js","hash":"79e395b6dfafd0ae516e18c81b828ef3de0c76aa","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/utf7.js","hash":"bf77c42a6d5a6dd62ee5da66e5291511cf66d247","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/dbcs-codec.js","hash":"bd91f4f9da630d02a772218dc5d0f8769543f5b1","modified":1492762970000},{"_id":"themes/tranquilpeak/node_modules/isexe/test/basic.js","hash":"5ecbf6a46a596324cb23fdca6df539be08a4f4ee","modified":1490230070000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/core.js","hash":"a6f0c873c2fd0acdda1e73790261ef2363624423","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/callbacks.js","hash":"dee69771cee39bbdc468d71c332bc658fca4e56e","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax.js","hash":"d95ec866b372e569c6024cb92ac0537a0ec92685","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/.eslintrc.json","hash":"7a9992fd01d4efc3e15e91a6ec3e2c25a7e6a491","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css.js","hash":"eb7827c78fe8f9a3c41cc921d9c35207040480f2","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/data.js","hash":"99f0831f89d29a8f8ed5135b587cf5065e5e637a","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/attributes.js","hash":"51b6a2792971b5f6704b643dd24b3a7f8ecbe280","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/deferred.js","hash":"19156bcb8325aceff14543fc721b80f1cc1a07ed","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core.js","hash":"a6f0c873c2fd0acdda1e73790261ef2363624423","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/deprecated.js","hash":"1dc08f16edb346a032596274f3323b4ae745aeec","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/jquery.js","hash":"adacb906902cb4649598fd9a5fdc71f66f589eef","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/dimensions.js","hash":"6b363757506d42bf89ef008cb261012fdf457376","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/event.js","hash":"3a60c990879730735977259e288b96f07f03bb5e","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/effects.js","hash":"363d91ccf00973615187b4ef0f1e464113c455a6","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation.js","hash":"71ea4101149ac73b1c05cd26a9ef683f9ca7a8a2","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/queue.js","hash":"1bfb8e12c5610ed3d4afd501b216234c52270e98","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/selector.js","hash":"9540e63e778974942fb37eafc63683d9b41f5d06","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/selector-sizzle.js","hash":"8582f824de84b03dc6eda9c9f81e4d425981fb7a","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/selector-native.js","hash":"d40c83574b4de18efa3200ff80a9f2bbcd47e822","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/serialize.js","hash":"09ef78b9720e6c645005556a1c8b4c304026ee9a","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/traversing.js","hash":"ca1ea441c24df2b8909e432e4a84ed552134b1e0","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/api.js","hash":"0c7b3ed351bbe7ecc859fa06ceb07fc6c951a624","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/wrap.js","hash":"58b4741817cdc81c0a1f3cacf3acb93e63695968","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/offset.js","hash":"d0d3dbb573a66806fdfe28e11f868023e9fe55a2","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/old-api.js","hash":"6ab347bd888c0d506a79412bdd79bf9b2559e5dd","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/old-api.md","hash":"9c2e81f7d2d23e2c108eb9031fbdc2489735036d","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-00/json-ref","hash":"b5f7e93c3edc2eb501e913441ddfdeef0c04386a","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-01/json-ref","hash":"2132a5a9319f8bf190040b49150e005e0916ed22","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-00/schema","hash":"253c4fcfccaf49023c10a1a92d81cc3d21344e8a","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-01/hyper-schema","hash":"51802f7884c813fe2a002776aa97a440c7442d9a","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-01/schema","hash":"10942d74811e1e16425e6219b0ba808b493321ab","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-00/hyper-schema","hash":"a5972bcc99abc4936ff350f116a69390f8ac99e8","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/hyper-schema","hash":"552aaa9921cbeb19c2c9b485e64965f7a98e22fc","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/json-ref","hash":"9f121cedcda14cbdd55e2fd80a96e289d9a1f2f9","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/links","hash":"5f1601142843a6028beb35cef8b851413a4dfa91","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/schema","hash":"4b500e66b7c4a36bc4d3ff6da089d6228c54f94c","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-04/hyper-schema","hash":"362194bf4c6690db17b848c1a796ef747bf7a6c1","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/lib/validate.js","hash":"c336cd87629b485336a56636cd36144220281161","modified":1472877970000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-04/links","hash":"92cd269ccdfe3f3bc673205133cb9940afa465c4","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-04/schema","hash":"7a6839ef21cf49fd6bdc687be7dbfbb92c97ac7c","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-00/links","hash":"490c91fb104a16a76290377797a5411d21379614","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/lib/links.js","hash":"bc70a0d21a6639c78017ad1ab1254d8e1516bc75","modified":1472878014000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-01/links","hash":"09b2131c15d754a61a1baf1158a8e6c73644287f","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/test/tests.js","hash":"f3f322d2cec777f57df41b071818a05e97d35f2a","modified":1472871200000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-02/hyper-schema","hash":"117eb70efaa120edeb97caa6ca7e53eae8f761e2","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-02/json-ref","hash":"31b76b211e24e56b0ff5ae3ba739835039cd96b8","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-02/links","hash":"f8a835ea08959ceca9682cf1c30df6d5cf9ff033","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/spec/index.spec.js","hash":"606c62767ff862bf33c8dc6b7ade63f616fb428a","modified":1497557340000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/spec/.eslintrc.yml","hash":"d105e036ac5efe87b86bbe2a32afd751f03d9e14","modified":1497556337000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-02/schema","hash":"ba84a3e7e9332328db986a1123084f2a6dba57f7","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/jsprim/lib/jsprim.js","hash":"794c578fd13608d65a0469ed74ac30fd3d15ebe3","modified":1494025745000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/test/mocha.opts","hash":"98216b4fbc2e0c1c17ee946b02272a26fcc1f4c1","modified":1431999690000},{"_id":"themes/tranquilpeak/node_modules/json-stringify-safe/test/stringify_test.js","hash":"4760401b04513ae7eb79fff0e1239a9947a8af78","modified":1431999690000},{"_id":"themes/tranquilpeak/node_modules/left-pad/perf/O(n).js","hash":"78d2987b519089375e46725d2c391215e444527b","modified":1503988113000},{"_id":"themes/tranquilpeak/node_modules/left-pad/perf/perf.js","hash":"962b231a84ed08ff66191db4b761adeda9802371","modified":1503988113000},{"_id":"themes/tranquilpeak/node_modules/levn/lib/cast.js","hash":"9c71da793fbc3afb65fee1771e43af53fafbf9f5","modified":1451367015000},{"_id":"themes/tranquilpeak/node_modules/left-pad/perf/es6Repeat.js","hash":"ab513e94415d203c6c6f82bce135881bd9ed7cd8","modified":1503988113000},{"_id":"themes/tranquilpeak/node_modules/levn/lib/coerce.js","hash":"f1e0c246a58647693045831c4677a4921b55a3ba","modified":1428793638000},{"_id":"themes/tranquilpeak/node_modules/levn/lib/parse-string.js","hash":"64ccdc140db4bb86d7efe7514a3cacf2ec535b68","modified":1451367016000},{"_id":"themes/tranquilpeak/node_modules/levn/lib/index.js","hash":"615354af2c1537b9c53e28df01f9ec422806b971","modified":1451368289000},{"_id":"themes/tranquilpeak/node_modules/levn/lib/parse.js","hash":"417fd1480398bbb329be02a1bbe81afe7284e0aa","modified":1428793638000},{"_id":"themes/tranquilpeak/node_modules/mime-db/db.json","hash":"3ca6d8ba50132fa9c3eed313dba9c83c97bd3b55","modified":1518757209000},{"_id":"themes/tranquilpeak/node_modules/no-case/vendor/camel-case-upper-regexp.js","hash":"5bd9812b844c336eb117c1571ac7ff36ba747077","modified":1504891743000},{"_id":"themes/tranquilpeak/node_modules/no-case/vendor/camel-case-regexp.js","hash":"2614bb1d67a0994aab917ce1fb9d55ccf33d0945","modified":1504891248000},{"_id":"themes/tranquilpeak/node_modules/no-case/vendor/non-word-regexp.js","hash":"921f144a87b5cab2d484a2c256889fc2bed08268","modified":1504891248000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/nwmatcher-noqsa.js","hash":"0d48937ef2ac9e7e43f3314bd770e111ba91051f","modified":1520442518000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/nwmatcher-base.js","hash":"b2c61b73315a65e2aeb26700dee7df52bcd748a5","modified":1520285767000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/index.js","hash":"a477ab369cf920815cb56f8c929dab7fefc8f667","modified":1515875439000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/index.d.ts","hash":"ff394a377dc5ca1a7c5052c875c2f8938f9e7622","modified":1515875732000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/nwmatcher.js","hash":"f84d5f91265d86374cf2b61943bbd625eb1b381c","modified":1520285841000},{"_id":"themes/tranquilpeak/node_modules/optionator/lib/help.js","hash":"c202a5bfc321d29a9e81ce2f5402e4ff72276b4f","modified":1474486657000},{"_id":"themes/tranquilpeak/node_modules/optionator/lib/util.js","hash":"d08a1850283d353e1db469adce4cc9e6bfa0a1e7","modified":1474486651000},{"_id":"themes/tranquilpeak/node_modules/performance-now/lib/performance-now.js","hash":"441fe91cf077ba520a22bb82487439a292ed7e2d","modified":1487514525000},{"_id":"themes/tranquilpeak/node_modules/optionator/lib/index.js","hash":"a29b20e8d699b1d05283ad14a55b2c58b0138f27","modified":1474486992000},{"_id":"themes/tranquilpeak/node_modules/performance-now/lib/performance-now.js.map","hash":"50bdd3412d57f86521de00afc24177415ee70f3b","modified":1487514525000},{"_id":"themes/tranquilpeak/node_modules/performance-now/src/index.d.ts","hash":"cab5735ccbd2666329124c3284b12c8aaa4a5881","modified":1487513961000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/mocha.opts","hash":"bb896e2b4872a971113be6df6cf74bb1ad34cdbf","modified":1483443554000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/performance-now.coffee","hash":"9a86c23591031408a9e2e5b17a9600bc82556f28","modified":1484002078000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/scripts.coffee","hash":"ac50e35ea322260600fe12cfb49af3d37678d77a","modified":1484000743000},{"_id":"themes/tranquilpeak/node_modules/performance-now/src/performance-now.coffee","hash":"1afaa86418105a30940d34c3f84dcbabced93229","modified":1483849977000},{"_id":"themes/tranquilpeak/node_modules/pseudomap/test/basic.js","hash":"dccd686c9c0f397d56318e99c89fa29fe4db84c2","modified":1448663157000},{"_id":"themes/tranquilpeak/node_modules/pn/scripts/generate.js","hash":"3ffdbe12758babfeb7551386af5e7f1fd9ffb507","modified":1515010269000},{"_id":"themes/tranquilpeak/node_modules/pn/test/custom.js","hash":"d79ab100f9096ba3ff06aeb08465917be2116d3c","modified":1445978181000},{"_id":"themes/tranquilpeak/node_modules/pn/test/cp.js","hash":"0ca85918bb38265c15a9219604918421bfdb0311","modified":1418077406000},{"_id":"themes/tranquilpeak/node_modules/pn/test/fs.js","hash":"5905ab4f2b301559a398ffcfc51404f31865aa7a","modified":1418079534000},{"_id":"themes/tranquilpeak/node_modules/pn/test/load.js","hash":"7bd8a5bc80d001b47a2c422134beef2b0a684338","modified":1418075017000},{"_id":"themes/tranquilpeak/node_modules/pn/test/timers.js","hash":"3c9a22d7030da9d2153cf9278d5422d24e2df9ac","modified":1515011262000},{"_id":"themes/tranquilpeak/node_modules/qs/lib/parse.js","hash":"bcbbc2323305b1ce595610a585b916c9662821c6","modified":1504939441000},{"_id":"themes/tranquilpeak/node_modules/qs/lib/formats.js","hash":"268fd11b0d3295eb9e87943e70ef9f1834d573ac","modified":1496129637000},{"_id":"themes/tranquilpeak/node_modules/qs/lib/stringify.js","hash":"f3e93e4a7577328ddcdaed6a4c3fb74d066eea4d","modified":1504939656000},{"_id":"themes/tranquilpeak/node_modules/qs/lib/utils.js","hash":"4bffe8a5e3730b88fef5b2bbda35d91d5de951bf","modified":1504939720000},{"_id":"themes/tranquilpeak/node_modules/qs/lib/index.js","hash":"9039aef43bebb9c999e4711d367211cc97b710d3","modified":1497471592000},{"_id":"themes/tranquilpeak/node_modules/qs/dist/qs.js","hash":"4404ca5586d3f44e7c3ba0e809a99203cd39e482","modified":1504943695000},{"_id":"themes/tranquilpeak/node_modules/qs/test/.eslintrc","hash":"19532afcfb2ca609b9687da0d7dd20cdb4ccf7e4","modified":1504939656000},{"_id":"themes/tranquilpeak/node_modules/qs/test/index.js","hash":"597801d7cbacf7a83f59b0615ec53af28dd5ab2c","modified":1496129637000},{"_id":"themes/tranquilpeak/node_modules/qs/test/utils.js","hash":"cd07caa5d78b48f035da3d761e19894911561df5","modified":1497471592000},{"_id":"themes/tranquilpeak/node_modules/qs/test/parse.js","hash":"f4c68169725d275cd432f6fa5adf8b48f0ea39d1","modified":1504939656000},{"_id":"themes/tranquilpeak/node_modules/qs/test/stringify.js","hash":"ff9aec454d68f52feda61f4cf2b898cf61855797","modified":1504939656000},{"_id":"themes/tranquilpeak/node_modules/request/lib/auth.js","hash":"51ae63ac59f47ebe5e14b0c02e57dd2039763b53","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/cookies.js","hash":"f43e796e4f8388308df04ec93dcb9b5f8b1a36c4","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/getProxyFromURI.js","hash":"9ba23efd9897fa29c71684461903bc935bbf43c4","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/har.js","hash":"62a20877d776f39a5055e0579ffeb04c791d1c53","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/helpers.js","hash":"dde269662f846192111a95dfac3f5c96c7168615","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/multipart.js","hash":"bdab230a7e88b3e8a594f787c7ebca21b388633c","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/oauth.js","hash":"b9d881dbba6cd8bd619d9a3e6cb56394b2e9ba79","modified":1520621455000},{"_id":"themes/tranquilpeak/node_modules/request/lib/querystring.js","hash":"47b77094b91220564ab53b30f56cc1f96ac7bcaf","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/redirect.js","hash":"86ac7634a518331071c240093530acd896a61dd8","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request/lib/tunnel.js","hash":"0bd291728498557a1a489179fcee22006ecc934d","modified":1507806963000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/configure/request2.js","hash":"27fc633c95633c3e452b5e63481b5bdefe669329","modified":1469908999000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/lib/errors.js","hash":"5fa6ced92ac49641b3cfe06c911bb1e24948fe69","modified":1464217418000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/lib/plumbing.js","hash":"2c1509ea88ef16c45a07c8ff8886ef33a08da67e","modified":1469904627000},{"_id":"themes/tranquilpeak/node_modules/request-promise-core/configure/request-next.js","hash":"1defbaafa5ad9a1550f4eb3cd9b5fe6058466a74","modified":1469909012000},{"_id":"themes/tranquilpeak/node_modules/request-promise-native/lib/rp.js","hash":"1952ca32984899f291d3dc1385f8a1a9506f8a02","modified":1494207688000},{"_id":"themes/tranquilpeak/node_modules/sax/lib/sax.js","hash":"dcb93c310c07d19e54b2d83ed235b25f3258bdbb","modified":1498153337000},{"_id":"themes/tranquilpeak/node_modules/sntp/lib/index.js","hash":"377a08430b17ae27ef61e2ae46b493afda676096","modified":1508979193000},{"_id":"themes/tranquilpeak/node_modules/sshpk/bin/sshpk-conv","hash":"ef58cd3dce531e6a04e6557610f52be2688b8568","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/bin/sshpk-sign","hash":"75271a4b0392b5549555f50085b991e8d9a3bd0c","modified":1461292363000},{"_id":"themes/tranquilpeak/node_modules/sshpk/bin/sshpk-verify","hash":"a74dd8749820e0a9e9d334bd09665d6e3e4885f2","modified":1452565517000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/algs.js","hash":"0d0f0877dc4e55712952587c611c12aec4cb296f","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/dhe.js","hash":"c9853f2c3b1a24a5dd84720665c8fd2c156ab773","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/certificate.js","hash":"f44e2f04f972f632ff5cfef33a908b7141fecfdd","modified":1488421315000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/ed-compat.js","hash":"d2411cf39786a02fa660ea509d849487ac009a55","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/errors.js","hash":"b1492a5f7867af3b22be7135c44764a6e9176d3c","modified":1488421315000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/fingerprint.js","hash":"c8d3a671de8f36554c65f02d417069ae8fc706ab","modified":1488421315000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/identity.js","hash":"0b97d35152513ccb57c577bf2223e539419bc004","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/index.js","hash":"06ba3986439893c92b576708563bbb4c3391fef9","modified":1492046321000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/key.js","hash":"ce0e29b8f17873069d3e589870233af7b9d2428f","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/private-key.js","hash":"d15b5fe0a3fea58d1bfe2be4cbdf8a7e88191a58","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/ssh-buffer.js","hash":"2054816cb78235b88544615978878386c76ace84","modified":1488421315000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/signature.js","hash":"326ad3f66858785ae453098c73759bd325b68832","modified":1492046321000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/utils.js","hash":"661fe76cc630cc4733781711e0b4d04ff27484cb","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/__.js","hash":"9c805f4d417e7a952726f3cd1d0bfa7c30cfa7b8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/F.js","hash":"18f568c6af0e139bc63d9943f5e798fd09bf01b6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/_baseConvert.js","hash":"5e7086f492263fd7d58b38ce5b1392144e1b72d1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/T.js","hash":"f10191c08571d40fee301d26e97240125511bb31","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/_util.js","hash":"5fbff66b69ff1dbdde5f1f64e9965ba5f63ecc94","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/_falseOptions.js","hash":"ad9c0db1f5df98f88d63bd70d729417a7eab2adf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/_convertBrowser.js","hash":"b4cceca914f9af59a7c47c384127602dce2abf6a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/_mapping.js","hash":"b96514d67397db8eed6dbf568dc6cca537343f38","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/add.js","hash":"9a7af31a7389d2b2b2ada006440c4cc5c2e42e14","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/allPass.js","hash":"d6accb07bf9f23b3d0f72ce21b787618d575da04","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/all.js","hash":"ca7a311804ca0107de2a6f00602710f36160c765","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/after.js","hash":"b9b375ce8fc1a7d08495feac490844967e5c6ac0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/any.js","hash":"64f468269587c745e361d31e0d8b26cb8f67fb06","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/anyPass.js","hash":"4a3f89614864715dcc36c7ee5dbb9850f6ae2f95","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/always.js","hash":"d3c13a79ddd4488702c96b285bbfe2556ee67e17","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/array.js","hash":"6c3a1a438a1f341a9bfbf059da2d1efd4a582178","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assign.js","hash":"52e569f6c7d83714506850d8174be2c3a2992852","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignIn.js","hash":"71da9458e2fdabef9d716d9b48060a12c0185afe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignAllWith.js","hash":"404f26b37a62ce5a1e9b6fb33672e69913d4efed","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/ary.js","hash":"b811ed8b5b34ff86e65589b38cf22f1d7699ed4d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignInAllWith.js","hash":"47ae8b9efcba88af49e9a58fa2a5b7c35813cb7f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/apply.js","hash":"eb2c8c5f1efdd93f4d55605df4874bea9f831b54","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignWith.js","hash":"d4a0c3092be5c92abca026002a322407a1e12f2d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignAll.js","hash":"57a1a620f001ae55ba98b560fa7a858cebc13023","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignInWith.js","hash":"b3b0adbd4b47e963b9f3ec93335b375deca2a320","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assocPath.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assoc.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/at.js","hash":"615c43358bc89d4eaed242300b9fd77631f72443","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/bind.js","hash":"5620199ffaf7354deb17332bd96d023ef93a7563","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/before.js","hash":"c9fbf0e49c14385711d6335cb1dc0d6e09f3aea4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/assignInAll.js","hash":"3d99977ee0df2bc32edca5ceae451a08cb43bf76","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/camelCase.js","hash":"8eb598ce4ff5d309c2ab8fb299f41df23c4cd308","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/capitalize.js","hash":"101f5c2148a579105036a5cdd25b4193812f64d3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/bindAll.js","hash":"2e3944394c315756627aab74b8ce3cebab98662a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/attempt.js","hash":"eb059364d0e518867b8fe2d4d9773ca481f80b15","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/castArray.js","hash":"ab5ea04ba48ee2920164fadb8b78d8a03f1cee6d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/clone.js","hash":"6cd53703b2949cbee86ce6d708942e248afb8b4d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/chain.js","hash":"c85611a5e7da7d0aaf29a45bd34130b56315199c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/ceil.js","hash":"0539c156c827c85dd682ece5986b9f7bac19a097","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/chunk.js","hash":"63359d1585edc86fb70c74388c36e0a96e16b96c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/cloneDeepWith.js","hash":"365d2b00fa2e722ce8c60b0605bf3af06c6ff454","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/cloneDeep.js","hash":"179860c9bdc495da2f5d8281fec35077b2f2b216","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/commit.js","hash":"2b2f58504601fed318dd5f6ef943a873018195cd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/cloneWith.js","hash":"a303da7355a2bcf3314b47558b57c8e3b235094f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/compact.js","hash":"b6603e874a29627153368292851fe987f5462bcf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/complement.js","hash":"db8673391fb52d0d4682d80065e5f82809a3292a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/bindKey.js","hash":"8884ec3af184de8a5f20829f6eb5fb6ea459582b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/compose.js","hash":"ea122818ed87e1559af41edff0f2d2fa54319b9a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/conforms.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/concat.js","hash":"64240c44714fa5369fc4092f00ef58caced12344","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/collection.js","hash":"75a23149e229dc1435bbddc870542ac1ff298f91","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/conformsTo.js","hash":"fa5e2fa22ac3442d8ad5b09e3a6c0959316431ed","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/constant.js","hash":"109c49b151baa999c023e7934b4223e0fe3d84c5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/clamp.js","hash":"d10d4fb46ea8518851b6578ef67dde23b2a9b013","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/contains.js","hash":"cf59973c08cea72d4b25f223aa3c30e99fde8e55","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/convert.js","hash":"5e125cf746680131339a8ab7f41d917bdccdf356","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/countBy.js","hash":"52e5e9e4b6064c30131e7f678551f23f8120cf0d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/create.js","hash":"7fdb4d9dfc8e2b4876ec6b47b9b32fa37eb1aa2c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/curryN.js","hash":"13f2d44be73b0df20161c72c0b77b69f8bfdba39","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/curryRight.js","hash":"333b1a096341c2552aae7af172dfc6b1aa2d68d2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/curry.js","hash":"ded1e6452bc77478e51a4b9a7f8f2eb9c07d1b03","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/cond.js","hash":"c5bcad894a249463aeabed85ac3d3e7474455533","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/debounce.js","hash":"c702651f3d6844c12c8e7fb2d2d07ee898f3c78e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/deburr.js","hash":"b4aba68c497e84459d6d9739d71b0f1a3bb7182e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/curryRightN.js","hash":"919ca15f73c98eb40bfddd2213edff6a8992e2e4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/date.js","hash":"bbf85ffcdfc83df6d5c24c84b03ca937f9796257","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/defaults.js","hash":"0afcaa5650946e068d13f298bdcf3e185f5a1f07","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/defaultsAll.js","hash":"2006e77adc3f6e20fc16af80af1a26d166d14c07","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/defaultsDeepAll.js","hash":"ee6d0af3f9942f2314c2b6fc2f283debd885fe36","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/defaultTo.js","hash":"39bad3a9a0314e20e1fcc52f2c7c1711a796754d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/defer.js","hash":"49b70a2e28eca9a02a89437582cf42c165dd2d05","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/delay.js","hash":"1f6a34ed80e76bcfa748c686fbc67488d0164d78","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/difference.js","hash":"13ba75b75ad25ad44bcfcc552dd0fe00114c13da","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/differenceBy.js","hash":"55c72db5c42636b2f5824b45979834483161d817","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dissoc.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dissocPath.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/defaultsDeep.js","hash":"6eea71a30ff427217403c02e6721e6bdaa0de604","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dropLast.js","hash":"297bd9ff4c5ed9fd6323d3ce10286936be549bfd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/divide.js","hash":"86636acadd06d91f809acd2c1d31cf780caa8649","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dropLastWhile.js","hash":"3901051acf9fea300dfe2961fcc31890adabe4da","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dropRight.js","hash":"e8beb9bca520499fc14e793b6e8f7a428d197bb9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/differenceWith.js","hash":"290648f706217284bb229fc0957d21578b89b0e2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dropRightWhile.js","hash":"779915c003cbb1a9643965f284858729bc032b6a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/drop.js","hash":"2cf18a3172602551b9950bf4b21ef23b07f5c8e4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/endsWith.js","hash":"1e2c542c82f7aefc5fad986136445a7a4425e145","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/eq.js","hash":"e22365568b08047e550d002e351cef842cddabbd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/equals.js","hash":"735240597ea9393397bbd638934ebfaea4f6b2c8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/escapeRegExp.js","hash":"2a88b89297d34797244d963f2323e59a7c3d4d31","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/dropWhile.js","hash":"3d82fced32a443d92d80485508cd79c34b0a0ac2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/every.js","hash":"0499e846512778b49de2da8574e81f21dbd3ca40","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/extendAll.js","hash":"33d62f7192821133af2eb6ed064b6dcd173a13aa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/extendAllWith.js","hash":"1d2dab39cc17f3beec2cbdf117837509ca72309d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/fill.js","hash":"783c4109619e522701ef2956d070ec6f94ebb258","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/filter.js","hash":"7f77256838b2435ebf7539e186cce009aa54c1a5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/find.js","hash":"86e525b8931055cfd1dbed74e13e649b39e8fa6e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/escape.js","hash":"68a5b97faa5723827ef59f065101bbbe2556e6bd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findIndexFrom.js","hash":"61e3f312582261bc44d36fac85ddbe6f11f26a30","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findIndex.js","hash":"6dae88bc0ea9a1c2ceb6bed27e6fcc1a993795cd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findLastFrom.js","hash":"72d9c3ee81778f2f3be72594451a11c7ece2e35b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findLast.js","hash":"a19b3954a423f675b6e556a4838d45a28eca25b1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findFrom.js","hash":"7a92981afdd815aa0d39348b752306abd7697559","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findLastIndexFrom.js","hash":"077ebe8808fe2fe62d216b354af30236aa471903","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findLastIndex.js","hash":"25b3d6da9b75a73e37d908e0bd1c2c071eb81def","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findLastKey.js","hash":"d71353c58b59d98cc7d909a543f8f49ace63bf10","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flatMap.js","hash":"1b0399b113f8f036d69c78626ffb7fdbd531a452","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flatMapDeep.js","hash":"68eb25628604462da50f41131335e5bdd79dd931","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flatten.js","hash":"93940d34c59306c75e8680b2f54a9535f1eb56fe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flatMapDepth.js","hash":"04d4e92f43b87d2f5504ebfd7d095c0421322e6e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/findKey.js","hash":"7a3a8649e4119245549d42a71a20752a7a3258bc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flattenDeep.js","hash":"3d4a37408b913e82d947aa842b984fca60b9dd0d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/floor.js","hash":"a7a4526f7ffcc6fd12b5805cc687f5e31fb41152","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flattenDepth.js","hash":"c606dc88f1ff4ae80ccb61d0e293d46f53e687ba","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flip.js","hash":"e13e97806d2757e3661b52657b0a81077bddddcf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flow.js","hash":"b1fa8a6738958fb2b0f61f55670e80e72b37f3f6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/forEachRight.js","hash":"fd98cd06ffb50506eacfab8999a3cc06d2c646b6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/forIn.js","hash":"83e5d965ee8ff794867c6c8a2e01ca56fe76a15b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/flowRight.js","hash":"ba997b9952e847801199c2767ee07ffd64c4810a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/forInRight.js","hash":"3f48c8bb263b1eb71cbaf4ad9d2606b3656f8a83","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/forOwnRight.js","hash":"5e5befea43de625a990a571cabcf5545f7ce1ad2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/fromPairs.js","hash":"1e7734eac86bf368e7d1bf63ca1657952b20f13f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/forOwn.js","hash":"60ef3e46e036d39572320f2c6f7601881ca41955","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/functionsIn.js","hash":"8b79a911c832b5683868fa56bc7c6cdaeb4d5e88","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/functions.js","hash":"82f6797b95c815f8082611ca84cffad654ed7ee0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/get.js","hash":"27edd6c7c585dcd0222c1cea97765e5eb1c52925","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/function.js","hash":"c7d47f84639e315320f598f32c3a8f8dc8b0a724","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/getOr.js","hash":"423682307e027ac900a0cc83948ad83b19c2fca1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/gte.js","hash":"d6e1cf7bd2d03d198791afb3eedae8323b06c262","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/groupBy.js","hash":"28032f75b908231d97cfacc99fc04ff0a3f22e65","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/has.js","hash":"20fd58ff42e0550eb9f94e183225458d52436836","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/forEach.js","hash":"fe364b04d37562751d1e68482ddf6a7808156916","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/hasIn.js","hash":"c9e75e41b1638417c4d1f9101c43469032522afd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/head.js","hash":"886dc89b060616ea92340f7d68bc946f058e8c2c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/identical.js","hash":"40efa57b258af781819e8bd050c32583837184b5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/identity.js","hash":"59c993b05e7ec2f4653e4bc55b3025dcd5ca2f13","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/inRange.js","hash":"57145747d9c73137b76796e00ed79263c9049c14","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/indexBy.js","hash":"c4137629ebf66269744e84038e8a5c02084d931c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/gt.js","hash":"36dfa14d07d98b751b8d37ba1ee1e64c64971161","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/includesFrom.js","hash":"13cb72c249c72145915615e75617f529d36ad4d6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/indexOf.js","hash":"f296c1ad76022ce01e1f733136933820a2744cfa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/indexOfFrom.js","hash":"a9af522fbc2eb5a6727c604d91e8ffc21198f5d4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/init.js","hash":"22ffae77010a1ac713f0326fa468621c3ab83a2c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/initial.js","hash":"345cc5bbcd2fcb19a0d5e3ba7c44dc8d4bb85be9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/intersectionWith.js","hash":"f264dacabb5c65b41cdb9301fd281252ceefcd45","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/intersectionBy.js","hash":"c5f67ae844b3c57014cf4ca6878fd805e7a0c7d8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invert.js","hash":"fd7502e8c46743d84540d1f6e83e3e70e4190812","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invertBy.js","hash":"f23b5d7017a48c8757e9e02f8e9198de8af6f181","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invoke.js","hash":"af082b901fb05e5ca0b8c366f2d91c1a80a02fd1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invertObj.js","hash":"f2acc5a6d3985a3d717e180810fc8da4b70eda6c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invokeArgsMap.js","hash":"9cb53649858eb1e33827cc8513c16d9e7363d9da","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invokeArgs.js","hash":"fae0d54f2a10c1da45de1894b3a854b2f42f88a7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/invokeMap.js","hash":"e53c69c9c4a6be115fea0a3574c4d1255bfe5428","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isArguments.js","hash":"675c9c3ee2f01b2ecbbcaa9637bbccd65f89d943","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isArray.js","hash":"45376d39c70fb04bc0cea0bdda3b1998d0c76b3a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isArrayBuffer.js","hash":"6d6c14aae84e1662f0fbac87ff49d1dc0c568444","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isArrayLike.js","hash":"f6ef38c98c8344533e90a2212650cf936ce808c1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isArrayLikeObject.js","hash":"4d053b5fbd0477fe770249346cbc0bcfb37a6219","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isBoolean.js","hash":"b91a773b54bd4822f9c23bb88b139b67f4f1eafb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isBuffer.js","hash":"192efd2ec17cbeeadc1e68b893e504b8b14afcaa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isElement.js","hash":"41b8187c0a4dfb59cdc5c939f1b3a68d674e7048","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isDate.js","hash":"ccd1b64eeefbb7d146ab6294c52aeec2ad1a93a5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isEqual.js","hash":"e143e5a19f1ceadc7a6d93d5bc95a4e62b6be530","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isEmpty.js","hash":"517aca0c6b7b51087db094f4ff1ac06bc50c765c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isEqualWith.js","hash":"685a3ecf2190a5656547f3a62fd8fc0c4fefcad4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isError.js","hash":"03dabdbd0e30796a8bdc2a341394d329a461a9d2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isFunction.js","hash":"a5644120eabb397e67c38922ffb9b87d22aab5b7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isLength.js","hash":"6aabade08bfdd6e8bb07e28225629c419b5e8c97","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isInteger.js","hash":"b30a8a902259cad6f2300f7b06d3f2bc3975f34e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isFinite.js","hash":"79c3ad8c8702d1aab54ae80ea400d5f73ae49dc1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isMap.js","hash":"c2421f5389375dd9697de826b777b3d99c8e833b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isMatch.js","hash":"ea5bb01a981706a79b547149e5aadb39369967ea","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isNaN.js","hash":"c607c72d2d7f67fd2da46ca370acf5e12a024e44","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isMatchWith.js","hash":"0afec1beb71c2424691fd4b4dcb9100820374c26","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isNative.js","hash":"4dc770dd04ad9f97aad0b764d876375aad3c8a9e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isNil.js","hash":"00960af435b0e8ad04bb1fea65d6a30ae8a61d06","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/includes.js","hash":"c5b5262c60578989e7569a4ec24c14c22af9d4be","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isNull.js","hash":"dc555ce657002d169ecd3f2af155b6ddd64fc6f7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isObject.js","hash":"ffe7fe0c07a623545dedbd0c45ec219e3745cc99","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isPlainObject.js","hash":"14b52f86eae7bcbe9d5f0400377d9315a588bfef","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isNumber.js","hash":"6caecaae0ff0b438dbe62b2a814b14db80c6afd1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isSafeInteger.js","hash":"e570e129d68bd49f8ba775f6b85ed596c4a96fbd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isRegExp.js","hash":"fc73a7faaf1e7ed7821d0600676678cd495326f0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isString.js","hash":"512ad2c4610306d11bb3bb3491f53abd029e5ea2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/intersection.js","hash":"1391dbb03a7ea4de5e8c8a937667c5b2f58d3b28","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isSymbol.js","hash":"d374ee1761cd7c88e18c0d89797249ad5848ddc1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isTypedArray.js","hash":"370900f84ff88e22af1153a209583c2bf6fc9415","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isUndefined.js","hash":"0022a9050a33a2d65905711d005042506bc9abad","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isWeakSet.js","hash":"00837472f9eff86d2ffecbc9b54ed3605b3c72da","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isWeakMap.js","hash":"2d9fb05f212d14e0ace898c6bab8563582d707cb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/iteratee.js","hash":"5a57ada3203e3a1b57b61923cda5737bc5bdf7ed","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/join.js","hash":"3ef2d8c47d359b75da09f77c3fe2266508d4f021","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/juxt.js","hash":"19b5b68440238c0945975ba74e5a43d633a4cb25","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/kebabCase.js","hash":"8c4c6c334759ea0ecf4b1529287aae9fb187e47d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/keyBy.js","hash":"623811ac634d2ea4518def1661ebcf95b0201530","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/keysIn.js","hash":"8e6ccf89f46ff56b75f2b23f820112e0982845ed","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/keys.js","hash":"5e7f14bc64715f1731977c278b871574eb7796dd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isObjectLike.js","hash":"49d650f710d56de004f9adb20ad8cf1b61f26554","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/last.js","hash":"482343e9c2122718717131d20ff454537bc3452f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/isSet.js","hash":"7c2c1be0d45c657157fe1ba88986a6b105c0318f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lastIndexOfFrom.js","hash":"2206dc50977fb1f15fb7ddbce38cd8adcefdc0fa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lastIndexOf.js","hash":"34238beb4a520fcdcd9c46854d6dc7bfbcc1b5f9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lang.js","hash":"62dc2db0a784f758cb9347da261f8089d1df95b7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lt.js","hash":"ebbdda9e5136aca682159edb9a951257370bc6f4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lowerCase.js","hash":"10a1cbec9a77d960a0c2b470450877fe4596bd02","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mapValues.js","hash":"15803c364129828e85167dca814187bd2ac879c1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mapKeys.js","hash":"ecdd3cd7edca30157bbb0bc2a3cd91058dc75199","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/matches.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lowerFirst.js","hash":"e496119d716f19967b0070c7ec9c03d28b919122","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/map.js","hash":"b353305d3741738e30ccc46b96421df43380d99a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/math.js","hash":"dd031d6043c326be2e5c3a8b3a4bd728bc74650f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/lte.js","hash":"4926168ae6c4fe1a9493b20ddceb81f5ffef82a9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/matchesProperty.js","hash":"73c7321e05c3a79d869afe876a64ae009d8d3da0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/max.js","hash":"72e93ed6cc51a6bb7ba5131cffbc4ed64b0d5148","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mean.js","hash":"73e71b6ebd607cc99741a6bd8a504f4b2d753cb3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/memoize.js","hash":"d6bd34e0088a0f017e8c36785c6cb79450b2e0f3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/meanBy.js","hash":"062613f280d0bed68bb11a9999721c0c90730c6a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mergeAll.js","hash":"e9d2d85cbcc2a728e6baf932d05f053901f0a7e7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/merge.js","hash":"087b5cb62cf464d2154b378d4a79fceb5987966f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/maxBy.js","hash":"9a5c1f5cbbb6375b8f314d5c3508854a76541613","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mergeWith.js","hash":"061bbc4f62c653eb99021e78accc7ae915c3d8a0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mergeAllWith.js","hash":"7ed92253b45294795a4bf5e6fe8d5f716ad27b99","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/method.js","hash":"9c12a91f85dc26106523d5662166b6ee0056dd14","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/methodOf.js","hash":"d7ca6c11064364211c6b7f7fa8465377f2a07342","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/mixin.js","hash":"bff01db6635beb3588b48b53aa0b83d92430f62d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/multiply.js","hash":"373b10cb68541026463c91d41901e052f3587044","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/minBy.js","hash":"7c81c5d5a852cb0ece8e3026820c1000d6ad10f5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/nAry.js","hash":"bc98ebd544e4def682ac61ff204c16aba3b5a227","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/negate.js","hash":"1503b32cfd9bc78f575f865ac3984bbb3dec2695","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/min.js","hash":"e0a8670ec5ee7da49ea872f9eff2d5ec5bb5c1e6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/noop.js","hash":"dd608cb4eb01d202042edb374958ea37494d0ffc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/next.js","hash":"ff0900b4e5fdd889ec980c50e5e52d05d469b9f1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/now.js","hash":"e455b0b859454a7852eeef13a2a7e2a26ba00502","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/object.js","hash":"1f4e289be4a66881114caa5198b881b1f16fd4de","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/number.js","hash":"56db9afc452bfa9338b206bf092497b8652f61f0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/omit.js","hash":"b9a90a8700d55718cb1a3d68b15223d0b9d7de61","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/omitAll.js","hash":"5c3a9227c6f9ddc785688becab205f8e912a9668","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/omitBy.js","hash":"1ae512e4ff2af4984900b15292137fcc10161589","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/nthArg.js","hash":"14cf05b970cf3ce3f5878e4396db31f286dc1653","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/nth.js","hash":"3cea03c8cc79b44fe085d53b73c2160ccd302029","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/orderBy.js","hash":"7a17f923611248c0ea7086507bf568a043b98129","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/once.js","hash":"b6d33d5a9c4379ef7e1c46b09f9c865ecb8603bf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/overArgs.js","hash":"adcf40dad62a1c856764978731537f30889b1c74","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/padChars.js","hash":"4c63a99952765c19e7858c17f18da7c6612c35a7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pad.js","hash":"383ad74a3c1d0de2b6ca0304eb1d1faa4bc5bd0a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/overSome.js","hash":"7de036f2f58dc0faecaf54be9adea63226aad560","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/padCharsEnd.js","hash":"07914fc0fb8ecc33d9611986519b7c6607fe455a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/padCharsStart.js","hash":"5c7255195a70d48bba88ed00ac177d59c02e88e6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/padEnd.js","hash":"4aebe4522188368f563e7e72b2549083b542331b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/over.js","hash":"51db6346f35cb56c4ceff448ce83bb4b0529dd47","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/overEvery.js","hash":"3442bc9336ab31d30983323ab9e88f628085a1b1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/parseInt.js","hash":"9f69cbcb1ac43f1e3e7d6cc58efd7685fe4a00aa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/padStart.js","hash":"a312c6f78be12857bd315385eebcc8eabc67c1e2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/partial.js","hash":"f2acb8a2cc54f7e90ae1cbca437be0f9c8bc4d68","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/path.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pathEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/partition.js","hash":"205607a8169b9faeb2b51b0974805fb3cef84b89","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/paths.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pathOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/partialRight.js","hash":"bcf63208bf8072ae6e7ff226467ec45fe20b7ace","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pickAll.js","hash":"a24ed77399bda55b6c76f52a7b2d0318e15e9d53","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pick.js","hash":"7818ee7a56a4493a25f0262b42226a99b5ea4e74","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pickBy.js","hash":"7e90e85df68c3e5ed8e18b36ef2f1033f9c192eb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/plant.js","hash":"909ca1575840a93993b0cac28834173e1474eb9f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/placeholder.js","hash":"d211b85c131bc2d7c0230fc611c2f88d1aa1ae62","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pluck.js","hash":"56c45930b2236d7778657a85d48fb7c709e3010d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pipe.js","hash":"9a9cf735bad407cdf098744f528e907de4b8f8bd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/propEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/prop.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/propOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pull.js","hash":"e212c433d15f9e4aae0c7b7472df7478dce59826","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/property.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pullAllBy.js","hash":"82df6feed00d7586139b8d19babff6a119d12abc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pullAll.js","hash":"9d43ec3e85737776d1cba4dd43dfe33dcb691213","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pullAllWith.js","hash":"a4c03d7ae4b54c96e5050bbc7421bce119aed17e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/pullAt.js","hash":"e64a22662e4110f3a7598bcbb20c3444ace05733","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/propertyOf.js","hash":"a0309506e91e32300edd07989a6765ba76469785","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/props.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/range.js","hash":"c30a51ad9b00e95df9e8d84359393789adff6f70","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/random.js","hash":"c9cacb8c48422049484d1b43f3e10da43f54fcf0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/rangeRight.js","hash":"87d5bc191b63a837147e1a06ff573017932f9956","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/rearg.js","hash":"d5b08395ea2c22d24207c8e80e19a62b8b68d49b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/rangeStepRight.js","hash":"2706912addb4a0f3cde29fdbc07e8e6efbca5022","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/reduce.js","hash":"7607f41b09579aa65dca0224fae135f2a7bd90fe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/reject.js","hash":"f24c316dcf99cac19664e5f3cba90bcb7928ef1c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/repeat.js","hash":"7af31ea1d388664c134aeff68f0d5cb72297004a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/reduceRight.js","hash":"db8224e00025bde9179b073a6aa8aaef52cbaf6e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/replace.js","hash":"f4cf1769a167cbafbca362598669cee3b2048b03","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/rest.js","hash":"a860492108f67bef2af79852208f2dfd4f541d7f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/restFrom.js","hash":"7658cbf9d7d17aa68e24ae89e087b1f1f82858ac","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/rangeStep.js","hash":"8bb13a69dce53d8cb160b155579da0e6167551f0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/round.js","hash":"39a12f5a5a3ec3058dec8aa5118425b16d070281","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/reverse.js","hash":"723596c407da9faeb8a6029ef74e42e97bdc6be9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sample.js","hash":"2d93d3727f92362eeadcff288c3a8a733d023740","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/remove.js","hash":"f6c76702ae01ec215d972d87850624d302a45b9f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/result.js","hash":"e805c5972b63deb60f49d1513e570ed116a864b5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/set.js","hash":"35767c3a9b3e46a963c7fcec39391fa87136861a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/seq.js","hash":"4fd21585867c1b120e02b78852d98320ad8a38b2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sampleSize.js","hash":"fcfe74bb18b06d6da53495935d23a7600f9b24f7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/size.js","hash":"3fb55f18bf4ff0daea2c053a54a53c2674499e45","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/slice.js","hash":"ad400dcd46e81370daf0ad7c745ea1ab58df49a1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/snakeCase.js","hash":"d233254a26e81ab2a81fac31c48215d4b0b44adc","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/setWith.js","hash":"c5fab5be851b87976674b1459d61b445d0d5be14","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/some.js","hash":"0ab071ab57a97cb20b860f9125f2d3f1f131f833","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortBy.js","hash":"bbfdf129dc3ce45a017989b1b825542383812b73","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/shuffle.js","hash":"2d110e1a05b0780b5ad4159ea18a807f7ea1e505","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedIndexBy.js","hash":"47138204798bfa0b43928340b12bbdcff317f60d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedLastIndex.js","hash":"d6598c35bd7fb8887fd6fdbdcb8b18befa6632ad","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedIndex.js","hash":"04be86485281acfc53118491293043d70e3a7f2e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedLastIndexOf.js","hash":"94fc33bdee1fdebb80f0b00d195eb4a13bb926f0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedIndexOf.js","hash":"70b13a8537667e2fcfeba4993992875bdf8ff864","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedUniqBy.js","hash":"dc651f780172d66beef630e5c50c006d9fba50d3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/split.js","hash":"e785df2f7e7764f1bf518b872bc302679b505589","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedUniq.js","hash":"8e361b43dd485f7aa5971e947939324cda143dd3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/spread.js","hash":"347036d4ea05dea39b09f20275d06e8594b55ccf","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sortedLastIndexBy.js","hash":"e53794520cd5b3ca6df2ffb977e0e6b7a5f9502c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/spreadFrom.js","hash":"30b843077c519cbe18ec47e2ba9685f3a37e19e2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/stubArray.js","hash":"dd9b5ab21a9e90c5c2d33af270b15bb3a0d5a160","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/stubFalse.js","hash":"74f54c09c21a95c6e2168df204016afb1da85c08","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/startCase.js","hash":"aee3f36ca72d7fa30de64c0541e80b8ce2d729bd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/string.js","hash":"3a30865f86edf4dc3baff7567a894bc6f280a654","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/startsWith.js","hash":"73df7824ddaf5d8dbcbfb2894234f8e5f4214497","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/stubObject.js","hash":"3c5521da1935e4b266a480fb8c2240fc2e572ea9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/stubString.js","hash":"493b8cce32dd2d2f0915c335941afd8a2030c59f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/stubTrue.js","hash":"7d69609e3844f8e596fbdd77e68be6352240ef7d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/symmetricDifference.js","hash":"c1db644f2796082ce8c1445f0788558fbd4a6ce4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sumBy.js","hash":"73e4807968a99437d8168517ac9fd13ceeac5886","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/symmetricDifferenceWith.js","hash":"129d57b15724b6e3dbe5a83af781cf7e9a74bffa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/subtract.js","hash":"f76a659ba3d7724c8e4ff6049dfb6cb17627ae41","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/tail.js","hash":"4515c52305fd72e45da2ac90042e05c2215178a2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/takeLast.js","hash":"ac465095bcff9ff29ae8337a6d86a7658bb67196","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/takeLastWhile.js","hash":"88248a7d663078cb48e2ecfc912a33ac3b097afa","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/take.js","hash":"f9dd7f687a04982ac7aad57c525d98b1c3ffd1fe","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/takeRightWhile.js","hash":"b090924faefdfd4a31e25c54931f3b46f61c8203","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/takeRight.js","hash":"eed0e281c0ecf99c20f5668ce9e0dd154e45ca71","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/takeWhile.js","hash":"072405b57aebe0b9a274eb3709ecee82226092b9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/template.js","hash":"ee7becfdb63a3d9ff3dda057f1a9caef3a814554","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/symmetricDifferenceBy.js","hash":"8cee02add02dca3ecabeeb07632dc8a2a1905e23","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/throttle.js","hash":"93c605d12d488e2ea9c6e6c63dbf42a538c66146","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toArray.js","hash":"f47d0cfbc5a869b78087164b18237c5448f21851","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/templateSettings.js","hash":"b9a7dd2e08852490ea86ed35b1e7469482c2bb23","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/thru.js","hash":"e93cff48a14c89ca44d3cf7b14dd7ec275dd53ff","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/tap.js","hash":"26ebee1454a84078cc66c9acb6c4844a5dbb6223","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toInteger.js","hash":"1a1797465c07599f7abc0f8430e46cff38d50986","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toJSON.js","hash":"7ac9ef07def4a64b062a05e942d3d110e3492ec7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toFinite.js","hash":"3a63c6c9616bda4574b31fe27ef369c01cafd6c8","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toIterator.js","hash":"961722cad23f72206b6f7d83e054c271b6a2add4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toLower.js","hash":"e0fb8417621f54e54d3df261d1e873438502ed70","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/times.js","hash":"216300e9d1f02445f1af5f8c8427f949133b75a1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/sum.js","hash":"430189ab2c6a23195cb8ea5111921794b9175ebb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toPairs.js","hash":"c28dd8a85dfaf032e5db9c1ae75da809d8527223","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toPath.js","hash":"d5cb075719634a9c336bea31d017ac20389c044d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toNumber.js","hash":"3f6ed987b363575f5f35f6189b144ba3d907eb43","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toPairsIn.js","hash":"407a3784056e15bba952ddd7d835aff27eecc673","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toPlainObject.js","hash":"fa912ce1e006d37f4483a53391271acb71692997","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toString.js","hash":"70b8676332f4ca060ba84f05a9bf101749fbf3f3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toSafeInteger.js","hash":"fa9edb660be230da19a83e120f48052d9ee5400b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toUpper.js","hash":"4312523e48af3aadf918218214ab329523305334","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/transform.js","hash":"932c1b9f13d1e4892db0ea9eefd4902f843f74b4","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/trim.js","hash":"f57135b04ed9e9db794f75b6b47b328440f06922","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/trimCharsEnd.js","hash":"c2d9c19c69c5e695022119baabadaa64ef02414c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/toLength.js","hash":"7d567f44a37d6a32bbd5a3856d011d71a9665f5e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/trimStart.js","hash":"50c328eddeec91b92f4eb516edcc78faaae87333","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/trimEnd.js","hash":"a9f669bd68b6fb04ca71e18d5f2c88805ec7d61a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unary.js","hash":"22e12bb090f8f305fb360a2372d87fcd9467399d","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/trimCharsStart.js","hash":"8415cb22cbb73b5fd101e360400bf6182f4d488e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unapply.js","hash":"936c484aca78852157be00e7b5cb71da6f747bfd","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unionWith.js","hash":"c48bcdd3435f2cf4a650d30608cc929712943578","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unescape.js","hash":"e91a70341966dbafb94a8d6fc723f23f3c3a31a7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/trimChars.js","hash":"28eb05ea233dc6596ed3b17a3684c7225efa82be","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/uniqueId.js","hash":"414c720c8d11aeeca6b05cccb6deb16a0f27c943","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/uniqBy.js","hash":"4111e9001db74d691176ba3e02af5527a4a77ed6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/truncate.js","hash":"af7ab1a8bcac66a7504359d2b2625b0b4bb6445c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/uniq.js","hash":"54b58010d1988f7a6ec28dc4a2df2205e83029ae","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unset.js","hash":"401e919462b8e66630dfc74e18796fdfa62ba6a3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unionBy.js","hash":"139742a9be22d7eb2195e7e7182d87a912936e2f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/uniqWith.js","hash":"af2818a584a4317e5148e52222afffa0c5fee59b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unnest.js","hash":"3d20beb0655413d13c2c55fdc3ac06013125edc6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unzip.js","hash":"29cd397f4baa016f6e6d1c8fc4326219106896e9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/upperCase.js","hash":"612a73d5f39d6d5a6f3c3b80ec89a6377e2e3c4a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/updateWith.js","hash":"9dd189e80bb45da43b4076a1643a45c69f8cf1a7","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/useWith.js","hash":"992d0f455bb3b824323580e322a9c79bd378d0c6","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/union.js","hash":"8e1193fe25429e87a9cd2e4a29dbd279c5decd5f","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/util.js","hash":"0724cd943bdab0b6bac86e7ac14e815e5aa1d9ed","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/value.js","hash":"e2d89ba1db613274b31d1d0fb1acb503644ad2e2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/update.js","hash":"a7d197f6473f8a7a38c00acc709f53481c545474","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/valueOf.js","hash":"a2ea35c715e7b3b68051a38cbf6802b29370d975","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/valuesIn.js","hash":"b7b2dd2b81111cce5adfeeb45254a5372e6c28f5","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/upperFirst.js","hash":"084545106fd93e9acff00c4401918ed9054d55e3","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/unzipWith.js","hash":"afc880fef61b32bc409f3a9a7359d755cdddf83b","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/whereEq.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/without.js","hash":"2599adcc37dbd771a16ea4cc2a0c1d4513f38a9a","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/wrap.js","hash":"3631e867dfc78a67db38ffff790ee94022015a52","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/wrapperAt.js","hash":"7d374b517c61846dba2ec2898d75181025fde1be","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/where.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/wrapperChain.js","hash":"1e4f82ce87696ad134450678d2fba27bb46cd123","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/words.js","hash":"88c9e852c37f155c0dc429a401d44df09d9ca51c","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/values.js","hash":"97fd629e19d9740fbfc87a26f86a259bbe7ca7f9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/wrapperReverse.js","hash":"0e41311c145f305b07da8c06db6e8e7ebe5433ec","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/wrapperValue.js","hash":"51e6e912753e7d425a490e90c8205fe83dc435f1","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/xor.js","hash":"bb7e8f6d42f3c73d3358ad081b4e00796d1cc771","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/xorBy.js","hash":"476caccbc9387505d0e110f814102335c77bb511","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/xorWith.js","hash":"8d0c86364c19f9c2b17feac93b112781ff81b3c2","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/zip.js","hash":"3017d4235f2ff6d2658a88eb540246821e9dcf04","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/wrapperLodash.js","hash":"ee531effe7e5e4472083f98b35497f858be33bb0","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/zipObj.js","hash":"353dfff83f25574ff58209ae8656869ab5516e81","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/zipAll.js","hash":"e5e2a68f3c74299cb44da02653f7773d7f6ae554","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/zipObject.js","hash":"8449412e15d18c596810ebfa34c5a0766f22b7e9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/zipWith.js","hash":"641ede21898d379ba0b8b9038913fa0400a271b9","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/lodash/fp/zipObjectDeep.js","hash":"e27ad4a21f3e47d1a59b796566d3a4c5ffbe5ebb","modified":1517704209000},{"_id":"themes/tranquilpeak/node_modules/stealthy-require/lib/index.js","hash":"740589a4924b1e9a2c9d694d306a2bf8c456d9ab","modified":1494301028000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/lib/Func.js","hash":"4c289807a465b74b25084d2fedc089c27b66153e","modified":1431657517000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/lib/List.js","hash":"b12c13c83cae0d58bcc3c1aba002499a0a001590","modified":1431657518000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/lib/Num.js","hash":"acd641a345a8fd7afea30ea99f5351f5bd6d77c4","modified":1431657518000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/lib/Obj.js","hash":"50a5fd13253ff7571cb49eb580a7c8b80bf00b54","modified":1431657519000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/lib/Str.js","hash":"24856515dc284d9d93512f693d56eebff760e649","modified":1431657519000},{"_id":"themes/tranquilpeak/node_modules/prelude-ls/lib/index.js","hash":"1967d27b2aaa07151cfab1016a8d20fd850d646d","modified":1431657610000},{"_id":"themes/tranquilpeak/node_modules/striptags/test/striptags-test.js","hash":"126a9fe92edf65aaa18646fb7d0851dac7c9de9a","modified":1484743089000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/base64-vlq.js","hash":"493d3d895198dfaefe88d2b066c272552ea35889","modified":1492467891000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/array-set.js","hash":"ad62f4ee15345ba799a00c59dd226690b4d1d1d2","modified":1496683247000},{"_id":"themes/tranquilpeak/node_modules/source-map/dist/source-map.min.js","hash":"5ef490ae9deea142fb1171323150a652225c57c7","modified":1506695999000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/base64.js","hash":"269e8e4dcb82db12f6e2a6187e7be46bee604ab0","modified":1492467891000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/quick-sort.js","hash":"e4adf67561f701e7563d7db979e5c9ff8d60267b","modified":1492467891000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/mapping-list.js","hash":"68a9ed5c0a48a384f64efaec04444a464952509d","modified":1492467891000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/lib/SymbolTree.js","hash":"84a66101ec6616addebcb8f80ddb94d701a8f09d","modified":1482004981000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/binary-search.js","hash":"b4333085d02fb4c091361de85d5cb368a3ce7632","modified":1492467891000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/lib/SymbolTreeNode.js","hash":"66ed1ea45c971ffa630d3fb095bd2c3e422d80dd","modified":1482004981000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/lib/TreeIterator.js","hash":"a12ab4619220fe173ac0cc2150e4e108362cd401","modified":1482004981000},{"_id":"themes/tranquilpeak/node_modules/symbol-tree/lib/TreePosition.js","hash":"6de2ea89aae4ecf6a9c7c95837b68cb6bc132973","modified":1482004981000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/source-map-generator.js","hash":"38ee40e9489511593f0feb9108700a377021a07b","modified":1506355788000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/lib/cookie.js","hash":"3471e5c3f4290e8c19c0e3493b303ea57f92aa30","modified":1519683727000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/lib/memstore.js","hash":"ecd6269063fe718d5b46d4127ff9d12065660a90","modified":1519453196000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/util.js","hash":"75608cb748eb9a01273a60a6fcde464831196b7a","modified":1506458279000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/source-map-consumer.js","hash":"f7b2363f0ba6bd65fcaa832bd5a1a8b3ad6b3270","modified":1506695946000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/lib/store.js","hash":"bcce2205e56bb588b4e6cfcd48a34610a5eccf82","modified":1519453196000},{"_id":"themes/tranquilpeak/node_modules/source-map/lib/source-node.js","hash":"380a1badcbfc18aa40dc5b9ea4cee52dc33ab29c","modified":1506522668000},{"_id":"themes/tranquilpeak/node_modules/tr46/lib/regexes.js","hash":"dfda0e5d3a9972218dbb2f76444a047d80b623c6","modified":1504404532000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/lib/pathMatch.js","hash":"3d403b8aad536db9e97eef4915eb01ef53405323","modified":1519453196000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/lib/permuteDomain.js","hash":"700be205b7d0d3b4c4f442b7dc1b3299d47bf55d","modified":1519683727000},{"_id":"themes/tranquilpeak/node_modules/uuid/bin/uuid","hash":"c5b3ec4d8a8f620420aa52a8f3a7cfdff1197667","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/bytesToUuid.js","hash":"745605810b456a5dcd30805b8e48c97d6f21cebd","modified":1516052532000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/rng.js","hash":"be0888747039b095cfc50d0fb6c82105d78ab40e","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/md5-browser.js","hash":"6e2bef8a5892014d27b026e93c00abcba28a173f","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/rng-browser.js","hash":"93c35080154a47ef1090024ff3c34b77221ab669","modified":1516124509000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/sha1.js","hash":"4f039ea8cae56dc7ed50a2e4595cbe22d7259438","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/sha1-browser.js","hash":"b5419bcb23bc32a79ac898b5e6b11b27d486ccb0","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/v35.js","hash":"918b32440f57949e7fcfd3e3748166553f60b637","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/uuid/lib/md5.js","hash":"ec146c8bbb3628e50110ce5fb2e8c5c44eeb175c","modified":1516112319000},{"_id":"themes/tranquilpeak/node_modules/verror/lib/verror.js","hash":"ac944c003b5f5bb7bda3bf12b6f2496c573291ab","modified":1493743176000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/lib/calculate-clock-offset.js","hash":"21f2b8d724e46110bceb88099e4b4c8577fee1f8","modified":1514811196000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/lib/clock-is-accurate.js","hash":"19552d7d9e8810fcefe7901b64f669d96cb056db","modified":1514900890000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/lib/global-monotonic-clock.js","hash":"51cdc59940a157cde2d33b7673fae222673ac244","modified":1514809923000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/lib/utils.js","hash":"1a919c00ba422ce0721addcee588289b92d19300","modified":1514856128000},{"_id":"themes/tranquilpeak/node_modules/w3c-hr-time/lib/performance.js","hash":"5eadb4e858234cd4d37df6fb79bfe5455a880fea","modified":1514944784000},{"_id":"themes/tranquilpeak/node_modules/webidl-conversions/lib/index.js","hash":"85120e2709515e5c5b3870f8537fbe8a76f240af","modified":1502681458000},{"_id":"themes/tranquilpeak/node_modules/whatwg-encoding/lib/labels-to-names.json","hash":"1e90cf78e209cc00eb90418c98ed44dbcdc0555c","modified":1509241494000},{"_id":"themes/tranquilpeak/node_modules/whatwg-encoding/lib/whatwg-encoding.js","hash":"3c96b599493a7e03c14e8e3612a6a77b6c5e8fef","modified":1476585232000},{"_id":"themes/tranquilpeak/node_modules/whatwg-encoding/lib/supported-names.json","hash":"07f05c3b2bb4c7e399f425e1db7afa24ebe8f624","modified":1509241494000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/URL-impl.js","hash":"862ed468acaa329632940214482be970c4953679","modified":1498704022000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/URL.js","hash":"df14255ad98c5d6e71fd44ed5c74893ebd19da97","modified":1512513561000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/URLSearchParams-impl.js","hash":"7e79a7a52aa656354ab098dce2e4efde4054af81","modified":1506300901000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/URLSearchParams.js","hash":"1da493e578109f753ee7470582e355284028926c","modified":1512513562000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/infra.js","hash":"49a551419880e4be1b1a412de9882ba700628faa","modified":1498702351000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/public-api.js","hash":"95ecfe4aeef935d943b3d84e7181e34d60a740b9","modified":1498703857000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/urlencoded.js","hash":"0ae10b8a985083288cd075107ff1c33faff0ac42","modified":1512513560000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/url-state-machine.js","hash":"37c7c937951092aedad862a1af7cafe4b1469f50","modified":1512513561000},{"_id":"themes/tranquilpeak/node_modules/whatwg-url/lib/utils.js","hash":"30a8d980f9d7f42c6afd069b8f05dcc40c71d2ff","modified":1512513561000},{"_id":"themes/tranquilpeak/node_modules/which/bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1462408202000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/buffer-util.js","hash":"090774f31c2f131623e6abfcbfa0251b8c769ef0","modified":1517814396000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/constants.js","hash":"5353f843af37d45f7b77a155ffd8a6b2122c391e","modified":1519284600000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/event-target.js","hash":"aeb442571da8cf1ef606f9e9765a56a001918f7f","modified":1515142992000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/extension.js","hash":"2335334e87814078c693d76e718ba543ea03a122","modified":1515142992000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/permessage-deflate.js","hash":"9c3351fbcac929e869fd7ceb8214d24b972f7a29","modified":1519285378000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/receiver.js","hash":"3b734813d792ce0fdd32ccbce1a223cc71559f1b","modified":1519284600000},{"_id":"themes/tranquilpeak/node_modules/type-check/lib/check.js","hash":"abe3114c8036a60817a94e77cd027d350adb0151","modified":1451367608000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/validation.js","hash":"5b0255fb850f7c6126c51e7b2436663fb7cd9920","modified":1517814396000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/sender.js","hash":"8662d4d617182bcbbab68081a521c21f1909b55c","modified":1517814396000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/.DS_Store","hash":"cb62f9bfe6f856e15a4e5c7e0d698a03423a5877","modified":1515576330000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/websocket-server.js","hash":"55500a44b29a6b38d64c6ca0cda4ce2d084fce21","modified":1517899960000},{"_id":"themes/tranquilpeak/node_modules/ws/lib/websocket.js","hash":"0f19b6b6e05f0cccb706e88e39da1f071993bf16","modified":1519284600000},{"_id":"themes/tranquilpeak/node_modules/xml-name-validator/lib/generated-parser.js","hash":"270c7576f2a663d50eb05e829c746c0e830e826a","modified":1508717317000},{"_id":"themes/tranquilpeak/node_modules/xml-name-validator/lib/xml-name-validator.js","hash":"bac2981ef70d2f87e4c0a681205199fa264f9a3c","modified":1462673007000},{"_id":"themes/tranquilpeak/node_modules/type-check/lib/index.js","hash":"7cd3ef26148711328e58244a4a01657e1fabb6c3","modified":1451367608000},{"_id":"themes/tranquilpeak/node_modules/type-check/lib/parse-type.js","hash":"865b087790b98cc30632918c4d99018a954fecd8","modified":1451367608000},{"_id":"themes/tranquilpeak/node_modules/xml-name-validator/lib/grammar.pegjs","hash":"72bb56b6759cbf422ec8639722197c43e86bf3d3","modified":1424801291000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/example/center.js","hash":"3ed21e5fa4a005f4bedd58d13f0bfd2eee76bc08","modified":1431018454000},{"_id":"themes/tranquilpeak/source/_css/base/_base.scss","hash":"f0a46b090a0a4dd21edfd89095761895c5278ecb","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_blog.scss","hash":"2450e07594a5e5186170fb5b5b157cc340808a9a","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_bottom-bar.scss","hash":"c7816c7ebc253d46466355860ead6669a3707ac6","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_cover.scss","hash":"03a951c9b35dd4e35456caa36950e6d6bef77ac3","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_footer.scss","hash":"645161942c66e6afbd666b4755337a6a6261e5e0","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/example/meat.js","hash":"5c14cd287ae470af8c093962d1e26be95558c944","modified":1431018454000},{"_id":"themes/tranquilpeak/source/_css/layouts/_header.scss","hash":"d840a4be850cb258167ee1081e1b288dc64b3d2c","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_main.scss","hash":"ee4648502b355db51fc6cb7b05375003331f2f6e","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_sidebar.scss","hash":"facaff0ca816a4ace67c7689e4286e88eb1010c2","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_alert.scss","hash":"3644442dfc16aa8a6894db1a605e325c856d44a9","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_box.scss","hash":"eebaacf55234fdaa156edb7dc4d9a4f382eaf4d4","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_archive.scss","hash":"6b7be2269d014c6c742a2c29c6a2aca39a383250","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_button.scss","hash":"ea9bd41800fe04860f7e892c17010588b2563a06","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_caption.scss","hash":"dad2683f5f3235b335eebcbda3db59a1cfbb2283","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_code.scss","hash":"0a14fe197c221a4d4d91ee9d41541ce7969043ca","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_fancybox.scss","hash":"e162e2ecafc2be70238a9885fd57a9a7ad642757","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_form.scss","hash":"368187e0c5f1a57d8c423f2ec23e897ee94a1a27","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_figure.scss","hash":"01152043de4e23f6595835941732563f09a033f3","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_hide.scss","hash":"c2f5ed51086b9ea5d94ff548bdc4653ea5cd7912","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_icon.scss","hash":"60dc972bcd81b4f95ab2c067ca910a5bf324d907","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_highlight-text.scss","hash":"7a7a8a78f75d6c43a46fd020e2d44546e716751b","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_image-gallery.scss","hash":"f683e80d69a0d5ac4e832d236ff5576cc749858a","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_main-content.scss","hash":"90c46c87289a8b3cf7c14d36900f5ced9db36c25","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_link.scss","hash":"7460155ebf7ce0d3e9acd090b6b99673127fd0be","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_media.scss","hash":"84aa03c01b741bbeb31c6b48122930f30ad40de3","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_markdown.scss","hash":"ba6d7e8f84b3b6dfef339f28b5c6ae372ead674f","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_pagination.scss","hash":"809b9330a0e2d79c9285c1a452d61648248c8b70","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_modal.scss","hash":"bc56f823cd67b2ed65b5cf2c3e1851fa3e82f0f9","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_post-actions.scss","hash":"6ecd72369cf03f59cfe749eab2712c5201cadd72","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_post.scss","hash":"0457c281b7893f8fde8a0590e4c1ff2ffb4bc1a6","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_pullquote.scss","hash":"86bc35ba358d1340debc459a344f5f6d34acaa42","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_post-header-cover.scss","hash":"c4bf950602ccb3fbdad54938979651a7b488236e","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_postShorten.scss","hash":"4b545d89a2c4ce9857c2d83c942b3d78c09d8296","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_share-options-bar.scss","hash":"8965e62f215eff3209d9b6d3ff7b9203aa5f3974","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_text.scss","hash":"7b38858248da2f73cf64c5949fd475a8e0a246ae","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_tag.scss","hash":"ddd1c2ce17f0116655bdacda598e7f1d6fd18262","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_tooltip.scss","hash":"f33ad3e677761af1ceb42d337691b8b354ff70bd","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/components/_video.scss","hash":"f9727fd300d73e8844abf0e2575c45e6c7769333","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-custom.scss","hash":"a0ffab53db35bbd4881aeb077400cba55551f3bd","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/pages/_search.scss","hash":"5f7cde0b68156ea802c3caf6cd673cab948b09d9","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-tranquilpeak.scss","hash":"72bb30af91d08dbbd4092271eef288c40eeb7dbb","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/layouts/_about.scss","hash":"52bdadfccaf3bc2082412348cd419c9da5793530","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/_variables.scss","hash":"f85f996b36a56a07d927e58ebcfffd9e21beaf6c","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/_fonts.scss","hash":"46f2edf56fb049f6d7289abfd5ad238a2c0c10dd","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/test/break.js","hash":"8c33328b4704520e2d91b2f40179891010c6d29b","modified":1431018646000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/test/idleness.txt","hash":"25e2ef694c74c8b9e7d1f2b1d7497ff8cf25c462","modified":1431018454000},{"_id":"themes/tranquilpeak/source/assets/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/wordwrap/test/wrap.js","hash":"098d027896cda479c2ca0099797d9dd91093fa78","modified":1431018708000},{"_id":"themes/tranquilpeak/source/assets/css/thumbs.css","hash":"d805bc578c883345f0c2e533db2d2548281132c4","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/css/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/images/favicon.ico","hash":"5d0d4bc08a9aa3d5b30fa5d32d4ad6753bfede6d","modified":1527390039726},{"_id":"themes/tranquilpeak/source/assets/js/thumbs.js","hash":"9bd2831e83f5d851db6ceb4a3d354b59367a999b","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/js/tranquilpeak.js","hash":"68ac35debe2fff2bd50beede307ff86ee49480a3","modified":1521447424000},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/01.png","hash":"939497cf4a4ff303366afa92247bfdea9d7cdeea","modified":1548299585809},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/03.png","hash":"0a515354d403cc20e95415adef37c2bc23d2ca55","modified":1548400202651},{"_id":"source/_posts/用 Swift 写一个响应式编程库/cover.png","hash":"2dd1e6a348136b1c396afa6be8f0f20e7b3ae7d6","modified":1527377402026},{"_id":"source/_posts/设计模式—开篇/cover.jpg","hash":"f13a9c7d24d860184841112eaae0f67feaa2fcaa","modified":1527331066664},{"_id":"themes/tranquilpeak/node_modules/ajv/dist/ajv.min.js","hash":"151ef2020cdc9e1d8f7fc3c0547693b6c5471aa4","modified":1513456489000},{"_id":"themes/tranquilpeak/node_modules/ajv/dist/ajv.min.js.map","hash":"e7f10a5e07b6ef980bc70a745d8ae53c1c88f672","modified":1513456489000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/jquery.slim.min.js","hash":"bc5836992c0b260496ba520fe1336d499bf06eb7","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/jquery.slim.min.map","hash":"e98a47011cad45698b353b0fced9bf8aab9782c6","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/source-map/dist/source-map.js","hash":"243c68411ad8390b7becabaf7f76d06a32c49c3b","modified":1506695999000},{"_id":"themes/tranquilpeak/source/_images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/css/tranquilpeak.css","hash":"432e7bb0754963f490aa3d64f1a064189c7096e7","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521447424000},{"_id":"source/_posts/Swift-面向协议编程的那些事/loading.gif","hash":"8fca84cbacb3516bb98867408b40fc4e749b4028","modified":1552098357949},{"_id":"source/_posts/入坑Webpack/cover.png","hash":"1ba5fc25fadf9d386aa8d7bd2cac8ee4e82188b1","modified":1527304784015},{"_id":"source/_posts/教你如何用Swift写个json转模型的开源库/thumbnail.jpg","hash":"0b7e258712bb0d4e868fc62acc89bc2abb5c8cd4","modified":1527332943397},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/dist/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1510924837000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/dist/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1510924836000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/dist/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1510924838000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/docs/index.html","hash":"f8a398fee5e826b35bed95d11ce6bec736fa3f77","modified":1510924297000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/_rules.js","hash":"aa1fd0679fa83a5bc757f2cd6fa74b9dd3854371","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/error_classes.js","hash":"e5d1be01d1186282d7084b0b1635b25c9de0edd3","modified":1493406434000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/async.js","hash":"b92fd01f77b6173d30b61f50a1558e4b7a5e8901","modified":1493406434000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/index.js","hash":"90458d9d0ac76d31c183a6aa86be4019e91fdaab","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/formats.js","hash":"457281cdccf8ab1461c34e6026563d8a4081461c","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/resolve.js","hash":"5acb5034a28835d99707dd6a59855e5ba2c4edeb","modified":1497650535000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/schema_obj.js","hash":"2ab2f6d0a3cf8f771cfda8884b2e674902a91205","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/rules.js","hash":"457c4549dc9a0ab07368df0f3bdfac2ba0c73e6f","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/ucs2length.js","hash":"d9c7a635a1729fd3c961c2cc40303b88fdca0f31","modified":1488651577000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/util.js","hash":"89522aa5ec88d49b1adeb1aea99fdbdf16070afe","modified":1499382312000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/compile/equal.js","hash":"552b96774b6567eae0ca01aa73a4a3097e556fd5","modified":1497650484000},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/acorn.js","hash":"4f9f4a61e4c731f003acb7e4c4fe8da474021921","modified":1520501708000},{"_id":"themes/tranquilpeak/node_modules/acorn/dist/acorn.es.js","hash":"375aeee1b48c98065de5639ba5a88312b1f4371c","modified":1520501708000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/_limit.js","hash":"699c3a62cc56427b64b047394342c69a07719eec","modified":1513456483000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/_limitItems.js","hash":"bd64248a5389b8bcb8eb21e93b8102c306942de5","modified":1513456483000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/_limitLength.js","hash":"69e44a19f0a0d98459892cb437e9b4d76d6ce6cb","modified":1513456483000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/_limitProperties.js","hash":"34389e3a7b4182048511b6fcd322ee78d9f0fd06","modified":1513456483000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/allOf.js","hash":"1c7139787ac3cdf172085f3a1338d62da73b7cd0","modified":1513456483000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/anyOf.js","hash":"ec2270bea00a13b457257a0494c72c0206c1db44","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/const.js","hash":"0bb7ef223a64b8ec654c5cb73289c160a5274e3f","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/contains.js","hash":"39203eb764892d0dc9258213cc14d39f099c8020","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/custom.js","hash":"262d02ed4d1d28074b6bc091b3a8b1a6bfb16dfe","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/dependencies.js","hash":"c6cb5ea6e89cb604d8f44983e5048eb085c8091a","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/enum.js","hash":"6e393877127a96585eedd1dde48fcebb8b10c5c9","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/format.js","hash":"0614b63fa13015318165f34ec6793cae3055f6d7","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/items.js","hash":"79e2915a30cb7bebbc55e031771b13aef47dbea4","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/multipleOf.js","hash":"e92adc56f09a57dcd7874707bc9216e7e3524aa6","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/not.js","hash":"6000dcaebbba141f6e47c03388b811304ea9a059","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/README.md","hash":"0c215e65e288a0fff457173582f2fc5909c4b30b","modified":1458937067000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/oneOf.js","hash":"c3ca999d153dc0ef44b122acb0a790e79e6204d8","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/pattern.js","hash":"64bbbb42ffcbb2acf430ae0a06cec60f7e083a04","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/propertyNames.js","hash":"67d5a6dc43ce4e9392e04eed5a57b7b93bb1d849","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/properties.js","hash":"9fda11df6d682d895cad18d60bb4c3bbb9a9677a","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/ref.js","hash":"9fd4a3cbbe24b8943bd0d80d8e9393f35bc8e595","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/required.js","hash":"a0a9e1e2d66fbf3de8657e557bac5a7019f90950","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/uniqueItems.js","hash":"31eaa83ed07cf88f5d0ec03ef94a0df1dbf386ec","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dotjs/validate.js","hash":"18a59d765e9b60247a338e54933b497b2c4cdfab","modified":1513456484000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/refs/json-schema-draft-04.json","hash":"9e8c49d51e4128cfd685841a9185395c33675e85","modified":1458937067000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/refs/$data.json","hash":"c8536212f482b958bfb69c02dee1f0a420586d7c","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/refs/json-schema-v5.json","hash":"b6a4b0cff69cd41f6a314ffb27ad72d750e698ff","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/_limitLength.jst","hash":"15a0514666e349800af264c9f6e9ee8c45b92a62","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/_limitProperties.jst","hash":"9dd3a6a07f75c6bc7cdd46feda6a096e0bbf430d","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/_limitItems.jst","hash":"a5f08855d0b2a882c4b3341122bc5aa07cc0d38b","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/anyOf.jst","hash":"29416f6f53c67cc8c8161e6cf822572fa6de929c","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/_limit.jst","hash":"76e8a9cb8f7dcdc3397204831a9d5fdf50ee17f4","modified":1495988420000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/allOf.jst","hash":"49ff68e885014484926de4e250c62086a0902abb","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/refs/json-schema-draft-06.json","hash":"1096d2305c0f7173cc25027a20e48085b19f3cae","modified":1511556552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/const.jst","hash":"65cac846e3a2e69328d396c9dc4ee67d527fbaa2","modified":1493406434000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/coerce.def","hash":"f0a517b2dd8e31da0c6b808bcc8d7904cf1648fa","modified":1488651577000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/custom.jst","hash":"b3b919b02e4c0c2363bc739df0a81fc108b9c4a6","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/defaults.def","hash":"4b8a659d76328fd1ffa30d1fdf9f7661f1454a80","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/definitions.def","hash":"dbac6273765dfc96bcf84436081fdc99db06c125","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/format.jst","hash":"eb4933d5fa37f641a63e44fafc8ee4848768bc02","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/dependencies.jst","hash":"22925e478bd2a4dac309963f2723193676d2c91e","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/items.jst","hash":"d92f27b253b011a601e2e3e905d3a1102b3cce23","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/missing.def","hash":"2b26bb3614903b676ae185b6c21e50b755efacb8","modified":1493406434000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/errors.def","hash":"1d64b17028e9d03ed613ccc619e6eca358a53c52","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/not.jst","hash":"d56a4d3eb89d13805d9d034f9f06f738c70db267","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/contains.jst","hash":"36e37f3bd5a76e2f0c73a58885aaa2148adfd0db","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/enum.jst","hash":"37e8b49379577599a005a7894ed0c18c5db174eb","modified":1488651577000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/multipleOf.jst","hash":"f459196cc2232c4b5213281398d98a3045b37584","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/oneOf.jst","hash":"31807297ea5eac06b0b3e735e3cc9b88a6c4f5d0","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/pattern.jst","hash":"e58b96f12768261e83c1358ca9b32b0fb7c28a31","modified":1478659364000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/propertyNames.jst","hash":"e0625dfdf515b895af9c54bcd18f6dc1ccb6e4f1","modified":1509138552000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/properties.jst","hash":"c68a3cba8a9ab8e2705d7e99bb2a5d72e82ac03b","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/ref.jst","hash":"ecfb29478f34bb79384250ab78fe5477b1a63c51","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/required.jst","hash":"03476ddfca57724405f9a0add4078c5b373a1193","modified":1493406434000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/uniqueItems.jst","hash":"481daf3571235956fe78cfde29b85699b884b970","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/ajv/lib/dot/validate.jst","hash":"edf0b122fc5e11bb1f4e5a39be1bc34596101b51","modified":1513455712000},{"_id":"themes/tranquilpeak/node_modules/asn1/lib/ber/index.js","hash":"1ab39535ed24903d0f9e2a4bf74333702842080b","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/lib/ber/errors.js","hash":"556bbb1b810ede9292493a70ad9a8644e5c4fb7a","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/lib/ber/types.js","hash":"8a41886747dc1f7cde7e4e5cb60e1a3b8a4c813c","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/asn1/lib/ber/writer.js","hash":"bdad4a0bb12fb5f91b789329fc4e4a45ecf87e64","modified":1443646115000},{"_id":"themes/tranquilpeak/node_modules/asn1/lib/ber/reader.js","hash":"3cfcdc9225bb43dd8413dc3f1f05d4fcd32d0b30","modified":1443646115000},{"_id":"themes/tranquilpeak/node_modules/asn1/tst/ber/reader.test.js","hash":"de84b2d7317393c6e6a0cdef04bfbff82ba78237","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/prettify.css","hash":"c913ae292c2060519657a2ce6d8366a09e71004b","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/asn1/tst/ber/writer.test.js","hash":"59892680384339812688163b346d12cc05e979fd","modified":1401981220000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/sort-arrow-sprite.png","hash":"7d887a09a1d329cb65d85327cc809ced7059b35f","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/sorter.js","hash":"22e214a23aa976891fa6bfc1ba7c3ed79c289960","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/base.css","hash":"61ff1245179fba36e2924b1ab9cdb92222901f0e","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/index.html","hash":"b8ffe19604159e81cb5e46ffcdcd721a146dd2df","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/prettify.js","hash":"43f2560c12ab3c378b4e8ef24ce54df255974b32","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/any.js","hash":"424dfe2a1afeaad729ca2be5ccfd443311716c41","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/bind.js","hash":"6ba64f83e985a1cb7dcf945490e4c280460ccb25","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/async.js","hash":"18b0242372dcdf745ae68b6c0f193b6fb2f40b96","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/bluebird.js","hash":"f68f4e491f49be5a5a3c5d04fafcd8abaf02fc2a","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/cancel.js","hash":"1a6c901863d671048f58095fe9b568b2a8407729","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/call_get.js","hash":"b53dcc39da361dbc72a49ced90d5290d94c70b80","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/catch_filter.js","hash":"cbdedec0db19fe2af76d5594ed8bf819000d7c79","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/context.js","hash":"ea7eb1ab2c8231fa6bfa8446cf730736735396e0","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/direct_resolve.js","hash":"470ca4d9a7e387ceceb383bc2640202f5fa6bda2","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/each.js","hash":"44949d491571dd38f6ffdd777cb44f96aebb5fc8","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/errors.js","hash":"98deaaee17f36851937108257e028a7e237b3f5e","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/es5.js","hash":"019c4e8b62031ea49aedc86dedd20318c6122698","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/filter.js","hash":"a5f3aee4afbc67d372e5b4fbaeac047d0d9c779b","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/finally.js","hash":"cc388e93ecc2e12145c080cc67b0d8517e481c13","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/debuggability.js","hash":"039b50edc8f5101cbc1002199805b0bc8e07ef67","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/generators.js","hash":"6b334d17275b48548e44f74f477b2e8bd49da304","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/method.js","hash":"02a5a493c2cf2045fbb20b2751381e4b4e29dbe8","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/join.js","hash":"5ab50e4fd76d09506700b47e7672c9d528816d4b","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/nodeback.js","hash":"46fc87ede6ca68434439a5216fe8e6f89d8d8a1f","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/nodeify.js","hash":"ebd75c010fcf1c4f709f4b444e62b80cfcde2a0f","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/map.js","hash":"4d96c67c999d7f8a155934d25bfe8cc4912ad469","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/promise_array.js","hash":"2b05f82b39c408715260b264dbeb886d080efc59","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/props.js","hash":"d26e05c3860fd45b7ae9008995493c6d01c2f2e7","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/promisify.js","hash":"3831be99120a57a3c07406f7012467f02346e92c","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/queue.js","hash":"e6fddd439658a46c57132ec8d07dd04bf1d743e6","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/promise.js","hash":"6038f62bb6a4d8d676dfbed9d2b8b36a0ea6b223","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/race.js","hash":"5f5b5403be19793dec5658af27fe996173eb4990","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/reduce.js","hash":"8f0d6b75ed5682d3a7e45254d76618258b45bb2a","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/schedule.js","hash":"bad77d032baf76d04dd40cc5f01c5d4adebd4578","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/settle.js","hash":"36f97c3732ae907af622fd4c859d29da1255fdfa","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/some.js","hash":"b548ddd7eb6b35ae6e97d931e0a8ef6dd512b3b5","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/synchronous_inspection.js","hash":"21be4c93fd5b93b07315c5edc930800e686e4dea","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/thenables.js","hash":"b06e617f4b1e5c9c33c9c4e0baabe709550154b1","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/timers.js","hash":"ad830b808b63bd4b291a3b23210bdaf850f1f818","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/using.js","hash":"5b287a7d967647d38091aec63f880abc46caeb4f","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/util.js","hash":"fd5ded260b95d0aa8ec6c2c376167a482f26d8f2","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/release/assert.js","hash":"da909f13035601fbcdc3a28937dd44e3008327ee","modified":1507132265000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/browser/bluebird.core.min.js","hash":"ccb5ca34bfea5d0dcbcaecf9c4c09b79805f9647","modified":1507132264000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/node_modules/boom/package.json","hash":"8c5b6050618158cd08de33b1bbb1bf2a3783a40e","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/node_modules/boom/LICENSE","hash":"9e7b89cb8edfe6dafb7a8821827c9097454ac230","modified":1500421427000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties.js","hash":"9dd9f96480bf3742dc80316a70f963741a0e0ceb","modified":1471063625000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/node_modules/boom/README.md","hash":"51cd6ceca10f52cd07a0538c885a0fb7fc32c22f","modified":1500421427000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/alignmentBaseline.js","hash":"3667c629a77826ad624ccec259d2473d2d2be503","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/azimuth.js","hash":"3fb1fbbc937b38ad4425c0f96a78284ca1b6b121","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundAttachment.js","hash":"0199568a1af2d059c6dabb3aa0faa5efc0c1a52a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/background.js","hash":"0920ad7e8f695b80fa8520809de0889d84c76d1d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundOrigin.js","hash":"667131085aa8557fc935b0a2e35810ec2ab94e82","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundClip.js","hash":"4b0392e4a2261eda91c5b8ff3d607d8e79110dcb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundImage.js","hash":"91c5f7865809bfb05d4176384da5dcd555445ecc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundColor.js","hash":"fd04a1eb43d3d12578ff1dbc3c61b190ec1e11e4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundPosition.js","hash":"8d2cb71708ea0d964052c3ce094a27d2cccbd968","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundPositionX.js","hash":"d26f2efeccd3cb9fda9a368c3181ec9c7ac9858f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundRepeatY.js","hash":"c923cdc6250004644cfcd80eb92fe1a82c8acf8f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundPositionY.js","hash":"35e569b83f36cb8c3eb49649b8b9cccd0feb0c63","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundSize.js","hash":"6854e493b5264db5c3936dcfd4d438882ed30cf6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundRepeatX.js","hash":"ec5bdf649e51ba966063b468bacac5d2b30400d5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/baselineShift.js","hash":"b507cefb3cda6fb75797b084151e9498b18a4a82","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/border.js","hash":"a148d708d50bcacf798f281043f268ee7a242d4f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderBottom.js","hash":"cecaf24c586b7cc83634cd269bf6241d14fd92af","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/backgroundRepeat.js","hash":"1c88300ad76926e05f901da899e440848ffdaa39","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderBottomRightRadius.js","hash":"4516e251fbe124bfa05b4a54ff00ed6da507d6bf","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderBottomLeftRadius.js","hash":"ad34d703a19fba80c6474d7b660c745bc14acc5f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderBottomColor.js","hash":"a1ff4cc10c219e5ce386b0b9f533faf5ae561ba6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderBottomWidth.js","hash":"b2089fc4c6a4d3973499457b020967bf0997d356","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderImage.js","hash":"6f29feb485bbdf8a91bc5dbbfadbe1f202bdf718","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderCollapse.js","hash":"3c4a64be81ddad8519aef7c30f256431dda01b68","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderBottomStyle.js","hash":"2ee4c7b0f67a7f0ab56758412ed591cfeb061cbd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderImageOutset.js","hash":"d7274722f694db2cdae4cf3967746bd96ecb547f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderColor.js","hash":"ab244931c0bc6c4e8c90c53cc5bae0e0e88752f7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderImageRepeat.js","hash":"33360ab3a6a71c1eede3d14ab68156485c322693","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderImageWidth.js","hash":"7b5cf5b02ccfb20d4b75863e6ec562f5c556a3cb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderImageSlice.js","hash":"b53374f1ea2ee31f47078d1541f5e15ac49b0a21","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderImageSource.js","hash":"fae49bcf1561c694211e96ee4b6c2a33020174ff","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderLeftColor.js","hash":"4a69b709dd9375e14a1985c2c42be8f61648b406","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderRadius.js","hash":"3a283a4f413fc1b1e3b5d895f78e62a4673bf7d4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderLeft.js","hash":"8e901349577666448d45b7c11112ff2e0bfa89fe","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderLeftStyle.js","hash":"836d4bcd4abd0ca7a31cc6f7acf957fd1f1c927e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderRight.js","hash":"ab4c68940da19e0e6559acc10cd776197ed7f482","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderRightStyle.js","hash":"8a9c6b952d9d9c0ca2927a9a26e8bfdd14b88fc2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderRightWidth.js","hash":"32f36e08029500679222385c573803f172dfbee2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderSpacing.js","hash":"ccd5868fc2ff04f57fc177ef03cbeb8968bd389b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderLeftWidth.js","hash":"ec8594dfdcd20af531dfda53937be0b6ba4493b9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderStyle.js","hash":"f13de2e15287bee645879c8e2114ca4e3f061f83","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderTop.js","hash":"4d34eff53207b1ec4a2f91e42a9449070931c8d5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderTopColor.js","hash":"40258fcb91f663ac93836c773380d88271797462","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderTopLeftRadius.js","hash":"50fab673daa9d55a7fb7e263b1a1dd410a5005a4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderTopWidth.js","hash":"8435a1e5ad950dbf3a7d9fb26247767ee4c14a04","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/bottom.js","hash":"551135c851563c6e9eca973dd09a2aafff486636","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderTopStyle.js","hash":"9bdb995d309ee73621aa9c90d136d31a509bb3bf","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderWidth.js","hash":"70e137b6880934f5f0f43d97f6c989ef63633936","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/boxSizing.js","hash":"3d65f52789e6ff90e7de488d3e7c3d2dffd170b5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderRightColor.js","hash":"e3de08cc471fd716a11de1a4a22c9d1f8d483a32","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/boxShadow.js","hash":"292df9a478bdd15d17672855baf3e2b6c97bd8e0","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/captionSide.js","hash":"9e334fb891a224577d7651c30f85833926e0a710","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/borderTopRightRadius.js","hash":"27e391ac7b0bdaacf09292ecdbcfa943fa7a017c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/clear.js","hash":"2e758c9c424afd4ab4e60ace15e4bb2c5148e6ee","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/colorInterpolation.js","hash":"0d44228fff8db938f4746c84727fb64141e8629f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/color.js","hash":"95184e6323e21e4859a89ad9c4f8e8c6d010db95","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/clip.js","hash":"4d6e70f70bfaa2374240c90dead58fa6b2110285","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/colorProfile.js","hash":"f877b03985c383e458c16496e508f108aca5c880","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/colorInterpolationFilters.js","hash":"a8a3289e5b1d132c0df03a8475a67fe4390c8826","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/counterIncrement.js","hash":"6206c2b58d20b5ff2de566826b53aa6ccf3fd918","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/counterReset.js","hash":"2252fdf4b4c784d7f2207b2722efc11f469256a6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/colorRendering.js","hash":"bf0bd598a714eadd7ce9d4dbbba3dfa63de6d928","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/content.js","hash":"8d6584cef93e2c4d5592084d20f5859a4e887a78","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/cueAfter.js","hash":"2243b024778df0dd2b1d136921acb096d675b7d0","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/cue.js","hash":"45db449b66bb6ba867873e89431bbebadd7d1457","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/cssFloat.js","hash":"f235e47404f33740a01d0d092c3215867e62f264","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/direction.js","hash":"1aa20d76ddff7871bf5fc955032c1589d2c6cd24","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/cueBefore.js","hash":"859fcdf975464c92d7da1ec100a3cc741d260669","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/elevation.js","hash":"0c2423d93d115fdc0ba59fa5bfc33690b2bc5cd4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/display.js","hash":"085141c7b264087fd4867a06a1de66be4ceca636","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/dominantBaseline.js","hash":"ce4f3fd8a95ae46c7dc76ba06c6c22f12b439099","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/cursor.js","hash":"901c80196c2c1ee11141604e458c85242bbe69f0","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fillOpacity.js","hash":"ffb077edd6bb1588c8d9859859e991512a500b94","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fillRule.js","hash":"8933f22457131d851697e37dc3ae3d61b0f6800d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fill.js","hash":"c4002cbba74f4bcec58f2721e92163896ebfd5ee","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/enableBackground.js","hash":"035c218703f9da2d62edb76a2443f5f8e5cdcc50","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/filter.js","hash":"451d2bd1ca2177e7b23d855aa136db4c80f4a700","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/font.js","hash":"c8fba3bfb369896f5cd2d5409092256cc4a4e0ec","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/emptyCells.js","hash":"efe96c7408cda5644171269f9cec3e6384fc7b64","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/floodColor.js","hash":"c2fda7d686405752cef3c9b5139c887efc009f82","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontSizeAdjust.js","hash":"163632d0fbfe69c7bf893c7e4f7362e539e57a2f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontFamily.js","hash":"19dea64e8853ecf0c0f9fb2a33cdbe2a30de837b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontSize.js","hash":"8100b3a02899c01008655e69349095495cb74413","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/floodOpacity.js","hash":"5c7222d64c9f11c5c9a90b412da4863c99c75ed2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontStretch.js","hash":"ef73f116950894de7cf7b3ecdb3938419f4b966a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/glyphOrientationHorizontal.js","hash":"02ec7ac759540d65c3436b437052214ff919d2b4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontVariant.js","hash":"b1c491791d9c4c5d7badea93b6a0041a26dc3cfc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontStyle.js","hash":"4b22e186dd27643dbac627e9ebdb7eb34d26daa7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/height.js","hash":"7cf9d1a852bbd3bf1904a5f42b773669df60c778","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/glyphOrientationVertical.js","hash":"bba0fba0b3ed95366719492466198fe0b290ebe2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/fontWeight.js","hash":"1cb235a39b04bf483b5f4907d3800861373b5335","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/left.js","hash":"a335c4cc29a7107e8f89f3a88485f76be62dcae9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/imageRendering.js","hash":"3b1f83841c202d14780da7973fd921274be16c59","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/lineHeight.js","hash":"471f25140a2c3414e009f3b68d7e0781a691154b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/listStyle.js","hash":"ca0d02d1c98b756910cfaabf97f9755510062712","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/kerning.js","hash":"f2efb72046f5de515e765b156bb94b01e2b579e6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/listStyleImage.js","hash":"c93426025c869a258626f6f3944ecf2bf1807973","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/listStylePosition.js","hash":"683c3ac2b8de29d1105f2a843929c24615855c45","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/lightingColor.js","hash":"365a779204051235c792334cc4ccd81790ce7a8f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/letterSpacing.js","hash":"fd24f918aa28da729c011a3cf367936ee045dbdc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/listStyleType.js","hash":"6d5223f9159c9240be026257f306515b5d21f9aa","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/margin.js","hash":"58d9d458a91a0ea0335053c42213a88f089674c1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/marginRight.js","hash":"abdfe19b961af2bbb3fb707764f41d6f46b87e79","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/marginBottom.js","hash":"82183de5478e6c15f948bf54fd95e00f25f7e92c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/marginLeft.js","hash":"40fa4277edb4d9d2abc601989347c38bd631abf7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/markerEnd.js","hash":"27eee0de8e2497eb991918613d850da514d7303e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/marker.js","hash":"72e1c91e2f9f6e1c558901e5fd77c00272cafc84","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/marginTop.js","hash":"6f18c7e3f3c457c1d8a7b2f466f5ab8393f091dc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/markerMid.js","hash":"c44a5c703efaa1a4f6ae27f7090b9c3c739545da","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/markerOffset.js","hash":"2c0635ca7aba3e367d30be36d43b4890e201c9c2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/markerStart.js","hash":"f3d3104e06d44257d0d90d2121a2836ec0143292","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/marks.js","hash":"586ce5f8a56abaddea061fb7e9259c2678612073","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/minWidth.js","hash":"14c845736187f328270dc5eb553d44c770bd9601","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/maxHeight.js","hash":"a4308b20dbafe37a5b36906c409ed18cfa6862ab","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/minHeight.js","hash":"84e4fb3b7e879dd65256676c9f05e06b88d822d2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/maxWidth.js","hash":"c99700d7cf2b9a6d6cf94f6d52a77c037a1b30a2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/opacity.js","hash":"4d2e1f6dcdde9be82602b3fbab3c0e1d59d1b432","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/mask.js","hash":"7480c08a361f835a73121aea2a8b583a763cf46f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/outlineColor.js","hash":"87c2881a3b8a4a356151467c67e8a4a6fe5cb635","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/outline.js","hash":"18f8026f81d8b1b46fb56596a0ff51c1c7dc0c39","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/orphans.js","hash":"03dcf905535a3c1a8ee350679102bf49c3eb291e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/outlineWidth.js","hash":"450d957676a4433db69d61b401b979626f8f52c2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/outlineStyle.js","hash":"9d3fe1e52da2a895a3a3f94068e2b927c8efd3ea","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/overflow.js","hash":"e35e4994fa3fb7707ad6fade94f9f11e0897bfba","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/outlineOffset.js","hash":"5dc00d9351548df36f005c30bc05fb6c60d42ebd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/overflowX.js","hash":"7621be75856c3372200ebec14bf1fc9642282374","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/padding.js","hash":"3c55f479def28041a750e45afcab1e3522232753","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/overflowY.js","hash":"37745eba7d47e357fdd9009f1b27673d3839f158","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/paddingBottom.js","hash":"8b6e0fea8158ea8bdf15329f6b6b2c1bd5736888","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/paddingLeft.js","hash":"87bcd44d85200c6b22d09ceae7419ce50f88a677","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/paddingRight.js","hash":"4d54a3802e6ca1563ff4389625cf0f97d36f2256","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/page.js","hash":"95d5e887c064ca729cc12ceca2ab5c9b60429cc7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/paddingTop.js","hash":"d9fb6be95ed84bfbdab8753b5fdbfd92e711fafd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pageBreakAfter.js","hash":"422348b4bd3e2a528c5ca6b5e227a04383f71614","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pageBreakInside.js","hash":"c7020c23d1a3558048202fe1e3a3d71f15370a97","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pauseAfter.js","hash":"38e1f663a6b141db92afe28b98c50b397f91c503","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pause.js","hash":"9a319bbbe4d254feb8c4e2bdf5b722fca291791d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pageBreakBefore.js","hash":"717315be402186d0e6701dc1bd25147987b5770c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pitchRange.js","hash":"17f7772baca02dfa8f3ba51e43f5eaba0db83b62","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/playDuring.js","hash":"2d430df1eabeff1a3a54bc55de1e7789852fac42","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pauseBefore.js","hash":"4ed1fac61c4daf285c9d186967a5df1bce9705eb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/position.js","hash":"c3b26e18e3834325b93b06192841bb7e7659c7b1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pointerEvents.js","hash":"7bcb331cb27d3e93b514548c1b813062b3a4bb09","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/quotes.js","hash":"1ab1e303b558a6c667c1907048b5b9e524f7a30a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/resize.js","hash":"03e35f68133c450f2e1cca1c324fb61ae1846eeb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/richness.js","hash":"ca769f89d425924e8c474757d1b3ce40e9ba5905","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/pitch.js","hash":"5a86ddcf3540d2b2a1fc0956c21717137e3114b6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/size.js","hash":"850afb747c59dc8b4c200f7e1979b2371a19e95a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/right.js","hash":"0f0953521a28d040dc2c7ac63301e34aa4115475","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/shapeRendering.js","hash":"54dbdbd8fb55ce4c042397d478396fb2218ca427","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/speakHeader.js","hash":"f91aa3489ea14adafe6d9758c2a98191051c5705","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/speak.js","hash":"c440affecec54ccd7b683de77219443e5b77072e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/speakNumeral.js","hash":"12f955f17d30a7e518075d096d436257d2062fd4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/speechRate.js","hash":"74e355d74675849f90bc992c7b2788ab7adf4c0c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/speakPunctuation.js","hash":"95e2f871fce44c92703f14bcd132d5d0f18d6846","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/src.js","hash":"85f2c55e7856695e67b52e249a7f8b23c599efdf","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/stopColor.js","hash":"c58fb33ad3edafe54a564856d4d4698cd67ae48e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeDasharray.js","hash":"bfc87d7a5f725aa9cbcf14e302b962fe5e535344","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/stopOpacity.js","hash":"de4b30bd35f35a2c0a520210b9e5d26fb5a432fe","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeLinecap.js","hash":"b4136eee0e7d34c9aa1244e667624932d39b3c02","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/stress.js","hash":"8ed2a03f27227a40fcc9a32a904293211e9d69ee","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeLinejoin.js","hash":"0abf16b1b4e85d9920055453de40e57ba8264543","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeDashoffset.js","hash":"04130bce44da796dd021a0e9c442b5c2843979c2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeMiterlimit.js","hash":"c33171a7086caab2970b2fc0fc7c071284050860","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/stroke.js","hash":"a4884a3304ae76c07b81c52f4082343dba50fdb1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeOpacity.js","hash":"93808538b96b4489a772b6908367f1138071920d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/strokeWidth.js","hash":"e6289496bf1b4c940430a76bb19b7bb66e7d8d15","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/tableLayout.js","hash":"8ae059eb43f73fe895c159afb499ef375e280e23","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textAlign.js","hash":"ea376d3c86f79b05121f8753724ab04eb1d78c82","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textLineThrough.js","hash":"26fc798b46213c1b2468e06d4dce105311389480","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textIndent.js","hash":"a68b443cef2f1f7973f5c2b66a327d155c27a6a8","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textAnchor.js","hash":"4906cd3baffa51d5e0750123516b41ce581cbf16","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textDecoration.js","hash":"83df5b26b64483f8ce62db98dd5a25d75808ff58","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textLineThroughMode.js","hash":"dd775e36adb1d648165b149fa3d8e2799c6c26cc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textLineThroughColor.js","hash":"644107c2a7f6090e216495a9597caae4ad1823c7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textLineThroughWidth.js","hash":"f76135f5a86c67c422468323c45a8d6c4712b56d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textLineThroughStyle.js","hash":"52c73eedb46e353bc43ffe864ac3391553db4183","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textOverlineColor.js","hash":"c4afb60c243d004a1cfb23adc19ca50975a5e27f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textOverlineWidth.js","hash":"403525f477dc4dea04b855a8ccd691c8e51cb914","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textOverlineMode.js","hash":"7736538e27daf9489531b7bf7795b4fa16e09d15","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textOverflow.js","hash":"51339379c121304d94a167a6b54a79a94587682b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textOverlineStyle.js","hash":"0f3ca319ba2dcda26a2783ec1794cb9795df2e95","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textShadow.js","hash":"9853ecf6aa2c1ecf18e86a6d6c8aa850c2e02037","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textOverline.js","hash":"3a40da4e76b011b5af6a8d46729b8aef59a9c178","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textRendering.js","hash":"c8bf0d6887696a03c1c3b6f6ce85c3cf350f01fc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textUnderlineColor.js","hash":"c0828a84f34193a6c9b539aefe2789fe5d0f7e17","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textUnderline.js","hash":"b1120ff95c9777199a5f47ee51c79818bf424ee8","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textUnderlineMode.js","hash":"6149c009727445cc1d4837c2e543ac8c9c2c07ba","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textTransform.js","hash":"44e9c5378ef4d081b752a06a4d9f1a528ce9c9e0","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/top.js","hash":"632eb761d0c99ad8d58cde8bac592ceda8ae212f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textUnderlineWidth.js","hash":"8cd2d9f66fa8ae77532454efaa05eab10080bad4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/textUnderlineStyle.js","hash":"b52011af8e5383d223a92e3d1649f0493bd14ee6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/unicodeBidi.js","hash":"76b97d3cbf75139c7fce66f682a2d4cef5515e60","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/unicodeRange.js","hash":"b3831b839f264d0b1cd367802fbab0367fc3a56a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/verticalAlign.js","hash":"02fe517d87d630b1d775bc9efac31b03f7862a1a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/visibility.js","hash":"cdd798d2b250e72794cfefdc76c98b3682ce8c50","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/voiceFamily.js","hash":"6f77248a52a97c05ff8d484ccabd7bb61bce40ec","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/volume.js","hash":"361e62a8363ed7d9d5a2f3884e557ce078a085ed","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/vectorEffect.js","hash":"0ba136d3b623cfa3eb6b08763df4c0450c26cf16","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimation.js","hash":"f5f23b09f4fc8c905a1dfbde0f28a77f3b1a9d6b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationFillMode.js","hash":"90a9a1c1ef4772b55160d793661786068f8d2443","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationDirection.js","hash":"ceeece00da8dbdaa295b8125a840911e95581c3e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationDuration.js","hash":"988cda9786304497f58d15cf693335a949a90626","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationName.js","hash":"c7214886fff87bdaad6dc22cae90e8e74c4b9c8f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationDelay.js","hash":"1eb7827b9a8befb42c9c01347b591e4b4ba1663d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationTimingFunction.js","hash":"b3610f03bc401d4adb20486b63d6ac176bb37aa2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationPlayState.js","hash":"7ccee340d9a5bea935035690c594aafec2a739e1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBackgroundClip.js","hash":"473f49088b4e571c294b9a7a7c4c852e1615281a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAspectRatio.js","hash":"fc8fa3f8f8b1d320c0717c57b46d35834ae56fdc","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAppearance.js","hash":"02a7d3cf936b8b8bb3939f2e6f73b7680ee02e97","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitAnimationIterationCount.js","hash":"56159cb27f3506fa72ff2a97c1417798296b9503","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBackgroundOrigin.js","hash":"f0aefa510c314998b688f0c59a89d524ba3a1a9f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBackgroundSize.js","hash":"97b0c05a0c6db8700707234836bbd0dbb1d87158","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBackfaceVisibility.js","hash":"475456cd27cd3b32ed98d4139023b74741ea9ecf","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBackgroundComposite.js","hash":"7e05d46514ab0e8c3214ad5d99ea67dccef3655b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderAfter.js","hash":"c653539660a50c2307dea28c9a216294dce17697","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderAfterStyle.js","hash":"de7f23d444aabd538af048143107bd5c018ee801","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderAfterColor.js","hash":"f97c7000479959aa97f8205ec8175e9de737a04d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderBefore.js","hash":"857bb838f98f19d8ea561a01e522082244c83eca","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderBeforeColor.js","hash":"c215a7b044e113a36167ed36a31612dcb7011192","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderAfterWidth.js","hash":"48cfcdf15d94cf0dc4ddd82a47edc2f87345630b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderBeforeStyle.js","hash":"aa9025717973fb5e1b83d13ea7fb4273e429e6b3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderBeforeWidth.js","hash":"6ee4f1ba11c2dd06cf7f0392ce23a8597d668de9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderEndColor.js","hash":"610f83a255283c152f710289a99dac9a1d191f1f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderEndStyle.js","hash":"c73959ead0f68f1cf9ddde3c9fc4c004be469d6a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderEndWidth.js","hash":"23b52548966a69071e19bd9e69d105bf7716a884","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderEnd.js","hash":"676724a23ac599c7ed2966fcf4228266b5943b37","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderFit.js","hash":"bab3013f106a449f4f70f3c4e15e0a898f9c0fc5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderHorizontalSpacing.js","hash":"e1a467ecfa516c7592054a3bd809c00a3f90da60","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderStart.js","hash":"7808ada36b6a88a576829589e63032e667c46114","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderImage.js","hash":"0bb3a09d7d7d61f7cfd92d80798d50c3c2655fb7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderRadius.js","hash":"4b47798d24a051384bd9c58ef278f80f6c87705e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderStartStyle.js","hash":"1e6c13ff5442d38b21bef478897f3de46f82018f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderStartWidth.js","hash":"08ea78d87be09a01915a2f682479192aa92d9629","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderStartColor.js","hash":"3abdd6a8a07f974200efc2a14fca19ec4b3273e1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBorderVerticalSpacing.js","hash":"02c36d3b792c05a4194b901eaf926eac44314990","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxDirection.js","hash":"5e0c34d782e592246b7e1f55c1219382d57bf6d4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxAlign.js","hash":"a225dad69b37564c6d02d7b5fe6be8453f9ab903","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxLines.js","hash":"3a65f3f657aeebe1f9bbf94c6a921d9a0cd3628a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxOrdinalGroup.js","hash":"4a4a2419ce6402c3ab4a53dfd9007124011ce1fb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxOrient.js","hash":"18675e2a5cb79a09ce0ec0b62bccaeec7615b6df","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxFlexGroup.js","hash":"76d5ed8a4b17385b8d23f8c0244d48154ec6b9a4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxPack.js","hash":"02bf50195bc8d6d43e5baf197a408c937e0a9bce","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxFlex.js","hash":"841d0c2a7a8e5405c57f64480b46ecb39b784bc2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxReflect.js","hash":"c6b47334e0987af105edf9f687d39113b15a92a2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitBoxShadow.js","hash":"8e9c45c91d47f598370d77bca15c98e64e6a7094","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnAxis.js","hash":"48b48c2cc953d5806ed878b5b8446fd5d1b31e22","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColorCorrection.js","hash":"64f047599c5be9e26ecf0c8e710dd6c7878284f2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnBreakAfter.js","hash":"4355d5c294a7fe8d93e8301671dd68a57082613d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnBreakBefore.js","hash":"bcd8d6cf38da48675dea4f45d9c5ef2c2648da94","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnCount.js","hash":"ac6e8d87b81afe226605181f175f042474e192dd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnBreakInside.js","hash":"f98ad16c9b038a3a998b0817b7ac261bf34f7468","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnRule.js","hash":"de43b8a55f57a61bb57ef14e1c250635db467efd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnGap.js","hash":"4d84eaaab0af84132a4339b20d3826f267cbe33a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnRuleColor.js","hash":"8bc29b7c9f72b7d47f565a66d99845c1b6266bb3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnRuleStyle.js","hash":"94ff37cdf687ce63511c5b5f9df929fa20c29b51","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnRuleWidth.js","hash":"e4c08dac0b934a0555f07880f0f67bcb6641f756","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnSpan.js","hash":"723ff16a562b724df00097de0e04c2d796063931","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFilter.js","hash":"fc45685c1301425d4bd499171bcc5362732257f1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumns.js","hash":"06ce3210a7d3efab6df5aff1d56f2838e784fb5d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexDirection.js","hash":"17e14fbc0fe1865dcad3eeedda5cecc09666cecd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitColumnWidth.js","hash":"7f86b86d02a71b699414fffd525e731050a647b4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexAlign.js","hash":"ece0127a3d064d0b76cd1fa71b8c0bef822f0fa2","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexLinePack.js","hash":"01ca7589fdb58fd9a172d2c3eb9f7d6e5436a0e5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexFlow.js","hash":"976713849c845662694e07808d48b9a2b63a7e58","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexItemAlign.js","hash":"e8cdc435368cea493dd2e8a20fc65f5b6a09fba9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFontFeatureSettings.js","hash":"59f68db7fab3d44f21653f9142804f6376142b3f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexOrder.js","hash":"c1d4192fe74bb4e3460708c33778ab4ad45dadec","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlowInto.js","hash":"60f5695a6efa9eb0150710b4a4a55af052de429a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlowFrom.js","hash":"3640ee5f9be1b1c186420d48b63362b6e46f0509","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexPack.js","hash":"5561efc9a9f2b3a57fee542904ca410c41c2af39","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFlexWrap.js","hash":"f61bedf0d8bee5cbc77df5c570ad19a265f74d96","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFontSizeDelta.js","hash":"4d006b76d4ec81798a849ce966b76b7e5d0f7143","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFontSmoothing.js","hash":"683e08744b9b72fadd37e7447a73f4f021fb8fb9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFontVariantLigatures.js","hash":"72af0328bf304a461b6f9a91ec0ba345d647920a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitFontKerning.js","hash":"c104da9b323667145d7f4a927fad787b24775ae4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitHyphenateCharacter.js","hash":"dc8f8b81ea4b1260cc59c9c8f321a2fb9da8902c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitHighlight.js","hash":"47f581096debb18b147488bc8575a253ab7fd3d9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitHyphenateLimitBefore.js","hash":"2c6a2768ebf7ac205b717a5a56eadadf7f9a10f7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitHyphenateLimitAfter.js","hash":"a4bce1681dcbd0be579ae2780c31fdb19f713d80","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitHyphens.js","hash":"02556eef9f55f09d02468be185b6537532bea2a3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLineAlign.js","hash":"898974f0ab8e779edbca22bccd9eaf9db338dfda","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLineBoxContain.js","hash":"4e242b1560e169d8e2981146d6f64465657b9ea3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitHyphenateLimitLines.js","hash":"84ac5cdbeae7fc240218995fe971fdf864a4af98","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLineGrid.js","hash":"7c3e563c3d0de68d3c79d287a6dd6bc63f897dbd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLineClamp.js","hash":"bd9f490191ec72d9e0a6f7d8d1bd8bd3a84a5a1a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLineBreak.js","hash":"7edf265a6535224e37908e95538bf0439ef1c08a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLocale.js","hash":"d9616dbbad2cc8e171641c9df52bee3835f87a9c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLogicalHeight.js","hash":"9f23e2e2f552925798efbdf17eefd838c5abb948","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLineSnap.js","hash":"0f710024885490f454ed01c1b4b81b4094af854c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitLogicalWidth.js","hash":"be34de2daa0b3161847ce6f3a125efaf09e2e02e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginBefore.js","hash":"6e0897079bfbf21bfe11f1cdebd8c4372b0d4549","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginBottomCollapse.js","hash":"a87511e848cb1a7ccd2f0b2791394f1615b7f99a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginCollapse.js","hash":"299e4f7685626ccf00fbc96fbb4b383d96fb9231","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginAfter.js","hash":"e35da84f2da44b3ba707319c95b45dcff547dde9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginStart.js","hash":"1d45c47699b7290b4b1420944824c015fb164a11","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginEnd.js","hash":"fb0760295dff882a62381cecdd196763eb07684f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginTopCollapse.js","hash":"e5be1438618eafa952ecd179626bc6619b88c52f","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginAfterCollapse.js","hash":"b16f9761f21a76b592df0dfff951bc6bb4ade7bb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarquee.js","hash":"d9ed8ab33127879ea6e0016fe02781aa275707b9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarginBeforeCollapse.js","hash":"7a8f82883f24bb5e19461259776fd55a17f0812d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarqueeIncrement.js","hash":"1e720f16b247dd8e84577113304a7162de6dcb79","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarqueeStyle.js","hash":"49819a83cbfe38a0e41572541272a202fd90734c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarqueeDirection.js","hash":"36d70f7f66e2a03793c3145e9b8981a3c077f442","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMask.js","hash":"4b7fb52a15910884afb46cc08be9464a10e45f3a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarqueeSpeed.js","hash":"054382ffd49b01838eddc69bc0b243f116b70ff9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskBoxImageOutset.js","hash":"3dc0fac40a26d197121896b834bb9d60aafdc366","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskBoxImage.js","hash":"993e853701db03529be22e74c6f1d1d8e3f7a862","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskAttachment.js","hash":"c6acd0b3475a6170c1e889c507416c9f813495c9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskBoxImageSlice.js","hash":"c7c978ed4d92cc0ebe001a4cba2227cf8a86b7e7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskBoxImageRepeat.js","hash":"fc4fd887a95b4ecf50e327d590027386396206a1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskBoxImageSource.js","hash":"a505a20c3e8ff6cc8bb5f779d94ef83fbbabb3f8","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskClip.js","hash":"660ed67d251ec9b3f4231d1c27d16a9e57a1c015","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskBoxImageWidth.js","hash":"d90d368b59729c8b65e2069f05c3bbc519df9288","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskImage.js","hash":"e8055ef35bfff64ef3ee4de6bffd838cf5c058da","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskOrigin.js","hash":"71ef4ca594d448fb2db105c21643ef76785b1ca3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskComposite.js","hash":"5528b32fe0dd3c1080c30b5c97a082c0073a7170","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskPosition.js","hash":"941b437edfb9bd7691afdff0f85eec4ac6579de8","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskPositionX.js","hash":"220e86160b2c8bc8260dfe101731e90be175a1fb","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskPositionY.js","hash":"f7acb23d84d6559fec78dfaee73de692b2e385c1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskRepeat.js","hash":"293155ad49a63642767a9797de22e850a1b9c680","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskRepeatX.js","hash":"cc47f7175de2ec427f194ed85a0aa61f237193b3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskSize.js","hash":"48a6d759014f634b8bb8a00be70a13505f57c44a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaskRepeatY.js","hash":"919ad24fc964acdd4dbb02f3e976907d71dd43f5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaxLogicalHeight.js","hash":"4a0229db39e7f4459446487df09fae255df9336b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMaxLogicalWidth.js","hash":"583fcd40f15d24702ac754b5d4a80ed297d315c5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMinLogicalWidth.js","hash":"bdd8a6e713b67cca5dfd6c95d684c6606df06ec6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMinLogicalHeight.js","hash":"1dc7f8415cdedbbe4e320a0b57d51f7172142780","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitOverflowScrolling.js","hash":"02ea1c5176bc5c9b09234b592e3360166787f77d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMarqueeRepetition.js","hash":"22d10644c2baafbd0457b9571ab81de6b14018f4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitNbspMode.js","hash":"00fd56ef4775f3c5b8989737863d1e3f623e0ba4","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPaddingStart.js","hash":"2d799fb2e2724b7ac02789dd9d46205431dc5f77","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPaddingBefore.js","hash":"c39d5a403f909f5e9062e4addecf5ece9fbf45da","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPaddingEnd.js","hash":"dd582921b95bea4b7dbe204df8ae641c039f7735","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitMatchNearestMailBlockquoteColor.js","hash":"6af7558bcecaff28ce276b2ed4e447a43386ea44","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPerspectiveOriginX.js","hash":"9f945410cd71ee792b251b5efb69bfa1af12dcad","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPerspectiveOrigin.js","hash":"c024b52dfdf8c9107961117e9edd0fb3f9e45943","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPerspectiveOriginY.js","hash":"ae8673175e082a3d99900218fbc917dc7e99c1e7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPrintColorAdjust.js","hash":"937e268ee229239ac1be6e72aa13d0bbfadbd9f3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitRegionBreakAfter.js","hash":"bb48e387eaee86d3f7350fc27c405acc450c1b22","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitRegionBreakInside.js","hash":"a4d2b75f6514b954e6a4e34fdbe3f5fd8200b577","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPaddingAfter.js","hash":"e4e27246919a74aa836db91f186822148bb8a908","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitPerspective.js","hash":"d285bd0b58334df3747af4bb09d7e1c34079c6ed","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitRtlOrdering.js","hash":"692a652c450b7eb610f6e3a78dfbc271ddf22a4b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitSvgShadow.js","hash":"6ab4cd6e794b32be7b046e404a8e11bd3c632a88","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitRegionOverflow.js","hash":"8e6887422388fefda3763dcf763de59f52db622a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTapHighlightColor.js","hash":"219749cf12488bdf4be689aa50e2e5994abd1c0e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextEmphasis.js","hash":"2a71753ac9fa303fca2c9b5ed4d27483c9051b11","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextDecorationsInEffect.js","hash":"6ba7df69c2d0f44bfcaee6f582b865074ea0cbd3","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextEmphasisColor.js","hash":"8b8826c530f9e37480de48006403c4d51a7c750d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextEmphasisStyle.js","hash":"98fc9acd744fee6adb2eef769d9d27e2cd70c8e1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextFillColor.js","hash":"ca8c14f54d01df4b1a22057945c2e9e084178e55","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextCombine.js","hash":"c55f537052b2b953f3406dac4d298b0b11992d03","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextOrientation.js","hash":"eb5336f1752c9a4ca9207c08c34a6654a558ce4d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextSecurity.js","hash":"00a676b398f0bffc899c703717df81a24b732be6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextSizeAdjust.js","hash":"df9fff309e88cb6c950f1a857cdaf7b9db61b06e","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextStrokeColor.js","hash":"30865a9e8be43ff22898b16a52d5b86bedc48d09","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextStrokeWidth.js","hash":"b44b0a701c7aa8aa951033058c068f3590004a4b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitRegionBreakBefore.js","hash":"cba167aa7c0b0a09be80e4a69a1172031cb1e0a7","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextStroke.js","hash":"4d2ba0c327be7814f8def04e3d5a88d8cfbe7276","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransformOrigin.js","hash":"c97940b559384c32d56e3c85d84e935c9c56f849","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransformOriginX.js","hash":"263ce0c02f12238cae7f225af1f5ba5fc7501156","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTextEmphasisPosition.js","hash":"1ef660ae1efba0e4d08514776aef0d2506a7d409","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransformStyle.js","hash":"6b67f7bc0460b06b6767eedbdbdb359efa90ccae","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransformOriginZ.js","hash":"d7baf7c9c9a5948106f90f9300179a7492248e50","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransform.js","hash":"cc521781975567b9b5cff4775f40b7550dbd2c81","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransitionDelay.js","hash":"e5ca962a4d4e7d65658029ec5dc2e1bd672e8608","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransitionProperty.js","hash":"ec4824a5bcf57edf3b2fc0bb411dce4a1160c616","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransformOriginY.js","hash":"e1e53e263d896c685fbdc75f64900e1d07d4955a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransitionDuration.js","hash":"36d53f20c2f9b75ebd9ab3605f3dc750487dda24","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitUserDrag.js","hash":"f531379ab58dc06ec2e76efa9a8c79383eff568b","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitUserModify.js","hash":"eea1745ff1da161f7460ba621f5ffabf7670cc2a","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitUserSelect.js","hash":"e167070aeb6518962fc5dcd184b28ffb7e5c3a71","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrap.js","hash":"6a9211510c88ae4483292254405edade8673872c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrapFlow.js","hash":"2dd8e6459aad7316481661ce90ec20223874bd4c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrapPadding.js","hash":"048645ff4d56e2475728784f495ac8f8fc2acdc6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrapShapeInside.js","hash":"24b3abdca29295074f30ac4be86cfaabcae4a9b6","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransition.js","hash":"83aed9f07eea7e0d1e7cf31133066c3f17caceb1","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrapShapeOutside.js","hash":"6ba4f08725802371f4148cea324f23d3231625d0","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrapThrough.js","hash":"9eb2c939e4c51c79b2cde733d2cb3492e755a5df","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitTransitionTimingFunction.js","hash":"13debd6976f4e9914d87abc8189248079abb2421","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWritingMode.js","hash":"86669b75c9eb9113ad20f48abf504e18c787ec84","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/whiteSpace.js","hash":"4da9a9ebfa4f2d9ac332e57d44e3a69ebf5fa4a5","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/width.js","hash":"c5cfbf13d8f8bf7717c975dae4cfd07efafa4e76","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/wordBreak.js","hash":"d84f4cf6a8c0fa03dfbad16d851aaaa6398cf8cf","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/webkitWrapMargin.js","hash":"8eeebbbb84e1c85863b9546bf62e34431f2eb1dd","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/wordSpacing.js","hash":"50cb18e42615f4428fcd51cf823daf87b8b489b9","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/wordWrap.js","hash":"8c074a273924b0167bd68cfc4a8db4da145c3f08","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/writingMode.js","hash":"2270aec8cdbf90daa7ba43efcb2957162f19314d","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/zoom.js","hash":"8c5224c5ff3cfee0dc64e2b2f309d73fa2aab75c","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/zIndex.js","hash":"082b3987818047fb51fbf8086e99c8706b85d882","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/cssstyle/lib/properties/widows.js","hash":"b49e084ea3c82263153da21a5ab2a2e3d2caae91","modified":1471063185000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/actionscript.js","hash":"0ea1dbcc03123f7d61ac0d69cfe55bfbc517d2a9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ada.js","hash":"f03675f08c9750f48c33ea202894cd3b13d8600e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/applescript.js","hash":"64c56abbca58a0881b736a5b7519a178a0a1d782","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/abnf.js","hash":"82addec1b6c07619aca7aada359aed3f34c02642","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/1c.js","hash":"de01bab25b86d1e12cd41b2c151d496d09b07ba3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/apache.js","hash":"c60412ca3c2543b47727c8915286750873a24c09","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/accesslog.js","hash":"348d234c7253b8b308b74376fd92824d7788e745","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/armasm.js","hash":"d49048f28a92ae394e0c2fdddad8e46a53732513","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/arduino.js","hash":"873698f166f498133260f60b37b8c2fea4bbc55b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/autohotkey.js","hash":"a7a96ef42b4f4ceb462bbc1e31562898060fb9f0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/asciidoc.js","hash":"b7e01e2d240ff73a8695ed1447a47c4a0be7b62d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/autoit.js","hash":"5a765d8c3d147df67badc2e4135b8e5df56337ce","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/axapta.js","hash":"0f0f21ccab8b6874e965d53791465ed89e3aa13b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/aspectj.js","hash":"53e02075ee7d4923f95bbd47e3697f6b6bf58783","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/bash.js","hash":"8a9d29a349a9f177a72a4fddcbcef294e8e2f736","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/bnf.js","hash":"ef775edcfecec203e6c67fa994ceb6d7d81d90eb","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/awk.js","hash":"b749eda162b5bfcb684da29e1c2e71712afd2f57","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/avrasm.js","hash":"474db1f6917d9ee3b1679286ec1583f1bbd19c2c","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/cal.js","hash":"7d7b9e510ad2ead900b097c38074f755378647e1","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/capnproto.js","hash":"0d947410d260600d3b110c4c427545b2a97f7947","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/basic.js","hash":"78824065536502064ecceaf75d9571d3380d9642","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/brainfuck.js","hash":"b6d4f266923cc946678a9060be5ad4a02a358db8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/clojure-repl.js","hash":"1e9b837580d563935b9e4a2314e1c618c42cf052","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/clean.js","hash":"2f08f6fd4734e0a12c39362b34b6312865f5ea80","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/clojure.js","hash":"15ea1584ce3ea6837de6dcf9e04b3c9388b62466","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/cmake.js","hash":"72aef704f3645ffc6cbfb8d534fa31c0181e1455","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/coq.js","hash":"f0d48985501355c966a12d54ce236c2c92982b03","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/cos.js","hash":"112dc8b9329863653b8e9d648b8eec0f7f0cb45d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/coffeescript.js","hash":"149af704b2951ac39ff2be20d99466cbe5fc1629","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/crmsh.js","hash":"c8ad2da6b6603b62172e2865eea4add11fd79800","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/crystal.js","hash":"137b69f99262fdac465331cefc12bb5355332a52","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ceylon.js","hash":"586cc177a3c7dee9836e9f474bc3947e93424ab4","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/csp.js","hash":"8a4c03add8f3c7815fbbe8dbc28748e6fd19cb1a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/css.js","hash":"e3e285a4fde1eeed5120211054b1e5f0e4cbf92b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/d.js","hash":"229d02046adf47a87e6229917998b564a0726ea5","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dart.js","hash":"06e74990e6dabb0d55b90bfa1e32786b26ed49b6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/delphi.js","hash":"4771dd9abe3394931dc8e9cf717612617f94e22b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/diff.js","hash":"ce359050293199c8667739f88ecb435a4d08111b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/django.js","hash":"f2fdd57b3a4aad786b3cb81aaa1151abbac9de2f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dns.js","hash":"de0553c09bac9edacdb1c492dd05960cc7cf971f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dockerfile.js","hash":"6a16033eb47225bc4bdc3957c3e685874263b8dc","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dsconfig.js","hash":"e1b080939fb6e23065003841f1b81e84cbd9f411","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dos.js","hash":"bed63b430d0245c8b6c3e430d849c64a8e40db4a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dts.js","hash":"23612dd62fc09eb91bff8e7eafd684d469ef3392","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/dust.js","hash":"2996fd8585906dd1ae8f1dc9e8b8abd7ccd568fc","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ebnf.js","hash":"a2668958d3f99499f250158dd0adc549793c0ec3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/elixir.js","hash":"4d352797253b7fd81a0836ad9d590e515f79d0c6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/erb.js","hash":"3e67ebd4a54e38f7c4352facbb0114b914df773d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/elm.js","hash":"f6a06178460a203c8c49f889be4b51f40832914e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/erlang-repl.js","hash":"b40072b8f60479a3b2fda37c6ffa5c6065e160bb","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/erlang.js","hash":"eab318990e71134e5ffb248663d141dc418a43f7","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/excel.js","hash":"741ee6d1f9ddbf7614a75d90f30c4afd6278b9e9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/fix.js","hash":"225c32c97aad884ad5c3d256b13aac89ab7b3569","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/flix.js","hash":"dcccd8fe672c40b1db80c26ad3389d621f3304be","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/fortran.js","hash":"a9d0aa92cb7a7ee12ae3b89233ef4e3f68a1b5ea","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/cpp.js","hash":"fbc740e6517cbeba0d7608bc595f0c04ef5465ca","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/fsharp.js","hash":"51446ecccedbe24c8477af70d4fbf15d5f090ce5","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/gams.js","hash":"5dc186a0cfd8115c28d82f020d0618566f14e69b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/gauss.js","hash":"c40d2988e593edd4d434336a372ab8a04a975129","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/gcode.js","hash":"1c35a95ccd30d0949d1f09f586989e036c97187b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/gherkin.js","hash":"68eddb4dc9b866bad4fc3b555be92199716489d8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/glsl.js","hash":"c348157dec60d1f1d723b0f88cfc0a9bcc0d74ca","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/go.js","hash":"b4b17b3d63424736f00c4b58afdc313e9094dd7b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/golo.js","hash":"8d53d68e90a908e33670d075a3727bc3bac48f12","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/cs.js","hash":"a8104e1d7f7096087de7138a14c77042966a98a6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/gradle.js","hash":"3c7ba57616e77ac59b59810515bb6d2bebd6b6f2","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/haml.js","hash":"84491f05df1fc74d1084fb253dc12d2bed0a2fca","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/haxe.js","hash":"a2804355ea896b573c3c4c4d4bbc611f65601dde","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/groovy.js","hash":"cb9e4ed4363a68859e7fd8365b7024835691d669","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/haskell.js","hash":"65d0e2f2dd60d21107438f98bf06b5673a0e395c","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/handlebars.js","hash":"3586163cb9c029239185209044f91567bc9388a6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/htmlbars.js","hash":"2b42fc812e7bb39a5e69e2c5a0365a6952689e18","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/hy.js","hash":"6456d54268279752bde50e4ced70f8d5a3fa5c30","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ini.js","hash":"ff3f6c019db17271a60c0110d1c0d8bb4b20ecfb","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/http.js","hash":"202176d2e4fc551d11162a797c1f2ec002412b28","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/hsp.js","hash":"ace444817c7832f9947752ae72f51329502c8d53","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/java.js","hash":"90fa24c718396fe72c34f56c34649d104e31cb2a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/irpf90.js","hash":"25b18b62a7eac03d7cd196c12480437ddd957196","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/jboss-cli.js","hash":"11af05d6fe833154c0fc13a8817c325ecafd0c8b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/inform7.js","hash":"f7019518299290c408b65cae8a5d9a2170f260b8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/kotlin.js","hash":"c8d946ed41119a9801702dc36da57ec52a060e50","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/javascript.js","hash":"6aca7e933f0e8d404f1e62a88756328b4e9b0b15","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/julia-repl.js","hash":"09b83b2d540e2106024dc7fc67c3b65513318f14","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/json.js","hash":"75b75bff84a88d6b0b630442d4b588719e3ccf22","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/julia.js","hash":"f35a2ccbac0bdfcf3039b5ba04f231f8526237d8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/lasso.js","hash":"e519685b2d7e0f11dd850041085b97fcacd8fd3e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ldif.js","hash":"2f6f2bf8d3ff343e8f3d661fb7b97333a84615a0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/less.js","hash":"6c470c8d7a92f1b436536e469b362b92f1b13c67","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/livecodeserver.js","hash":"7966dc033093c1555cbf626b58b9cbbd5f889614","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/lisp.js","hash":"b6d09c4efc9f62bd400d3b4e3a830e86433b3650","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/lua.js","hash":"0bbe0ee424e83c548d6ce21a12f8885b23419030","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/livescript.js","hash":"b3a1310bf1b1c812fc28467c136bbd77610c50e8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/llvm.js","hash":"14449c574014420aaa9131e36c68550b1b46d996","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/makefile.js","hash":"dd503cb449593fa6bfed24c922023213e62a367d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/leaf.js","hash":"7a74ea9bf9a65ea1b3b6632a5c7b4725cea86c05","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/matlab.js","hash":"08d33bc43836283c2181a1077c117c77fc8cc8c9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/lsl.js","hash":"460ee52b1bc77438274d2a4b7dde478e52798c2f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/maxima.js","hash":"3522fa58e0e93d36c3267dea5172e33fe64cc843","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/mipsasm.js","hash":"adfac05b0dbabb7a5053abdeb7f25b0a2b8df178","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/mojolicious.js","hash":"7edb53b8770a591523bbe90601a1097d589a5dc0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/mizar.js","hash":"009acb028481b4f3ad95bec4d0386bb2184e7acf","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/mel.js","hash":"6f19c9f0b7e78725e6391a1e2d3990610cf8c006","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/monkey.js","hash":"64fc8e856e773939f5f50fb03b3e207e77ae5ea6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/mercury.js","hash":"154f4ac390a395eae2bb4246c93c18b7412b3bd5","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/moonscript.js","hash":"485510191b2c8d67c96710cb85dc1a37ebb05af8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/n1ql.js","hash":"c6ab9f27fd4a711387a0d15d75926aa2087b54a9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/nginx.js","hash":"2d35617087edad25bec36f549a82ae574e6c9a45","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/nix.js","hash":"0e799905fad5eb9a7e86b07654d540eb67d74529","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/objectivec.js","hash":"b7b8e950fc63070c2187bba4e00439b492f1af5a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/nsis.js","hash":"859fa05107b664b9ee9180070a3344b7ee5ac18f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ocaml.js","hash":"03e65e7f07732e214a0d32a0b539e76012ed3970","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/nimrod.js","hash":"e892415387bd17ed7f62205b11704e5f0751943d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/openscad.js","hash":"a732c333aa1adaeea2f125e086012305382b674e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/parser3.js","hash":"ac15e9d440ec885a71761109fe40ba8a06c7b933","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/perl.js","hash":"c1872392209d696ab1ec8a34d5a9a2e8ba51ec35","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/oxygene.js","hash":"a8e62344bc5a3d7db691bcf28d53fc305f790cef","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/pf.js","hash":"a7b05b0bce721379a7c5245ab2e87f887d64c100","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/php.js","hash":"a4f9f78b7786797c7f8488220525209393d76c11","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/powershell.js","hash":"c2459c6b38115c02b5edb267042da49c998cf08e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/profile.js","hash":"2199270f25b8e1c6e934f44111d3654d7d1b3c00","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/pony.js","hash":"ebf4ae15519e16eb80c3ab984c648155109ad52b","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/prolog.js","hash":"16087064562b8ee336c7373f2f3f377904a7809a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/processing.js","hash":"d13b510492292fb16f8d8a8ca7787b5fdf83f9d3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/purebasic.js","hash":"684640f179954b84907545c0039460e35da287c6","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/protobuf.js","hash":"abbcec351964992b81f75caade03b077850c3949","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/python.js","hash":"624da737f0410e476b81d65e02b95693b8e88860","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/puppet.js","hash":"2b7644a72813e256632310ec9edef0459727f096","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/q.js","hash":"7228dbc817b650907d60ee957a8303d53f727f80","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/qml.js","hash":"945828adcbf8c801ad38ed551e7213bc97958c1d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/r.js","hash":"d4e0224fa019df6fbfdf32173aa6667748e9ea11","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/rib.js","hash":"6ac4095f443d77730802603b2b9161a9bcf72100","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/roboconf.js","hash":"f39efee84c9b8c3308746c82176ff6a305da7eea","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/rsl.js","hash":"ab3dfe5e601148d016c76aab50fb17afb794c435","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ruleslanguage.js","hash":"5600035cd1c59e034c8b710276ec4029e1594da8","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/routeros.js","hash":"0aeadff1b7b75dc83356842ac17240695d34d987","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/ruby.js","hash":"0f92409522686f18e7382800f9f3aba287869ec9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/rust.js","hash":"efeab19cc69a21478e6c2acc21de4c01a5940275","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/scilab.js","hash":"1ff368f39960bba8051de0706aa97d46ffdeb94d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/scheme.js","hash":"7511d70a0bd2aba70315c32a5656ce30571615d5","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/shell.js","hash":"1bf20ca21d54e843cea24a675a8842fa44ce419f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/scss.js","hash":"3e770e661b2c57b9ee3ead36ef1f358f1a87d6e2","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/scala.js","hash":"fc8d7c529fd4be604eea90cd0a12358fad5f49b9","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/smali.js","hash":"9a8ccd28ca3405e5ba86f86d2fcbe82095d81391","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/smalltalk.js","hash":"45d649415c43d5989bc9bb2548885f0820bfa119","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/sml.js","hash":"03e1e7cf2041103f55d57dda1624ff0fba83d47a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/sql.js","hash":"4e039f7ea433c538390fd8b4afdc6240af5a3341","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/stan.js","hash":"305e8b20c4ac5762dfb13892f87b1127e65ad2cd","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/sqf.js","hash":"3a740091b22b725518953d6710865b48cdb0c8ca","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/stata.js","hash":"52b5b3f4bf075e3d31df1b6c432cd48f5af2071a","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/step21.js","hash":"f9c30d58ef59c96f151a74736dfe48260fa90ebe","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/stylus.js","hash":"a6260a532b4ee8ffcbcace1bbbf502a587f56628","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/swift.js","hash":"7bdb6ef3b8bedeb2064366105577cf3b74637e85","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/taggerscript.js","hash":"7fc8221bb34ff42d867a68a98f93a33e11cac11f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/subunit.js","hash":"58b09d36e6de77766fee9976fa20676fd97914a2","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/tap.js","hash":"986dce0e93f335db4c120876daf523904ba84922","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/tcl.js","hash":"fae3052ea5a3ecb70f4a12d38f2d7fb387cefc94","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/thrift.js","hash":"47c807c1cc33a57f6f2ecb9e609f56ae74d5ef77","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/tex.js","hash":"956a6f3ac9e1e2bc40a49191a4f7558f267008eb","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/markdown.js","hash":"226a75a5d3bae188408a8d388ddaa8d702a38194","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/tp.js","hash":"7690f71ab4b1616b96873b43116e8ae936b1590c","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/typescript.js","hash":"ba777d301245055bc7ceffa2ec4a0e3dd5d99433","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/vbnet.js","hash":"b95eecf676909dab14be6fbbe03d4a4ffd2cdd8f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/vbscript-html.js","hash":"af6c349a4ce7cabf9e94168aa75dfa350664a021","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/vbscript.js","hash":"29df599716e626e26b384e259f052c9a68fd29f0","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/twig.js","hash":"30b6777246eec12be33ba24fc5dfc95565491edc","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/vala.js","hash":"8cf4daa0d64e112a0eede09353cfc4c95be37619","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/vhdl.js","hash":"3baf1eb9aef43fc2aa1c64a258b639bc4e69219d","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/vim.js","hash":"a726fda2007d43cd0734e96e1530056f32cd0033","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/xl.js","hash":"51b7b4ec88350dbaf8bd115e4c9f4a3c3cee32d4","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/yaml.js","hash":"bf63ff94dee5f4680436ecf12daf15d2e6675f25","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/x86asm.js","hash":"5eef051aad64bac3c549311cea1f76521f890580","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/xml.js","hash":"9d6ec52a3d002850caff607948da16e7888979d3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/zephir.js","hash":"fc7c87476ff8fe68e51d159eddb99d8421505a3e","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/xquery.js","hash":"ee7fee4c24dd6112e16b513dd26ca5937d9d637f","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/verilog.js","hash":"2385a8df75d73b3a1aebc591432a53d2e58c41c3","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/big5-added.json","hash":"e61b2d77a36bce976f563f659300e06a33c9e6e9","modified":1401283007000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/cp949.json","hash":"a3a6e6f61a78b50e54947f11ce8daebb8756209d","modified":1401283009000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/eucjp.json","hash":"9beb6afa39229a044fd6935a92ca5e997f6fac78","modified":1401283008000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/cp936.json","hash":"22b95ce3e9743dc8df815b8a6b9c13d1a9f7c229","modified":1401283009000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/gbk-added.json","hash":"918eecca2f76db2aa3fe0bf8634816584bf31d78","modified":1401283007000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json","hash":"bfce88fc92e98c19910fbef1b02b85fb5d2cf2f9","modified":1401283007000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/cp950.json","hash":"33ad3790a0660cd2b7c0c599a7f5d3c147596bec","modified":1401283009000},{"_id":"themes/tranquilpeak/node_modules/iconv-lite/encodings/tables/shiftjis.json","hash":"e02d26e47a7b295222c3ca70015024ca163e7381","modified":1401283007000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/jquery.min.map","hash":"4a0954f42d51f0a5aca0bd5293bc4e27cddb7acb","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/external/sizzle/LICENSE.txt","hash":"110c24a955d57b1c1efa2fc3d8ea93319e908b07","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/DOMEval.js","hash":"b88b3d05a45f2cfff5b83b1eac8c8bb44f08d14d","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/access.js","hash":"2c5b03cdc4164d8e03e3d63a7a2cc12fde3ddb95","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/camelCase.js","hash":"09c7ff83719a9e0b0f840e2ed190eb6065247e47","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/nodeName.js","hash":"8e0c2361a796b398065f3ae81e0e3547fb5268a8","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/ready-no-deferred.js","hash":"3fdf824288de508e27d2ef4ce5e2dff7762daafe","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/readyException.js","hash":"e7625f17020a463401ff5c7bd81a8aafa64c9398","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/init.js","hash":"c7e3582f954cf609a7d396d6836283d856060283","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/parseHTML.js","hash":"1e40ebfd1efa3d512ef884456ec90ba45f804216","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/attributes/attr.js","hash":"1d3f4b76400aac81b573de106ec06a40305eca64","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/stripAndCollapse.js","hash":"8282a841d20f11cf2928df7fd87829432cbafe6a","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/support.js","hash":"ebd434d0124e5c1a2bf449b7cf64e1b9aebb0d96","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/attributes/classes.js","hash":"9443a6de7d15b5b332e3dda24d26f689700160a2","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/attributes/prop.js","hash":"84edff669be6e7f3485dd38dda0b7b2e80c7ce3e","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/ready.js","hash":"d4899c199bdb63319f04b887b738011536c733c2","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/attributes/support.js","hash":"22d4fcb7d12eedab80771efbaed85b93ee0a20cc","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/toType.js","hash":"4bc91dd860d7ae264f58a1c9e309f0064f0a349e","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/jsonp.js","hash":"7329eae13f77e0cd6c4e1f10f3171904b9c21f67","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/attributes/val.js","hash":"a00026dfdef7e4e0a61248ddd18d9cca3378a2fe","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/parseXML.js","hash":"125cae6f45bc0b4ba98a72d6f71f20928ae8e7ed","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/xhr.js","hash":"13ea8bcf4ba2dfb95b05af031e0d63accd117f62","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/load.js","hash":"de8fa520de6f46aff891339f56636622adaa0c99","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/script.js","hash":"ce50f2945ec33541d1ae68276cfeaee4f9a5547c","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/addGetHookIf.js","hash":"dbec6ebe5e770f7eaf98b1a9fa7f39d7be364f5d","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/adjustCSS.js","hash":"c8b8fe466dadb01fc39bbc022c9273f124b57162","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/curCSS.js","hash":"5d688a21cb98e4c95f6b14c4b9fbb993a2d2a6c7","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/hiddenVisibleSelectors.js","hash":"94fad3a6b6b74764b2ed05954a24803017bb2f7d","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/showHide.js","hash":"25f54fa05cc9e2ad58fddf94dda3df9590a56960","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/support.js","hash":"0ab0bb5d303cca270ed6be22321b5016f2ee47cc","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/data/Data.js","hash":"544340cb0d4f0be625efd2cb0f5942812b358e30","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/effects/Tween.js","hash":"514cae74c7a890abad493e1640c0d95196cb6eea","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/effects/animatedSelector.js","hash":"367caa7fb307d2e8eb5fa78e6e952b78ac444d12","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/deferred/exceptionHook.js","hash":"2e58ed9e5a18afe9908249ce73716c8c654e0ca9","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/event/ajax.js","hash":"e55117f4b00ac9eb0c34f931a2445b83529ad686","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/event/alias.js","hash":"f3339a7b93dde7939f1813372d4347312be541f3","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/event/support.js","hash":"b5e0a11ae994d1d6dd445bc7896c4140723ef79f","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/event/focusin.js","hash":"f1d4bb1483c1dc19c7733cd36013b5ef2fe3cfeb","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/event/trigger.js","hash":"12cad88558d6fe61dd46f8736b27339e81ee7dd3","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/exports/global.js","hash":"02eb4205014be54492ab43a943bba0ebce8f6d2e","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/queue/delay.js","hash":"1dc196c5eb1f995364c7951895fca0b92551fb3b","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/traversing/findFilter.js","hash":"a3ce4e12ee5710f86a4703cc4294de904117facf","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/exports/amd.js","hash":"97b53da41b2bc1bcd74b375f45f2ef5dfe6a6397","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/_evalUrl.js","hash":"ddf963dc1b0158374d3da5e5cdce377cd1c0dfad","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/setGlobalEval.js","hash":"a0f3b91dabe218bd9883689bfde906a645d8a22c","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/buildFragment.js","hash":"e4f9d9c7b9a12d77434cf3772d3f33cff74b8fd5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/getAll.js","hash":"b81a6829984b361dd690cf6e2579edb03a6d5415","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/support.js","hash":"c595fa7ba119b8cf37355e43e4d3b48e31a6d9a3","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/wrapMap.js","hash":"200a586e16a2ec701276cf3726c2472422cc984a","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/arr.js","hash":"ba733cc5b66782be55a4cc629630dde8e325be27","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/ObjectFunctionString.js","hash":"7bccbb02e6baaf6fb14867a4fa6ff0f7d8298037","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/class2type.js","hash":"68ff35e5959ee063d41b69142a30a2d1ab00bc8c","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/concat.js","hash":"af2f0fbe56b0e8e6b2553ac1c992c3bf828e5848","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/documentElement.js","hash":"263f4b09abaa4a94a3f0bc5d930ec1551c539fd5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/fnToString.js","hash":"d0259685c435bb92de024408ae550b3a47197834","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/document.js","hash":"8d135f401693309203493578f7106b1f92850778","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/getProto.js","hash":"8e2b5476d40861eaf974c666f89648fab0af217b","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/isWindow.js","hash":"e89b6a06a23cc267ca53df09e12ce1f6edd86888","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/hasOwn.js","hash":"e5f62edc17f41cd712b59e813ed50c090a57be2d","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/isFunction.js","hash":"beff15b8bcca0fe67d2e23f6827d418e92c4c5d5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/indexOf.js","hash":"899c79a00d012718fc52ef44c441070ac8f84145","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/pnum.js","hash":"1a87ed9c608685153553890b8fc73d753b60def4","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/rcssNum.js","hash":"f8384f6f62baab7b15a7f3440f6afbc3aa490922","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/support.js","hash":"db650e20c149d9d12eee29631932bf13fe88eb09","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/slice.js","hash":"e73150eabb0d041d77529c717539a8d583d23bb5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/push.js","hash":"54dfd1e5d9fb695ced23ec19b3e7b86fba1ae4e4","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/rnothtmlwhite.js","hash":"a671d4ecb846aa62fab08e2b3043661a40d4d6bc","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/utils.js","hash":"d3423ce98a4f4cfd3631e4c3f6ed0e635521e49c","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/var/toString.js","hash":"58b3b06a5c28a34f0bbac41d86b31e6a85ac5f0d","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/virtual-console.js","hash":"7756688258fc3610bb6c6da43e7b1a8ad71a66b2","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/named-properties-tracker.js","hash":"06c13b4e8ea708818a356199040f1597676d9c40","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/vm-shim.js","hash":"54d2d9e9e77e6c185f6a037bbf0deb8bdcf65283","modified":1509237787000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/examples/card","hash":"c1405e471f81bbb4eea94c2ef85fa07195a8ad80","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/examples/address","hash":"b6e70440f5faf725b978da4e92f6f39100377674","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/examples/calendar","hash":"3e53cb296ba1799f39c5a00bc4627fa10e26e165","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/examples/interfaces","hash":"9666b12a3d05e526886aa2650f0439d32b25f0dd","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema/draft-03/examples/geo","hash":"74d8c66f1ba74c6cd330b8acd5948efb5f2879e4","modified":1289526444000},{"_id":"themes/tranquilpeak/node_modules/json-schema-traverse/spec/fixtures/schema.js","hash":"a900ee83c77812d766a338c77661982a3e232eac","modified":1497474815000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/modules/nwmatcher-shortcuts.js","hash":"792a7fe28de517899eb31a4dc418528f3fe07e2b","modified":1501857829000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/modules/nwmatcher-cache.js","hash":"b540ed19ed05e5eb15b76147501cac113ec02eaa","modified":1520285958000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/modules/nwmatcher-traversal.js","hash":"0203541901fb0177414d18aea943f86013df1a20","modified":1501857829000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/common/doctype.js","hash":"a17aa0763af81f68367b0987e91235fc67d5c10f","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/common/foreign_content.js","hash":"0694b27d189ab1a64bda037ccfdb8b507a72fc2f","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/common/html.js","hash":"71412638eb668b34866ea8bfc5516c479247a287","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/common/unicode.js","hash":"7eac97ebc4fa47bcb23ee0bd44acff4a89ae3fe2","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/modules/nwmatcher-webforms.js","hash":"660d2b60e371316644ad96fc387300e892deb740","modified":1520286028000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/parser/formatting_element_list.js","hash":"e963edf1ec84f5782d32d17471108d28ca00bd59","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/parser/open_element_stack.js","hash":"6ebacbea460e62519b2a338a7041be90fb731f68","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/modules/nwmatcher-jquery.js","hash":"5c5116059c5d4beceefc7671cdb005d030af1a5d","modified":1520285977000},{"_id":"themes/tranquilpeak/node_modules/nwmatcher/src/modules/nwmatcher-pseudos.js","hash":"7e855592c35edfa667d4ba9690eeedda1621d9d2","modified":1520285992000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/parser/parser_stream.js","hash":"266b5d8131bda70f8222e818a983524c54c60d8a","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/parser/plain_text_conversion_stream.js","hash":"eaacfe12305c90d7d3f03831fe6a80d9cbc3958a","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/serializer/index.js","hash":"d3fe510a4fcba7da8fa1ca7e493ea2f506caee3b","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/sax/index.js","hash":"fcfac944e9857026d285cea33da328c7ef5b5c8c","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/sax/dev_null_stream.js","hash":"54bc6268035474da4c822f3c8c49d384fedd7551","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/tokenizer/index.js","hash":"7396718e2c37ce7023818847a6021f7a2f8ecb35","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/tokenizer/preprocessor.js","hash":"70b5bff33a4a40b868662ab878602cf5528ccef4","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/utils/merge_options.js","hash":"b7eb060bfcdc1fa9d507e15b9ed16ec15efb95b0","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/utils/mixin.js","hash":"9e7f155ceba5d5e6f9b9068e1f709ebb749063aa","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/tree_adapters/default.js","hash":"07fdd4b8ed50a1e4491bd651041c50d531b004b0","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/tree_adapters/htmlparser2.js","hash":"e99d5b5b2447c8e4bb105f4aa64e397f34468c71","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/sax/parser_feedback_simulator.js","hash":"4d6bac5abe1a90b6f8051c13124f798b273bb3e9","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/serializer/serializer_stream.js","hash":"49fbb1f1533732b12ab36cef61fa1f106323d425","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/scripts/delayed-require.coffee","hash":"d7dede6d953440f6ff3c71e3a5676d5d00f523cf","modified":1484000809000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/scripts/delayed-call.coffee","hash":"e4f912e6ef8cd309316302052de85110e44059f3","modified":1484000812000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/scripts/initial-value.coffee","hash":"c71cfd6cb07e088440755a867c2082a40276cef4","modified":1484000674000},{"_id":"themes/tranquilpeak/node_modules/performance-now/test/scripts/difference.coffee","hash":"4a22bfede1f6f6ab3224c20db5132f957c2a12bc","modified":1483841832000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/auto.js","hash":"91c30efe3057333a46f2b84592364c13f08c16a1","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/pem.js","hash":"cd75b18594b8a69c2964bc6b8148051d9da5c69f","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/dnssec.js","hash":"7b7df6803e2fdc4cb1b47d2381675e4a563537db","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/openssh-cert.js","hash":"5f5b9c55338b65465af6e9833fcb093c75d0049c","modified":1492046321000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/pkcs1.js","hash":"024a92f16e3b11608a26316410784e13d65cf16f","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/rfc4253.js","hash":"69af324980e1c05a8fe91c494dcc76b214c0b7bf","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/pkcs8.js","hash":"444430132a5a58e360680807035347774d75ad82","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/ssh.js","hash":"b5927950d688b972be11894db71c61838fe32aeb","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/ssh-private.js","hash":"b68dda2db2355335c8c12365a75104a762f815ad","modified":1488421315000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/x509-pem.js","hash":"3766e5cf45574a710fe2b3db72ab428b7ad22e52","modified":1488421315000},{"_id":"themes/tranquilpeak/node_modules/sshpk/lib/formats/x509.js","hash":"59909f2088fb80f9da9189bb2ad7c84738cb8e0d","modified":1520899262000},{"_id":"themes/tranquilpeak/node_modules/sshpk/man/man1/sshpk-verify.1","hash":"a5c70f82de5313ee103ba9bf3cfb9774465de370","modified":1452565517000},{"_id":"themes/tranquilpeak/node_modules/sshpk/man/man1/sshpk-sign.1","hash":"742f5bb2986ad635eb081bad695573cd6826c96b","modified":1452565517000},{"_id":"themes/tranquilpeak/node_modules/sshpk/man/man1/sshpk-conv.1","hash":"a64a4769ca648e2047d255bf5237ce051f6af15a","modified":1452565517000},{"_id":"themes/tranquilpeak/node_modules/tough-cookie/lib/pubsuffix.js","hash":"ca4db0a0778931d88a162a3c42aee7f4cdcc3cab","modified":1519683727000},{"_id":"themes/tranquilpeak/node_modules/tr46/node_modules/punycode/package.json","hash":"cf2f1c2ca1791cfa9471848841f09855ac92f3ce","modified":1521447495000},{"_id":"themes/tranquilpeak/node_modules/tr46/node_modules/punycode/README.md","hash":"471282886c3bad44b6359b091e9af61bad2291f6","modified":1477286159000},{"_id":"themes/tranquilpeak/node_modules/tr46/node_modules/punycode/LICENSE-MIT.txt","hash":"d7384cd3ed0c9614f87dde0f86568017f369814c","modified":1408532732000},{"_id":"themes/tranquilpeak/node_modules/tr46/node_modules/punycode/punycode.es6.js","hash":"3842ba5c1f1ea3fe707fed64e9f04b94452f07c0","modified":1483725929000},{"_id":"themes/tranquilpeak/node_modules/tr46/node_modules/punycode/punycode.js","hash":"39ab3964d954c66ab440a590444fd7dd3493be37","modified":1483725905000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_button.scss","hash":"70c64560144d7d6015bbedeca0531258f9bafa07","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_bottom-bar.scss","hash":"ab28b4d66f021e44d7a46a76157c6a2b5fd23496","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_form.scss","hash":"14026f13b54ef9f2cd7109cf1bca43040816e542","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_category.scss","hash":"8cfc45772365e537949a4cd20cfa2a79e1a75dc8","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_header.scss","hash":"52de2cb5f49a3b5748557fe2d25791ce52457d62","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_opacity.scss","hash":"cfc9905b6df3b5100a30b5c47fd331068f238f97","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_post-header-cover.scss","hash":"ecd9078372d8bd1b7f4979bae3251e8efb345a9b","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_main.scss","hash":"0ad55a6191d0a533917845006ceae329353c0b90","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_share-options-bar.scss","hash":"06f84bceb82df4d3bda64144f6fe4ad8e3e45f89","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_sidebar.scss","hash":"f9ef0a564553299225e9048462a0bea8760a2348","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_prefix.scss","hash":"5e04cd54ba375f69c97b62b7d4e535118ec78177","modified":1521447424000},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_tag.scss","hash":"c8a87e586e27f999ffa46f273f78a812f1cf2f0a","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/css/style.css","hash":"45bdff1749a72fd7182d12ff5a068d6995499622","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/css/style-1udptkpril81ozu8ifd8zpujn7ipu7lefxsiu5gxx0dpnzntdx6dusvki3ao.min.css","hash":"3fb35db022cbe9e18ceef39a124fa664f3e48d88","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/js/jquery.fancybox.js","hash":"227dd641ffb92c1f0d1e6bb1c695fd4a05a13446","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/js/script-yhuo2grt8r7qkqumzgjoglkfbicl1thukjgmla6jopu56zpcowfedi5zjcor.min.js","hash":"160037ecfd42165894c2ea232cc472b30c4f315f","modified":1521447424000},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/05.png","hash":"a0ee859f437ca41c69004ebd98ec83c68368b126","modified":1548388013374},{"_id":"source/_posts/xcodebuild的使用/thumbnail.jpg","hash":"3589e3cc7df62951d8625b2526a9d59d598458a5","modified":1527331476565},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/wheel.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510758669000},{"_id":"themes/tranquilpeak/node_modules/ajv/dist/ajv.bundle.js","hash":"a02c5e4acdc91a71fbd17cc29c055d40231de287","modified":1513456489000},{"_id":"themes/tranquilpeak/node_modules/ajv/dist/nodent.min.js","hash":"529f4b868b54d95333e5e31e10d85044498701a3","modified":1513456511000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/browser/bluebird.min.js","hash":"2a531eb53b1867033dd5297acf2f084ad3babdb1","modified":1507132266000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/browser/bluebird.core.js","hash":"77b537ba30a5592024b64e92b535cc73376f70c2","modified":1507132264000},{"_id":"themes/tranquilpeak/node_modules/highlight.js/lib/languages/mathematica.js","hash":"78cee2f480b2ddb3e23dc7cebfb0bc07b60e0869","modified":1496198853000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/jquery.slim.js","hash":"1263f61eb65762f1af35c9b3f392ad18de4b3c33","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/parser/index.js","hash":"421cb698f17183c805a33bde153b792bd1fc2a3f","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/tokenizer/named_entity_data.js","hash":"59d523ec51c44b6aa3a59bbdf43e1caa0d6f8a8f","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/source-map/dist/source-map.min.js.map","hash":"b6ed18620ecc607f89fd710546f53935d189485c","modified":1506695999000},{"_id":"themes/tranquilpeak/node_modules/tr46/lib/mappingTable.json","hash":"933221766b88ec0ff2d5200abecd1590a092e2a5","modified":1504404530000},{"_id":"themes/tranquilpeak/source/_images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1521447424000},{"_id":"themes/tranquilpeak/source/assets/images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/css/core.css","hash":"065a29c117d501604f1c7a0ffddac4e5fcea3d89","modified":1510920749000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/css/fullscreen.css","hash":"77a78eec41a273ad382cd5460516497aef1bfb8b","modified":1496920225000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/css/slideshow.css","hash":"f34aedee546fd9085bd52c5d4d66298c68253703","modified":1496920225000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/css/share.css","hash":"1452b4eabd5093a7e85fd04a6f645bde24e1c59d","modified":1510775209000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/fullscreen.js","hash":"da13daea4bc9313cd529b0e0cb5fdf60e4999551","modified":1509692266000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/hash.js","hash":"ca6a86243e1eb30ed1d9a437579a40102bf16f51","modified":1510157416000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/css/thumbs.css","hash":"d805bc578c883345f0c2e533db2d2548281132c4","modified":1510772014000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/guestures.js","hash":"b4fd6bfa8446f05acf04b2f2f60f194acf237826","modified":1510924772000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/media.js","hash":"017b82e1c22c43afeb6b837131bc22bf5036261f","modified":1510082616000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/share.js","hash":"5f82215ca40128d0a757b2bf8485f16cc0a59e09","modified":1510834703000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/slideshow.js","hash":"e489c787f979958ef228abb012fba17547acbc28","modified":1510156837000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/dist/jquery.fancybox.js","hash":"227dd641ffb92c1f0d1e6bb1c695fd4a05a13446","modified":1510924837000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/thumbs.js","hash":"9bd2831e83f5d851db6ceb4a3d354b59367a999b","modified":1510924731000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/async-throttle/index.html","hash":"6168e0b1e0d2fa4f50737fb48faa76db7c2757a1","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/async-limiter/coverage/lcov-report/async-throttle/index.js.html","hash":"fdc1e8d556475ba10e82edc7db64f685eb57fa7a","modified":1505146456000},{"_id":"themes/tranquilpeak/node_modules/cryptiles/node_modules/boom/lib/index.js","hash":"7d5c81ebe3353defb47613447ff77477279014b7","modified":1500421427000},{"_id":"themes/tranquilpeak/node_modules/bluebird/js/browser/bluebird.js","hash":"7e43d39c21a8e049ca38d316ac8ea3c5e551b4b9","modified":1507132266000},{"_id":"themes/tranquilpeak/node_modules/esprima/dist/esprima.js","hash":"ba6023495adf4ea5daae81316f581af91b43aef6","modified":1482463104000},{"_id":"themes/tranquilpeak/node_modules/jquery/dist/jquery.js","hash":"46a436eba01c79acdb225757ed80bf54bad6416b","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/external/sizzle/dist/sizzle.js","hash":"c7e479983484073d5466abf3b82d29a62e6e75f6","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/external/sizzle/dist/sizzle.min.js","hash":"532610fb63d318895cc769c43ff1cf15b313fff3","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/external/sizzle/dist/sizzle.min.map","hash":"53b5df9469565ec4ed00adf05e805993528172a5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/core/var/rsingleTag.js","hash":"e0c7f0197b99cae8e072defce84e825de08ffafe","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/var/nonce.js","hash":"aee7eb54ed4a76904fab26f47ab994616d640ee6","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/var/rquery.js","hash":"1e94bd952094f895b24aa0f683527a1b49bd4758","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/ajax/var/location.js","hash":"149669ae604f8827d9afff7a9ff35b477c0d116c","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/data/var/dataPriv.js","hash":"6da82bd23af73c8e9bd8b8d2e8a791d72f903826","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/data/var/acceptData.js","hash":"6f1a8e3bbd06b58c996d0b770371968316e13c0b","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/data/var/dataUser.js","hash":"6da82bd23af73c8e9bd8b8d2e8a791d72f903826","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/var/getStyles.js","hash":"e7ae46c3a405b592fae4fbb3ccc30deac8cdc414","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/var/rboxStyle.js","hash":"289c180549d9904a0e89049fc9b9730a2cf4725c","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/var/isHiddenWithinTree.js","hash":"ce2865447af198897a75e060ab88bf0f4b849939","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/var/rnumnonpx.js","hash":"8e1d2032b8545012c621415d6d8b20cd29cb99a6","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/var/swap.js","hash":"a3c39310f9fd61df40f31b2a70c425b590aa632d","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/css/var/cssExpand.js","hash":"a102daccb31836f375d719adbf42492dd2aea403","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/traversing/var/dir.js","hash":"ccaa8e6e08cf5dc4d37f72f5e7ca15b6020e5fb5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/traversing/var/rneedsContext.js","hash":"66a630a73b6c44afa6cae81e449c85f81283512b","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/traversing/var/siblings.js","hash":"6d5cd9f4b8c042d23c62b1de1ac69e1e5c95bc3b","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/var/rscriptType.js","hash":"4279d52660bbad7a3cdbe4425823188f7f25da88","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/var/rcheckableType.js","hash":"6a61eb7800235a7853483fe99c514e20de667cc5","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jquery/src/manipulation/var/rtagName.js","hash":"18204e377e28a234757a6f817de557387c86d083","modified":1516469212000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/Window.js","hash":"329719cc68f9781f3a5fcb40a323124b19c0921f","modified":1516582202000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/documentfeatures.js","hash":"8fd0b180658dd3dc074b8c460955b90211137f2e","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/default-stylesheet.js","hash":"f2d39510ab9d54cd3081f693bf5018a0fc965f48","modified":1511132063000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/domtohtml.js","hash":"9f0b13fa2e45ac8d2dc2a1241e236979c50dd158","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/htmltodom.js","hash":"2a651ef8ee63d648ffe623297550250608671ae7","modified":1517279218000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/not-implemented.js","hash":"8cad68b2b537c5cd82a65a4f5ea32ac3794e34ef","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/parse5-adapter-parsing.js","hash":"3a154c760a2c560ad4e58bb9431018d6e51bf977","modified":1517279218000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/resource-loader.js","hash":"2102b8c25b5e81bbda665c3e4742117f40f7f661","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/browser/parse5-adapter-serialization.js","hash":"21724f86d6c9cd11e780b60cd5db1f2cda6ab25a","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/level2/style.js","hash":"9edcc4cfa0baee2835d1ca46dfed76e3d7465791","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/attributes.js","hash":"e0f0195d409b530a7600f4fb80185dfa0331d7b1","modified":1516579752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/index.js","hash":"5fcb98d1686d1d85931975fb2924019f2f488a9d","modified":1516582202000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/named-properties-window.js","hash":"227c8b95a7d5686c34437bf877d04478a547bb2e","modified":1511132063000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/node-filter.js","hash":"3bac3f078bf6daa081d5edae4bdbc0113ef3c84f","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/node-document-position.js","hash":"592e5f4576379ce2636fa02ae07aded9773fbbcd","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/node-type.js","hash":"41293df4016041192957df8af36489dcaae90eeb","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/node.js","hash":"bdbe59facd1f860d3bb4847c46bd41b9b282eb18","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/post-message.js","hash":"71e060ab6bba53f7b393332211624297146b9a6e","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/register-elements.js","hash":"e9a885e8485b09592a9db479262eb60b17a03c60","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/form-data-symbols.js","hash":"b29b3fa77eb881e0715ed2be0cb62208f5f74f3e","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xmlhttprequest-symbols.js","hash":"f6b724ba33b614eaa43b0b7e696e2ef28668aac8","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr-utils.js","hash":"4020c6fb3c9def363766e1cb19338b024f79d937","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js","hash":"e8c7d657e97bde266aa3b3bd20aa9ed63b0ee740","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/extensions/location_info/open_element_stack_mixin.js","hash":"760555ac268489ea00f1669454750e8fcc095d38","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/extensions/location_info/parser_mixin.js","hash":"85c92c84f5099b1b0f6b6e579335d9cf5032d93d","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/extensions/position_tracking/preprocessor_mixin.js","hash":"251f0666e85a95692fb782717902e9ea31f16484","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/parse5/lib/extensions/location_info/tokenizer_mixin.js","hash":"1af1c6683291cc715be6be23cd9b571414cd8890","modified":1509841844000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr-sync-worker.js","hash":"2ef78cce132d18723647e0433c016fc2b5592316","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/source-map/dist/source-map.debug.js","hash":"a6bfe62f20aae6db6d91a21cd26493ec318050d4","modified":1506695999000},{"_id":"themes/tranquilpeak/source/assets/js/jquery.js","hash":"46a436eba01c79acdb225757ed80bf54bad6416b","modified":1521447424000},{"_id":"themes/tranquilpeak/node_modules/@fancyapps/fancybox/src/js/core.js","hash":"1ceda7f6cc1f02bc3a6030afa0389608a547f96f","modified":1510924756000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/level3/xpath.js","hash":"760bd8534316f07fc44ae5d4c7a62f92e48b45ab","modified":1506783373000},{"_id":"themes/tranquilpeak/source/assets/images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1521447424000},{"_id":"source/_posts/xcodebuild的使用/cover.jpg","hash":"3a718ef0e840c8144c370ff852cc1e6b08461a81","modified":1527301839529},{"_id":"themes/tranquilpeak/node_modules/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1477344801000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/attributes/Attr-impl.js","hash":"e19a87710a0f1711d01d9c92820c98c7316e950c","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/attributes/NamedNodeMap-impl.js","hash":"ac564b618bb99fba92df1b4b8bfcd1c5fa3bcc48","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js","hash":"5e4ed14523411d4c290181304f198b6803ad34ff","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/aborting/AbortController-impl.js","hash":"7d71dfb3f41844e347fba4a089180ef171ec6215","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/aborting/AbortSignal-impl.js","hash":"12c142a4afc817daceebe2498cfe1d0fa7751f1d","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/attributes/NamedNodeMap.webidl","hash":"086a3153dec97ab80da8f54fc94008dee10851cf","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser.webidl","hash":"266cc4a8274cd9bd8618deb131fb7984e8cf60f5","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/Blob-impl.js","hash":"1021fe005b766a8058dde7a9f922c4ed704e29b9","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/File-impl.js","hash":"df4f1476c23815b950537f35edc1d55c730bd4ab","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/attributes/Attr.webidl","hash":"d12e6045aac7a6671a6baa5acfc1d9badb8c6042","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/FileList-impl.js","hash":"902966fda72a5160aa2191e05293675f61ca5316","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/aborting/AbortController.webidl","hash":"c745e3912f59d7dd960cc74105eb2c1266c49022","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js","hash":"491ca431847422a669bb817fdafa173dc2f78f09","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/aborting/AbortSignal.webidl","hash":"f9ba84b8e3acae5e3aa48449a3ffefcb8e1a272d","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/Blob.webidl","hash":"ba623f9a061c2bfa5681a030f67e9b8d1fd25e32","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/hr-time/Performance-impl.js","hash":"aea14a7bce5a9817f18d952926f57f42eb95e30c","modified":1516582202000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/File.webidl","hash":"c160539e84ad1ee01a5b0fdfe8c7c46f55c2a90e","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/FileList.webidl","hash":"d2a4b651719d1eea1221ec19c0088eefc2dcec55","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js","hash":"c710839a5e81a43954c650c9b8d9604b70fbb102","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/dates-and-times.js","hash":"f8ac30e8962e71cb3b511dc9a4c6e97a84a51bed","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/document-base-url.js","hash":"f6f4ef535bd1f0f5d99a9f084bf58131d4742fa2","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/focusing.js","hash":"1b2d3534791a2a8a2dde517021329f5b58b8c35f","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/form-controls.js","hash":"bda372d4d4013c4b5c9ddca42e0cca03214612f2","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/internal-constants.js","hash":"79ef3dc695f7842b2411de1cbbb693d8930b21ff","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/json.js","hash":"82933f88f40717806875bfe06d344c6f490c8d5c","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/ordered-set.js","hash":"214ea25a61d76b4ded9a222df5147b14a318b19d","modified":1506781430000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js","hash":"63330034c7c3e6b25ef59e267802e8841d405984","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/selectors.js","hash":"1dcbe841a0c1fd1b4dede425d36b18c24fbbf734","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/strings.js","hash":"95f3d8ecbf3de85063410b4f0fda3e5274a9e127","modified":1512931745000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/stylesheets.js","hash":"71ad38adf2572788aa981a222d488507a4b9382a","modified":1516777450000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/file-api/FileReader.webidl","hash":"b62cfddbdf80132715ea06276b998f5a759ec060","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/text.js","hash":"f5476667aea8655c1d0155bde2165f00d90c832b","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/traversal.js","hash":"ca131c80bf639eee09193d6b5c43a0bd1aee9f14","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/validate-names.js","hash":"2fd08b9838b1e506674e59a7e8087e7fc29ea37a","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/CloseEvent-impl.js","hash":"d529769241a59610825baa022ab324d4f4c1c0d9","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/CompositionEvent-impl.js","hash":"3a4f123331a1b8d1ed91658321865d46ac0cff6c","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/hr-time/DOMHighResTimeStamp.webidl","hash":"a65aac1f855ee38f006df59cb7b199ab3dfecdd0","modified":1516582202000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/CustomEvent-impl.js","hash":"ad4c7ec9c38c5d0988e0398cfa4e68282c89354f","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/hr-time/Performance.webidl","hash":"e09e27954172158ad5ab3c61c02d71bee9245ed5","modified":1516582202000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/ErrorEvent-impl.js","hash":"66f32dce56ad675c86d7b0311194b9f1fe8988d0","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/Event-impl.js","hash":"63f617bca8997d266cbdae37b3f84c695107a331","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/CloseEvent.webidl","hash":"37704398fc36699bfb84a8a5da9ec8aa9f088d15","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","hash":"9d418bee9136d2b64a6d0569af0b726baa432b63","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/CompositionEvent.webidl","hash":"30607dc9453f42565a492f33b64510256843d442","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js","hash":"26aa4a3c46aef3cd403776359aea5623123eff83","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/CustomEvent.webidl","hash":"ea77efc3f8541e65c79528a0a3753a7fc24b0ea5","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/ErrorEvent.webidl","hash":"929c2fe84f6577bf5c1d104f5025c9f497907582","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/HashChangeEvent-impl.js","hash":"acf8771bdacf7136546668dcfee72ec3d3e1aaf9","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/FocusEvent-impl.js","hash":"050c0d71a0b6ccdf8d570d436e10ba43c45bacb0","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/KeyboardEvent-impl.js","hash":"9646cbe0def2f763b7e5984d182ba294f8b18572","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/Event.webidl","hash":"cfeee77070d02839d391acaf6dfb8a444fcb4d4d","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/MessageEvent-impl.js","hash":"becab94164dae5bd0321573331e614ca468a92cd","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/EventTarget.webidl","hash":"b72be7177b3072e97d3bcde19a2878fef1b8652e","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/HashChangeEvent.webidl","hash":"83389755004da409f783b7d7dbadee46ce994ac7","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/MouseEvent-impl.js","hash":"2fb389a3f49ab12e49bd3bb3398e515fffbaface","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/PopStateEvent-impl.js","hash":"45c5846e516ff1a25e69664a60b469aaed3c7c96","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/FocusEvent.webidl","hash":"361c7eda9993f1e0e860d07d718df933c441ea4a","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/ProgressEvent-impl.js","hash":"4b0d1422a04c0dbf765b589387d01939634546bc","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/KeyboardEvent.webidl","hash":"9fcb11dd035ced022f49f65189389e5a9b590751","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/TouchEvent-impl.js","hash":"d9161859e74c72f6bfec7e2d400e5b2f333a558b","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/MessageEvent.webidl","hash":"6df0f2d5a86e0a8b8d51ffc4d27ce79c6d29230b","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/UIEvent-impl.js","hash":"bb7bb59a978568b55087d8c95bd077358d07b96b","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/MouseEvent.webidl","hash":"b46dff06be55d5b26903357227813069e6b0fb56","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/WheelEvent-impl.js","hash":"35b154d1c73972ad9492547c69a8d0b30e4c2d1f","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/PopStateEvent.webidl","hash":"4e7606b2eef2f0ae0c715440dfc2ce060e03f3ef","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/Navigator-impl.js","hash":"1485ef26cbe4c705c31f66b7a7d6f7f478468877","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/NavigatorConcurrentHardware-impl.js","hash":"32b4427e3023291ece06db7e44e59a68f80b8f17","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/ProgressEvent.webidl","hash":"62dcc2517ae98ceb9e91eb3b0f54eb7ddce15bdc","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/NavigatorCookies-impl.js","hash":"564855e3b5f57d878b05e2ada8aa8c8d42a70470","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/NavigatorID-impl.js","hash":"010e2c4884268fff18a5d5a4f4ac3f9a97122380","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/NavigatorLanguage-impl.js","hash":"14cad57bc8a9bd8e7237a93e53a2f6185e099c4e","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/NavigatorOnLine-impl.js","hash":"1ab50e58df68349ca879553d903d8a027c2228be","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/TouchEvent.webidl","hash":"a4395394089fd26c485e6aeec8b513b8c7dba1b7","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/NavigatorPlugins-impl.js","hash":"1e33f8fcf62d3202ed76ea0e9cfe2e9d5322d1de","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/UIEvent.webidl","hash":"d11f0e40c8953be5faee2bba25ad821336bb4983","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/AbortController.js","hash":"65ddd7c7557dab5f375f126688a71d7373cac3ae","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/AbortSignal.js","hash":"0dc962009b1acea56b71f00aae9ab5ec623a4eb2","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/AddEventListenerOptions.js","hash":"8e3c9a58ebf77dbd5a174593e4d670a70083679a","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Attr.js","hash":"7599f343ff2af07a572f0893db2add8d621118fa","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/BarProp.js","hash":"d8b888c616cb9293ceb4b25837904ba9c882e95d","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/BinaryType.js","hash":"5c9f2669d628a9eb469066606d29ed52eb687761","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/BlobPropertyBag.js","hash":"4dc43c10799aa5636fd239b791967320d58b4747","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Blob.js","hash":"df5c6d2a2956feae9aab53875d0835d36f08d98d","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CDATASection.js","hash":"525c446f2f71954a90d98f11b4c1416dd12099f6","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/navigator/Navigator.webidl","hash":"249c60a8bb160163376f0fa0bbe8018aadf02457","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ChildNode.js","hash":"0bedc5e964a4a0fb52dac0e2efdcbf0006246544","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CharacterData.js","hash":"bd6d089739d958b328a981b602009643a81b1ebc","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CloseEventInit.js","hash":"2e66002b783e357edb31c095c11b4d519f6c2caa","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CloseEvent.js","hash":"8408453ecdff6f5056f8a77f6336e9d41e389a6d","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Comment.js","hash":"419f17b2a1f52bb2d6f47913ec0349ffc5b8c38d","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CompositionEvent.js","hash":"3be941e3b4599153c69eb1f1d6b322fd561ed358","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CompositionEventInit.js","hash":"84d6108d932fde197617196e0d7cb9f30fe9213c","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CustomEventInit.js","hash":"b3fad43bc4e3f884c9e44025350ffd6b3dccb81f","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DOMImplementation.js","hash":"71893fb0233bd9d1293f38e30e594f22aa86e085","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CustomEvent.js","hash":"808ff082f86573aa383fb17ad6d01a9b6d00ee28","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DOMStringMap.js","hash":"888fc3b4fb0a4cbb57cacfc66f41ededc7ec1a29","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DOMParser.js","hash":"f512c0c44043dbdcfdde1746984cbdc29cb401f6","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DOMTokenList.js","hash":"306356b45ecdfc7dd700451a63288993a0b0a5e7","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/events/WheelEvent.webidl","hash":"4abad5d70e85ae2babf28083d5c05c51c8229981","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DocumentFragment.js","hash":"789073a590d003d397e5e8d60761f3934a70c0ff","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DocumentType.js","hash":"66c6d289c2550be2feb237da36e9895192030305","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Element.js","hash":"dc205ad94b22c629b3c7ceb96abbaa90eaed9c31","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ElementCSSInlineStyle.js","hash":"b8bf68e356a137cae349d06da13b06574cc2f94c","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Document.js","hash":"039ef4cc641ee90301bee050f07353b64abc1386","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ElementContentEditable.js","hash":"9843136ca053ee64ddca320960053fcf80978439","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/EndingType.js","hash":"c75874d420f3f354ddf1dd3bad6427b2a54553b8","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/CanPlayTypeResult.js","hash":"02501b5293eb7dce852116883f6f719552215223","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ErrorEventInit.js","hash":"01a25ab854628a12c8913f1993524a70ea41b06e","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Event.js","hash":"6b50a22cd4d11e7ed10c0f6809affc3386e8cfb1","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/EventInit.js","hash":"c97180a3d1a90bae4bc195e31aee5a58de7c3395","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ErrorEvent.js","hash":"94e676d151c0bd3a99ee15285fe38b6023587b1f","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/EventListenerOptions.js","hash":"aac84f95fe12659d6040928381206e3fb34d4c57","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/EventModifierInit.js","hash":"b1fbf5e0e82f108932284d2a1d5438a05aebf961","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js","hash":"8bb49e2626f183c2648bfbe8c8b8b281377b0ba6","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/External.js","hash":"4625e55f672072fa8a839c9bec46a81eace7bb06","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/FileList.js","hash":"061bcee3143f07d75da49777cc2cfeeb0c865114","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/File.js","hash":"21521389c22011ef10840708429ec01ece416c93","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/FilePropertyBag.js","hash":"fe78e31b77bc9cffcbcaf3407e9f798d39eaa6fe","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/FileReader.js","hash":"99afe329661ef4b2313d426544cdd6604a364373","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/FocusEventInit.js","hash":"787e647ff3c9d457269a48a0021b7dd82958f360","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/FocusEvent.js","hash":"4efa08cdb435a59eaa0ed5513f5fd6693901d1cd","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/FormData.js","hash":"7194c74eba031691f79ade2105b6db3c3dd0e4ec","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLAnchorElement.js","hash":"d28c51723fb40ef1a546b46b16c2826b4b8c962c","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/GlobalEventHandlers.js","hash":"79b06fd1318a8f8b3a83c0cac0a06d81b93d6b29","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/DocumentReadyState.js","hash":"0714a38c91d37980150bc79919afcc70f83b4883","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLAudioElement.js","hash":"9763b5af5f2b2c0e784efe84dfba3709a789df6f","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLAreaElement.js","hash":"9ed27edf3d69f30ac24fc5a96ff654acd9f5e126","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLBRElement.js","hash":"a7eb71a87a32b0cc6aea959a7257e303c4b9a509","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLBaseElement.js","hash":"8bd8e69989fa16b3884b83e50ac12dfb6e7fa98f","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLButtonElement.js","hash":"b8a4e5b61546da7535d9311bf49b1de7b665dc7d","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLBodyElement.js","hash":"c2334b777a83e9714277a3367724d1dbe871e3f5","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLCanvasElement.js","hash":"3496e14a50ef8781efd87214af84971ed1e3241c","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDListElement.js","hash":"b50837c74568ac83c9a3b2d2536083c2c17fdddd","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDataElement.js","hash":"3f78fa7d9e85694aac361bee2f28152e08241dfe","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDataListElement.js","hash":"103ffb34467c6f33fcbca211c85084f47b397951","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDetailsElement.js","hash":"39b039e88eba3e8413c9e283f776bf913fce0605","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLCollection.js","hash":"6bf44b68971e36440ab745bbf1b814ca1e58e2a5","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ElementCreationOptions.js","hash":"209ccceab18d5b5811085585c6534e8f065d55f8","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDialogElement.js","hash":"313a4e486e816c80d8c32ca7d60bd513e9163a8d","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDirectoryElement.js","hash":"998a35b83909dfafe6f64c6e9d0274cebe49b052","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLDivElement.js","hash":"a66d224509b8127a2acead1227cf92d4ea3c52b5","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLFieldSetElement.js","hash":"03a20b270fe14b3c0bbc0381ffd8868072bfdff0","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLEmbedElement.js","hash":"240e3dd4e8904c7871c5b593dd204a1174521d5f","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLFontElement.js","hash":"6928e9a9f43ce3ab81c730e39e8f709f45037939","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLFormElement.js","hash":"e4a455841fc565667cef11879a93142d5fc3f51b","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLFrameElement.js","hash":"92bdd4f4e28a08e44fa603b2c3731b301bcc6e3f","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLFrameSetElement.js","hash":"bd33f50fec379ce19baff87b70d03e3f68b82e6a","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLElement.js","hash":"7c34d95b9ca95fc7202400ee8714e3afdb00cacc","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLHRElement.js","hash":"d373e089cf755f1fb5ac705b6a47e1ae0a21ce23","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLHeadElement.js","hash":"ebd0bc50105b27f62b75e10ad96e768372f2be45","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLHeadingElement.js","hash":"e71f6e896a6182fa5c93417b56f620a1f42dd394","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLIFrameElement.js","hash":"2f41669df6b74938cd93cc1d618758cc1565e555","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLHtmlElement.js","hash":"ee2904efbf5a55a3b61446b380b2a2db5854b3e0","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLImageElement.js","hash":"012d723b88527f24c4d853d1cd004b9fceb10c93","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/GetRootNodeOptions.js","hash":"c0b66fb1f04f4cb215b1337ceff58780034a4308","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLLabelElement.js","hash":"fc4e4fd3abb43f9450d5e5920e066f11c62863a2","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLLIElement.js","hash":"6cbaa1cacc11bc9e9fee6147656f201fb6fe72ae","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLLegendElement.js","hash":"14f7fe9cb4269a0315d96d50bf302216c1596f86","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLInputElement.js","hash":"f36346f26b6b6b83b88bff427176c39cb112a2bd","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLLinkElement.js","hash":"db5c9230d9b180f428b92fcf7770cbb2032af983","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLMapElement.js","hash":"ad04b4774fc34888163aec8b9a079ddbfd2422ff","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLMenuElement.js","hash":"6ab605c290953c325444c4a8189594a22bfe317f","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLMetaElement.js","hash":"a75581b1b13d38e65315a98dba6bfdd5abd37090","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLMarqueeElement.js","hash":"fbb96bc2081b8f64ce930f447313e6fd517e08d7","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLMediaElement.js","hash":"d43441b2b04fff071952b4bba79e65619d4cf53e","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLMeterElement.js","hash":"b4656836b8893f7629688ee142e7327c5224b1d7","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLModElement.js","hash":"b23b459df867041c691fe34a2343f7c0643af43b","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLOListElement.js","hash":"97e65803ae5829366d337d3690dcf9d00dddb8c3","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLOptGroupElement.js","hash":"7e6ae62df61a44baba906e695a53d9b286cca4d3","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLOptionElement.js","hash":"c0fc7fbaa640b1b888729d7620de850240e10ad5","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLObjectElement.js","hash":"1bf78e94b23f89acd0150a61c8be927943adc372","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLOutputElement.js","hash":"90dbb129976486b87697a4cdbd05f1b8c757f625","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLParamElement.js","hash":"ffdcc7da5ff7c60c1c3df177b298827fc2daf5ae","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLParagraphElement.js","hash":"10b51ecdc63c73579b844960383b723214442214","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLOptionsCollection.js","hash":"ea22f47634b139ea5c8f476f782c672ab040a395","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLPictureElement.js","hash":"c60af615dabac0c08c72b78e3c6778888d0a651b","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLPreElement.js","hash":"709c91bc0729640b7774c06fb8cf7a7a5e8cc40b","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLQuoteElement.js","hash":"743794eace3c6aabbb3754e761c0bd2787508429","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLProgressElement.js","hash":"e94b41b56f04ac0ea1785245633ac3188362b39c","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLScriptElement.js","hash":"99a579aa09d247335da5c6bd51e24dce6784208b","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLSpanElement.js","hash":"ea437b1f9c98161c6fb5e23b229d8407831c5770","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLSourceElement.js","hash":"fa1c2396bc694c4efd3b01f186ea5614a2dc3394","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLStyleElement.js","hash":"74cbbfbddd5eb5fd9419f4620df4cac1d1047187","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTableCaptionElement.js","hash":"578360ad957433e096a1200c8a65495526445057","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTableCellElement.js","hash":"293d1141556f7d2a45175888de8c4b90e1728c94","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLSelectElement.js","hash":"7179651c45eecd9cec3fe140b43821808c12abda","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTableColElement.js","hash":"e0fe9a7e400f68e44878d2cb701e9717226ba64d","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTableRowElement.js","hash":"e0d240a50a24010824bc1f5d2cbd8738404d5f12","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTableElement.js","hash":"f6434b9a523b3b4a0fd39a4eaf335b749567ea0d","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTemplateElement.js","hash":"8775ef22b9d7fa9c93a842d18f03f0b4547a77b8","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTableSectionElement.js","hash":"fc1d2d46045f564b49529fb60765785bf005f414","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTimeElement.js","hash":"8e3abb193679fc678bd038efc776616e18b423dc","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTitleElement.js","hash":"19780293e81e0a30b12fd85b93842b561d60f306","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTrackElement.js","hash":"459559f7355415613bdee7a495bf2821ef53ac73","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLUListElement.js","hash":"aa656336a992df16ac03cbffccce549551af627d","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLUnknownElement.js","hash":"9f84088eac3912125a6a94c1ef72ba8db6031172","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLHyperlinkElementUtils.js","hash":"f1c57fcbff40cbb983d25d84968f8bec887e8a92","modified":1517279567000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLTextAreaElement.js","hash":"ad0174cbbad68e9039cc3e58c1e90a87b6866aa0","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HTMLVideoElement.js","hash":"b62f41b3a97bb387b3aab339b140eba910d71f02","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HashChangeEvent.js","hash":"0315953d217bc1f7d173e3475b039155fa1cdce8","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/HashChangeEventInit.js","hash":"9f3138b8a58a7d23fbd4fcef08b80976e6faa7e1","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/History.js","hash":"e5c9a6a0917f6899ac417e22e1e5415b42b0800c","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/KeyboardEvent.js","hash":"9e7b76b3910e8e43c487bb165d1077954586727f","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/KeyboardEventInit.js","hash":"78ea18f4b2655bdbcda880a39f38d858806bb2fb","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/LinkStyle.js","hash":"7ffa3f04e1eba1f96d48ff8b0c82ec8ed5ede9ca","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Location.js","hash":"575c1b600462771fe6c037c2a4314cc9c8f15221","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/MessageEvent.js","hash":"a7f99b0ff41286b42ae26fb36aea56f9a5a6f779","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/MessageEventInit.js","hash":"418e503b40354330b1b814250386cb676ee141af","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/MouseEvent.js","hash":"c959c4f0e393b3febd2cecfee00a22862d9ab73e","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/MouseEventInit.js","hash":"d7c18a3e878cb29caff9e1edf0d4050450c5f9d8","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NamedNodeMap.js","hash":"c201645725c8a5a5e0df3c282bb3ae7b34a41fd8","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Navigator.js","hash":"a1c6d9e1a4d03fa14c64f86f1c83cbc26ba5fae6","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NavigatorConcurrentHardware.js","hash":"4c9d6dd53eb13809ab72b8dbbc1e54d7c7e19d32","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NavigatorCookies.js","hash":"d47e9ba627582920debf7a56fcb79fe089e35033","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NavigatorID.js","hash":"c2988bf3549dd8912b0ac6cd0660591fd02f50c0","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NavigatorLanguage.js","hash":"16bd0facd977a67080793c761ab65e0cb02449d2","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NavigatorOnLine.js","hash":"5cce0455095d77e5881d2ea9dc4d1e23aaa622bd","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NavigatorPlugins.js","hash":"87775d13399f1b9e0b9ac134ea1e46db3368df3c","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Node.js","hash":"1f9a8be998c954b136bf61d0ece1855d9681560e","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NodeIterator.js","hash":"46cf2dc696db53f2fc29f7463353c2c1d96075de","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NodeList.js","hash":"be00e43dfeac3910d3fdfc71111f16e058907243","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NonDocumentTypeChildNode.js","hash":"a072cb8acf1af0930b750cda930fe3cc84e84ce3","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/NonElementParentNode.js","hash":"544a931c961914234e7566bf7a176d34a2115342","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ParentNode.js","hash":"7ff3ab2e8bc2a9d92fb950c3f2e5fe410ee26d19","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Performance.js","hash":"506788aff84c352b78a5c097b4e60b375ca3ce3f","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/PopStateEventInit.js","hash":"4ab3e7da79ebb178ccc4e7d31a1d3897c603bd2d","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/PopStateEvent.js","hash":"887922cfde792736aa8f61743c13592d292b4010","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ProcessingInstruction.js","hash":"c333ce87880d140fd338f71c5170a686cceb94cb","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ProgressEvent.js","hash":"acada9192348ac17e09c6018dc041bf0c120848b","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ProgressEventInit.js","hash":"537e7a915797d22c31fc59768203343de205617f","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGAnimatedString.js","hash":"c0cdc48643e63353b9974fe7eaaaec9d1f2ef8e1","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGElement.js","hash":"f0cdceeea8802621d3dbe68b49a051464989398a","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGGraphicsElement.js","hash":"f57d80a560ff3f3537120493f4685f08497f03e0","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGNumber.js","hash":"9de498e17bf6a0f48029f23744e2d34b57200383","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGSVGElement.js","hash":"722fe2d0b49af31ec4ea36a2de763d96ccd5021e","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGStringList.js","hash":"4d3c3f78d15af2b76bd7d27611a694099780f830","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGTests.js","hash":"72e26fa01ece71b715b089c57db20db6f1734f63","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Screen.js","hash":"606947430156f4b4c1c58be34418dee1a440b44a","modified":1517279566000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SelectionMode.js","hash":"b7dde64739ca93f02e04da534430331e872cda65","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ScrollBehavior.js","hash":"3070b79370015912dcdfa94fb0cf24da26f45875","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ScrollIntoViewOptions.js","hash":"2c87241b2b052d5b8f8caa5465f6d0bd0e12b39b","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SupportedType.js","hash":"29ed16162402e0ec79332f776392206ddf7c96b4","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ScrollLogicalPosition.js","hash":"078931bf14b0e823e2bc365b923a12ab7ed40cc9","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/Text.js","hash":"44a29f651be57cc290b23db5c91234e99b3d9f1a","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ScrollOptions.js","hash":"c6d9ea476178646745b5ed99e7795ea8380b3d13","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/TextTrackKind.js","hash":"fa99cc6bafbbdcf89ae81ea7d43a0a6d30d18934","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ScrollRestoration.js","hash":"09609edc4b162dfb8b5d3357e6a518acf78324b0","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/ShadowRootInit.js","hash":"2d4849c5c52868c73815118634ae2caae4d8934f","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/TouchEvent.js","hash":"0c5749a7853b4b567d436a3d8b37ae474109694b","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/SVGBoundingBoxOptions.js","hash":"4ac46dd4fa4a8f04cd3064a22b9e5a5a27e71d63","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/TouchEventInit.js","hash":"6f7210ba50757b7f8bd99653d41712ae09c84a2d","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/TreeWalker.js","hash":"0981353b55a9cfb33c81f86b281e004ed745f232","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/UIEventInit.js","hash":"8950e8828f34b3df09f81041922f88339a9f36e2","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/UIEvent.js","hash":"a0660f2e60321417fceb0713fdb9edd9221701c9","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/WheelEvent.js","hash":"76f46596a79287a23540a7a76989e301f3c20e3c","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/WebSocket.js","hash":"5e90ce22fe7bc2a89fb9d1920c92fd6c15c1c85f","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/WheelEventInit.js","hash":"028ff5f2e7ef452904bacb726a7fea6bda5c32de","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/WindowEventHandlers.js","hash":"df8f5f45cef4da7d95d641395d96774a8491e6a2","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/XMLDocument.js","hash":"c05814691c446c960d1b939e08f5a28f18e3bd02","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/XMLHttpRequestEventTarget.js","hash":"eece230a0486df60e93691bc0fee02e1e157f8da","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/XMLHttpRequestUpload.js","hash":"73e462ed3cba44f1e9b40d4672e2c9762cd17474","modified":1517279568000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/utils.js","hash":"c052843be150a02b9a199d0b24806c41b207bd06","modified":1517279565000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/generated/VisibilityState.js","hash":"53fc8da1672eae07a26604a7afa234ed373fc9b8","modified":1517279569000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGAnimatedString-impl.js","hash":"1593c87b0c4343706ba6acebdf5ae18539850250","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGListBase.js","hash":"e8cc0d298a82aadb256e9edf84eb5522fd62e050","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGNumber-impl.js","hash":"0bc0d3cdbdc7f54b46a8c31b7fa3146a89a77994","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGStringList-impl.js","hash":"d68540cb2996112b8c69e962db11b62cde2dff71","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/traversal/NodeIterator-impl.js","hash":"7a95e2eccb0e8f181d80128d8a4c8caee8b5ffb4","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGAnimatedString.webidl","hash":"58e52d16f04c8008489cac62de34238d1f3ddbc2","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGNumber.webidl","hash":"aafc8d540b0535934a230ab3a2586338fcf87a43","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/traversal/TreeWalker-impl.js","hash":"a3ce37fb781f7c999e1fc47a2704a410f5fbb34d","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/traversal/helpers.js","hash":"7e60b6eb6a0c8c92ff8dc84a1dd28ffc8b4a52fa","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/svg/SVGStringList.webidl","hash":"6ff3fbc59c67813af1cbb3612ba71fa120b79e3e","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/traversal/NodeIterator.webidl","hash":"1399f2140e3344159d193f768fd2fb952b4a25a2","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/CDATASection-impl.js","hash":"47185b8841b71c5e890163f9a597fe6f4833371c","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/traversal/TreeWalker.webidl","hash":"08bd0729ecab1ef06e1b7f0a72e616f6dde2dc8d","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ChildNode-impl.js","hash":"3abaa41f7da3ff28896ab70e36c2c676d75f33d2","modified":1511130765000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/CharacterData-impl.js","hash":"191f82d0d609c73a182587587f93354905c6bae3","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Comment-impl.js","hash":"7331b27821199bc4dc6cb0a7c197c0b614179ee5","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DOMImplementation-impl.js","hash":"6c0552beefe2e13e2946f414ce5c1ef442ab71ea","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/CharacterData.webidl","hash":"22bb2be4bb99cf26337c76dc10a0e534432cbedb","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js","hash":"4ba832aeac798612ee1c355bdbec82644173097f","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ChildNode.webidl","hash":"b5b97dc74413dfbdffebac393b9f4e54c43aa503","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DOMTokenList-impl.js","hash":"9f09512c0ef2daaad3d1ba738a9daa3f43f526b1","modified":1506781430000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Comment.webidl","hash":"b6e005807060fc847d31fccce636bcac2d443a60","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Document-impl.js","hash":"a0ec345be6218a2884a35e23d246292008223b6f","modified":1517279218000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DOMImplementation.webidl","hash":"7d9620304986ab8209028e25b0abf1069f321910","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DocumentFragment-impl.js","hash":"e92074dc8f25f0bada925a655aa279a9161b0793","modified":1511132061000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DocumentType-impl.js","hash":"feeb94600c5b102b7770e2402941fb602fa4be15","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap.webidl","hash":"914c46ad482d767cb5c7e86125ee016f42f9f60b","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Element-impl.js","hash":"7ae50f79f24ac0e943ff8525d74edd5278e3a87a","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DOMTokenList.webidl","hash":"bb7eba25476e7669ca0d18aabeb66bfcc318d117","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ElementCSSInlineStyle-impl.js","hash":"e384dc792a6bd3bb023ba293e9d8a2820ac1a3b4","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Document.webidl","hash":"5dd6050dc370c99294867954c66f9aea81e3b624","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DocumentFragment.webidl","hash":"7230fbf9e6857cce78819544b549ebcfb5efd2f2","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ElementContentEditable-impl.js","hash":"c3619ff0b3bad09c36209340bf6978ac78037d5c","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/DocumentType.webidl","hash":"65a89475ffc13792852973bbc9ad248419a1decb","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/GlobalEventHandlers-impl.js","hash":"bde749ded26e93be2318b2551f2a5b4e9715d20e","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Element.webidl","hash":"b41509c5be987925e25b5e3d89bc5b282961c055","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAnchorElement-impl.js","hash":"491c420546014e5193e4e474bf2d3c6f77874adb","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/CDATASection.webidl","hash":"23d3b5c47eca46520110e298145f449522d11e10","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAndSVGElementShared-impl.js","hash":"573f18e2e03dfbcd9cf4a0ee3941f97f299eea67","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ElementCSSInlineStyle.webidl","hash":"7706ad7cf1d6c019dc33e6d8be2e020195a1d242","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAreaElement-impl.js","hash":"25c606f1e3c9231d1fa587692aea4c845750e238","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAudioElement-impl.js","hash":"10ef14c0afc3652302c4778237f19cccc9e06564","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/GlobalEventHandlers.webidl","hash":"f0b052819138ec078a1824f5468e16848dc290d4","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLBRElement-impl.js","hash":"e1fc8dc55f846bb2d66eb933a541ed3c44b6825a","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ElementContentEditable.webidl","hash":"8f2291232cb11af06dbddc1b37bf81712848ac20","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAreaElement.webidl","hash":"719b72a4847e23ddd83720f2605ec7e9137aa3e9","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLBaseElement-impl.js","hash":"e46d76a33e82c6eb792816d93161d01a3e3a77fa","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAudioElement.webidl","hash":"afa5f4d99b4cf1564d89929a8d508b521ecf9128","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLBodyElement-impl.js","hash":"151d8f9115d477f7bb52b6ef02b124611cd7163e","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLButtonElement-impl.js","hash":"c7f806ea636df5f39788021cfb11402ccd12c066","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCanvasElement-impl.js","hash":"ecc094f324967c94908617d474d7aec714389a88","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLBRElement.webidl","hash":"c95644f79fc97ac42aa109504f988e5d4dd7573b","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLBaseElement.webidl","hash":"dc1dbea918b7185a12fa68ae462df795b9309c6d","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCollection-impl.js","hash":"43d9ae9e63345ff85ba7fb920b078c7a88023b2b","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLBodyElement.webidl","hash":"69bcb4f0191c2c7a51528fb04f104f3392039b61","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDListElement-impl.js","hash":"5745c42732be20bffda1f9a6c4c21cbac6878f7e","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLButtonElement.webidl","hash":"aa7da8914f908087217f0de0dd6b69496f5f0421","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDataElement-impl.js","hash":"7e91b7a7ed1419ff1e6984ea15249e6a45d46953","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDataListElement-impl.js","hash":"af927134d2bd697e52bbd5bc571613404dd831c2","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCanvasElement.webidl","hash":"ff953cf0e6c722bbb15d51e9de6adfb1e167709b","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDetailsElement-impl.js","hash":"3818277d5d2bc178920960da29a46afe281eb324","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCollection.webidl","hash":"738c4618360a0e0cc7ccf6e8c862580003d2166e","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDListElement.webidl","hash":"9dbff780905d1452c91571d530f3f80d366ef8fc","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDialogElement-impl.js","hash":"9f31788eaf6ce49d46774da5692965902ee810c8","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDataElement.webidl","hash":"8b42cd3c5896a721134c061b7de65852d5cc190b","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDirectoryElement-impl.js","hash":"fd905ded23db5050ff4c8f1ed76edb15978dbfc7","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDataListElement.webidl","hash":"5c87d850bded0da9bb859e91f720c5f10d4102b1","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDetailsElement.webidl","hash":"2918de32e54c7423f9ad2b15775c1255857d5935","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDivElement-impl.js","hash":"f0a69c856b283cc459aaf0afd33220bae6ddaa7b","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDialogElement.webidl","hash":"d3528f4b3ca0b71047ecdc73da55d2eac6f59175","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js","hash":"02838facb0c4ffed732ded159896400753b83dfc","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLEmbedElement-impl.js","hash":"e55adb9628c9818b69870960f7dcfd5e1c24e994","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDirectoryElement.webidl","hash":"a98dc280797be669af9b56ce44e273fc39362295","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFieldSetElement-impl.js","hash":"6c3d6eebea777e76444d1944761058a15107309b","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFontElement-impl.js","hash":"793ecb91687b5a50543c97eba7a0d8a7ba15f6ee","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLDivElement.webidl","hash":"6b717a15f708675232c4be863da311a7c8c28ee1","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement-impl.js","hash":"b8e075e88f08082f25a9225740d7bfa76fe3d926","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement.webidl","hash":"c708e636031848c6deb6192cfae1b3a950adeccc","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLEmbedElement.webidl","hash":"06735c916dcfef410b905ce85190922198fc3343","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFrameElement-impl.js","hash":"a40ecd5fd5dfd92ba57b0bf758b1c92c0ba67c4a","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFieldSetElement.webidl","hash":"75efc66d8c04ab91fde07a42cad55a69a5f4ea0a","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFrameSetElement-impl.js","hash":"9363e4cff77ebf49d928ebe5f3c39c3e521572f7","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFontElement.webidl","hash":"5679898e9e0ce6e63f34be331d26f15531200996","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHRElement-impl.js","hash":"522c797970ee672ee643126c76dc9793bfab78e6","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHeadElement-impl.js","hash":"2bbb27a5521fad3f5f005759ee459dbe5a68383e","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement.webidl","hash":"4e45c98b95c6ed2aefeb6cc7d0a99870dc5f8837","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHeadingElement-impl.js","hash":"c7a7e816d36404d52806c08419ca3733c2cd541d","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFrameElement.webidl","hash":"770c44e75ca3579368a8e7fa225407bfa6781f3c","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFrameSetElement.webidl","hash":"146896d0fc93a8596541076dcd624d2d430f3c68","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHtmlElement-impl.js","hash":"84f2328b8627fe8ad57ca86ddb792699ed0bf3a8","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHRElement.webidl","hash":"215a6e9f22939ed99d49abdb59d5983f61d9facf","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHyperlinkElementUtils-impl.js","hash":"4484a26ebc288c525002169a9c856aa7bf1e7302","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHeadElement.webidl","hash":"ba2056edd57c6a51e5adf6e0ccb297e63232795c","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLIFrameElement-impl.js","hash":"6a328dcb608e279b9765007916331ad8e9db1435","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHeadingElement.webidl","hash":"4c3c60510ba6928a6a832e1b2e9c640d99bae634","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLImageElement-impl.js","hash":"3a042f961d65f7ab2e7801b71acfbba6d8f9ff61","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHtmlElement.webidl","hash":"2f8fe5c92d36d7415a75903f6008193fd80e1188","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLInputElement-impl.js","hash":"e6cb04bed6719cdbb6afcfa65679301ff631411b","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLIElement-impl.js","hash":"0de9b191217dab95b971b16b8a434fa68ca05754","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLHyperlinkElementUtils.webidl","hash":"ba68e99cf8a75937c5d27cdd2de9f25a1a46511a","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLAnchorElement.webidl","hash":"10d5a98b59fc564f667be4a3628466fa73bba678","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLabelElement-impl.js","hash":"3de5e38961e74fc781844a01672d12ec8c2f0b38","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLegendElement-impl.js","hash":"97a7f956fe22751bf7cbb56d1cc6d54ae5146d0f","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLinkElement-impl.js","hash":"26834d4ce5e1ef98326780e845be6549a0171e24","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLImageElement.webidl","hash":"592037cb5b022ae2c882e9ea99252c7de91575b5","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMapElement-impl.js","hash":"e837967275436a0f8472b7882073ad6fbb7640b9","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLInputElement.webidl","hash":"20f86e544014c2e5f6da0c5f141fd1743b9e81d1","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLIFrameElement.webidl","hash":"937b101647f663b18d22857ab7543ea3f8cd4473","modified":1514839825000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMarqueeElement-impl.js","hash":"2f9132c1592d4ee512cf7acbc106667221ff47a9","modified":1506781430000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLinkElement.webidl","hash":"b0132ae9f09930bd699fb299d0a052132815dd1e","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMediaElement-impl.js","hash":"b8e9c86ebde2c79a8f1a48a1e44f35d070556159","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMapElement.webidl","hash":"275fc6dec487c108193f5620ebecb933cca104b5","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMenuElement-impl.js","hash":"b197cebd03a3f8b82d1e04b7b45a17ad81fb5d63","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMetaElement-impl.js","hash":"a8565f2cf7e547503bba3384468e93ae12232b9a","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMarqueeElement.webidl","hash":"7c95e8945cea64c97fe072ca1a52f8d8eb23cb25","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMediaElement.webidl","hash":"b41402d11f4c4bec17bc2c8b7e8088a513aed369","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement-impl.js","hash":"cdedf6a3f30141fa375f334d6d0a585fb4715900","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMenuElement.webidl","hash":"32392fec99bb0a4c7f7e5832d9eca0184b354dca","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLModElement-impl.js","hash":"0cd4a7b2698036e6a5eeded4806924d201a16c9e","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOListElement-impl.js","hash":"71ae32c167fba61cc8fd84eac0f8d9516ecdbe68","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLegendElement.webidl","hash":"19232fa596a9d7caf62846a8e5d092b1e7ffe96c","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLObjectElement-impl.js","hash":"a242875b0250856a71783cdd0b91bfb6aa4cc94c","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLabelElement.webidl","hash":"461f3b9b766cec0b9ef40168136c80003067de2a","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLIElement.webidl","hash":"237968c84d747c8094e252c875ed4ad3e748882f","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptGroupElement-impl.js","hash":"36378a95447fc107cd82ee379a24117b60ca0242","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMetaElement.webidl","hash":"f8ef595a3685c8b39818d521b86a46a9f8df07c6","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js","hash":"4fb7f7012573289dc77dedba6b1f6dc6bb929c18","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionsCollection-impl.js","hash":"76bd7c7285765b1d06ae669e33af2fd79209bcf9","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement.webidl","hash":"c6e2494a91b0bb67d960001bb408ff3039327011","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOListElement.webidl","hash":"1f177fb464b051e0eb6812ce31a25ea0786c6827","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLObjectElement.webidl","hash":"141dcfe14ee7a42fe2d3da57644da07e92dd703f","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOutputElement-impl.js","hash":"b6f7cc308c41fea7b85f549816164db23331b399","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLParagraphElement-impl.js","hash":"91789409b7df92ff1eda307e249d2e938d2e4aa5","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionsCollection.webidl","hash":"c848021cb5cd9e6e4d232fa52d2c215b00e491e4","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement.webidl","hash":"c5700dd8a740548504c2f523f4c2c714bbef733b","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLParamElement-impl.js","hash":"8a93e6414dcb7b744b06ebdb75e69ef76c74cf7a","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLPictureElement-impl.js","hash":"74c85d4e80f25b8d6641194ead123dc34f864020","modified":1506781430000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOutputElement.webidl","hash":"f1837618daed84c7f9c48968f0d9c15cac4d5466","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLParagraphElement.webidl","hash":"0578d671ee9e0a9cc6d13a7d902db0e27a84a85c","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLPreElement-impl.js","hash":"cd8d14f01925fe9a17aa479d22b7e7001920b4c3","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLProgressElement-impl.js","hash":"4ece1b78f2e36c4b3ebfa02820d287a26ce13b29","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLParamElement.webidl","hash":"3578a748960a45dac1a8c6f9e8f3539e7ce3b081","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLPictureElement.webidl","hash":"253185bfc7d94ab4db76192c3935d73eaaef536f","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLQuoteElement-impl.js","hash":"c485460cf2e0ecc3d01fc157d51add7d74d0e9d9","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js","hash":"6db520656db79c37434309a54160e7fb7bf87297","modified":1517279218000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLProgressElement.webidl","hash":"8b4978f030fa2b6e02b5bae4dd3dbcdaa2ef23fa","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement-impl.js","hash":"a3adba8fab04d973fde70d67f43a6f8ae5e72cfb","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLModElement.webidl","hash":"fecb1076abf5d3490059609b56384f91ad4611bc","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSourceElement-impl.js","hash":"67b83af899eae1e9d40b9d23594e5ca111da415a","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptGroupElement.webidl","hash":"2c2f0169da1348ca1907169ea0b09f93416ec075","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSpanElement-impl.js","hash":"dce2f95d89a49bf7f016c6c467d64da0a758b0bc","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLQuoteElement.webidl","hash":"3707b5baaf91cb3fa7a1b11cbfda41e5a979f381","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLStyleElement-impl.js","hash":"40ea56dc448c4e5f822d982ee1290fb9d5e4abaf","modified":1517279218000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSourceElement.webidl","hash":"81d0f95651ef1a4e17807d9d4609364a99472bfc","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCaptionElement-impl.js","hash":"495dc7ffe10fc0ff26a7005fff8eb8c8574922de","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js","hash":"830865da3cdb1df065b26136b4f357427ee70e75","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement.webidl","hash":"981849a3e779fd29ae202a72347de93518831cf5","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableColElement-impl.js","hash":"43b95465e274b8f06b53921c844d8f2b8d0f3023","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSpanElement.webidl","hash":"afe8e85b9e1416487aa014e01da0678925c739cd","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement.webidl","hash":"ba9368ed6a8a76b6cb05b9df56f124d66a2ca050","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableElement-impl.js","hash":"cb4b543b3ad609ffb0f635051a69fd42a06858cf","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLStyleElement.webidl","hash":"ce9188225b3a3f2e4fd3492b0b341b24f5ceb401","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement.webidl","hash":"3db6e6e0cbf1814725d8a6aed6d880cfc593166d","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableRowElement-impl.js","hash":"44d121019425ba374a1ecbbbfc5e2dbbbc2e23e1","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableSectionElement-impl.js","hash":"5ba531440fc81c36ea0a1e960e6ebe23a54d5ec0","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableElement.webidl","hash":"591f3392352045ec1dde474c6de3585bc60f5776","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTemplateElement-impl.js","hash":"6f0017ba332a6a95c26b30ac52770d23c3f6f0ce","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCaptionElement.webidl","hash":"7cbf80e12392399beaa234a677a50b73ce055e56","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTextAreaElement-impl.js","hash":"22181786322594cf0472945c6775d7d356224265","modified":1513454507000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLPreElement.webidl","hash":"60684e8a80b2e114bad99b114cfc1e2dc914986f","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTimeElement-impl.js","hash":"d273d82b6e145604fa47b12c25f20714e3258e3e","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTitleElement-impl.js","hash":"e354e03a0de0940bbb76606f5e4784f352d8eaba","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableSectionElement.webidl","hash":"039295aa92116224ae8a1a61b04b1eb455d9a288","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTrackElement-impl.js","hash":"dd561321ab154527192db8c488998d13acac62c3","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableRowElement.webidl","hash":"bb5af9b49ab46d21d919291d8b36aa2b0e3aa710","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTemplateElement.webidl","hash":"86e844d3762da890a6c0fc8d45c01f26818b2b30","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLUListElement-impl.js","hash":"dc1352274136e33447df34a0ea7a8764efbf600d","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableColElement.webidl","hash":"892728d29dfd634cb66a41beaf7e6b007b0220ef","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLUnknownElement-impl.js","hash":"11d82895fba655d6d6b79aba217dbcca8988296b","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTextAreaElement.webidl","hash":"35509a42ffbea9a5573c81485b9069ab0ccd623d","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLVideoElement-impl.js","hash":"5b35bed4e07b6e982f4b3a12280b454f73ce456b","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTimeElement.webidl","hash":"3d2ae3f508d7a70eabf647add452a21e10c89711","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/LinkStyle-impl.js","hash":"c740b201f3f7daf7a25378830dac9d68ac3af474","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTrackElement.webidl","hash":"84d558e64e14639d655c7eb63b798dd7467ae484","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLUnknownElement.webidl","hash":"6ced82ad376d71585add10a9bc06f5f3535d69ff","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Node-impl.js","hash":"fe24e6b94179bfd55d2f8813860187020956702c","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/NodeList-impl.js","hash":"92c24a02bb81bdd97665e557486c83c71c153957","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTitleElement.webidl","hash":"8bcca48dd84e641cf4cb77125733f1129d379c6d","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLUListElement.webidl","hash":"29203f2ef2173b446acf084b6cdfcadce54f5e3f","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/NonDocumentTypeChildNode-impl.js","hash":"e3e23295ce8d6bc307c8d2a063924153b314a874","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/NonElementParentNode-impl.js","hash":"9c5fa37f1510a4231b95b3fb0acca08b24bafcf7","modified":1511132061000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/HTMLVideoElement.webidl","hash":"661ad77d5d6f04ffe394edc57938c2fa648fd607","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/LinkStyle.webidl","hash":"13672d23cf81a3f283ac491281d5b15e3b00603f","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ParentNode-impl.js","hash":"40435cc6770e7a5767cdbcfcfaeb6a19ec118435","modified":1511130765000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ProcessingInstruction-impl.js","hash":"fc62596d80d42577ded289f8260b4877021d1a99","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/NodeList.webidl","hash":"5ebe5e64d7f266095734152ba79d1ccae8b90431","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGElement-impl.js","hash":"b3cbb829a27371d2986dd43f8dd4b43ee3b6ee87","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGGraphicsElement-impl.js","hash":"043ef7c6a33d827487ec3692e8517337c359ae12","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/NonElementParentNode.webidl","hash":"0d69c2d21258439246662216a4a08d990d6118a8","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ParentNode.webidl","hash":"7cdd31111927cc5560495d1b600eaeed0b00818b","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/ProcessingInstruction.webidl","hash":"4d791eae162e83d3487c9b37823fd9213b0e1005","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGSVGElement-impl.js","hash":"88d0a6a43b585d1fb7856ff8675df10532cf9cb1","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGTests-impl.js","hash":"39b420235a5d94acccbaa28d772744258bf52920","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js","hash":"f39828776a2f910ad903cbd905f2b6de4c376ce2","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGGraphicsElement.webidl","hash":"d0ed71e5890a775fbdfeb6e482e27afd5fa27702","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/WindowEventHandlers-impl.js","hash":"582979644a289623b015e0dab20c21b30e1c478e","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/NonDocumentTypeChildNode.webidl","hash":"5d036404d857b0e12f368303db2f6a7ad17a630c","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/XMLDocument-impl.js","hash":"a909b70e5be71d09fb9122039e50d28b6c1e5015","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGTests.webidl","hash":"f5bfe958cd91edc6c7c542aca63bbf9eafc1a3cb","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Node.webidl","hash":"53bfbbdd93b6aef31f8e50dfe8b8b84919596041","modified":1511130752000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/BarProp-impl.js","hash":"ac80be3b3da57860e11e55907a4ffbe3b4d3e5d3","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/Text.webidl","hash":"a4870735fbaf2a5992b392937cea77ac9bb0e481","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/External-impl.js","hash":"57c6f70448e79950aedc3cc93eda25cc0e30adab","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/WindowEventHandlers.webidl","hash":"121c42bad68c98a7263f295a62160d62d12285cf","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/History-impl.js","hash":"1abd1bb3faa1247e0aa3feaf195e2679b390728d","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/XMLDocument.webidl","hash":"9f391030045d9c4cf4c4968597145d03d19890c8","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js","hash":"5ada3221fcfcdca7c730b0b7b25728cd91d716dd","modified":1506803484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/External.webidl","hash":"45081bec3b5b1a812b90a6b4bc45a66ffca6be25","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/Screen-impl.js","hash":"268b9e86d821c259cead9ea27797721ec44d44e8","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/BarProp.webidl","hash":"d4b58f60527625a4453d90182b358ab4527d0a64","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGSVGElement.webidl","hash":"8e1176486c72518c2da4b80a1b28f2f6b0855cd9","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/SessionHistory.js","hash":"11b410d43ae039861c65a3184c90eeea9a96fabe","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/navigation.js","hash":"061e4d46976c3d62fdc9a75be259e4e7549799e2","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/History.webidl","hash":"75c8efa79a102e9538eabfff4b0064b1b4a64126","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr/FormData-impl.js","hash":"ad35916ea286fea4d39b7d9ba5c45bb9663c97c0","modified":1513454507000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequestEventTarget-impl.js","hash":"4caa938a0a12bbefac3c3797871f4fbed3d716a9","modified":1506779160000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequestUpload-impl.js","hash":"82c6056f2c415a9f0108bbeb1161a64adecc5063","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/Location.webidl","hash":"070fc63d5d1831124c4a20c89e3b7a6d6c36daee","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/window/Screen.webidl","hash":"17fd45d830fcfe6faad5e4da6050c1f3d24d33a5","modified":1514839826000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/websockets/WebSocket-impl.js","hash":"b2f973cc4c445d67eb23469c5f60378b8a9ec8b1","modified":1516591185000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr/FormData.webidl","hash":"1e6b23b36ec4af8c867adfea02136bf7ae3d4849","modified":1513454507000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/nodes/SVGElement.webidl","hash":"9c0ee85ddad247c072b0d9ff869ebaf63b2bb88a","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequestEventTarget.webidl","hash":"2cc77d17f58ca4daeed33843cae480776b98788c","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/websockets/WebSocket.webidl","hash":"eba566fa69d090f29ef5a0e96a3061bee8794e97","modified":1516580484000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/websockets/WebSocket-impl-browser.js","hash":"2b0e20ece0059caf6d52e216d0b1acb221bb5685","modified":1516591185000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/xhr/XMLHttpRequestUpload.webidl","hash":"e32cfc6b53e871ab9e0674132da534be18695a62","modified":1506798174000},{"_id":"themes/tranquilpeak/node_modules/lodash/lodash.js","hash":"97052395ed6ac6c80b80ea1253c03740a2fff8fb","modified":1517704209000},{"_id":"themes/tranquilpeak/source/assets/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1521447424000},{"_id":"source/_posts/Swift-面向协议编程的那些事/render.png","hash":"cd60511328b4c020f825ed5324ba84d9e5208e77","modified":1552030974691},{"_id":"source/_posts/iOS核心动画-Core-Animation/car.gif","hash":"1839908c06c65efb36fba2c52b1946ef50a8c969","modified":1500633528000},{"_id":"themes/tranquilpeak/source/assets/js/script.js","hash":"e913afb6beea53ae389dbaf875b54437c4a078b1","modified":1521447424000},{"_id":"source/_posts/iOS核心动画-Core-Animation/18436043320170223160237065.gif","hash":"c7b333286c8541198cab59f28c3c0038406137bc","modified":1500633492000},{"_id":"themes/tranquilpeak/node_modules/jsdom/lib/jsdom/living/helpers/svg/basic-types.js","hash":"f25b22a19aba579799987f064006fe48088fc6e9","modified":1511126381000},{"_id":"themes/tranquilpeak/node_modules/ajv/dist/regenerator.min.js","hash":"bb12d6566346a3e419430a55246f6b926c4cdeaf","modified":1513456506000},{"_id":"source/_posts/iOS核心动画-Core-Animation/18436043320170223160215019.gif","hash":"e2980504defbd6d643398a9feca453cfb6e1f8a0","modified":1500633507000},{"_id":"source/_posts/iOS核心动画-Core-Animation/18436043320170223145213034.gif","hash":"47ea190fa1e3a5d22273ce5c5b5cf7ed01860254","modified":1500633519000},{"_id":"public/all-categories/index.html","hash":"305d47395e7bb4a0ce197e1aa4f3be357702c1aa","modified":1553508730200},{"_id":"public/categories/Cocoa-Programing/index.html","hash":"c2b8f6ec0d40fd735b7ac55a217ff68e4dae0d9e","modified":1553508730520},{"_id":"public/categories/Web-Dev/index.html","hash":"27d4b054cf4a62057208ad97c33e5bfe4754ec74","modified":1553508730530},{"_id":"public/archives/2015/06/index.html","hash":"9c8a3c58f8f2b4afbd1135befc416dd439a0f6e0","modified":1553508730530},{"_id":"public/archives/2015/index.html","hash":"92cdec925574bcb232281447ccfc9169dc79f6b3","modified":1553508730530},{"_id":"public/archives/2015/09/index.html","hash":"66f03e3ab9358449dbb4eaffdfdd630e882ffadd","modified":1553508730531},{"_id":"public/archives/2015/10/index.html","hash":"4717eaeaed514fbfcdafbd9dc9681b3f52d6a2ba","modified":1553508730531},{"_id":"public/archives/2016/02/index.html","hash":"dd80fc3a1d836231b3e7d5df9466043ddec8a66d","modified":1553508730531},{"_id":"public/archives/2016/03/index.html","hash":"9736c3e8909adcdcfae0f59e59265bdfffc871ec","modified":1553508730531},{"_id":"public/archives/2016/05/index.html","hash":"becf89256ba327041e8aa49e688e33ef9c103200","modified":1553508730531},{"_id":"public/archives/2016/04/index.html","hash":"058b5b89465eb3a3c2eeacdb1d53589440af9b07","modified":1553508730531},{"_id":"public/categories/架构/index.html","hash":"6ebcf835bd8e58200bc128b94585d748e0271237","modified":1553508730531},{"_id":"public/archives/2016/07/index.html","hash":"ec794c11d4045695f307fb626c6c996831119b52","modified":1553508730531},{"_id":"public/archives/2016/09/index.html","hash":"67222f42f0cd80f0fe50afeb51a1ef96bd8a979f","modified":1553508730531},{"_id":"public/archives/2016/11/index.html","hash":"694fcd344e393b345e7f67190f5d073bef230a5c","modified":1553508730531},{"_id":"public/archives/2016/06/index.html","hash":"ed5acc38db43414a36dd5a4b3bc12d5a2496c895","modified":1553508730531},{"_id":"public/archives/2017/02/index.html","hash":"839b154d98d66a40faf739a43a62c02e821efc67","modified":1553508730531},{"_id":"public/archives/2017/03/index.html","hash":"73d55e6befb759bf98358ea25e37425bef0f727d","modified":1553508730531},{"_id":"public/archives/2017/05/index.html","hash":"0046570e0fe4b3e5b240a93e7c2639eec0980877","modified":1553508730531},{"_id":"public/archives/2017/12/index.html","hash":"f0ab299072b0f511b8175adc387d1fa65b1c3171","modified":1553508730531},{"_id":"public/archives/2017/06/index.html","hash":"a73731fd86e172189b37e8719aa0273163aad8ca","modified":1553508730531},{"_id":"public/archives/2017/10/index.html","hash":"3f632107d81822fd7de0efe2841df1a7d1eef5bd","modified":1553508730531},{"_id":"public/archives/2018/index.html","hash":"4ee1e486b3f2c3fe5cf57edf47b55e8afc9bf66a","modified":1553508730531},{"_id":"public/archives/2017/01/index.html","hash":"a70194443de89ee8aa3292f6e35aa07d232b1b63","modified":1553508730531},{"_id":"public/archives/2018/05/index.html","hash":"405a95f341d75bc4811686c9058b5213a92200fe","modified":1553508730532},{"_id":"public/archives/2018/03/index.html","hash":"7907c1630b40c52da6628dd580b2d62a82d407f1","modified":1553508730532},{"_id":"public/archives/2018/01/index.html","hash":"a3f5e70426830c30c7f49e1d4df6deaede087fa0","modified":1553508730532},{"_id":"public/archives/2019/02/index.html","hash":"a58218a934a95d648b3c289d938314bdaa8623e9","modified":1553508730532},{"_id":"public/archives/2019/index.html","hash":"76dcd66cbdcbe36b4e7353f0306048f729a6901c","modified":1553508730532},{"_id":"public/tags/iOS-Animations/index.html","hash":"158bc4334fa232610adebcac7d33d67636263663","modified":1553508730532},{"_id":"public/tags/Xcode/index.html","hash":"e580679c10bcf1b776a51cdb104213a0ae0625ea","modified":1553508730532},{"_id":"public/tags/Webpack/index.html","hash":"28f251762e1d205e7abd9d49d33265f84da5c89f","modified":1553508730532},{"_id":"public/tags/Swift/page/2/index.html","hash":"d2928a4a1d105be1b3a6855762fde37857b7d8e1","modified":1553508730532},{"_id":"public/tags/Cocoa/index.html","hash":"a104f2f4ef1a5fa863b4c4a4216632b8ab4bee09","modified":1553508730532},{"_id":"public/tags/Objective-C/index.html","hash":"0870eed52871c82545af2c2564efdef0cd68f063","modified":1553508730532},{"_id":"public/tags/Core-Data/index.html","hash":"1d8f58266d6e3feb81b3b875b4b02ced8d333576","modified":1553508730532},{"_id":"public/tags/CocoaPods/index.html","hash":"09e34eb9411cf92a291531dec94cbbf628fe7c8f","modified":1553508730532},{"_id":"public/tags/Reactive-programing/index.html","hash":"5e87ca9b8be96165920e2d2331a186552eb9d5c5","modified":1553508730532},{"_id":"public/tags/响应式编程/index.html","hash":"a53587a106aaaf9a786d18d7ea37a9a103ce5e9a","modified":1553508730532},{"_id":"public/tags/直播/index.html","hash":"cc0480025fde48df3188ea28e4c9fb523139a1ed","modified":1553508730532},{"_id":"public/tags/原理-dyld/index.html","hash":"23dcc53ae1068b4b59ebf25a4e07b488d4e5eedd","modified":1553508730532},{"_id":"public/tags/架构/index.html","hash":"a6ca8ccabe4d015d8ff8747af8c47791899943ef","modified":1553508730532},{"_id":"public/tags/设计模式/index.html","hash":"d6fc2b0f510855c540e37059913c55d153a40487","modified":1553508730532},{"_id":"public/all-tags/index.html","hash":"8f06644159d1e46a54281e79f028ad61ed992b41","modified":1553508730532},{"_id":"public/all-archives/index.html","hash":"d54812bfccaa4dc61cbd66bf583c30993bc9b60b","modified":1553508730532},{"_id":"public/categories/iOS/index.html","hash":"94f1e9c854da6f27012e8a036e84c40fd985488b","modified":1553508730532},{"_id":"public/categories/Swift/index.html","hash":"b2cc955e3f5bdd1adc6a164edf23e23a6b9eb88d","modified":1553508730532},{"_id":"public/archives/index.html","hash":"dc464ffb465ef95b14b30c3e4b3cca0c71a53db9","modified":1553508730532},{"_id":"public/archives/page/2/index.html","hash":"0d694299fc3b22f3b3c261116c3df451d2136f00","modified":1553508730532},{"_id":"public/archives/2016/index.html","hash":"31c0b699b2ad6c093544edcb2dbf83b2e705b0c5","modified":1553508730532},{"_id":"public/archives/2017/index.html","hash":"88b835119e40ac04b7944e18ea4175499a98c7ed","modified":1553508730533},{"_id":"public/archives/page/3/index.html","hash":"c4c369a4d36b63f94a5326b869b2d0698edbe5a3","modified":1553508730533},{"_id":"public/index.html","hash":"38a3eb2c3bd1811fa27ae232bd0592a11ec309fe","modified":1553508730533},{"_id":"public/page/2/index.html","hash":"b8c01ce0c29910e3affe0ac5c2194af2a2ab1c91","modified":1553508730533},{"_id":"public/page/3/index.html","hash":"c772452591021cd075c65f6a8046bd594c22e659","modified":1553508730533},{"_id":"public/tags/iOS/index.html","hash":"8dcb2bd36912b7abe4000489540b2e268e1d5d62","modified":1553508730533},{"_id":"public/tags/Swift/index.html","hash":"3ad68d0f93280ad55561823c6b63c6045c1ce120","modified":1553508730533},{"_id":"public/categories/Swift/page/2/index.html","hash":"9b107634a3feb6bc27492721fe10efc15492eeb1","modified":1553508730543},{"_id":"public/cjto6zil9002a1u0o3x7nhu2q/index.html","hash":"79a3c61f06bd81e6b1aeaec11dd3dbab3418800f","modified":1553508730543},{"_id":"public/cjto6zikc000t1u0o9puoolt1/index.html","hash":"83ee481330a42e3313b4f77534dea5868dc6caee","modified":1553508730543},{"_id":"public/cjto6zikl001j1u0oarq02yfk/index.html","hash":"e1b7ae26b1fe0d8383b2c3033be8ca20dc52643e","modified":1553508730543},{"_id":"public/cjto6ziji00021u0obgec7jv8/index.html","hash":"650beca5a3ba972f27edf902e55d247589687e09","modified":1553508730543},{"_id":"public/cjto6ziju00091u0ogsx0c09i/index.html","hash":"a8c5174d5162a673ece84d5381526a36bd276a2e","modified":1553508730543},{"_id":"public/cjto6zijn00061u0odvag9i3v/index.html","hash":"7a6cd293dbe950caefbc5e607a4ee586c0547f0b","modified":1553508730543},{"_id":"public/cjto6zikq001v1u0orwj3f23u/index.html","hash":"61a9b21da5b804806ddd20a160a729f62791a5a6","modified":1553508730543},{"_id":"public/cjto6zik0000e1u0ocn89rbp4/index.html","hash":"4153d33b65432df39e91ade9215facbfac92e506","modified":1553508730544},{"_id":"public/cjto6zikn001p1u0o6t03zo1m/index.html","hash":"f8943e9b663f609541543712260294cc856d7338","modified":1553508730544},{"_id":"public/cjto6zilb002h1u0om07f7b36/index.html","hash":"84e6066741511ea1d95ebeb6d33fbab56759260d","modified":1553508730544},{"_id":"public/cjto6zikr001z1u0o2fy6gioq/index.html","hash":"4aea118e8d5a1aadd25596603cce7fe9f0fb4df8","modified":1553508730544},{"_id":"public/cjto6zikh00151u0osn2d18b0/index.html","hash":"8d23e9f93349d8592779ed0239868eba68c6e408","modified":1553508730544},{"_id":"public/cjto6zikb000q1u0o8w8ot82w/index.html","hash":"8b5c5666a78601ab55d6991a3aa7669d42b495ed","modified":1553508730544},{"_id":"public/cjto6zil800261u0ov6zecqnf/index.html","hash":"9c21d85bfe0de4a1bbbf0cc2710b0aeb7fa4bebd","modified":1553508730544},{"_id":"public/cjto6zikm001m1u0o4gsi2n95/index.html","hash":"e75f40b0670d21fa77bafe2f38593ba608cdb072","modified":1553508730544},{"_id":"public/cjto6zike000x1u0ol1rqnox1/index.html","hash":"8ce20504f8c51260962e60f8a2294e70aade167e","modified":1553508730544},{"_id":"public/cjto6zikp001t1u0ocxkce5qv/index.html","hash":"90d733b50a04639bd4cf3b0d2ec1456afcf6df9b","modified":1553508730544},{"_id":"public/cjto6zila002e1u0ojqxver1i/index.html","hash":"57eddd512846897d68dab109976bb6458868ac13","modified":1553508730544},{"_id":"public/cjto6zijx000d1u0ot1e9fw94/index.html","hash":"98b1e93fdfb092aff310f8dea4213d2eeb0cec0d","modified":1553508730545},{"_id":"public/cjto6zil700221u0oqvk3pe4h/index.html","hash":"6a615a81cdecdb88ea0775b30f8ff25c98c0b0be","modified":1553508730545},{"_id":"public/cjto6zijd00001u0or3w8r3ul/index.html","hash":"5e0c2b2d38c9f3b673010783288acf874b27bf34","modified":1553508730545},{"_id":"public/cjto6zijr00081u0of844dkoo/index.html","hash":"bf3062cbf066c4dc1d6c6232cc005f14e0cdb530","modified":1553508730545},{"_id":"public/cjto6zikj001d1u0o5p8kprek/index.html","hash":"03ef66ba746815d05908b83d9b9d46dfcd061495","modified":1553508730545},{"_id":"public/cjto6zik5000j1u0ommwrdmhk/index.html","hash":"570faed96a912f529e7bd71a0ca420795c9cb6d8","modified":1553508730545},{"_id":"public/cjto6ziki00181u0ol2giduv5/index.html","hash":"9fa758e580c436a535f5777a9cdc4282813f3254","modified":1553508730545},{"_id":"public/cjto6zik8000l1u0o05ace6or/index.html","hash":"522d1f8581da5f5b1dc96358845cfd2d9e782839","modified":1553508730545},{"_id":"public/cjto6zikf00101u0og54ejzgv/index.html","hash":"b8dc0049dd5f0d36aa4e376a15d93548441a5d0f","modified":1553508730545},{"_id":"public/cjto6zikk001g1u0o582y5tau/index.html","hash":"a52456601270f9bd62e73f78a3baa27f1d1b92af","modified":1553508730545},{"_id":"public/CNAME","hash":"8cad7fbefaa02e0236206e8be932594f8fe4bd6c","modified":1553508730545},{"_id":"public/favicon.ico","hash":"5d0d4bc08a9aa3d5b30fa5d32d4ad6753bfede6d","modified":1553508730552},{"_id":"public/assets/images/favicon.ico","hash":"5d0d4bc08a9aa3d5b30fa5d32d4ad6753bfede6d","modified":1553508730552},{"_id":"public/cjto6zikn001p1u0o6t03zo1m/rxlogo.png","hash":"5cb49133c0f2a784ef399ceb73e4bb1e96789885","modified":1553508730552},{"_id":"public/cjto6zik5000j1u0ommwrdmhk/18436043320170222134916051.jpg","hash":"b2bc02bc74926800a3c4ea2b9d72860d02031f8e","modified":1553508730552},{"_id":"public/cjto6zil9002a1u0o3x7nhu2q/protocol-class.jpg","hash":"9175f4cebdc96de18266079de4a0bee62720ce5c","modified":1553508730552},{"_id":"public/cjto6zikc000t1u0o9puoolt1/thumbnail.png","hash":"e5fd562933485222d551c7d28930b5113dfa0388","modified":1553508730552},{"_id":"public/cjto6ziki00181u0ol2giduv5/18436043320170227154154030_640.png","hash":"c197c38e68896b61097952a6af5e2f493cc5b99a","modified":1553508730552},{"_id":"public/cjto6ziki00181u0ol2giduv5/18436043320170227155859067_640.jpg","hash":"fa2a9d8a1d676880b541a91d33a8c3eeed6f5a0a","modified":1553508730552},{"_id":"public/cjto6ziki00181u0ol2giduv5/18436043320170227160223054_640.jpg","hash":"8d5f25b6acb39477db993897d3fa2008e03011f9","modified":1553508730552},{"_id":"public/cjto6ziju00091u0ogsx0c09i/binarysearch2.png","hash":"24f5e80e27da950f2b048a0ab910018ac46e3354","modified":1553508730552},{"_id":"public/cjto6ziju00091u0ogsx0c09i/render2.png","hash":"4190377a8eaa9a12eccc8724941b6a6496f0cd60","modified":1553508730552},{"_id":"public/cjto6zik0000e1u0ocn89rbp4/02.png","hash":"4439ba2f87cfb44d22ec8cbd0f3108542b19edc5","modified":1553508730552},{"_id":"public/cjto6zik0000e1u0ocn89rbp4/04.png","hash":"da0827f0ae655bf586741f05a913b32818e8bbc5","modified":1553508730552},{"_id":"public/cjto6zik8000l1u0o05ace6or/cover.jpg","hash":"aba7b949bcb38b492598e277770b8443b5450756","modified":1553508730552},{"_id":"public/assets/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553508730568},{"_id":"public/assets/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553508730573},{"_id":"public/cjto6zikl001j1u0oarq02yfk/array_in_stack.png","hash":"055f229379b38fa686b0d0670b2c5503380564ec","modified":1553508730577},{"_id":"public/cjto6zikf00101u0og54ejzgv/18436043320170222133323050.png","hash":"94b536b67a14b850316a0a9ed3acc01329681cc2","modified":1553508730577},{"_id":"public/cjto6zikf00101u0og54ejzgv/18436043320170222164112080.png","hash":"553d765b1615fc67fc3bf96b5fc516b0b30e5037","modified":1553508730577},{"_id":"public/cjto6zilb002h1u0om07f7b36/design-patterns.png","hash":"67533076a4c1113fa7043599e3863553d01a44fc","modified":1553508730577},{"_id":"public/cjto6ziki00181u0ol2giduv5/18436043320170227162725013_640.png","hash":"ed8eefb5b661298c4ee555c7c2745fa1ce615f15","modified":1553508730577},{"_id":"public/cjto6ziju00091u0ogsx0c09i/binarysearch1.png","hash":"457a1acc0f931b39abc97df20b418fb07c04ed0b","modified":1553508730577},{"_id":"public/cjto6zik8000l1u0o05ace6or/1843604332017022316310707.png","hash":"41c7898879bcf58a79bbdda865e9f6b5c693fd0a","modified":1553508730577},{"_id":"public/cjto6zik5000j1u0ommwrdmhk/18436043320170222133323050.png","hash":"94b536b67a14b850316a0a9ed3acc01329681cc2","modified":1553508730577},{"_id":"public/assets/js/thumbs.js","hash":"e2a1a76c86b7f605ddc5dd04274f8b35af1d5103","modified":1553508730589},{"_id":"public/assets/css/thumbs.css","hash":"921a2c7359aecec27a5d60478a48501b493e7492","modified":1553508730590},{"_id":"public/assets/css/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1553508730590},{"_id":"public/assets/css/tranquilpeak.css","hash":"432e7bb0754963f490aa3d64f1a064189c7096e7","modified":1553508730590},{"_id":"public/assets/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553508730590},{"_id":"public/assets/js/tranquilpeak.js","hash":"68ac35debe2fff2bd50beede307ff86ee49480a3","modified":1553508730590},{"_id":"public/assets/css/style-1udptkpril81ozu8ifd8zpujn7ipu7lefxsiu5gxx0dpnzntdx6dusvki3ao.min.css","hash":"3fb35db022cbe9e18ceef39a124fa664f3e48d88","modified":1553508730590},{"_id":"public/assets/css/style.css","hash":"55ae2d709ee52b96fe5fa083b0edabd22f7ecd0d","modified":1553508730590},{"_id":"public/assets/js/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1553508730590},{"_id":"public/assets/js/script-yhuo2grt8r7qkqumzgjoglkfbicl1thukjgmla6jopu56zpcowfedi5zjcor.min.js","hash":"160037ecfd42165894c2ea232cc472b30c4f315f","modified":1553508730590},{"_id":"public/assets/js/jquery.js","hash":"46a436eba01c79acdb225757ed80bf54bad6416b","modified":1553508730590},{"_id":"public/assets/js/script.js","hash":"3cf199887b0fb5c110455e1a254d09fa669ff2b4","modified":1553508730590},{"_id":"public/assets/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553508730590},{"_id":"public/assets/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553508730590},{"_id":"public/assets/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553508730590},{"_id":"public/cjto6zijn00061u0odvag9i3v/Swift_logo.png","hash":"5bde55ab659eac3e838d3b6ab637a246ac9e24d2","modified":1553508730591},{"_id":"public/cjto6zikc000t1u0o9puoolt1/cover.png","hash":"e762f5a2d1229cf8302c92685845fe61ffed5a06","modified":1553508730591},{"_id":"public/cjto6zikp001t1u0ocxkce5qv/18436043320170221103826037.png","hash":"0dae4c64b2eb6b4c8c6e7104771a9857e2bea509","modified":1553508730591},{"_id":"public/cjto6zikp001t1u0ocxkce5qv/18436043320170221104310077.png","hash":"70abecd7d9de35202ccc27687b05da265d952969","modified":1553508730591},{"_id":"public/cjto6zikp001t1u0ocxkce5qv/opaque.png","hash":"a8867b6e8c753898958feb33744908587b328813","modified":1553508730591},{"_id":"public/cjto6zikp001t1u0ocxkce5qv/yellow.png","hash":"543c810887bb14240c0cbb3d3f1b52200556a926","modified":1553508730591},{"_id":"public/assets/images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1553508730596},{"_id":"public/cjto6zik0000e1u0ocn89rbp4/01.png","hash":"939497cf4a4ff303366afa92247bfdea9d7cdeea","modified":1553508730596},{"_id":"public/cjto6zik0000e1u0ocn89rbp4/03.png","hash":"0a515354d403cc20e95415adef37c2bc23d2ca55","modified":1553508730597},{"_id":"public/cjto6zilb002h1u0om07f7b36/cover.jpg","hash":"f13a9c7d24d860184841112eaae0f67feaa2fcaa","modified":1553508730597},{"_id":"public/cjto6zikq001v1u0orwj3f23u/cover.png","hash":"2dd1e6a348136b1c396afa6be8f0f20e7b3ae7d6","modified":1553508730597},{"_id":"public/cjto6ziju00091u0ogsx0c09i/loading.gif","hash":"8fca84cbacb3516bb98867408b40fc4e749b4028","modified":1553508730600},{"_id":"public/cjto6zikh00151u0osn2d18b0/cover.png","hash":"1ba5fc25fadf9d386aa8d7bd2cac8ee4e82188b1","modified":1553508730600},{"_id":"public/cjto6zikr001z1u0o2fy6gioq/thumbnail.jpg","hash":"0b7e258712bb0d4e868fc62acc89bc2abb5c8cd4","modified":1553508730601},{"_id":"public/assets/images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1553508730604},{"_id":"public/cjto6zik0000e1u0ocn89rbp4/05.png","hash":"a0ee859f437ca41c69004ebd98ec83c68368b126","modified":1553508730604},{"_id":"public/cjto6zikb000q1u0o8w8ot82w/thumbnail.jpg","hash":"3589e3cc7df62951d8625b2526a9d59d598458a5","modified":1553508730604},{"_id":"public/assets/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553508730610},{"_id":"public/cjto6zikb000q1u0o8w8ot82w/cover.jpg","hash":"3a718ef0e840c8144c370ff852cc1e6b08461a81","modified":1553508730616},{"_id":"public/cjto6ziju00091u0ogsx0c09i/render.png","hash":"cd60511328b4c020f825ed5324ba84d9e5208e77","modified":1553508730617},{"_id":"public/cjto6zik8000l1u0o05ace6or/car.gif","hash":"1839908c06c65efb36fba2c52b1946ef50a8c969","modified":1553508730617},{"_id":"public/cjto6zik8000l1u0o05ace6or/18436043320170223160237065.gif","hash":"c7b333286c8541198cab59f28c3c0038406137bc","modified":1553508730619},{"_id":"public/cjto6zik8000l1u0o05ace6or/18436043320170223160215019.gif","hash":"e2980504defbd6d643398a9feca453cfb6e1f8a0","modified":1553508730624},{"_id":"public/cjto6zik8000l1u0o05ace6or/18436043320170223145213034.gif","hash":"47ea190fa1e3a5d22273ce5c5b5cf7ed01860254","modified":1553508730625}],"Category":[{"name":"iOS","_id":"cjto6zijl00041u0oubxh6t7a"},{"name":"Swift","_id":"cjto6ziju000a1u0onr1g2gei"},{"name":"Cocoa Programing","_id":"cjto6zikg00121u0o5j83zz0b"},{"name":"Web Dev","_id":"cjto6zikj001b1u0ogravm07t"},{"name":"架构","_id":"cjto6zil900281u0ouedjrw60"}],"Data":[],"Page":[{"title":"All-Archives","layout":"all-archives","date":"2017-02-14T02:00:55.000Z","comments":0,"_content":"\n\n","source":"all-archives/index.md","raw":"---\ntitle: all-archives\nlayout: \"all-archives\"\ndate: 2017-02-14 10:00:55\ncomments: false\n---\n\n\n","updated":"2017-02-14T02:01:56.000Z","path":"all-archives/index.html","_id":"cjto6zijh00011u0o79owlmal","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"All-Tags","layout":"all-tags","date":"2017-02-14T02:00:27.000Z","comments":0,"_content":"\n\n","source":"all-tags/index.md","raw":"---\ntitle: all-tags\nlayout: \"all-tags\"\ndate: 2017-02-14 10:00:27\ncomments: false\n---\n\n\n","updated":"2017-02-14T02:02:02.000Z","path":"all-tags/index.html","_id":"cjto6zijj00031u0o81396bsg","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"All-Categories","layout":"all-categories","comments":0,"date":"2017-02-14T02:07:32.000Z","_content":"\n\n","source":"all-categories/index.md","raw":"---\ntitle: all-categories\nlayout: \"all-categories\"\ncomments: false\ndate: 2017-02-14 10:07:32\n---\n\n\n","updated":"2017-02-23T04:25:54.000Z","path":"all-categories/index.html","_id":"cjto6zijo00071u0owgv725wr","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""}],"Post":[{"title":"Run Loop","date":"2016-03-01T01:12:57.000Z","keywords":["iOS","RunLoop"],"_content":"本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。\n\n1. RunLoop 的概念\n2. RunLoop 与线程的关系\n3. RunLoop 的内部\n    1. RunLoop 的 Mode\n    2. RunLoop 的内部逻辑\n4. 苹果用 RunLoop 实现的功能\n5. RunLoop 的实际应用举例\n\n\n<!-- excerpt -->\n\n本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。点击[这里](http://www.cocoachina.com/ios/20150601/11970.html)可以查看原文。\n<!-- toc -->\n## RunLoop 的概念\n一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是这样的：\n```\nvoid loop() {\n    initialize();\n    do {\n        auto message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n```\n这种模型通常被称作 Event Loop ，实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。\n\n所以，Run Loop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 <p>{% hl_text green %}\n\"接受消息->等待->处理\" {% endhl_text %}的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。<p>\n\nOSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。\nCFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。\nNSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。\n\n## RunLoop 与线程的关系\niOS 开发中能遇到两个线程对象: `pthread_t` 和 `NSThread`。你可以通过 `pthread_main_np()` 或 `[NSThread mainThread]` 来获取主线程；也可以通过 `pthread_self()` 或 `[NSThread currentThread]` 来获取当前线程。`CFRunLoop` 是基于 `pthread` 来管理的。苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：`CFRunLoopGetMain()` 和 `CFRunLoopGetCurrent()`。 这两个函数内部的逻辑大概是下面这样:\n```c\n// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef\nstatic CFMutableDictionaryRef loopsDic;\n// 访问 loopsDic 时的锁\nstatic CFSpinLock_t loopsLock;\n \n// 获取一个 pthread 对应的 RunLoop。\nCFRunLoopRef _CFRunLoopGet(pthread_t thread) {\n    OSSpinLockLock(&loopsLock);\n    \n    if (!loopsDic) {\n        // 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。\n        loopsDic = CFDictionaryCreateMutable();\n        CFRunLoopRef mainLoop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);\n    }\n    \n    /// 直接从 Dictionary 里获取。\n    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));\n    \n    if (!loop) {\n        /// 取不到时，创建一个\n        loop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, thread, loop);\n        /// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。\n        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);\n    }\n    \n    OSSpinLockUnLock(&loopsLock);\n    return loop;\n}\n \nCFRunLoopRef CFRunLoopGetMain() {\n    return _CFRunLoopGet(pthread_main_thread_np());\n}\n \nCFRunLoopRef CFRunLoopGetCurrent() {\n    return _CFRunLoopGet(pthread_self());\n}\n```\n从上面的代码可以看出，线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。\n## RunLoop 的内部  \n在 Core Foundation 中关于 RunLoop 有5个类\n\n* CFRunLoopRef\n* CFRunLoopModeRef\n* CFRunLoopSourceRef\n* CFRunLoopTimerRef\n* CFRunLoopObserverRef\n\n其中 CFRunLoopModeRef 类并没有对外暴露，只是通过 CFRunLoopRef 的接口进行了封装。他们的关系如下:\n![](http://cc.cocimg.com/api/uploads/20150528/1432798883604537.png)\n一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。\n\n**CFRunLoopSourceRef**是事件产生的地方。Source有两个版本：source0 和 source1。\n\n* source0 只包含了一个回调，它并不能主动触发时间。使用时，你需要先调用 `CFRunLoopSourceSignal(source)`，将这个 source 标记为待处理，然后手动调用 `CFRunLoopWakeUp(runloop)` 来唤醒 Run Loop，让其处理这个事件。\n* source1 包含了一个mach_prot和一个回调，被用于通过内核和其他线程进行通信，接收分发系统事件。这种 source 能主动唤醒 Run Loop 的线程。\n\n**CFRunLoopTimerRef**是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调。当其加入到 Run Loop 时，Run Loop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。\n\n**CFRunLoopObserverRef** 是观察者，每个 Observer 都包含了一个回调，当 Run Loop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：\n```\ntypedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry         = (1UL << 0), // 即将进入Loop\n    kCFRunLoopBeforeTimers  = (1UL << 1), // 即将处理 Timer\n    kCFRunLoopBeforeSources = (1UL << 2), // 即将处理 Source\n    kCFRunLoopBeforeWaiting = (1UL << 5), // 即将进入休眠\n    kCFRunLoopAfterWaiting  = (1UL << 6), // 刚从休眠中唤醒\n    kCFRunLoopExit          = (1UL << 7), // 即将退出Loop\n};\n```\n上面的 Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 Run Loop 会直接退出，不进入循环。\n### RunLoop 的 Mode\nCFRunLoop 的结构大致如下：\n```\nstruct __CFRunLoop {\n    CFMutableSetRef _commonModes;     // Set\n    CFMutableSetRef _commonModeItems; // Set\n    CFRunLoopModeRef _currentMode;    // Current Runloop Mode\n    CFMutableSetRef _modes;           // Set\n    ...\n};\n```\n这里有个 `_commonModes`，一个 Mode 可以将自己标记为\"Common\"属性（通过将其 ModeName 添加到 RunLoop 的 \"commonModes\" 中）。每当 Run Loop 的内容发生变化时，Run Loop 都会自动将 `_commonModeItems` 里的 Source/Observer/Timer 同步到具有 \"Common\" 标记的所有 Mode 里。\n\n主线程的 Run Loop 里有两个预置的 Mode：`kCFRunLoopDefaultMode` 和 `UITrackingRunLoopMode`。这两个 Mode 都已经被标记为\"Common\"属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，Run Loop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。\n\n有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 Run Loop 的 \"commonModeItems\" 中。\"commonModeItems\" 被 RunLoop 自动更新到所有具有\"Common\"属性的 Mode 里去。\n\n### RunLoop 的内部逻辑 \n根据苹果在文档里的说明，RunLoop 内部的逻辑大致如下：\n![](http://cc.cocimg.com/api/uploads/20150528/1432798974517485.png)\n其内部代码如下：\n```\n// 用DefaultMode启动Run Loop\nvoid CFRunLoopRun(void) {\n    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);\n}\n \n// 用指定的Mode启动，允许设置Run Loop超时时间\nint CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {\n    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);\n}\n\n/// RunLoop的实现\nint CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {\n    \n    /// 首先根据modeName找到对应mode\n    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);\n    /// 如果mode里没有source/timer/observer, 直接返回。\n    if (__CFRunLoopModeIsEmpty(currentMode)) return;\n    \n    /// 1. 通知 Observers: RunLoop 即将进入 loop。\n    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);\n    \n    /// 内部函数，进入loop\n    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {\n        \n        Boolean sourceHandledThisLoop = NO;\n        int retVal = 0;\n        do {\n \n            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);\n            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);\n            /// 执行被加入的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n            \n            /// 4. RunLoop 触发 Source0 (非port) 回调。\n            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);\n            /// 执行被加入的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n \n            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。\n            if (__Source0DidDispatchPortLastTime) {\n                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &msg)\n                if (hasMsg) goto handle_msg;\n            }\n            \n            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。\n            if (!sourceHandledThisLoop) {\n                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);\n            }\n            \n            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。\n            /// ? 一个基于 port 的Source 的事件。\n            /// ? 一个 Timer 到时间了\n            /// ? RunLoop 自身的超时时间到了\n            /// ? 被其他什么调用者手动唤醒\n            __CFRunLoopServiceMachPort(waitSet, &msg, sizeof(msg_buffer), &livePort) {\n                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg\n            }\n \n            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);\n            \n            /// 收到消息，处理消息。\n            handle_msg:\n \n            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。\n            if (msg_is_timer) {\n                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())\n            } \n \n            /// 9.2 如果有dispatch到main_queue的block，执行block。\n            else if (msg_is_dispatch) {\n                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);\n            } \n \n            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件\n            else {\n                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);\n                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);\n                if (sourceHandledThisLoop) {\n                    mach_msg(reply, MACH_SEND_MSG, reply);\n                }\n            }\n            \n            /// 执行加入到Loop的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n            \n \n            if (sourceHandledThisLoop && stopAfterHandle) {\n                /// 进入loop时参数说处理完事件就返回。\n                retVal = kCFRunLoopRunHandledSource;\n            } else if (timeout) {\n                /// 超出传入参数标记的超时时间了\n                retVal = kCFRunLoopRunTimedOut;\n            } else if (__CFRunLoopIsStopped(runloop)) {\n                /// 被外部调用者强制停止了\n                retVal = kCFRunLoopRunStopped;\n            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {\n                /// source/timer/observer一个都没有了\n                retVal = kCFRunLoopRunFinished;\n            }\n            \n            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。\n        } while (retVal == 0);\n    }\n    \n    /// 10. 通知 Observers: RunLoop 即将退出。\n    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);\n}\n```\n可以看到，实际上 Run Loop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 `CFRunLoopRun()` 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。 \n## 苹果用 RunLoop 实现的功能\n### AutoreleasePool\nApp启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 `_wrapRunLoopWithAutoreleasePoolHandler()`。\n第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 `_objc_autoreleasePoolPush()` 创建自动释放池。其 order 是2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。\n第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用`_objc_autoreleasePoolPop()` 和 `_objc_autoreleasePoolPush()` 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 `_objc_autoreleasePoolPop()` 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。\n在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。\n\n### 事件响应\n苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 `__IOHIDEventSystemClientQueueCallback()`。\n当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考[这里]()。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 `_UIApplicationHandleEventQueue()` 进行应用内部的分发。\n`_UIApplicationHandleEventQueue()` 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。\n\n### 手势识别\n当上面的 `_UIApplicationHandleEventQueue()` 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。\n\n苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 `_UIGestureRecognizerUpdateObserver()`，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。\n当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。\n\n### 界面更新\n当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。\n\n苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：\n`_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()`。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。\n\n### 定时器\nNSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。\n\n如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。\n\nCADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。\n\n### PerformSelecter\n当调用 NSObject 的 `performSelecter:afterDelay:` 后，实际上其内部会创建一个 Timer 并添加到当前线程的 Run Loop 中。所以如果当前线程没有 Run Loop，则这个方法会失效。\n\n当调用 `performSelector:onThread: `时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 Run Loop 该方法也会失效。\n\n### 关于GCD\n实际上 RunLoop 底层也会用到 GCD 的东西，比如 Run Loop 是用 `dispatch_source_t` 实现的 Timer。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 `dispatch_async()`。\n\n当调用 `dispatch_async(dispatch_get_main_queue(), block) `时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 `__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()` 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。\n\n### 网络请求\n下面主要介绍下 NSURLConnection 的工作过程。\n\n通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 `[connection start]` 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。`CFMultiplexerSource` 是负责各种 Delegate 回调的，`CFHTTPCookieStorage` 是处理各种 Cookie 的。\n\n当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：`com.apple.NSURLConnectionLoader` 和 `com.apple.CFSocket.private`。其中 CFSocket 线程是处理底层 socket 连接的。`NSURLConnectionLoader` 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 `Source0` 通知到上层的 Delegate。\n\n![](http://cc.cocimg.com/api/uploads/20150528/1432799200369980.png)\n\n`NSURLConnectionLoader` 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 `CFSocket` 的通知。当收到通知后，其会在合适的时机向 `CFMultiplexerSource` 等 `Source0` 发送通知，同时唤醒 Delegate 线程的 Run Loop 来让其处理这些通知。`CFMultiplexerSource` 会在 Delegate 线程的 Run Loop 对 Delegate 执行实际的回调。\n## Run Loop 的实际应用\n### 创建常驻线程\n```\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];\n  [_thread start];\n}\n  \n- (void)run {\n  [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];\n  [[NSRunLoop currentRunLoop] run];\n}\n```\n\n\n\n","source":"_posts/RunLoop.md","raw":"---\ntitle: Run Loop\ndate: 2016-03-01 09:12:57\ntags: iOS\ncategory: iOS\nkeywords:\n- iOS\n- RunLoop\n---\n本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。\n\n1. RunLoop 的概念\n2. RunLoop 与线程的关系\n3. RunLoop 的内部\n    1. RunLoop 的 Mode\n    2. RunLoop 的内部逻辑\n4. 苹果用 RunLoop 实现的功能\n5. RunLoop 的实际应用举例\n\n\n<!-- excerpt -->\n\n本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。点击[这里](http://www.cocoachina.com/ios/20150601/11970.html)可以查看原文。\n<!-- toc -->\n## RunLoop 的概念\n一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是这样的：\n```\nvoid loop() {\n    initialize();\n    do {\n        auto message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n```\n这种模型通常被称作 Event Loop ，实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。\n\n所以，Run Loop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 <p>{% hl_text green %}\n\"接受消息->等待->处理\" {% endhl_text %}的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。<p>\n\nOSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。\nCFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。\nNSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。\n\n## RunLoop 与线程的关系\niOS 开发中能遇到两个线程对象: `pthread_t` 和 `NSThread`。你可以通过 `pthread_main_np()` 或 `[NSThread mainThread]` 来获取主线程；也可以通过 `pthread_self()` 或 `[NSThread currentThread]` 来获取当前线程。`CFRunLoop` 是基于 `pthread` 来管理的。苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：`CFRunLoopGetMain()` 和 `CFRunLoopGetCurrent()`。 这两个函数内部的逻辑大概是下面这样:\n```c\n// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef\nstatic CFMutableDictionaryRef loopsDic;\n// 访问 loopsDic 时的锁\nstatic CFSpinLock_t loopsLock;\n \n// 获取一个 pthread 对应的 RunLoop。\nCFRunLoopRef _CFRunLoopGet(pthread_t thread) {\n    OSSpinLockLock(&loopsLock);\n    \n    if (!loopsDic) {\n        // 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。\n        loopsDic = CFDictionaryCreateMutable();\n        CFRunLoopRef mainLoop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);\n    }\n    \n    /// 直接从 Dictionary 里获取。\n    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));\n    \n    if (!loop) {\n        /// 取不到时，创建一个\n        loop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, thread, loop);\n        /// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。\n        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);\n    }\n    \n    OSSpinLockUnLock(&loopsLock);\n    return loop;\n}\n \nCFRunLoopRef CFRunLoopGetMain() {\n    return _CFRunLoopGet(pthread_main_thread_np());\n}\n \nCFRunLoopRef CFRunLoopGetCurrent() {\n    return _CFRunLoopGet(pthread_self());\n}\n```\n从上面的代码可以看出，线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。\n## RunLoop 的内部  \n在 Core Foundation 中关于 RunLoop 有5个类\n\n* CFRunLoopRef\n* CFRunLoopModeRef\n* CFRunLoopSourceRef\n* CFRunLoopTimerRef\n* CFRunLoopObserverRef\n\n其中 CFRunLoopModeRef 类并没有对外暴露，只是通过 CFRunLoopRef 的接口进行了封装。他们的关系如下:\n![](http://cc.cocimg.com/api/uploads/20150528/1432798883604537.png)\n一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。\n\n**CFRunLoopSourceRef**是事件产生的地方。Source有两个版本：source0 和 source1。\n\n* source0 只包含了一个回调，它并不能主动触发时间。使用时，你需要先调用 `CFRunLoopSourceSignal(source)`，将这个 source 标记为待处理，然后手动调用 `CFRunLoopWakeUp(runloop)` 来唤醒 Run Loop，让其处理这个事件。\n* source1 包含了一个mach_prot和一个回调，被用于通过内核和其他线程进行通信，接收分发系统事件。这种 source 能主动唤醒 Run Loop 的线程。\n\n**CFRunLoopTimerRef**是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调。当其加入到 Run Loop 时，Run Loop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。\n\n**CFRunLoopObserverRef** 是观察者，每个 Observer 都包含了一个回调，当 Run Loop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：\n```\ntypedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry         = (1UL << 0), // 即将进入Loop\n    kCFRunLoopBeforeTimers  = (1UL << 1), // 即将处理 Timer\n    kCFRunLoopBeforeSources = (1UL << 2), // 即将处理 Source\n    kCFRunLoopBeforeWaiting = (1UL << 5), // 即将进入休眠\n    kCFRunLoopAfterWaiting  = (1UL << 6), // 刚从休眠中唤醒\n    kCFRunLoopExit          = (1UL << 7), // 即将退出Loop\n};\n```\n上面的 Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 Run Loop 会直接退出，不进入循环。\n### RunLoop 的 Mode\nCFRunLoop 的结构大致如下：\n```\nstruct __CFRunLoop {\n    CFMutableSetRef _commonModes;     // Set\n    CFMutableSetRef _commonModeItems; // Set\n    CFRunLoopModeRef _currentMode;    // Current Runloop Mode\n    CFMutableSetRef _modes;           // Set\n    ...\n};\n```\n这里有个 `_commonModes`，一个 Mode 可以将自己标记为\"Common\"属性（通过将其 ModeName 添加到 RunLoop 的 \"commonModes\" 中）。每当 Run Loop 的内容发生变化时，Run Loop 都会自动将 `_commonModeItems` 里的 Source/Observer/Timer 同步到具有 \"Common\" 标记的所有 Mode 里。\n\n主线程的 Run Loop 里有两个预置的 Mode：`kCFRunLoopDefaultMode` 和 `UITrackingRunLoopMode`。这两个 Mode 都已经被标记为\"Common\"属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，Run Loop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。\n\n有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 Run Loop 的 \"commonModeItems\" 中。\"commonModeItems\" 被 RunLoop 自动更新到所有具有\"Common\"属性的 Mode 里去。\n\n### RunLoop 的内部逻辑 \n根据苹果在文档里的说明，RunLoop 内部的逻辑大致如下：\n![](http://cc.cocimg.com/api/uploads/20150528/1432798974517485.png)\n其内部代码如下：\n```\n// 用DefaultMode启动Run Loop\nvoid CFRunLoopRun(void) {\n    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);\n}\n \n// 用指定的Mode启动，允许设置Run Loop超时时间\nint CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {\n    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);\n}\n\n/// RunLoop的实现\nint CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {\n    \n    /// 首先根据modeName找到对应mode\n    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);\n    /// 如果mode里没有source/timer/observer, 直接返回。\n    if (__CFRunLoopModeIsEmpty(currentMode)) return;\n    \n    /// 1. 通知 Observers: RunLoop 即将进入 loop。\n    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);\n    \n    /// 内部函数，进入loop\n    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {\n        \n        Boolean sourceHandledThisLoop = NO;\n        int retVal = 0;\n        do {\n \n            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);\n            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);\n            /// 执行被加入的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n            \n            /// 4. RunLoop 触发 Source0 (非port) 回调。\n            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);\n            /// 执行被加入的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n \n            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。\n            if (__Source0DidDispatchPortLastTime) {\n                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &msg)\n                if (hasMsg) goto handle_msg;\n            }\n            \n            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。\n            if (!sourceHandledThisLoop) {\n                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);\n            }\n            \n            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。\n            /// ? 一个基于 port 的Source 的事件。\n            /// ? 一个 Timer 到时间了\n            /// ? RunLoop 自身的超时时间到了\n            /// ? 被其他什么调用者手动唤醒\n            __CFRunLoopServiceMachPort(waitSet, &msg, sizeof(msg_buffer), &livePort) {\n                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg\n            }\n \n            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);\n            \n            /// 收到消息，处理消息。\n            handle_msg:\n \n            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。\n            if (msg_is_timer) {\n                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())\n            } \n \n            /// 9.2 如果有dispatch到main_queue的block，执行block。\n            else if (msg_is_dispatch) {\n                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);\n            } \n \n            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件\n            else {\n                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);\n                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);\n                if (sourceHandledThisLoop) {\n                    mach_msg(reply, MACH_SEND_MSG, reply);\n                }\n            }\n            \n            /// 执行加入到Loop的block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n            \n \n            if (sourceHandledThisLoop && stopAfterHandle) {\n                /// 进入loop时参数说处理完事件就返回。\n                retVal = kCFRunLoopRunHandledSource;\n            } else if (timeout) {\n                /// 超出传入参数标记的超时时间了\n                retVal = kCFRunLoopRunTimedOut;\n            } else if (__CFRunLoopIsStopped(runloop)) {\n                /// 被外部调用者强制停止了\n                retVal = kCFRunLoopRunStopped;\n            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {\n                /// source/timer/observer一个都没有了\n                retVal = kCFRunLoopRunFinished;\n            }\n            \n            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。\n        } while (retVal == 0);\n    }\n    \n    /// 10. 通知 Observers: RunLoop 即将退出。\n    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);\n}\n```\n可以看到，实际上 Run Loop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 `CFRunLoopRun()` 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。 \n## 苹果用 RunLoop 实现的功能\n### AutoreleasePool\nApp启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 `_wrapRunLoopWithAutoreleasePoolHandler()`。\n第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 `_objc_autoreleasePoolPush()` 创建自动释放池。其 order 是2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。\n第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用`_objc_autoreleasePoolPop()` 和 `_objc_autoreleasePoolPush()` 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 `_objc_autoreleasePoolPop()` 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。\n在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。\n\n### 事件响应\n苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 `__IOHIDEventSystemClientQueueCallback()`。\n当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考[这里]()。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 `_UIApplicationHandleEventQueue()` 进行应用内部的分发。\n`_UIApplicationHandleEventQueue()` 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。\n\n### 手势识别\n当上面的 `_UIApplicationHandleEventQueue()` 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。\n\n苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 `_UIGestureRecognizerUpdateObserver()`，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。\n当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。\n\n### 界面更新\n当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。\n\n苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：\n`_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()`。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。\n\n### 定时器\nNSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。\n\n如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。\n\nCADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。\n\n### PerformSelecter\n当调用 NSObject 的 `performSelecter:afterDelay:` 后，实际上其内部会创建一个 Timer 并添加到当前线程的 Run Loop 中。所以如果当前线程没有 Run Loop，则这个方法会失效。\n\n当调用 `performSelector:onThread: `时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 Run Loop 该方法也会失效。\n\n### 关于GCD\n实际上 RunLoop 底层也会用到 GCD 的东西，比如 Run Loop 是用 `dispatch_source_t` 实现的 Timer。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 `dispatch_async()`。\n\n当调用 `dispatch_async(dispatch_get_main_queue(), block) `时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 `__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()` 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。\n\n### 网络请求\n下面主要介绍下 NSURLConnection 的工作过程。\n\n通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 `[connection start]` 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。`CFMultiplexerSource` 是负责各种 Delegate 回调的，`CFHTTPCookieStorage` 是处理各种 Cookie 的。\n\n当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：`com.apple.NSURLConnectionLoader` 和 `com.apple.CFSocket.private`。其中 CFSocket 线程是处理底层 socket 连接的。`NSURLConnectionLoader` 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 `Source0` 通知到上层的 Delegate。\n\n![](http://cc.cocimg.com/api/uploads/20150528/1432799200369980.png)\n\n`NSURLConnectionLoader` 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 `CFSocket` 的通知。当收到通知后，其会在合适的时机向 `CFMultiplexerSource` 等 `Source0` 发送通知，同时唤醒 Delegate 线程的 Run Loop 来让其处理这些通知。`CFMultiplexerSource` 会在 Delegate 线程的 Run Loop 对 Delegate 执行实际的回调。\n## Run Loop 的实际应用\n### 创建常驻线程\n```\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];\n  [_thread start];\n}\n  \n- (void)run {\n  [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];\n  [[NSRunLoop currentRunLoop] run];\n}\n```\n\n\n\n","slug":"RunLoop","published":1,"updated":"2018-05-30T03:36:24.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zijd00001u0or3w8r3ul","content":"<!-- excerpt -->\n<p>本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。点击<a href=\"http://www.cocoachina.com/ios/20150601/11970.html\" target=\"_blank\" rel=\"noopener\">这里</a>可以查看原文。<br><!-- toc --></p>\n<h2 id=\"RunLoop-的概念\"><a href=\"#RunLoop-的概念\" class=\"headerlink\" title=\"RunLoop 的概念\"></a>RunLoop 的概念</h2><p>一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void loop() &#123;</span><br><span class=\"line\">    initialize();</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        auto message = get_next_message();</span><br><span class=\"line\">        process_message(message);</span><br><span class=\"line\">    &#125; while (message != quit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种模型通常被称作 Event Loop ，实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。</p>\n<p>所以，Run Loop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 </p><p><span class=\"highlight-text green\">\"接受消息->等待->处理\" </span>的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。</p><p></p>\n<p>OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。<br>CFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。<br>NSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。</p>\n<h2 id=\"RunLoop-与线程的关系\"><a href=\"#RunLoop-与线程的关系\" class=\"headerlink\" title=\"RunLoop 与线程的关系\"></a>RunLoop 与线程的关系</h2><p>iOS 开发中能遇到两个线程对象: <code>pthread_t</code> 和 <code>NSThread</code>。你可以通过 <code>pthread_main_np()</code> 或 <code>[NSThread mainThread]</code> 来获取主线程；也可以通过 <code>pthread_self()</code> 或 <code>[NSThread currentThread]</code> 来获取当前线程。<code>CFRunLoop</code> 是基于 <code>pthread</code> 来管理的。苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：<code>CFRunLoopGetMain()</code> 和 <code>CFRunLoopGetCurrent()</code>。 这两个函数内部的逻辑大概是下面这样:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> CFMutableDictionaryRef loopsDic;</span><br><span class=\"line\"><span class=\"comment\">// 访问 loopsDic 时的锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> CFSpinLock_t loopsLock;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 获取一个 pthread 对应的 RunLoop。</span></span><br><span class=\"line\">CFRunLoopRef _CFRunLoopGet(<span class=\"keyword\">pthread_t</span> thread) &#123;</span><br><span class=\"line\">    OSSpinLockLock(&amp;loopsLock);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!loopsDic) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。</span></span><br><span class=\"line\">        loopsDic = CFDictionaryCreateMutable();</span><br><span class=\"line\">        CFRunLoopRef mainLoop = _CFRunLoopCreate();</span><br><span class=\"line\">        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 直接从 Dictionary 里获取。</span></span><br><span class=\"line\">    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!loop) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 取不到时，创建一个</span></span><br><span class=\"line\">        loop = _CFRunLoopCreate();</span><br><span class=\"line\">        CFDictionarySetValue(loopsDic, thread, loop);</span><br><span class=\"line\">        <span class=\"comment\">/// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。</span></span><br><span class=\"line\">        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    OSSpinLockUnLock(&amp;loopsLock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">CFRunLoopRef <span class=\"title\">CFRunLoopGetMain</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _CFRunLoopGet(pthread_main_thread_np());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">CFRunLoopRef <span class=\"title\">CFRunLoopGetCurrent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _CFRunLoopGet(pthread_self());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的代码可以看出，线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。</p>\n<h2 id=\"RunLoop-的内部\"><a href=\"#RunLoop-的内部\" class=\"headerlink\" title=\"RunLoop 的内部\"></a>RunLoop 的内部</h2><p>在 Core Foundation 中关于 RunLoop 有5个类</p>\n<ul>\n<li>CFRunLoopRef</li>\n<li>CFRunLoopModeRef</li>\n<li>CFRunLoopSourceRef</li>\n<li>CFRunLoopTimerRef</li>\n<li>CFRunLoopObserverRef</li>\n</ul>\n<p>其中 CFRunLoopModeRef 类并没有对外暴露，只是通过 CFRunLoopRef 的接口进行了封装。他们的关系如下:<br><img src=\"http://cc.cocimg.com/api/uploads/20150528/1432798883604537.png\" alt=\"\"><br>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。</p>\n<p><strong>CFRunLoopSourceRef</strong>是事件产生的地方。Source有两个版本：source0 和 source1。</p>\n<ul>\n<li>source0 只包含了一个回调，它并不能主动触发时间。使用时，你需要先调用 <code>CFRunLoopSourceSignal(source)</code>，将这个 source 标记为待处理，然后手动调用 <code>CFRunLoopWakeUp(runloop)</code> 来唤醒 Run Loop，让其处理这个事件。</li>\n<li>source1 包含了一个mach_prot和一个回调，被用于通过内核和其他线程进行通信，接收分发系统事件。这种 source 能主动唤醒 Run Loop 的线程。</li>\n</ul>\n<p><strong>CFRunLoopTimerRef</strong>是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调。当其加入到 Run Loop 时，Run Loop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p>\n<p><strong>CFRunLoopObserverRef</strong> 是观察者，每个 Observer 都包含了一个回调，当 Run Loop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class=\"line\">    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop</span><br><span class=\"line\">    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer</span><br><span class=\"line\">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source</span><br><span class=\"line\">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠</span><br><span class=\"line\">    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒</span><br><span class=\"line\">    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面的 Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 Run Loop 会直接退出，不进入循环。</p>\n<h3 id=\"RunLoop-的-Mode\"><a href=\"#RunLoop-的-Mode\" class=\"headerlink\" title=\"RunLoop 的 Mode\"></a>RunLoop 的 Mode</h3><p>CFRunLoop 的结构大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct __CFRunLoop &#123;</span><br><span class=\"line\">    CFMutableSetRef _commonModes;     // Set</span><br><span class=\"line\">    CFMutableSetRef _commonModeItems; // Set</span><br><span class=\"line\">    CFRunLoopModeRef _currentMode;    // Current Runloop Mode</span><br><span class=\"line\">    CFMutableSetRef _modes;           // Set</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里有个 <code>_commonModes</code>，一个 Mode 可以将自己标记为”Common”属性（通过将其 ModeName 添加到 RunLoop 的 “commonModes” 中）。每当 Run Loop 的内容发生变化时，Run Loop 都会自动将 <code>_commonModeItems</code> 里的 Source/Observer/Timer 同步到具有 “Common” 标记的所有 Mode 里。</p>\n<p>主线程的 Run Loop 里有两个预置的 Mode：<code>kCFRunLoopDefaultMode</code> 和 <code>UITrackingRunLoopMode</code>。这两个 Mode 都已经被标记为”Common”属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，Run Loop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。</p>\n<p>有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 Run Loop 的 “commonModeItems” 中。”commonModeItems” 被 RunLoop 自动更新到所有具有”Common”属性的 Mode 里去。</p>\n<h3 id=\"RunLoop-的内部逻辑\"><a href=\"#RunLoop-的内部逻辑\" class=\"headerlink\" title=\"RunLoop 的内部逻辑\"></a>RunLoop 的内部逻辑</h3><p>根据苹果在文档里的说明，RunLoop 内部的逻辑大致如下：<br><img src=\"http://cc.cocimg.com/api/uploads/20150528/1432798974517485.png\" alt=\"\"><br>其内部代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用DefaultMode启动Run Loop</span><br><span class=\"line\">void CFRunLoopRun(void) &#123;</span><br><span class=\"line\">    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 用指定的Mode启动，允许设置Run Loop超时时间</span><br><span class=\"line\">int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) &#123;</span><br><span class=\"line\">    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/// RunLoop的实现</span><br><span class=\"line\">int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 首先根据modeName找到对应mode</span><br><span class=\"line\">    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);</span><br><span class=\"line\">    /// 如果mode里没有source/timer/observer, 直接返回。</span><br><span class=\"line\">    if (__CFRunLoopModeIsEmpty(currentMode)) return;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 1. 通知 Observers: RunLoop 即将进入 loop。</span><br><span class=\"line\">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 内部函数，进入loop</span><br><span class=\"line\">    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Boolean sourceHandledThisLoop = NO;</span><br><span class=\"line\">        int retVal = 0;</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span><br><span class=\"line\">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br><span class=\"line\">            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span><br><span class=\"line\">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class=\"line\">            /// 执行被加入的block</span><br><span class=\"line\">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 4. RunLoop 触发 Source0 (非port) 回调。</span><br><span class=\"line\">            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);</span><br><span class=\"line\">            /// 执行被加入的block</span><br><span class=\"line\">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span><br><span class=\"line\">            if (__Source0DidDispatchPortLastTime) &#123;</span><br><span class=\"line\">                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)</span><br><span class=\"line\">                if (hasMsg) goto handle_msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span><br><span class=\"line\">            if (!sourceHandledThisLoop) &#123;</span><br><span class=\"line\">                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span><br><span class=\"line\">            /// ? 一个基于 port 的Source 的事件。</span><br><span class=\"line\">            /// ? 一个 Timer 到时间了</span><br><span class=\"line\">            /// ? RunLoop 自身的超时时间到了</span><br><span class=\"line\">            /// ? 被其他什么调用者手动唤醒</span><br><span class=\"line\">            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) &#123;</span><br><span class=\"line\">                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span><br><span class=\"line\">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 收到消息，处理消息。</span><br><span class=\"line\">            handle_msg:</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span><br><span class=\"line\">            if (msg_is_timer) &#123;</span><br><span class=\"line\">                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 9.2 如果有dispatch到main_queue的block，执行block。</span><br><span class=\"line\">            else if (msg_is_dispatch) &#123;</span><br><span class=\"line\">                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class=\"line\">                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class=\"line\">                if (sourceHandledThisLoop) &#123;</span><br><span class=\"line\">                    mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 执行加入到Loop的block</span><br><span class=\"line\">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class=\"line\">            </span><br><span class=\"line\"> </span><br><span class=\"line\">            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class=\"line\">                /// 进入loop时参数说处理完事件就返回。</span><br><span class=\"line\">                retVal = kCFRunLoopRunHandledSource;</span><br><span class=\"line\">            &#125; else if (timeout) &#123;</span><br><span class=\"line\">                /// 超出传入参数标记的超时时间了</span><br><span class=\"line\">                retVal = kCFRunLoopRunTimedOut;</span><br><span class=\"line\">            &#125; else if (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class=\"line\">                /// 被外部调用者强制停止了</span><br><span class=\"line\">                retVal = kCFRunLoopRunStopped;</span><br><span class=\"line\">            &#125; else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class=\"line\">                /// source/timer/observer一个都没有了</span><br><span class=\"line\">                retVal = kCFRunLoopRunFinished;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。</span><br><span class=\"line\">        &#125; while (retVal == 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 10. 通知 Observers: RunLoop 即将退出。</span><br><span class=\"line\">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，实际上 Run Loop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 <code>CFRunLoopRun()</code> 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。 </p>\n<h2 id=\"苹果用-RunLoop-实现的功能\"><a href=\"#苹果用-RunLoop-实现的功能\" class=\"headerlink\" title=\"苹果用 RunLoop 实现的功能\"></a>苹果用 RunLoop 实现的功能</h2><h3 id=\"AutoreleasePool\"><a href=\"#AutoreleasePool\" class=\"headerlink\" title=\"AutoreleasePool\"></a>AutoreleasePool</h3><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 <code>_wrapRunLoopWithAutoreleasePoolHandler()</code>。<br>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 <code>_objc_autoreleasePoolPush()</code> 创建自动释放池。其 order 是2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。<br>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用<code>_objc_autoreleasePoolPop()</code> 和 <code>_objc_autoreleasePoolPush()</code> 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 <code>_objc_autoreleasePoolPop()</code> 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。<br>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p>\n<h3 id=\"事件响应\"><a href=\"#事件响应\" class=\"headerlink\" title=\"事件响应\"></a>事件响应</h3><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 <code>__IOHIDEventSystemClientQueueCallback()</code>。<br>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考<a href=\"\">这里</a>。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 <code>_UIApplicationHandleEventQueue()</code> 进行应用内部的分发。<br><code>_UIApplicationHandleEventQueue()</code> 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p>\n<h3 id=\"手势识别\"><a href=\"#手势识别\" class=\"headerlink\" title=\"手势识别\"></a>手势识别</h3><p>当上面的 <code>_UIApplicationHandleEventQueue()</code> 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p>\n<p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 <code>_UIGestureRecognizerUpdateObserver()</code>，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。<br>当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p>\n<h3 id=\"界面更新\"><a href=\"#界面更新\" class=\"headerlink\" title=\"界面更新\"></a>界面更新</h3><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。</p>\n<p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：<br><code>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</code>。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p>\n<p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。</p>\n<p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。</p>\n<h3 id=\"PerformSelecter\"><a href=\"#PerformSelecter\" class=\"headerlink\" title=\"PerformSelecter\"></a>PerformSelecter</h3><p>当调用 NSObject 的 <code>performSelecter:afterDelay:</code> 后，实际上其内部会创建一个 Timer 并添加到当前线程的 Run Loop 中。所以如果当前线程没有 Run Loop，则这个方法会失效。</p>\n<p>当调用 <code>performSelector:onThread:</code>时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 Run Loop 该方法也会失效。</p>\n<h3 id=\"关于GCD\"><a href=\"#关于GCD\" class=\"headerlink\" title=\"关于GCD\"></a>关于GCD</h3><p>实际上 RunLoop 底层也会用到 GCD 的东西，比如 Run Loop 是用 <code>dispatch_source_t</code> 实现的 Timer。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 <code>dispatch_async()</code>。</p>\n<p>当调用 <code>dispatch_async(dispatch_get_main_queue(), block)</code>时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 <code>__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()</code> 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。</p>\n<h3 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h3><p>下面主要介绍下 NSURLConnection 的工作过程。</p>\n<p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 <code>[connection start]</code> 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。<code>CFMultiplexerSource</code> 是负责各种 Delegate 回调的，<code>CFHTTPCookieStorage</code> 是处理各种 Cookie 的。</p>\n<p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：<code>com.apple.NSURLConnectionLoader</code> 和 <code>com.apple.CFSocket.private</code>。其中 CFSocket 线程是处理底层 socket 连接的。<code>NSURLConnectionLoader</code> 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 <code>Source0</code> 通知到上层的 Delegate。</p>\n<p><img src=\"http://cc.cocimg.com/api/uploads/20150528/1432799200369980.png\" alt=\"\"></p>\n<p><code>NSURLConnectionLoader</code> 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 <code>CFSocket</code> 的通知。当收到通知后，其会在合适的时机向 <code>CFMultiplexerSource</code> 等 <code>Source0</code> 发送通知，同时唤醒 Delegate 线程的 Run Loop 来让其处理这些通知。<code>CFMultiplexerSource</code> 会在 Delegate 线程的 Run Loop 对 Delegate 执行实际的回调。</p>\n<h2 id=\"Run-Loop-的实际应用\"><a href=\"#Run-Loop-的实际应用\" class=\"headerlink\" title=\"Run Loop 的实际应用\"></a>Run Loop 的实际应用</h2><h3 id=\"创建常驻线程\"><a href=\"#创建常驻线程\" class=\"headerlink\" title=\"创建常驻线程\"></a>创建常驻线程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">  [super viewDidLoad];</span><br><span class=\"line\">  self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class=\"line\">  [_thread start];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">- (void)run &#123;</span><br><span class=\"line\">  [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span><br><span class=\"line\">  [[NSRunLoop currentRunLoop] run];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。</p>\n<ol>\n<li>RunLoop 的概念</li>\n<li>RunLoop 与线程的关系</li>\n<li>RunLoop 的内部<ol>\n<li>RunLoop 的 Mode</li>\n<li>RunLoop 的内部逻辑</li>\n</ol>\n</li>\n<li>苹果用 RunLoop 实现的功能</li>\n<li>RunLoop 的实际应用举例</li>\n</ol>","more":"<p>本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。</p>\n<ol>\n<li>RunLoop 的概念</li>\n<li>RunLoop 与线程的关系</li>\n<li>RunLoop 的内部<ol>\n<li>RunLoop 的 Mode</li>\n<li>RunLoop 的内部逻辑</li>\n</ol>\n</li>\n<li>苹果用 RunLoop 实现的功能</li>\n<li>RunLoop 的实际应用举例</li>\n</ol>\n<!-- excerpt -->\n<p>本文并不是一篇个人博客，只是对 RunLoop 知识的一个整理，方便自己查阅。点击<a href=\"http://www.cocoachina.com/ios/20150601/11970.html\" target=\"_blank\" rel=\"noopener\">这里</a>可以查看原文。<br><!-- toc --></p>\n<h2 id=\"RunLoop-的概念\"><a href=\"#RunLoop-的概念\" class=\"headerlink\" title=\"RunLoop 的概念\"></a>RunLoop 的概念</h2><p>一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void loop() &#123;</span><br><span class=\"line\">    initialize();</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        auto message = get_next_message();</span><br><span class=\"line\">        process_message(message);</span><br><span class=\"line\">    &#125; while (message != quit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种模型通常被称作 Event Loop ，实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。</p>\n<p>所以，Run Loop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 </p><p><span class=\"highlight-text green\">\"接受消息->等待->处理\" </span>的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。</p><p></p>\n<p>OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。<br>CFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。<br>NSRunLoop 是基于 CFRunLoopRef 的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。</p>\n<h2 id=\"RunLoop-与线程的关系\"><a href=\"#RunLoop-与线程的关系\" class=\"headerlink\" title=\"RunLoop 与线程的关系\"></a>RunLoop 与线程的关系</h2><p>iOS 开发中能遇到两个线程对象: <code>pthread_t</code> 和 <code>NSThread</code>。你可以通过 <code>pthread_main_np()</code> 或 <code>[NSThread mainThread]</code> 来获取主线程；也可以通过 <code>pthread_self()</code> 或 <code>[NSThread currentThread]</code> 来获取当前线程。<code>CFRunLoop</code> 是基于 <code>pthread</code> 来管理的。苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：<code>CFRunLoopGetMain()</code> 和 <code>CFRunLoopGetCurrent()</code>。 这两个函数内部的逻辑大概是下面这样:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> CFMutableDictionaryRef loopsDic;</span><br><span class=\"line\"><span class=\"comment\">// 访问 loopsDic 时的锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> CFSpinLock_t loopsLock;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 获取一个 pthread 对应的 RunLoop。</span></span><br><span class=\"line\">CFRunLoopRef _CFRunLoopGet(<span class=\"keyword\">pthread_t</span> thread) &#123;</span><br><span class=\"line\">    OSSpinLockLock(&amp;loopsLock);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!loopsDic) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。</span></span><br><span class=\"line\">        loopsDic = CFDictionaryCreateMutable();</span><br><span class=\"line\">        CFRunLoopRef mainLoop = _CFRunLoopCreate();</span><br><span class=\"line\">        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 直接从 Dictionary 里获取。</span></span><br><span class=\"line\">    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!loop) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 取不到时，创建一个</span></span><br><span class=\"line\">        loop = _CFRunLoopCreate();</span><br><span class=\"line\">        CFDictionarySetValue(loopsDic, thread, loop);</span><br><span class=\"line\">        <span class=\"comment\">/// 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。</span></span><br><span class=\"line\">        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    OSSpinLockUnLock(&amp;loopsLock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">CFRunLoopRef <span class=\"title\">CFRunLoopGetMain</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _CFRunLoopGet(pthread_main_thread_np());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">CFRunLoopRef <span class=\"title\">CFRunLoopGetCurrent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _CFRunLoopGet(pthread_self());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的代码可以看出，线程和 RunLoop 之间是一一对应的，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。</p>\n<h2 id=\"RunLoop-的内部\"><a href=\"#RunLoop-的内部\" class=\"headerlink\" title=\"RunLoop 的内部\"></a>RunLoop 的内部</h2><p>在 Core Foundation 中关于 RunLoop 有5个类</p>\n<ul>\n<li>CFRunLoopRef</li>\n<li>CFRunLoopModeRef</li>\n<li>CFRunLoopSourceRef</li>\n<li>CFRunLoopTimerRef</li>\n<li>CFRunLoopObserverRef</li>\n</ul>\n<p>其中 CFRunLoopModeRef 类并没有对外暴露，只是通过 CFRunLoopRef 的接口进行了封装。他们的关系如下:<br><img src=\"http://cc.cocimg.com/api/uploads/20150528/1432798883604537.png\" alt=\"\"><br>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。</p>\n<p><strong>CFRunLoopSourceRef</strong>是事件产生的地方。Source有两个版本：source0 和 source1。</p>\n<ul>\n<li>source0 只包含了一个回调，它并不能主动触发时间。使用时，你需要先调用 <code>CFRunLoopSourceSignal(source)</code>，将这个 source 标记为待处理，然后手动调用 <code>CFRunLoopWakeUp(runloop)</code> 来唤醒 Run Loop，让其处理这个事件。</li>\n<li>source1 包含了一个mach_prot和一个回调，被用于通过内核和其他线程进行通信，接收分发系统事件。这种 source 能主动唤醒 Run Loop 的线程。</li>\n</ul>\n<p><strong>CFRunLoopTimerRef</strong>是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调。当其加入到 Run Loop 时，Run Loop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p>\n<p><strong>CFRunLoopObserverRef</strong> 是观察者，每个 Observer 都包含了一个回调，当 Run Loop 的状态发生变化时，观察者就能通过回调接受到这个变化。可以观测的时间点有以下几个：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class=\"line\">    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop</span><br><span class=\"line\">    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer</span><br><span class=\"line\">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source</span><br><span class=\"line\">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠</span><br><span class=\"line\">    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒</span><br><span class=\"line\">    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面的 Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 Run Loop 会直接退出，不进入循环。</p>\n<h3 id=\"RunLoop-的-Mode\"><a href=\"#RunLoop-的-Mode\" class=\"headerlink\" title=\"RunLoop 的 Mode\"></a>RunLoop 的 Mode</h3><p>CFRunLoop 的结构大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct __CFRunLoop &#123;</span><br><span class=\"line\">    CFMutableSetRef _commonModes;     // Set</span><br><span class=\"line\">    CFMutableSetRef _commonModeItems; // Set</span><br><span class=\"line\">    CFRunLoopModeRef _currentMode;    // Current Runloop Mode</span><br><span class=\"line\">    CFMutableSetRef _modes;           // Set</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里有个 <code>_commonModes</code>，一个 Mode 可以将自己标记为”Common”属性（通过将其 ModeName 添加到 RunLoop 的 “commonModes” 中）。每当 Run Loop 的内容发生变化时，Run Loop 都会自动将 <code>_commonModeItems</code> 里的 Source/Observer/Timer 同步到具有 “Common” 标记的所有 Mode 里。</p>\n<p>主线程的 Run Loop 里有两个预置的 Mode：<code>kCFRunLoopDefaultMode</code> 和 <code>UITrackingRunLoopMode</code>。这两个 Mode 都已经被标记为”Common”属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，Run Loop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。</p>\n<p>有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 Run Loop 的 “commonModeItems” 中。”commonModeItems” 被 RunLoop 自动更新到所有具有”Common”属性的 Mode 里去。</p>\n<h3 id=\"RunLoop-的内部逻辑\"><a href=\"#RunLoop-的内部逻辑\" class=\"headerlink\" title=\"RunLoop 的内部逻辑\"></a>RunLoop 的内部逻辑</h3><p>根据苹果在文档里的说明，RunLoop 内部的逻辑大致如下：<br><img src=\"http://cc.cocimg.com/api/uploads/20150528/1432798974517485.png\" alt=\"\"><br>其内部代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用DefaultMode启动Run Loop</span><br><span class=\"line\">void CFRunLoopRun(void) &#123;</span><br><span class=\"line\">    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 用指定的Mode启动，允许设置Run Loop超时时间</span><br><span class=\"line\">int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) &#123;</span><br><span class=\"line\">    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/// RunLoop的实现</span><br><span class=\"line\">int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 首先根据modeName找到对应mode</span><br><span class=\"line\">    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);</span><br><span class=\"line\">    /// 如果mode里没有source/timer/observer, 直接返回。</span><br><span class=\"line\">    if (__CFRunLoopModeIsEmpty(currentMode)) return;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 1. 通知 Observers: RunLoop 即将进入 loop。</span><br><span class=\"line\">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 内部函数，进入loop</span><br><span class=\"line\">    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Boolean sourceHandledThisLoop = NO;</span><br><span class=\"line\">        int retVal = 0;</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span><br><span class=\"line\">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br><span class=\"line\">            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span><br><span class=\"line\">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class=\"line\">            /// 执行被加入的block</span><br><span class=\"line\">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 4. RunLoop 触发 Source0 (非port) 回调。</span><br><span class=\"line\">            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);</span><br><span class=\"line\">            /// 执行被加入的block</span><br><span class=\"line\">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span><br><span class=\"line\">            if (__Source0DidDispatchPortLastTime) &#123;</span><br><span class=\"line\">                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)</span><br><span class=\"line\">                if (hasMsg) goto handle_msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span><br><span class=\"line\">            if (!sourceHandledThisLoop) &#123;</span><br><span class=\"line\">                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span><br><span class=\"line\">            /// ? 一个基于 port 的Source 的事件。</span><br><span class=\"line\">            /// ? 一个 Timer 到时间了</span><br><span class=\"line\">            /// ? RunLoop 自身的超时时间到了</span><br><span class=\"line\">            /// ? 被其他什么调用者手动唤醒</span><br><span class=\"line\">            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) &#123;</span><br><span class=\"line\">                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span><br><span class=\"line\">            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 收到消息，处理消息。</span><br><span class=\"line\">            handle_msg:</span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span><br><span class=\"line\">            if (msg_is_timer) &#123;</span><br><span class=\"line\">                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 9.2 如果有dispatch到main_queue的block，执行block。</span><br><span class=\"line\">            else if (msg_is_dispatch) &#123;</span><br><span class=\"line\">                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class=\"line\">                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class=\"line\">                if (sourceHandledThisLoop) &#123;</span><br><span class=\"line\">                    mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 执行加入到Loop的block</span><br><span class=\"line\">            __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class=\"line\">            </span><br><span class=\"line\"> </span><br><span class=\"line\">            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class=\"line\">                /// 进入loop时参数说处理完事件就返回。</span><br><span class=\"line\">                retVal = kCFRunLoopRunHandledSource;</span><br><span class=\"line\">            &#125; else if (timeout) &#123;</span><br><span class=\"line\">                /// 超出传入参数标记的超时时间了</span><br><span class=\"line\">                retVal = kCFRunLoopRunTimedOut;</span><br><span class=\"line\">            &#125; else if (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class=\"line\">                /// 被外部调用者强制停止了</span><br><span class=\"line\">                retVal = kCFRunLoopRunStopped;</span><br><span class=\"line\">            &#125; else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class=\"line\">                /// source/timer/observer一个都没有了</span><br><span class=\"line\">                retVal = kCFRunLoopRunFinished;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。</span><br><span class=\"line\">        &#125; while (retVal == 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// 10. 通知 Observers: RunLoop 即将退出。</span><br><span class=\"line\">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，实际上 Run Loop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 <code>CFRunLoopRun()</code> 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。 </p>\n<h2 id=\"苹果用-RunLoop-实现的功能\"><a href=\"#苹果用-RunLoop-实现的功能\" class=\"headerlink\" title=\"苹果用 RunLoop 实现的功能\"></a>苹果用 RunLoop 实现的功能</h2><h3 id=\"AutoreleasePool\"><a href=\"#AutoreleasePool\" class=\"headerlink\" title=\"AutoreleasePool\"></a>AutoreleasePool</h3><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 <code>_wrapRunLoopWithAutoreleasePoolHandler()</code>。<br>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 <code>_objc_autoreleasePoolPush()</code> 创建自动释放池。其 order 是2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。<br>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用<code>_objc_autoreleasePoolPop()</code> 和 <code>_objc_autoreleasePoolPush()</code> 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 <code>_objc_autoreleasePoolPop()</code> 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。<br>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p>\n<h3 id=\"事件响应\"><a href=\"#事件响应\" class=\"headerlink\" title=\"事件响应\"></a>事件响应</h3><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 <code>__IOHIDEventSystemClientQueueCallback()</code>。<br>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考<a href=\"\">这里</a>。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 <code>_UIApplicationHandleEventQueue()</code> 进行应用内部的分发。<br><code>_UIApplicationHandleEventQueue()</code> 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p>\n<h3 id=\"手势识别\"><a href=\"#手势识别\" class=\"headerlink\" title=\"手势识别\"></a>手势识别</h3><p>当上面的 <code>_UIApplicationHandleEventQueue()</code> 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p>\n<p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 <code>_UIGestureRecognizerUpdateObserver()</code>，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。<br>当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p>\n<h3 id=\"界面更新\"><a href=\"#界面更新\" class=\"headerlink\" title=\"界面更新\"></a>界面更新</h3><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。</p>\n<p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：<br><code>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</code>。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p>\n<p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。</p>\n<p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。</p>\n<h3 id=\"PerformSelecter\"><a href=\"#PerformSelecter\" class=\"headerlink\" title=\"PerformSelecter\"></a>PerformSelecter</h3><p>当调用 NSObject 的 <code>performSelecter:afterDelay:</code> 后，实际上其内部会创建一个 Timer 并添加到当前线程的 Run Loop 中。所以如果当前线程没有 Run Loop，则这个方法会失效。</p>\n<p>当调用 <code>performSelector:onThread:</code>时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 Run Loop 该方法也会失效。</p>\n<h3 id=\"关于GCD\"><a href=\"#关于GCD\" class=\"headerlink\" title=\"关于GCD\"></a>关于GCD</h3><p>实际上 RunLoop 底层也会用到 GCD 的东西，比如 Run Loop 是用 <code>dispatch_source_t</code> 实现的 Timer。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 <code>dispatch_async()</code>。</p>\n<p>当调用 <code>dispatch_async(dispatch_get_main_queue(), block)</code>时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 <code>__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__()</code> 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。</p>\n<h3 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h3><p>下面主要介绍下 NSURLConnection 的工作过程。</p>\n<p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 <code>[connection start]</code> 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。<code>CFMultiplexerSource</code> 是负责各种 Delegate 回调的，<code>CFHTTPCookieStorage</code> 是处理各种 Cookie 的。</p>\n<p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：<code>com.apple.NSURLConnectionLoader</code> 和 <code>com.apple.CFSocket.private</code>。其中 CFSocket 线程是处理底层 socket 连接的。<code>NSURLConnectionLoader</code> 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 <code>Source0</code> 通知到上层的 Delegate。</p>\n<p><img src=\"http://cc.cocimg.com/api/uploads/20150528/1432799200369980.png\" alt=\"\"></p>\n<p><code>NSURLConnectionLoader</code> 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 <code>CFSocket</code> 的通知。当收到通知后，其会在合适的时机向 <code>CFMultiplexerSource</code> 等 <code>Source0</code> 发送通知，同时唤醒 Delegate 线程的 Run Loop 来让其处理这些通知。<code>CFMultiplexerSource</code> 会在 Delegate 线程的 Run Loop 对 Delegate 执行实际的回调。</p>\n<h2 id=\"Run-Loop-的实际应用\"><a href=\"#Run-Loop-的实际应用\" class=\"headerlink\" title=\"Run Loop 的实际应用\"></a>Run Loop 的实际应用</h2><h3 id=\"创建常驻线程\"><a href=\"#创建常驻线程\" class=\"headerlink\" title=\"创建常驻线程\"></a>创建常驻线程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">  [super viewDidLoad];</span><br><span class=\"line\">  self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class=\"line\">  [_thread start];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">- (void)run &#123;</span><br><span class=\"line\">  [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span><br><span class=\"line\">  [[NSRunLoop currentRunLoop] run];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Swift与函数式编程的那些事","date":"2018-03-09T11:09:04.000Z","_content":"\n函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 [λ演算](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。\n\n<!-- excerpt -->\n\n本文是 Swift 系列文章中的第三篇，前两篇文章分别是：[Swift 与面向协议编程的那些事](http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/)，[在 Swift 中使用值类型]()。按照计划，这篇文章主要介绍一下函数式编程思想在 Swift 中的应用。\n\n\n\n函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 [λ演算](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。\n\n\n\n函数式编程在维基百科中的定义是：**函数式编程**（functional programming）或称函数程序设计、泛函编程，是一种编程范式，它将计算机运算视为函数运算，并且避免使用程序状态以及易变对象。其中，[λ演算](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。\n\n  \n\n## 计算数组元素之和\n\n我们最好还是用一个例子来解释什么是函数式编程。请看下面的这个例子：这段代码想要输出整型数组中所有元素的和。\n\n```swift\nfunc sum(of arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\nsum(of: Array(1...10)) // result: 55\n```\n\n下面我们改用 Swift 标准库中提供的函数来写这个程序，其代码如下：\n\n```swift\nArray(1...10).reduce(0, +) // result: 55\n```\n\n这里我们直接调用数组的 `reduce` 方法，该方法接受一个初始值和一个闭包（就是一个匿名函数），最终将结果返回。如果从来没有接触过函数式可能觉得这段代码看起来很奇怪。没关系，我们可以把这段代码改得完整一点，就像下面这样：\n\n```swift\nArray(1...10).reduce(0, { result, ele in\n    return result + ele\n})\n```\n\n`reduce` 方法第二个参数接受一个函数，为了简单起见，我们只管 Int 型数据，那么其形式可能是这样：`(Int, Int) -> Int` 。如果我们编写了一个像下面这样的函数：\n\n```swift\nfunc addTwoNums(x: Int, y: Int) -> Int {\n    return x + y\n}\n```\n\n然后，将它作为参数传给 `reduce` ，这样仍然能得到我们想要的结果，就像这样：\n\n```swift\nArray(1...10).reduce(0, addTowNums) // result: 55\n```\n\n因为Swift 标准库中 Int 实现了 `+` 运算符，它其实就是个函数。\n\n```swift\npublic struct Int : FixedWidthInteger, SignedInteger {\n\tpublic static func + (lhs: Int, rhs: Int) -> Int\n}\n```\n\n所以上面的代码中可以将 `+` 作为函数传给 `reduce`。如果你想实现数组元素相乘，那么你就可以把 `*` 作为函数传给 `reduce`。正是得益于 Swift 中函数式的特性，我们才能将 `+`, `-`, `*`, `/` 等普通操作符（在 Swift 中其实就是函数了）作为函数传给 `reduce`。\n\n\n\n## 不可变性与软件架构\n\n在上面的代码中，我们为什么说 `+` 具有函数式的特性？因为它符合函数式的一个核心思想：不可变性。对于 `+` 来说，它没有改变任何外部变量，而且不管你在什么地方，即使是并发环境下，只要传入的值一样，其结果永远都是一样的。如果一个函数，即使其返回结果永远不变，但是它改变了外部变量，它仍然不能说是函数式的。因为它仍然是可变的。\n\n\n\n对于函数式编程，我们可以简单地归纳有以下特征：\n\n* 只用 \"表达式\"，不用 \"语句\"\n\n  \"表达式\"（expression）是一个单纯的运算过程，总是有返回值；\"语句\"（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。\n\n* 没有\"副作用\"\n\n  所谓\"副作用\"（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。\n\n  函数式编程强调没有\"副作用\"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。\n\n* 不修改状态\n\n  上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。\n\n  在其他类型的语言中，变量往往用来保存\"状态\"（state）。不修改变量，意味着状态不能保存在变量中。\n\n* 引用透明\n\n  函数程序通常还加强引用透明性，即如果提供同样的输入，那么函数总是返回同样的结果。就是说，表达式的值不依赖于可以改变值的全局状态。这使您可以从形式上推断程序行为，因为表达式的意义只取决于其子表达式而不是计算顺序或者其他表达式的副作用。这有助于验证正确性、简化算法，甚至有助于找出优化它的方法。\n\n从以上函数式编程的特征来看，它们的共同作用最终导致一个结果：不可变性。\n\n为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构师要操心变量的可变性呢？答案显而易见：所有的竞争问题、死锁问题、并发问题都是由可变变量导致的。如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。如果锁的状态是不可变的，那么永远就不会产生死锁问题。\n\n在函数式编程中，由于数据全部都是不可变的，所以没有并发编程的问题，是多线程安全的。可以有效降低程序运行中所产生的副作用，对于快速迭代的项目来说，函数式编程可以实现函数与函数之间的热切换而不用担心数据的问题，因为它是以函数作为最小单位的，只要函数与函数之间的关系正确即可保证结果的正确性。\n\n\n\n## map、flatMap 与函数式\n\nmap 是我们在使用数组是经常使用的方法，如果我们想将数组中的每个元素做个变换，就会使用到它。例如我们想将一个整形数组中的每个元素做平方操作，就可以这样：\n\n```swift\nlet result = Array(1...10).map { $0 * $0 }\n```\n\nmap 方法接受一个闭包作为参数，然后它会遍历整个数组，并对数组中的每个元素执行闭包中的操作，最后返回一个新数组，上面例子中将每个元素做平方，所以最后返的新数组就是：`[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]`\n\n下面我们可以看一下 map 在 Array 中的定义：\n\n```swift\nfunc map<T>(_ transform: (Element) throws -> T) rethrows -> [T]\n```\n\n对 `rethrows` 关键字不是很了解的同学可以看看[这篇文章](http://jewelz.me/cjt0zq7cf0008620oknjdqsx7/)，这里我们可以忽略它，我们主要把关注点放到 `(Element) -> T` 这个闭包的定义上。我们可以看到，该闭包接受的参数类型跟我们数组中元素的类型是一致的，其返回类型跟我们最终想得到的数据中元素的类型是一样的。也就是说我们可以使用 map 方法将某个类型的数组转换成完全另一种类型的数组，例如下面这样：\n\n```swift\nlet stringArr = Array(1...3).map { \"No.\\($0)\" }  //[\"No.1\", \"No.2\", \"No.3\"]\n\n```\n\n知道了 map 方法做的事情后，我们就很容易地实现我们的 map，代码可以像下面这样：\n\n```swift\nextension Array {\n    func myMap<T>(_ transform: (Element) throws -> T) rethrows -> [T] {\n        guard count > 0 else {\n            return []\n        }\n        var result = [T]()\n        for ele in self {\n            result.append(try transform(ele))\n        }\n        return result\n    }\n}\n```\n\n这行代码 `result.append(try transform(ele))` 就是 map 方法的核心，这就是上面说的 map 对数组中的每个元素执行闭包中的操作。\n\n如果你常用 Swift 的话， 还会发现除了数组定义了 map 方法， 同样 Optional 也存在这个方法。请看下面的代码：\n\n```swift\nvar time: String? = \"2018-01-01\"\n\nlabel.text = time.map{ \"时间：\\($0)\"}  // \"时间：2018-01-01\"\n```\n\n上面的代码经常会出现在我的项目中。`time` 是定义在一个结构体或类中，它的值是由服务器返回的，所以对于它的值我们不能确定，所以一般我定义成可选型，最终我们要在界面上显示成 `时间：xxxx-xx-xx` 的样式，我们得在服务器返回的字符串前面加上 `时间：`，如果你直接 `\"时间：\\(time)\"}` 肯定是不行的，因为 `time` 是可选型，在使用时你得先解包，这样我们就得写一串处理 `time` 的代码（当然这里处理代码也很短，其它情况可能就比较长了），这样看起来非常繁琐。使用 `map` 方法就使得我们的代码干净简洁了很多。\n\n我们可以看一下 Optional 中 map 的定义：\n\n```swift\nfunc map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?\n```\n\n你再回去看一下 Array 中 map 的定义，你会发现二者几乎没有区别。Array 中 返回的是一个数组 ，这里返回的是 可选型的值，这里看似没有任何联系，如果你把数组和可选型当成一种包装类型，你会发现它们是一样的，所以才有了 `map` 这个相同的行为。\n\n那么什么是包装类型的值呢，你可以简单地理解为包含了多个值的一种值，例如数组，你可以通过一个数组变量访问到数组中的任何一个值，而对于可选型，也是一样的，你可以访问到一个 nil 值，或者一个解包后的值。像标准库中的 `String`, `Dictionary` 等都可以看做包装值，而且它们都有实现 `map`。\n\n\n\nflatMap 在使用上和 map 非常相似，如果你不仔细观察的话，你甚至都发现不了它们之间的区别。我们先看一下 flatMap 在 Optional 中的定义：\n\n```swift\nfunc flatMap<U>(_ transform: (Wrapped) throws -> U?) rethrows -> U?\n```\n\n你仔细看的话，你会发现它与 map 的区别，flatMap 接受的闭包的返回类型是 `U?`，而 map 中的是 `U`，这就是它们在方法签名上唯一的区别。也就是说，map 中闭包返回值不能是可选型，而 flatMap 可以。如果你把它替换成上面包装值的概念，那就是 flatMap 中的闭包的返回值也是个包装值。\n\n我们可以看一下数组中 map 和 flatMap 的区别是怎样的：\n\n```swift\nfunc map<T>(_ transform: (Element) throws -> T) rethrows -> [T]\nfunc flatMap<SegmentOfResult>(_ transform: (Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element] where SegmentOfResult : Sequence\n```\n\n虽然 flatMap 的方法签名比 map 复杂了很多，但是主要区别也是体现在闭包返回值类型上，map 中返回值是 T 的单一类型，而 flatMap 返回的是一个 Sequence，这里你可以简单理解为数组。对比上面 Optional 中 map 和 flatMap 的区别，你会发现它们都区别是一致的。\n\n运行下面的代码，你就能更清楚的看到它们都区别了：\n\n```swift\nlet array = [[1, 2], [3, 4]]\nlet mapedArr = array.map { $0.map{ $0 * $0} }          // [[1, 4], [9, 16]]\nlet flatMapedArr = array.flatMap { $0.map{ $0 * $0} }  // [1, 4, 9, 16]\n```\n\n\n\n### 为什么这样设计\n\n看到这里， 大家可能会产生疑问了。 为什么会多出个 flatMap 函数？这其实涉及另外一个维度的概念， Functors 和 Monads。 明白这个概念之后，你就会发现这其中的关联，以及为什么会有 map 和 flatMap 这两个函数存在了。\n\n#### Functors\n\n在讲 functors和 monads 时，我们需要用到上面讲 Array 和 Optional 联系时用到的包装值的概念。\n\n其实 简单来说，Functors 就是将包装值直接传递给函数的一种行为。 对应到我们的代码上，就是 map 函数了, 看下面这个例子：\n\n```swift\nfunc square(_ val: Int) -> Int {\n    return val * val\n}\n\nsquare(10) // 100\nvar optionalVal: Int? = 10\nsquare(optionalVal) // Value of optional type 'Int?' not unwrapped; did you mean to use '!' or '?'?\n```\n\n上面的代码中，我们想求一个整数的平方，对于一个可选类型的值来说，我们必须将它解包后，才能传入 `square` 函数中。我们虽然不能直接把 optionalVal 直接传递给 `square` 函数，但是我们可以使用 map 将 `square` 最为参数传递进来，这就相当于间接地将 optionalVal 传递给 `square` 函数。就像下面代码中那样：\n\n```swift\noptionalVal.map(square)\n```\n\n同样地，我们把数组也看做一个包装值，虽然不能直接将数组传递给 `square` 函数，但是我们使用 map 仍然能将数组中的值传递给 `square` 函数。\n\n```swift\nArray(1...10).map(square)\n```\n\n总的来说 Functors 就是将一个**包装值**直接传递给函数，并且返回的结果依然是包装值的一种行为。 我们调用 Optional 中的 map 函数， 会用闭包将 Optional 中的值进行操作，然后返回值还是一个 Optional。\n\n同样，我们对数组调用 map 函数， 会用闭包将数组中的值进行一些操作， 然后返回值还是一个数组。\n\n从这个维度来思考，就能理解为什么 Optional 和数组，这两个看似没有任何关联的类型，为什么都有 map 和 flatMap 方法了。\n\n#### Monads\n\n如果说 Functors 对应的是 map 函数， 那么 Monads 对应的就是 flatMap 函数啦。\n\nMonads 用一句话来说就是， 它将一个**包装值**传递给一个返回值类型是**包装值**的函数。注意 monads 强调的是**返回值类型是包装值的函数** 。\n\nOptional 的 flatMap 函数接受的闭包是 (Wrapped) -> U?， 它返回的还是 Optional 类型。 数组的 flatMap 接受的闭包是 (Element) -> SegmentOfResult，这里 SegmentOfResult 必须是 Sequence， 返回的依然还是数组。\n\nmap 和 flatMap 的主要区别就是他们所接受闭包的返回类型， map 的闭包返回的是一个普通值， flatMap 的闭包返回的是一个包装值。\n\n下面给出一个 monads 在实际中运用的例子：在下面代码中，在第一个请求返回后，我们拿到结果并发起第二个请求。\n\n```swift\nProvider<UserApi>(.users)\n    .flatMap { response -> Provider<UserApi> in\n     \tlet res = response.array.first as! [String: Any]\n        let user = User(res)\n        return Provider(.detail(user.name))\n    }\n    .request { response in\n    \tprint(response)\n    }.addToCancelBag()\n```\n\n这里的 Provider 就是一个包装值，它的 flatMap 接受的闭包的返回类型就是另一个包装值。这完全符合 monads 的定义。\n\n\n\nFunctors 和 Monads 并不是 Swift 中独有的，它们是一种数学概念。而在函数式编程中，你经常会看到它们都身影。只有是**把包装值传递给函数，并且返回的结果依然是包装值**的行为就是 functors，**把包装值传递给一个返回值类型是包装值的函数**的行为就是 Monads。\n\n\n\n## ?? 与函数式\n\n如果你对 Swift 中的可选类型 (Optional) 用的比较多的话，那么你可能会经常用到 `??` 这个操作符，就像下面这样：\n\n```swift\nvar a: Int?\nprint(\"a =\", a ?? 100)\n```\n\n`??` 操作符左边是一个 Optional值，右边是一个普通值，它的作用就是，如果左边的 Optional 值为 nil， 那么就使用右边的值作为结果，如果左边的 Optional 不为 nil，则返回左边的 Optional 解包后的值，就像下面代码展示的那样：\n\n```swift\nvar a: Int?\nprint(\"a =\", a == nil ? 100 : a!)\n```\n\n事情真的是这么简单吗？在回答这个问题前，我们可以先自己实现一个 `??`，为了跟系统的进行区分，这里我们把新函数定义为 `???`，为了实现我们的 `???` 函数，就必须使用自定义操作符。最终的代码就像这样：\n\n```swift\ninfix operator ???: AdditionPrecedence\n\nfunc ??? <T> (optional: T?, defaultValue: T) -> T {\n    guard let value = optional else { return defaultValue }\n    return value\n}\n\nprint(\"a =\", a ??? 100) // 100\n```\n\n目前看起来好像跟标准库中 `??` 的结果是一模一样的，不过先不要着急，我们可以把 `??` 和我们的 `???` 右边替换成一个函数，代码是这样的：\n\n```swift\nfunc doSomething() -> Int {\n    var sum = 0;\n    for i in 0...10000 {\n        sum += i\n    }\n    return sum\n}\n\nvar a: Int? = 1\nvar b1 = clock()\nlet result = a ?? doSomething()\nprint(\"time1: \", clock() - b1)\n\nvar b2 = clock()\nlet result2 = a ??? doSomething()\nprint(\"time2: \", clock() - b2)\n```\n\n为了测试  `??` 和我们的 `???`的性能，我简单地记录了这两个调用的时间，下面是其中一次的结果：\n\n```\ntime1:  206\ntime2:  254042\n```\n\n不过你执行多少次，你都能得出一个结果：`??` 调用比`???` 调用快了很多。为什么会出现这种情况，我们的 `???` 到底有什么问题呢？如果你在 `doSomething` 函数中打个断点，你会发现，它只在 `???` 调用时才会执行。也就是说 `??` 函数在判断了第一个值不为 nil 时，不会调用第二个表达式。而我们在调用 `???` 之前，就必须先把右边的数据准备好，这样不管左边的值是不是 nil，右边的表达式都会调用。所以才有了上面的区别。那么系统是怎么做到这样的呢？我们很容易就想到，把右边的值替换成一个函数，就可以办到。代码就像这样：\n\n```swift\nfunc ??? <T> (optional: T?, defaultValue: () -> T) -> T {\n    guard let value = optional else { return defaultValue() }\n    return value\n}\n\nlet result2 = a ??? doSomething\n```\n\n再次运行，你会发现 `doSomething` 函数没有再执行了。细心的同学可能会发现，这里调用 `???` 跟调用 `??` 有点区别，在 `??` 的调用中，右边是 `doSomethin()`，而我们的 `???` 右边是 `doSomething`。这里其实使用了一个叫做自动闭包的东西，我们在闭包前面加上 `@autoclosure` 关键字，就能让我们的普通闭包变成自动闭包。使用自动闭包的好处是编译器会自动把一个值转成闭包。当然，自动闭包是有一定限制的，只能作用在没有参数的闭包上。我们把代码修改一下就可以跟调用 `??` 一样，使用我们的 `???` 了。\n\n```swift\nfunc ??? <T> (optional: T?, defaultValue: @autoclosure () -> T) -> T {}\n```\n\n\n\n这里花这么多时间讲 `??` 操作符，其实是为了体现函数式的另一个特征，那就是惰性计算。从上面的例子中，可以看出，有与没有惰性计算，在程序性能上还是有很大差别的。上面只是简单的做了 10000 次循环，运行时间就差了百倍。如果这是个耗时操作，那么这种优化就可以大大地提高程序性能。\n\n在惰性计算中，表达式不是在绑定到变量时立即计算，而是在求值程序需要产生表达式的值时进行计算。延迟的计算使您可以编写更高性能和避免可能潜在地生成无穷输出的函数。因为它不会计算多于程序的其余部分所需要的值，所以不需要担心由于表达式执行耗时操作所带来的性能问题或由无穷计算所导致的 out-of-memory 错误。\n\n\n\n上面就是我对函数式编程的一些思考，因为篇幅有限，很多东西不能展开来讲。如果同学们能从我这篇文章中得到一点启发，那么这篇文章也就能提现它的价值了。","source":"_posts/Swift-与函数式编程的那些事.md","raw":"---\ntitle: Swift与函数式编程的那些事\ndate: 2018-03-09 19:09:04\ntags: Swift\ncategories: Swift\n---\n\n函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 [λ演算](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。\n\n<!-- excerpt -->\n\n本文是 Swift 系列文章中的第三篇，前两篇文章分别是：[Swift 与面向协议编程的那些事](http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/)，[在 Swift 中使用值类型]()。按照计划，这篇文章主要介绍一下函数式编程思想在 Swift 中的应用。\n\n\n\n函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 [λ演算](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。\n\n\n\n函数式编程在维基百科中的定义是：**函数式编程**（functional programming）或称函数程序设计、泛函编程，是一种编程范式，它将计算机运算视为函数运算，并且避免使用程序状态以及易变对象。其中，[λ演算](https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97)为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。\n\n  \n\n## 计算数组元素之和\n\n我们最好还是用一个例子来解释什么是函数式编程。请看下面的这个例子：这段代码想要输出整型数组中所有元素的和。\n\n```swift\nfunc sum(of arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\nsum(of: Array(1...10)) // result: 55\n```\n\n下面我们改用 Swift 标准库中提供的函数来写这个程序，其代码如下：\n\n```swift\nArray(1...10).reduce(0, +) // result: 55\n```\n\n这里我们直接调用数组的 `reduce` 方法，该方法接受一个初始值和一个闭包（就是一个匿名函数），最终将结果返回。如果从来没有接触过函数式可能觉得这段代码看起来很奇怪。没关系，我们可以把这段代码改得完整一点，就像下面这样：\n\n```swift\nArray(1...10).reduce(0, { result, ele in\n    return result + ele\n})\n```\n\n`reduce` 方法第二个参数接受一个函数，为了简单起见，我们只管 Int 型数据，那么其形式可能是这样：`(Int, Int) -> Int` 。如果我们编写了一个像下面这样的函数：\n\n```swift\nfunc addTwoNums(x: Int, y: Int) -> Int {\n    return x + y\n}\n```\n\n然后，将它作为参数传给 `reduce` ，这样仍然能得到我们想要的结果，就像这样：\n\n```swift\nArray(1...10).reduce(0, addTowNums) // result: 55\n```\n\n因为Swift 标准库中 Int 实现了 `+` 运算符，它其实就是个函数。\n\n```swift\npublic struct Int : FixedWidthInteger, SignedInteger {\n\tpublic static func + (lhs: Int, rhs: Int) -> Int\n}\n```\n\n所以上面的代码中可以将 `+` 作为函数传给 `reduce`。如果你想实现数组元素相乘，那么你就可以把 `*` 作为函数传给 `reduce`。正是得益于 Swift 中函数式的特性，我们才能将 `+`, `-`, `*`, `/` 等普通操作符（在 Swift 中其实就是函数了）作为函数传给 `reduce`。\n\n\n\n## 不可变性与软件架构\n\n在上面的代码中，我们为什么说 `+` 具有函数式的特性？因为它符合函数式的一个核心思想：不可变性。对于 `+` 来说，它没有改变任何外部变量，而且不管你在什么地方，即使是并发环境下，只要传入的值一样，其结果永远都是一样的。如果一个函数，即使其返回结果永远不变，但是它改变了外部变量，它仍然不能说是函数式的。因为它仍然是可变的。\n\n\n\n对于函数式编程，我们可以简单地归纳有以下特征：\n\n* 只用 \"表达式\"，不用 \"语句\"\n\n  \"表达式\"（expression）是一个单纯的运算过程，总是有返回值；\"语句\"（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。\n\n* 没有\"副作用\"\n\n  所谓\"副作用\"（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。\n\n  函数式编程强调没有\"副作用\"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。\n\n* 不修改状态\n\n  上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。\n\n  在其他类型的语言中，变量往往用来保存\"状态\"（state）。不修改变量，意味着状态不能保存在变量中。\n\n* 引用透明\n\n  函数程序通常还加强引用透明性，即如果提供同样的输入，那么函数总是返回同样的结果。就是说，表达式的值不依赖于可以改变值的全局状态。这使您可以从形式上推断程序行为，因为表达式的意义只取决于其子表达式而不是计算顺序或者其他表达式的副作用。这有助于验证正确性、简化算法，甚至有助于找出优化它的方法。\n\n从以上函数式编程的特征来看，它们的共同作用最终导致一个结果：不可变性。\n\n为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构师要操心变量的可变性呢？答案显而易见：所有的竞争问题、死锁问题、并发问题都是由可变变量导致的。如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。如果锁的状态是不可变的，那么永远就不会产生死锁问题。\n\n在函数式编程中，由于数据全部都是不可变的，所以没有并发编程的问题，是多线程安全的。可以有效降低程序运行中所产生的副作用，对于快速迭代的项目来说，函数式编程可以实现函数与函数之间的热切换而不用担心数据的问题，因为它是以函数作为最小单位的，只要函数与函数之间的关系正确即可保证结果的正确性。\n\n\n\n## map、flatMap 与函数式\n\nmap 是我们在使用数组是经常使用的方法，如果我们想将数组中的每个元素做个变换，就会使用到它。例如我们想将一个整形数组中的每个元素做平方操作，就可以这样：\n\n```swift\nlet result = Array(1...10).map { $0 * $0 }\n```\n\nmap 方法接受一个闭包作为参数，然后它会遍历整个数组，并对数组中的每个元素执行闭包中的操作，最后返回一个新数组，上面例子中将每个元素做平方，所以最后返的新数组就是：`[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]`\n\n下面我们可以看一下 map 在 Array 中的定义：\n\n```swift\nfunc map<T>(_ transform: (Element) throws -> T) rethrows -> [T]\n```\n\n对 `rethrows` 关键字不是很了解的同学可以看看[这篇文章](http://jewelz.me/cjt0zq7cf0008620oknjdqsx7/)，这里我们可以忽略它，我们主要把关注点放到 `(Element) -> T` 这个闭包的定义上。我们可以看到，该闭包接受的参数类型跟我们数组中元素的类型是一致的，其返回类型跟我们最终想得到的数据中元素的类型是一样的。也就是说我们可以使用 map 方法将某个类型的数组转换成完全另一种类型的数组，例如下面这样：\n\n```swift\nlet stringArr = Array(1...3).map { \"No.\\($0)\" }  //[\"No.1\", \"No.2\", \"No.3\"]\n\n```\n\n知道了 map 方法做的事情后，我们就很容易地实现我们的 map，代码可以像下面这样：\n\n```swift\nextension Array {\n    func myMap<T>(_ transform: (Element) throws -> T) rethrows -> [T] {\n        guard count > 0 else {\n            return []\n        }\n        var result = [T]()\n        for ele in self {\n            result.append(try transform(ele))\n        }\n        return result\n    }\n}\n```\n\n这行代码 `result.append(try transform(ele))` 就是 map 方法的核心，这就是上面说的 map 对数组中的每个元素执行闭包中的操作。\n\n如果你常用 Swift 的话， 还会发现除了数组定义了 map 方法， 同样 Optional 也存在这个方法。请看下面的代码：\n\n```swift\nvar time: String? = \"2018-01-01\"\n\nlabel.text = time.map{ \"时间：\\($0)\"}  // \"时间：2018-01-01\"\n```\n\n上面的代码经常会出现在我的项目中。`time` 是定义在一个结构体或类中，它的值是由服务器返回的，所以对于它的值我们不能确定，所以一般我定义成可选型，最终我们要在界面上显示成 `时间：xxxx-xx-xx` 的样式，我们得在服务器返回的字符串前面加上 `时间：`，如果你直接 `\"时间：\\(time)\"}` 肯定是不行的，因为 `time` 是可选型，在使用时你得先解包，这样我们就得写一串处理 `time` 的代码（当然这里处理代码也很短，其它情况可能就比较长了），这样看起来非常繁琐。使用 `map` 方法就使得我们的代码干净简洁了很多。\n\n我们可以看一下 Optional 中 map 的定义：\n\n```swift\nfunc map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?\n```\n\n你再回去看一下 Array 中 map 的定义，你会发现二者几乎没有区别。Array 中 返回的是一个数组 ，这里返回的是 可选型的值，这里看似没有任何联系，如果你把数组和可选型当成一种包装类型，你会发现它们是一样的，所以才有了 `map` 这个相同的行为。\n\n那么什么是包装类型的值呢，你可以简单地理解为包含了多个值的一种值，例如数组，你可以通过一个数组变量访问到数组中的任何一个值，而对于可选型，也是一样的，你可以访问到一个 nil 值，或者一个解包后的值。像标准库中的 `String`, `Dictionary` 等都可以看做包装值，而且它们都有实现 `map`。\n\n\n\nflatMap 在使用上和 map 非常相似，如果你不仔细观察的话，你甚至都发现不了它们之间的区别。我们先看一下 flatMap 在 Optional 中的定义：\n\n```swift\nfunc flatMap<U>(_ transform: (Wrapped) throws -> U?) rethrows -> U?\n```\n\n你仔细看的话，你会发现它与 map 的区别，flatMap 接受的闭包的返回类型是 `U?`，而 map 中的是 `U`，这就是它们在方法签名上唯一的区别。也就是说，map 中闭包返回值不能是可选型，而 flatMap 可以。如果你把它替换成上面包装值的概念，那就是 flatMap 中的闭包的返回值也是个包装值。\n\n我们可以看一下数组中 map 和 flatMap 的区别是怎样的：\n\n```swift\nfunc map<T>(_ transform: (Element) throws -> T) rethrows -> [T]\nfunc flatMap<SegmentOfResult>(_ transform: (Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element] where SegmentOfResult : Sequence\n```\n\n虽然 flatMap 的方法签名比 map 复杂了很多，但是主要区别也是体现在闭包返回值类型上，map 中返回值是 T 的单一类型，而 flatMap 返回的是一个 Sequence，这里你可以简单理解为数组。对比上面 Optional 中 map 和 flatMap 的区别，你会发现它们都区别是一致的。\n\n运行下面的代码，你就能更清楚的看到它们都区别了：\n\n```swift\nlet array = [[1, 2], [3, 4]]\nlet mapedArr = array.map { $0.map{ $0 * $0} }          // [[1, 4], [9, 16]]\nlet flatMapedArr = array.flatMap { $0.map{ $0 * $0} }  // [1, 4, 9, 16]\n```\n\n\n\n### 为什么这样设计\n\n看到这里， 大家可能会产生疑问了。 为什么会多出个 flatMap 函数？这其实涉及另外一个维度的概念， Functors 和 Monads。 明白这个概念之后，你就会发现这其中的关联，以及为什么会有 map 和 flatMap 这两个函数存在了。\n\n#### Functors\n\n在讲 functors和 monads 时，我们需要用到上面讲 Array 和 Optional 联系时用到的包装值的概念。\n\n其实 简单来说，Functors 就是将包装值直接传递给函数的一种行为。 对应到我们的代码上，就是 map 函数了, 看下面这个例子：\n\n```swift\nfunc square(_ val: Int) -> Int {\n    return val * val\n}\n\nsquare(10) // 100\nvar optionalVal: Int? = 10\nsquare(optionalVal) // Value of optional type 'Int?' not unwrapped; did you mean to use '!' or '?'?\n```\n\n上面的代码中，我们想求一个整数的平方，对于一个可选类型的值来说，我们必须将它解包后，才能传入 `square` 函数中。我们虽然不能直接把 optionalVal 直接传递给 `square` 函数，但是我们可以使用 map 将 `square` 最为参数传递进来，这就相当于间接地将 optionalVal 传递给 `square` 函数。就像下面代码中那样：\n\n```swift\noptionalVal.map(square)\n```\n\n同样地，我们把数组也看做一个包装值，虽然不能直接将数组传递给 `square` 函数，但是我们使用 map 仍然能将数组中的值传递给 `square` 函数。\n\n```swift\nArray(1...10).map(square)\n```\n\n总的来说 Functors 就是将一个**包装值**直接传递给函数，并且返回的结果依然是包装值的一种行为。 我们调用 Optional 中的 map 函数， 会用闭包将 Optional 中的值进行操作，然后返回值还是一个 Optional。\n\n同样，我们对数组调用 map 函数， 会用闭包将数组中的值进行一些操作， 然后返回值还是一个数组。\n\n从这个维度来思考，就能理解为什么 Optional 和数组，这两个看似没有任何关联的类型，为什么都有 map 和 flatMap 方法了。\n\n#### Monads\n\n如果说 Functors 对应的是 map 函数， 那么 Monads 对应的就是 flatMap 函数啦。\n\nMonads 用一句话来说就是， 它将一个**包装值**传递给一个返回值类型是**包装值**的函数。注意 monads 强调的是**返回值类型是包装值的函数** 。\n\nOptional 的 flatMap 函数接受的闭包是 (Wrapped) -> U?， 它返回的还是 Optional 类型。 数组的 flatMap 接受的闭包是 (Element) -> SegmentOfResult，这里 SegmentOfResult 必须是 Sequence， 返回的依然还是数组。\n\nmap 和 flatMap 的主要区别就是他们所接受闭包的返回类型， map 的闭包返回的是一个普通值， flatMap 的闭包返回的是一个包装值。\n\n下面给出一个 monads 在实际中运用的例子：在下面代码中，在第一个请求返回后，我们拿到结果并发起第二个请求。\n\n```swift\nProvider<UserApi>(.users)\n    .flatMap { response -> Provider<UserApi> in\n     \tlet res = response.array.first as! [String: Any]\n        let user = User(res)\n        return Provider(.detail(user.name))\n    }\n    .request { response in\n    \tprint(response)\n    }.addToCancelBag()\n```\n\n这里的 Provider 就是一个包装值，它的 flatMap 接受的闭包的返回类型就是另一个包装值。这完全符合 monads 的定义。\n\n\n\nFunctors 和 Monads 并不是 Swift 中独有的，它们是一种数学概念。而在函数式编程中，你经常会看到它们都身影。只有是**把包装值传递给函数，并且返回的结果依然是包装值**的行为就是 functors，**把包装值传递给一个返回值类型是包装值的函数**的行为就是 Monads。\n\n\n\n## ?? 与函数式\n\n如果你对 Swift 中的可选类型 (Optional) 用的比较多的话，那么你可能会经常用到 `??` 这个操作符，就像下面这样：\n\n```swift\nvar a: Int?\nprint(\"a =\", a ?? 100)\n```\n\n`??` 操作符左边是一个 Optional值，右边是一个普通值，它的作用就是，如果左边的 Optional 值为 nil， 那么就使用右边的值作为结果，如果左边的 Optional 不为 nil，则返回左边的 Optional 解包后的值，就像下面代码展示的那样：\n\n```swift\nvar a: Int?\nprint(\"a =\", a == nil ? 100 : a!)\n```\n\n事情真的是这么简单吗？在回答这个问题前，我们可以先自己实现一个 `??`，为了跟系统的进行区分，这里我们把新函数定义为 `???`，为了实现我们的 `???` 函数，就必须使用自定义操作符。最终的代码就像这样：\n\n```swift\ninfix operator ???: AdditionPrecedence\n\nfunc ??? <T> (optional: T?, defaultValue: T) -> T {\n    guard let value = optional else { return defaultValue }\n    return value\n}\n\nprint(\"a =\", a ??? 100) // 100\n```\n\n目前看起来好像跟标准库中 `??` 的结果是一模一样的，不过先不要着急，我们可以把 `??` 和我们的 `???` 右边替换成一个函数，代码是这样的：\n\n```swift\nfunc doSomething() -> Int {\n    var sum = 0;\n    for i in 0...10000 {\n        sum += i\n    }\n    return sum\n}\n\nvar a: Int? = 1\nvar b1 = clock()\nlet result = a ?? doSomething()\nprint(\"time1: \", clock() - b1)\n\nvar b2 = clock()\nlet result2 = a ??? doSomething()\nprint(\"time2: \", clock() - b2)\n```\n\n为了测试  `??` 和我们的 `???`的性能，我简单地记录了这两个调用的时间，下面是其中一次的结果：\n\n```\ntime1:  206\ntime2:  254042\n```\n\n不过你执行多少次，你都能得出一个结果：`??` 调用比`???` 调用快了很多。为什么会出现这种情况，我们的 `???` 到底有什么问题呢？如果你在 `doSomething` 函数中打个断点，你会发现，它只在 `???` 调用时才会执行。也就是说 `??` 函数在判断了第一个值不为 nil 时，不会调用第二个表达式。而我们在调用 `???` 之前，就必须先把右边的数据准备好，这样不管左边的值是不是 nil，右边的表达式都会调用。所以才有了上面的区别。那么系统是怎么做到这样的呢？我们很容易就想到，把右边的值替换成一个函数，就可以办到。代码就像这样：\n\n```swift\nfunc ??? <T> (optional: T?, defaultValue: () -> T) -> T {\n    guard let value = optional else { return defaultValue() }\n    return value\n}\n\nlet result2 = a ??? doSomething\n```\n\n再次运行，你会发现 `doSomething` 函数没有再执行了。细心的同学可能会发现，这里调用 `???` 跟调用 `??` 有点区别，在 `??` 的调用中，右边是 `doSomethin()`，而我们的 `???` 右边是 `doSomething`。这里其实使用了一个叫做自动闭包的东西，我们在闭包前面加上 `@autoclosure` 关键字，就能让我们的普通闭包变成自动闭包。使用自动闭包的好处是编译器会自动把一个值转成闭包。当然，自动闭包是有一定限制的，只能作用在没有参数的闭包上。我们把代码修改一下就可以跟调用 `??` 一样，使用我们的 `???` 了。\n\n```swift\nfunc ??? <T> (optional: T?, defaultValue: @autoclosure () -> T) -> T {}\n```\n\n\n\n这里花这么多时间讲 `??` 操作符，其实是为了体现函数式的另一个特征，那就是惰性计算。从上面的例子中，可以看出，有与没有惰性计算，在程序性能上还是有很大差别的。上面只是简单的做了 10000 次循环，运行时间就差了百倍。如果这是个耗时操作，那么这种优化就可以大大地提高程序性能。\n\n在惰性计算中，表达式不是在绑定到变量时立即计算，而是在求值程序需要产生表达式的值时进行计算。延迟的计算使您可以编写更高性能和避免可能潜在地生成无穷输出的函数。因为它不会计算多于程序的其余部分所需要的值，所以不需要担心由于表达式执行耗时操作所带来的性能问题或由无穷计算所导致的 out-of-memory 错误。\n\n\n\n上面就是我对函数式编程的一些思考，因为篇幅有限，很多东西不能展开来讲。如果同学们能从我这篇文章中得到一点启发，那么这篇文章也就能提现它的价值了。","slug":"Swift-与函数式编程的那些事","published":1,"updated":"2019-03-11T08:16:04.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6ziji00021u0obgec7jv8","content":"<!-- excerpt -->\n<p>本文是 Swift 系列文章中的第三篇，前两篇文章分别是：<a href=\"http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/\" target=\"_blank\" rel=\"noopener\">Swift 与面向协议编程的那些事</a>，<a href=\"\">在 Swift 中使用值类型</a>。按照计划，这篇文章主要介绍一下函数式编程思想在 Swift 中的应用。</p>\n<p>函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 <a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">λ演算</a>。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。</p>\n<p>函数式编程在维基百科中的定义是：<strong>函数式编程</strong>（functional programming）或称函数程序设计、泛函编程，是一种编程范式，它将计算机运算视为函数运算，并且避免使用程序状态以及易变对象。其中，<a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">λ演算</a>为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p>\n<h2 id=\"计算数组元素之和\"><a href=\"#计算数组元素之和\" class=\"headerlink\" title=\"计算数组元素之和\"></a>计算数组元素之和</h2><p>我们最好还是用一个例子来解释什么是函数式编程。请看下面的这个例子：这段代码想要输出整型数组中所有元素的和。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(of arr: [Int])</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> arr &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(of: <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>)) <span class=\"comment\">// result: 55</span></span><br></pre></td></tr></table></figure>\n<p>下面我们改用 Swift 标准库中提供的函数来写这个程序，其代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, +) <span class=\"comment\">// result: 55</span></span><br></pre></td></tr></table></figure>\n<p>这里我们直接调用数组的 <code>reduce</code> 方法，该方法接受一个初始值和一个闭包（就是一个匿名函数），最终将结果返回。如果从来没有接触过函数式可能觉得这段代码看起来很奇怪。没关系，我们可以把这段代码改得完整一点，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, &#123; result, ele <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result + ele</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>reduce</code> 方法第二个参数接受一个函数，为了简单起见，我们只管 Int 型数据，那么其形式可能是这样：<code>(Int, Int) -&gt; Int</code> 。如果我们编写了一个像下面这样的函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoNums</span><span class=\"params\">(x: Int, y: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，将它作为参数传给 <code>reduce</code> ，这样仍然能得到我们想要的结果，就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, addTowNums) <span class=\"comment\">// result: 55</span></span><br></pre></td></tr></table></figure>\n<p>因为Swift 标准库中 Int 实现了 <code>+</code> 运算符，它其实就是个函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Int</span> : <span class=\"title\">FixedWidthInteger</span>, <span class=\"title\">SignedInteger</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> + <span class=\"params\">(lhs: Int, rhs: Int)</span></span> -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以上面的代码中可以将 <code>+</code> 作为函数传给 <code>reduce</code>。如果你想实现数组元素相乘，那么你就可以把 <code>*</code> 作为函数传给 <code>reduce</code>。正是得益于 Swift 中函数式的特性，我们才能将 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 等普通操作符（在 Swift 中其实就是函数了）作为函数传给 <code>reduce</code>。</p>\n<h2 id=\"不可变性与软件架构\"><a href=\"#不可变性与软件架构\" class=\"headerlink\" title=\"不可变性与软件架构\"></a>不可变性与软件架构</h2><p>在上面的代码中，我们为什么说 <code>+</code> 具有函数式的特性？因为它符合函数式的一个核心思想：不可变性。对于 <code>+</code> 来说，它没有改变任何外部变量，而且不管你在什么地方，即使是并发环境下，只要传入的值一样，其结果永远都是一样的。如果一个函数，即使其返回结果永远不变，但是它改变了外部变量，它仍然不能说是函数式的。因为它仍然是可变的。</p>\n<p>对于函数式编程，我们可以简单地归纳有以下特征：</p>\n<ul>\n<li><p>只用 “表达式”，不用 “语句”</p>\n<p>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p>\n</li>\n<li><p>没有”副作用”</p>\n<p>所谓”副作用”（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p>\n<p>函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p>\n</li>\n<li><p>不修改状态</p>\n<p>上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p>\n<p>在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。</p>\n</li>\n<li><p>引用透明</p>\n<p>函数程序通常还加强引用透明性，即如果提供同样的输入，那么函数总是返回同样的结果。就是说，表达式的值不依赖于可以改变值的全局状态。这使您可以从形式上推断程序行为，因为表达式的意义只取决于其子表达式而不是计算顺序或者其他表达式的副作用。这有助于验证正确性、简化算法，甚至有助于找出优化它的方法。</p>\n</li>\n</ul>\n<p>从以上函数式编程的特征来看，它们的共同作用最终导致一个结果：不可变性。</p>\n<p>为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构师要操心变量的可变性呢？答案显而易见：所有的竞争问题、死锁问题、并发问题都是由可变变量导致的。如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。如果锁的状态是不可变的，那么永远就不会产生死锁问题。</p>\n<p>在函数式编程中，由于数据全部都是不可变的，所以没有并发编程的问题，是多线程安全的。可以有效降低程序运行中所产生的副作用，对于快速迭代的项目来说，函数式编程可以实现函数与函数之间的热切换而不用担心数据的问题，因为它是以函数作为最小单位的，只要函数与函数之间的关系正确即可保证结果的正确性。</p>\n<h2 id=\"map、flatMap-与函数式\"><a href=\"#map、flatMap-与函数式\" class=\"headerlink\" title=\"map、flatMap 与函数式\"></a>map、flatMap 与函数式</h2><p>map 是我们在使用数组是经常使用的方法，如果我们想将数组中的每个元素做个变换，就会使用到它。例如我们想将一个整形数组中的每个元素做平方操作，就可以这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>map 方法接受一个闭包作为参数，然后它会遍历整个数组，并对数组中的每个元素执行闭包中的操作，最后返回一个新数组，上面例子中将每个元素做平方，所以最后返的新数组就是：<code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code></p>\n<p>下面我们可以看一下 map 在 Array 中的定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>]</span><br></pre></td></tr></table></figure>\n<p>对 <code>rethrows</code> 关键字不是很了解的同学可以看看<a href=\"http://jewelz.me/cjt0zq7cf0008620oknjdqsx7/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，这里我们可以忽略它，我们主要把关注点放到 <code>(Element) -&gt; T</code> 这个闭包的定义上。我们可以看到，该闭包接受的参数类型跟我们数组中元素的类型是一致的，其返回类型跟我们最终想得到的数据中元素的类型是一样的。也就是说我们可以使用 map 方法将某个类型的数组转换成完全另一种类型的数组，例如下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringArr = <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">3</span>).<span class=\"built_in\">map</span> &#123; <span class=\"string\">\"No.<span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span> &#125;  <span class=\"comment\">//[\"No.1\", \"No.2\", \"No.3\"]</span></span><br></pre></td></tr></table></figure>\n<p>知道了 map 方法做的事情后，我们就很容易地实现我们的 map，代码可以像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myMap</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            result.append(<span class=\"keyword\">try</span> transform(ele))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这行代码 <code>result.append(try transform(ele))</code> 就是 map 方法的核心，这就是上面说的 map 对数组中的每个元素执行闭包中的操作。</p>\n<p>如果你常用 Swift 的话， 还会发现除了数组定义了 map 方法， 同样 Optional 也存在这个方法。请看下面的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> time: <span class=\"type\">String</span>? = <span class=\"string\">\"2018-01-01\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">label.text = time.<span class=\"built_in\">map</span>&#123; <span class=\"string\">\"时间：<span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>&#125;  <span class=\"comment\">// \"时间：2018-01-01\"</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码经常会出现在我的项目中。<code>time</code> 是定义在一个结构体或类中，它的值是由服务器返回的，所以对于它的值我们不能确定，所以一般我定义成可选型，最终我们要在界面上显示成 <code>时间：xxxx-xx-xx</code> 的样式，我们得在服务器返回的字符串前面加上 <code>时间：</code>，如果你直接 <code>&quot;时间：\\(time)&quot;}</code> 肯定是不行的，因为 <code>time</code> 是可选型，在使用时你得先解包，这样我们就得写一串处理 <code>time</code> 的代码（当然这里处理代码也很短，其它情况可能就比较长了），这样看起来非常繁琐。使用 <code>map</code> 方法就使得我们的代码干净简洁了很多。</p>\n<p>我们可以看一下 Optional 中 map 的定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br></pre></td></tr></table></figure>\n<p>你再回去看一下 Array 中 map 的定义，你会发现二者几乎没有区别。Array 中 返回的是一个数组 ，这里返回的是 可选型的值，这里看似没有任何联系，如果你把数组和可选型当成一种包装类型，你会发现它们是一样的，所以才有了 <code>map</code> 这个相同的行为。</p>\n<p>那么什么是包装类型的值呢，你可以简单地理解为包含了多个值的一种值，例如数组，你可以通过一个数组变量访问到数组中的任何一个值，而对于可选型，也是一样的，你可以访问到一个 nil 值，或者一个解包后的值。像标准库中的 <code>String</code>, <code>Dictionary</code> 等都可以看做包装值，而且它们都有实现 <code>map</code>。</p>\n<p>flatMap 在使用上和 map 非常相似，如果你不仔细观察的话，你甚至都发现不了它们之间的区别。我们先看一下 flatMap 在 Optional 中的定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>?) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br></pre></td></tr></table></figure>\n<p>你仔细看的话，你会发现它与 map 的区别，flatMap 接受的闭包的返回类型是 <code>U?</code>，而 map 中的是 <code>U</code>，这就是它们在方法签名上唯一的区别。也就是说，map 中闭包返回值不能是可选型，而 flatMap 可以。如果你把它替换成上面包装值的概念，那就是 flatMap 中的闭包的返回值也是个包装值。</p>\n<p>我们可以看一下数组中 map 和 flatMap 的区别是怎样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;SegmentOfResult&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">SegmentOfResult</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">SegmentOfResult</span>.<span class=\"type\">Element</span>] <span class=\"keyword\">where</span> <span class=\"type\">SegmentOfResult</span> : <span class=\"type\">Sequence</span></span><br></pre></td></tr></table></figure>\n<p>虽然 flatMap 的方法签名比 map 复杂了很多，但是主要区别也是体现在闭包返回值类型上，map 中返回值是 T 的单一类型，而 flatMap 返回的是一个 Sequence，这里你可以简单理解为数组。对比上面 Optional 中 map 和 flatMap 的区别，你会发现它们都区别是一致的。</p>\n<p>运行下面的代码，你就能更清楚的看到它们都区别了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> mapedArr = array.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span>&#125; &#125;          <span class=\"comment\">// [[1, 4], [9, 16]]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flatMapedArr = array.flatMap &#123; $<span class=\"number\">0</span>.<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span>&#125; &#125;  <span class=\"comment\">// [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么这样设计\"><a href=\"#为什么这样设计\" class=\"headerlink\" title=\"为什么这样设计\"></a>为什么这样设计</h3><p>看到这里， 大家可能会产生疑问了。 为什么会多出个 flatMap 函数？这其实涉及另外一个维度的概念， Functors 和 Monads。 明白这个概念之后，你就会发现这其中的关联，以及为什么会有 map 和 flatMap 这两个函数存在了。</p>\n<h4 id=\"Functors\"><a href=\"#Functors\" class=\"headerlink\" title=\"Functors\"></a>Functors</h4><p>在讲 functors和 monads 时，我们需要用到上面讲 Array 和 Optional 联系时用到的包装值的概念。</p>\n<p>其实 简单来说，Functors 就是将包装值直接传递给函数的一种行为。 对应到我们的代码上，就是 map 函数了, 看下面这个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"number\">_</span> val: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val * val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">square(<span class=\"number\">10</span>) <span class=\"comment\">// 100</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> optionalVal: <span class=\"type\">Int</span>? = <span class=\"number\">10</span></span><br><span class=\"line\">square(optionalVal) <span class=\"comment\">// Value of optional type 'Int?' not unwrapped; did you mean to use '!' or '?'?</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，我们想求一个整数的平方，对于一个可选类型的值来说，我们必须将它解包后，才能传入 <code>square</code> 函数中。我们虽然不能直接把 optionalVal 直接传递给 <code>square</code> 函数，但是我们可以使用 map 将 <code>square</code> 最为参数传递进来，这就相当于间接地将 optionalVal 传递给 <code>square</code> 函数。就像下面代码中那样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optionalVal.<span class=\"built_in\">map</span>(square)</span><br></pre></td></tr></table></figure>\n<p>同样地，我们把数组也看做一个包装值，虽然不能直接将数组传递给 <code>square</code> 函数，但是我们使用 map 仍然能将数组中的值传递给 <code>square</code> 函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">map</span>(square)</span><br></pre></td></tr></table></figure>\n<p>总的来说 Functors 就是将一个<strong>包装值</strong>直接传递给函数，并且返回的结果依然是包装值的一种行为。 我们调用 Optional 中的 map 函数， 会用闭包将 Optional 中的值进行操作，然后返回值还是一个 Optional。</p>\n<p>同样，我们对数组调用 map 函数， 会用闭包将数组中的值进行一些操作， 然后返回值还是一个数组。</p>\n<p>从这个维度来思考，就能理解为什么 Optional 和数组，这两个看似没有任何关联的类型，为什么都有 map 和 flatMap 方法了。</p>\n<h4 id=\"Monads\"><a href=\"#Monads\" class=\"headerlink\" title=\"Monads\"></a>Monads</h4><p>如果说 Functors 对应的是 map 函数， 那么 Monads 对应的就是 flatMap 函数啦。</p>\n<p>Monads 用一句话来说就是， 它将一个<strong>包装值</strong>传递给一个返回值类型是<strong>包装值</strong>的函数。注意 monads 强调的是<strong>返回值类型是包装值的函数</strong> 。</p>\n<p>Optional 的 flatMap 函数接受的闭包是 (Wrapped) -&gt; U?， 它返回的还是 Optional 类型。 数组的 flatMap 接受的闭包是 (Element) -&gt; SegmentOfResult，这里 SegmentOfResult 必须是 Sequence， 返回的依然还是数组。</p>\n<p>map 和 flatMap 的主要区别就是他们所接受闭包的返回类型， map 的闭包返回的是一个普通值， flatMap 的闭包返回的是一个包装值。</p>\n<p>下面给出一个 monads 在实际中运用的例子：在下面代码中，在第一个请求返回后，我们拿到结果并发起第二个请求。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Provider</span>&lt;<span class=\"type\">UserApi</span>&gt;(.users)</span><br><span class=\"line\">    .flatMap &#123; response -&gt; <span class=\"type\">Provider</span>&lt;<span class=\"type\">UserApi</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">     \t<span class=\"keyword\">let</span> res = response.array.first <span class=\"keyword\">as</span>! [<span class=\"type\">String</span>: <span class=\"type\">Any</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> user = <span class=\"type\">User</span>(res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Provider</span>(.detail(user.name))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .request &#123; response <span class=\"keyword\">in</span></span><br><span class=\"line\">    \t<span class=\"built_in\">print</span>(response)</span><br><span class=\"line\">    &#125;.addToCancelBag()</span><br></pre></td></tr></table></figure>\n<p>这里的 Provider 就是一个包装值，它的 flatMap 接受的闭包的返回类型就是另一个包装值。这完全符合 monads 的定义。</p>\n<p>Functors 和 Monads 并不是 Swift 中独有的，它们是一种数学概念。而在函数式编程中，你经常会看到它们都身影。只有是<strong>把包装值传递给函数，并且返回的结果依然是包装值</strong>的行为就是 functors，<strong>把包装值传递给一个返回值类型是包装值的函数</strong>的行为就是 Monads。</p>\n<h2 id=\"与函数式\"><a href=\"#与函数式\" class=\"headerlink\" title=\"?? 与函数式\"></a>?? 与函数式</h2><p>如果你对 Swift 中的可选类型 (Optional) 用的比较多的话，那么你可能会经常用到 <code>??</code> 这个操作符，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">Int</span>?</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a =\"</span>, a ?? <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p><code>??</code> 操作符左边是一个 Optional值，右边是一个普通值，它的作用就是，如果左边的 Optional 值为 nil， 那么就使用右边的值作为结果，如果左边的 Optional 不为 nil，则返回左边的 Optional 解包后的值，就像下面代码展示的那样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">Int</span>?</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a =\"</span>, a == <span class=\"literal\">nil</span> ? <span class=\"number\">100</span> : a!)</span><br></pre></td></tr></table></figure>\n<p>事情真的是这么简单吗？在回答这个问题前，我们可以先自己实现一个 <code>??</code>，为了跟系统的进行区分，这里我们把新函数定义为 <code>???</code>，为了实现我们的 <code>???</code> 函数，就必须使用自定义操作符。最终的代码就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> ???: <span class=\"type\">AdditionPrecedence</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ??? &lt;T&gt; <span class=\"params\">(<span class=\"keyword\">optional</span>: T?, defaultValue: T)</span></span> -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = <span class=\"keyword\">optional</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> defaultValue &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a =\"</span>, a ??? <span class=\"number\">100</span>) <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<p>目前看起来好像跟标准库中 <code>??</code> 的结果是一模一样的，不过先不要着急，我们可以把 <code>??</code> 和我们的 <code>???</code> 右边替换成一个函数，代码是这样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>...<span class=\"number\">10000</span> &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">Int</span>? = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = clock()</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a ?? doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"time1: \"</span>, clock() - b1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = clock()</span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = a ??? doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"time2: \"</span>, clock() - b2)</span><br></pre></td></tr></table></figure>\n<p>为了测试  <code>??</code> 和我们的 <code>???</code>的性能，我简单地记录了这两个调用的时间，下面是其中一次的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time1:  206</span><br><span class=\"line\">time2:  254042</span><br></pre></td></tr></table></figure>\n<p>不过你执行多少次，你都能得出一个结果：<code>??</code> 调用比<code>???</code> 调用快了很多。为什么会出现这种情况，我们的 <code>???</code> 到底有什么问题呢？如果你在 <code>doSomething</code> 函数中打个断点，你会发现，它只在 <code>???</code> 调用时才会执行。也就是说 <code>??</code> 函数在判断了第一个值不为 nil 时，不会调用第二个表达式。而我们在调用 <code>???</code> 之前，就必须先把右边的数据准备好，这样不管左边的值是不是 nil，右边的表达式都会调用。所以才有了上面的区别。那么系统是怎么做到这样的呢？我们很容易就想到，把右边的值替换成一个函数，就可以办到。代码就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ??? &lt;T&gt; <span class=\"params\">(<span class=\"keyword\">optional</span>: T?, defaultValue: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = <span class=\"keyword\">optional</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> defaultValue() &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = a ??? doSomething</span><br></pre></td></tr></table></figure>\n<p>再次运行，你会发现 <code>doSomething</code> 函数没有再执行了。细心的同学可能会发现，这里调用 <code>???</code> 跟调用 <code>??</code> 有点区别，在 <code>??</code> 的调用中，右边是 <code>doSomethin()</code>，而我们的 <code>???</code> 右边是 <code>doSomething</code>。这里其实使用了一个叫做自动闭包的东西，我们在闭包前面加上 <code>@autoclosure</code> 关键字，就能让我们的普通闭包变成自动闭包。使用自动闭包的好处是编译器会自动把一个值转成闭包。当然，自动闭包是有一定限制的，只能作用在没有参数的闭包上。我们把代码修改一下就可以跟调用 <code>??</code> 一样，使用我们的 <code>???</code> 了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ??? &lt;T&gt; <span class=\"params\">(<span class=\"keyword\">optional</span>: T?, defaultValue: @autoclosure <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">T</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这里花这么多时间讲 <code>??</code> 操作符，其实是为了体现函数式的另一个特征，那就是惰性计算。从上面的例子中，可以看出，有与没有惰性计算，在程序性能上还是有很大差别的。上面只是简单的做了 10000 次循环，运行时间就差了百倍。如果这是个耗时操作，那么这种优化就可以大大地提高程序性能。</p>\n<p>在惰性计算中，表达式不是在绑定到变量时立即计算，而是在求值程序需要产生表达式的值时进行计算。延迟的计算使您可以编写更高性能和避免可能潜在地生成无穷输出的函数。因为它不会计算多于程序的其余部分所需要的值，所以不需要担心由于表达式执行耗时操作所带来的性能问题或由无穷计算所导致的 out-of-memory 错误。</p>\n<p>上面就是我对函数式编程的一些思考，因为篇幅有限，很多东西不能展开来讲。如果同学们能从我这篇文章中得到一点启发，那么这篇文章也就能提现它的价值了。</p>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 <a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">λ演算</a>。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。</p>","more":"<p>函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 <a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">λ演算</a>。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。</p>\n<!-- excerpt -->\n<p>本文是 Swift 系列文章中的第三篇，前两篇文章分别是：<a href=\"http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/\" target=\"_blank\" rel=\"noopener\">Swift 与面向协议编程的那些事</a>，<a href=\"\">在 Swift 中使用值类型</a>。按照计划，这篇文章主要介绍一下函数式编程思想在 Swift 中的应用。</p>\n<p>函数式编程所依赖的原理，在很多方面其实是早于编程本身出现的。因为函数式编程这种范式依赖于 Alonzo Church 在20世纪30年代发明的 <a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">λ演算</a>。 λ 演算的一个核心思想是不可变性——某个符合所对应的值永远是不变的。所以从理论上来讲，函数式编程语言中应该是没有赋值语句的。</p>\n<p>函数式编程在维基百科中的定义是：<strong>函数式编程</strong>（functional programming）或称函数程序设计、泛函编程，是一种编程范式，它将计算机运算视为函数运算，并且避免使用程序状态以及易变对象。其中，<a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97\" target=\"_blank\" rel=\"noopener\">λ演算</a>为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p>\n<h2 id=\"计算数组元素之和\"><a href=\"#计算数组元素之和\" class=\"headerlink\" title=\"计算数组元素之和\"></a>计算数组元素之和</h2><p>我们最好还是用一个例子来解释什么是函数式编程。请看下面的这个例子：这段代码想要输出整型数组中所有元素的和。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(of arr: [Int])</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> arr &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(of: <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>)) <span class=\"comment\">// result: 55</span></span><br></pre></td></tr></table></figure>\n<p>下面我们改用 Swift 标准库中提供的函数来写这个程序，其代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, +) <span class=\"comment\">// result: 55</span></span><br></pre></td></tr></table></figure>\n<p>这里我们直接调用数组的 <code>reduce</code> 方法，该方法接受一个初始值和一个闭包（就是一个匿名函数），最终将结果返回。如果从来没有接触过函数式可能觉得这段代码看起来很奇怪。没关系，我们可以把这段代码改得完整一点，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, &#123; result, ele <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result + ele</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>reduce</code> 方法第二个参数接受一个函数，为了简单起见，我们只管 Int 型数据，那么其形式可能是这样：<code>(Int, Int) -&gt; Int</code> 。如果我们编写了一个像下面这样的函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoNums</span><span class=\"params\">(x: Int, y: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，将它作为参数传给 <code>reduce</code> ，这样仍然能得到我们想要的结果，就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, addTowNums) <span class=\"comment\">// result: 55</span></span><br></pre></td></tr></table></figure>\n<p>因为Swift 标准库中 Int 实现了 <code>+</code> 运算符，它其实就是个函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Int</span> : <span class=\"title\">FixedWidthInteger</span>, <span class=\"title\">SignedInteger</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> + <span class=\"params\">(lhs: Int, rhs: Int)</span></span> -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以上面的代码中可以将 <code>+</code> 作为函数传给 <code>reduce</code>。如果你想实现数组元素相乘，那么你就可以把 <code>*</code> 作为函数传给 <code>reduce</code>。正是得益于 Swift 中函数式的特性，我们才能将 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 等普通操作符（在 Swift 中其实就是函数了）作为函数传给 <code>reduce</code>。</p>\n<h2 id=\"不可变性与软件架构\"><a href=\"#不可变性与软件架构\" class=\"headerlink\" title=\"不可变性与软件架构\"></a>不可变性与软件架构</h2><p>在上面的代码中，我们为什么说 <code>+</code> 具有函数式的特性？因为它符合函数式的一个核心思想：不可变性。对于 <code>+</code> 来说，它没有改变任何外部变量，而且不管你在什么地方，即使是并发环境下，只要传入的值一样，其结果永远都是一样的。如果一个函数，即使其返回结果永远不变，但是它改变了外部变量，它仍然不能说是函数式的。因为它仍然是可变的。</p>\n<p>对于函数式编程，我们可以简单地归纳有以下特征：</p>\n<ul>\n<li><p>只用 “表达式”，不用 “语句”</p>\n<p>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p>\n</li>\n<li><p>没有”副作用”</p>\n<p>所谓”副作用”（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p>\n<p>函数式编程强调没有”副作用”，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p>\n</li>\n<li><p>不修改状态</p>\n<p>上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p>\n<p>在其他类型的语言中，变量往往用来保存”状态”（state）。不修改变量，意味着状态不能保存在变量中。</p>\n</li>\n<li><p>引用透明</p>\n<p>函数程序通常还加强引用透明性，即如果提供同样的输入，那么函数总是返回同样的结果。就是说，表达式的值不依赖于可以改变值的全局状态。这使您可以从形式上推断程序行为，因为表达式的意义只取决于其子表达式而不是计算顺序或者其他表达式的副作用。这有助于验证正确性、简化算法，甚至有助于找出优化它的方法。</p>\n</li>\n</ul>\n<p>从以上函数式编程的特征来看，它们的共同作用最终导致一个结果：不可变性。</p>\n<p>为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构师要操心变量的可变性呢？答案显而易见：所有的竞争问题、死锁问题、并发问题都是由可变变量导致的。如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。如果锁的状态是不可变的，那么永远就不会产生死锁问题。</p>\n<p>在函数式编程中，由于数据全部都是不可变的，所以没有并发编程的问题，是多线程安全的。可以有效降低程序运行中所产生的副作用，对于快速迭代的项目来说，函数式编程可以实现函数与函数之间的热切换而不用担心数据的问题，因为它是以函数作为最小单位的，只要函数与函数之间的关系正确即可保证结果的正确性。</p>\n<h2 id=\"map、flatMap-与函数式\"><a href=\"#map、flatMap-与函数式\" class=\"headerlink\" title=\"map、flatMap 与函数式\"></a>map、flatMap 与函数式</h2><p>map 是我们在使用数组是经常使用的方法，如果我们想将数组中的每个元素做个变换，就会使用到它。例如我们想将一个整形数组中的每个元素做平方操作，就可以这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>map 方法接受一个闭包作为参数，然后它会遍历整个数组，并对数组中的每个元素执行闭包中的操作，最后返回一个新数组，上面例子中将每个元素做平方，所以最后返的新数组就是：<code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code></p>\n<p>下面我们可以看一下 map 在 Array 中的定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>]</span><br></pre></td></tr></table></figure>\n<p>对 <code>rethrows</code> 关键字不是很了解的同学可以看看<a href=\"http://jewelz.me/cjt0zq7cf0008620oknjdqsx7/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，这里我们可以忽略它，我们主要把关注点放到 <code>(Element) -&gt; T</code> 这个闭包的定义上。我们可以看到，该闭包接受的参数类型跟我们数组中元素的类型是一致的，其返回类型跟我们最终想得到的数据中元素的类型是一样的。也就是说我们可以使用 map 方法将某个类型的数组转换成完全另一种类型的数组，例如下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stringArr = <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">3</span>).<span class=\"built_in\">map</span> &#123; <span class=\"string\">\"No.<span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span> &#125;  <span class=\"comment\">//[\"No.1\", \"No.2\", \"No.3\"]</span></span><br></pre></td></tr></table></figure>\n<p>知道了 map 方法做的事情后，我们就很容易地实现我们的 map，代码可以像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myMap</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            result.append(<span class=\"keyword\">try</span> transform(ele))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这行代码 <code>result.append(try transform(ele))</code> 就是 map 方法的核心，这就是上面说的 map 对数组中的每个元素执行闭包中的操作。</p>\n<p>如果你常用 Swift 的话， 还会发现除了数组定义了 map 方法， 同样 Optional 也存在这个方法。请看下面的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> time: <span class=\"type\">String</span>? = <span class=\"string\">\"2018-01-01\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">label.text = time.<span class=\"built_in\">map</span>&#123; <span class=\"string\">\"时间：<span class=\"subst\">\\($<span class=\"number\">0</span>)</span>\"</span>&#125;  <span class=\"comment\">// \"时间：2018-01-01\"</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码经常会出现在我的项目中。<code>time</code> 是定义在一个结构体或类中，它的值是由服务器返回的，所以对于它的值我们不能确定，所以一般我定义成可选型，最终我们要在界面上显示成 <code>时间：xxxx-xx-xx</code> 的样式，我们得在服务器返回的字符串前面加上 <code>时间：</code>，如果你直接 <code>&quot;时间：\\(time)&quot;}</code> 肯定是不行的，因为 <code>time</code> 是可选型，在使用时你得先解包，这样我们就得写一串处理 <code>time</code> 的代码（当然这里处理代码也很短，其它情况可能就比较长了），这样看起来非常繁琐。使用 <code>map</code> 方法就使得我们的代码干净简洁了很多。</p>\n<p>我们可以看一下 Optional 中 map 的定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br></pre></td></tr></table></figure>\n<p>你再回去看一下 Array 中 map 的定义，你会发现二者几乎没有区别。Array 中 返回的是一个数组 ，这里返回的是 可选型的值，这里看似没有任何联系，如果你把数组和可选型当成一种包装类型，你会发现它们是一样的，所以才有了 <code>map</code> 这个相同的行为。</p>\n<p>那么什么是包装类型的值呢，你可以简单地理解为包含了多个值的一种值，例如数组，你可以通过一个数组变量访问到数组中的任何一个值，而对于可选型，也是一样的，你可以访问到一个 nil 值，或者一个解包后的值。像标准库中的 <code>String</code>, <code>Dictionary</code> 等都可以看做包装值，而且它们都有实现 <code>map</code>。</p>\n<p>flatMap 在使用上和 map 非常相似，如果你不仔细观察的话，你甚至都发现不了它们之间的区别。我们先看一下 flatMap 在 Optional 中的定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>?) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br></pre></td></tr></table></figure>\n<p>你仔细看的话，你会发现它与 map 的区别，flatMap 接受的闭包的返回类型是 <code>U?</code>，而 map 中的是 <code>U</code>，这就是它们在方法签名上唯一的区别。也就是说，map 中闭包返回值不能是可选型，而 flatMap 可以。如果你把它替换成上面包装值的概念，那就是 flatMap 中的闭包的返回值也是个包装值。</p>\n<p>我们可以看一下数组中 map 和 flatMap 的区别是怎样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;SegmentOfResult&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">SegmentOfResult</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">SegmentOfResult</span>.<span class=\"type\">Element</span>] <span class=\"keyword\">where</span> <span class=\"type\">SegmentOfResult</span> : <span class=\"type\">Sequence</span></span><br></pre></td></tr></table></figure>\n<p>虽然 flatMap 的方法签名比 map 复杂了很多，但是主要区别也是体现在闭包返回值类型上，map 中返回值是 T 的单一类型，而 flatMap 返回的是一个 Sequence，这里你可以简单理解为数组。对比上面 Optional 中 map 和 flatMap 的区别，你会发现它们都区别是一致的。</p>\n<p>运行下面的代码，你就能更清楚的看到它们都区别了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> mapedArr = array.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span>&#125; &#125;          <span class=\"comment\">// [[1, 4], [9, 16]]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flatMapedArr = array.flatMap &#123; $<span class=\"number\">0</span>.<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * $<span class=\"number\">0</span>&#125; &#125;  <span class=\"comment\">// [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么这样设计\"><a href=\"#为什么这样设计\" class=\"headerlink\" title=\"为什么这样设计\"></a>为什么这样设计</h3><p>看到这里， 大家可能会产生疑问了。 为什么会多出个 flatMap 函数？这其实涉及另外一个维度的概念， Functors 和 Monads。 明白这个概念之后，你就会发现这其中的关联，以及为什么会有 map 和 flatMap 这两个函数存在了。</p>\n<h4 id=\"Functors\"><a href=\"#Functors\" class=\"headerlink\" title=\"Functors\"></a>Functors</h4><p>在讲 functors和 monads 时，我们需要用到上面讲 Array 和 Optional 联系时用到的包装值的概念。</p>\n<p>其实 简单来说，Functors 就是将包装值直接传递给函数的一种行为。 对应到我们的代码上，就是 map 函数了, 看下面这个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"number\">_</span> val: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val * val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">square(<span class=\"number\">10</span>) <span class=\"comment\">// 100</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> optionalVal: <span class=\"type\">Int</span>? = <span class=\"number\">10</span></span><br><span class=\"line\">square(optionalVal) <span class=\"comment\">// Value of optional type 'Int?' not unwrapped; did you mean to use '!' or '?'?</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，我们想求一个整数的平方，对于一个可选类型的值来说，我们必须将它解包后，才能传入 <code>square</code> 函数中。我们虽然不能直接把 optionalVal 直接传递给 <code>square</code> 函数，但是我们可以使用 map 将 <code>square</code> 最为参数传递进来，这就相当于间接地将 optionalVal 传递给 <code>square</code> 函数。就像下面代码中那样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optionalVal.<span class=\"built_in\">map</span>(square)</span><br></pre></td></tr></table></figure>\n<p>同样地，我们把数组也看做一个包装值，虽然不能直接将数组传递给 <code>square</code> 函数，但是我们使用 map 仍然能将数组中的值传递给 <code>square</code> 函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">map</span>(square)</span><br></pre></td></tr></table></figure>\n<p>总的来说 Functors 就是将一个<strong>包装值</strong>直接传递给函数，并且返回的结果依然是包装值的一种行为。 我们调用 Optional 中的 map 函数， 会用闭包将 Optional 中的值进行操作，然后返回值还是一个 Optional。</p>\n<p>同样，我们对数组调用 map 函数， 会用闭包将数组中的值进行一些操作， 然后返回值还是一个数组。</p>\n<p>从这个维度来思考，就能理解为什么 Optional 和数组，这两个看似没有任何关联的类型，为什么都有 map 和 flatMap 方法了。</p>\n<h4 id=\"Monads\"><a href=\"#Monads\" class=\"headerlink\" title=\"Monads\"></a>Monads</h4><p>如果说 Functors 对应的是 map 函数， 那么 Monads 对应的就是 flatMap 函数啦。</p>\n<p>Monads 用一句话来说就是， 它将一个<strong>包装值</strong>传递给一个返回值类型是<strong>包装值</strong>的函数。注意 monads 强调的是<strong>返回值类型是包装值的函数</strong> 。</p>\n<p>Optional 的 flatMap 函数接受的闭包是 (Wrapped) -&gt; U?， 它返回的还是 Optional 类型。 数组的 flatMap 接受的闭包是 (Element) -&gt; SegmentOfResult，这里 SegmentOfResult 必须是 Sequence， 返回的依然还是数组。</p>\n<p>map 和 flatMap 的主要区别就是他们所接受闭包的返回类型， map 的闭包返回的是一个普通值， flatMap 的闭包返回的是一个包装值。</p>\n<p>下面给出一个 monads 在实际中运用的例子：在下面代码中，在第一个请求返回后，我们拿到结果并发起第二个请求。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Provider</span>&lt;<span class=\"type\">UserApi</span>&gt;(.users)</span><br><span class=\"line\">    .flatMap &#123; response -&gt; <span class=\"type\">Provider</span>&lt;<span class=\"type\">UserApi</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">     \t<span class=\"keyword\">let</span> res = response.array.first <span class=\"keyword\">as</span>! [<span class=\"type\">String</span>: <span class=\"type\">Any</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> user = <span class=\"type\">User</span>(res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Provider</span>(.detail(user.name))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .request &#123; response <span class=\"keyword\">in</span></span><br><span class=\"line\">    \t<span class=\"built_in\">print</span>(response)</span><br><span class=\"line\">    &#125;.addToCancelBag()</span><br></pre></td></tr></table></figure>\n<p>这里的 Provider 就是一个包装值，它的 flatMap 接受的闭包的返回类型就是另一个包装值。这完全符合 monads 的定义。</p>\n<p>Functors 和 Monads 并不是 Swift 中独有的，它们是一种数学概念。而在函数式编程中，你经常会看到它们都身影。只有是<strong>把包装值传递给函数，并且返回的结果依然是包装值</strong>的行为就是 functors，<strong>把包装值传递给一个返回值类型是包装值的函数</strong>的行为就是 Monads。</p>\n<h2 id=\"与函数式\"><a href=\"#与函数式\" class=\"headerlink\" title=\"?? 与函数式\"></a>?? 与函数式</h2><p>如果你对 Swift 中的可选类型 (Optional) 用的比较多的话，那么你可能会经常用到 <code>??</code> 这个操作符，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">Int</span>?</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a =\"</span>, a ?? <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p><code>??</code> 操作符左边是一个 Optional值，右边是一个普通值，它的作用就是，如果左边的 Optional 值为 nil， 那么就使用右边的值作为结果，如果左边的 Optional 不为 nil，则返回左边的 Optional 解包后的值，就像下面代码展示的那样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">Int</span>?</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a =\"</span>, a == <span class=\"literal\">nil</span> ? <span class=\"number\">100</span> : a!)</span><br></pre></td></tr></table></figure>\n<p>事情真的是这么简单吗？在回答这个问题前，我们可以先自己实现一个 <code>??</code>，为了跟系统的进行区分，这里我们把新函数定义为 <code>???</code>，为了实现我们的 <code>???</code> 函数，就必须使用自定义操作符。最终的代码就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> ???: <span class=\"type\">AdditionPrecedence</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ??? &lt;T&gt; <span class=\"params\">(<span class=\"keyword\">optional</span>: T?, defaultValue: T)</span></span> -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = <span class=\"keyword\">optional</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> defaultValue &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a =\"</span>, a ??? <span class=\"number\">100</span>) <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure>\n<p>目前看起来好像跟标准库中 <code>??</code> 的结果是一模一样的，不过先不要着急，我们可以把 <code>??</code> 和我们的 <code>???</code> 右边替换成一个函数，代码是这样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>...<span class=\"number\">10000</span> &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">Int</span>? = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = clock()</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a ?? doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"time1: \"</span>, clock() - b1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = clock()</span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = a ??? doSomething()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"time2: \"</span>, clock() - b2)</span><br></pre></td></tr></table></figure>\n<p>为了测试  <code>??</code> 和我们的 <code>???</code>的性能，我简单地记录了这两个调用的时间，下面是其中一次的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time1:  206</span><br><span class=\"line\">time2:  254042</span><br></pre></td></tr></table></figure>\n<p>不过你执行多少次，你都能得出一个结果：<code>??</code> 调用比<code>???</code> 调用快了很多。为什么会出现这种情况，我们的 <code>???</code> 到底有什么问题呢？如果你在 <code>doSomething</code> 函数中打个断点，你会发现，它只在 <code>???</code> 调用时才会执行。也就是说 <code>??</code> 函数在判断了第一个值不为 nil 时，不会调用第二个表达式。而我们在调用 <code>???</code> 之前，就必须先把右边的数据准备好，这样不管左边的值是不是 nil，右边的表达式都会调用。所以才有了上面的区别。那么系统是怎么做到这样的呢？我们很容易就想到，把右边的值替换成一个函数，就可以办到。代码就像这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ??? &lt;T&gt; <span class=\"params\">(<span class=\"keyword\">optional</span>: T?, defaultValue: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = <span class=\"keyword\">optional</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> defaultValue() &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = a ??? doSomething</span><br></pre></td></tr></table></figure>\n<p>再次运行，你会发现 <code>doSomething</code> 函数没有再执行了。细心的同学可能会发现，这里调用 <code>???</code> 跟调用 <code>??</code> 有点区别，在 <code>??</code> 的调用中，右边是 <code>doSomethin()</code>，而我们的 <code>???</code> 右边是 <code>doSomething</code>。这里其实使用了一个叫做自动闭包的东西，我们在闭包前面加上 <code>@autoclosure</code> 关键字，就能让我们的普通闭包变成自动闭包。使用自动闭包的好处是编译器会自动把一个值转成闭包。当然，自动闭包是有一定限制的，只能作用在没有参数的闭包上。我们把代码修改一下就可以跟调用 <code>??</code> 一样，使用我们的 <code>???</code> 了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> ??? &lt;T&gt; <span class=\"params\">(<span class=\"keyword\">optional</span>: T?, defaultValue: @autoclosure <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">T</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这里花这么多时间讲 <code>??</code> 操作符，其实是为了体现函数式的另一个特征，那就是惰性计算。从上面的例子中，可以看出，有与没有惰性计算，在程序性能上还是有很大差别的。上面只是简单的做了 10000 次循环，运行时间就差了百倍。如果这是个耗时操作，那么这种优化就可以大大地提高程序性能。</p>\n<p>在惰性计算中，表达式不是在绑定到变量时立即计算，而是在求值程序需要产生表达式的值时进行计算。延迟的计算使您可以编写更高性能和避免可能潜在地生成无穷输出的函数。因为它不会计算多于程序的其余部分所需要的值，所以不需要担心由于表达式执行耗时操作所带来的性能问题或由无穷计算所导致的 out-of-memory 错误。</p>\n<p>上面就是我对函数式编程的一些思考，因为篇幅有限，很多东西不能展开来讲。如果同学们能从我这篇文章中得到一点启发，那么这篇文章也就能提现它的价值了。</p>\n"},{"title":"从 Swift 中的序列到类型擦除","date":"2018-01-06T03:52:43.000Z","coverImage":"Swift_logo.png","_content":"\n如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。\n\n<!-- excerpt -->\n\n如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。就像下面这样：\n\n```Swift\nlet persion = Persion()\n\nfor i in persion {\n    print(i)\n}\n```\n\n要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。\n\n\n\n## 序列\n\nSequence 协议是集合类型结构中的基础。一个序列 (sequence) 代表的是一系列具有相同类型的值，你可以对这些值进行迭代。Sequence 协议提供了许多强大的功能，满足该协议的类型都可以直接使用这些功能。上面这样步进式的迭代元素的能力看起来十分简单，但它却是 Sequence 可以提供这些强大功能的基础。\n\n\n\n满足 Sequence 协议的要求十分简单，你需要做的所有事情就是提供一个返回迭代器 (iterator) 的 `makeIterator() ` 方法：\n\n```Swift\npublic protocol Sequence {\n    associatedtype Iterator : IteratorProtocol\n    \n    public func makeIterator() -> Self.Iterator\n    \n    // ...\n}\n```\n\n在 Sequence 协议有个关联类型 Iterator，而且它必须遵守 IteratorProtocol 协议。从这里我们可以看出 Sequence 是一个可以创建迭代器协议的类型。所以在搞清楚它的步进式的迭代元素能力之前，有必要了解一下迭代器是什么。\n\n\n## 迭代器\n\n序列通过创建一个迭代器来提供对元素的访问。迭代器每次产生一个序列的值，并且当遍历序列时对遍历状态进行管理。在 IteratorProtocol 协议中唯一的一个方法是 next()，这个方法需要在每次被调用时返回序列中的下一个值。当序列被耗尽时，next() 应该返回 nil，不然迭代器就会一直工作下去，直到资源被耗尽为止。\n\nIteratorProtocol 的定义非常简单：\n\n```Swift\npublic protocol IteratorProtocol {\n    associatedtype Element\n    \n    public mutating func next() -> Self.Element?\n}\n```\n\n关联类型 Element 指定了迭代器产生的值的类型。这里`next()` 被标记了 mutating，表明了迭代器是可以存在可变的状态的。这里的 mutating 也不是必须的，如果你的迭代器返回的值并没有改变迭代器本身，那么没有 mutating 也是没有任何问题的。 不过几乎所有有意义的迭代器都会要求可变状态，这样它们才能够管理在序列中的当前位置。\n\n对 Sequence 和 IteratorProtocol 有了基础了解后，要实现开头提到的需求就很简单了。比如我想迭代输出一个 Person 实例的所有属性，我们可以这样做：\n\n```Swift\nstruct Persion: Sequence {\n    var name: String\n    var age: Int\n    var email: String\n    \n    func makeIterator() -> MyIterator {\n        return MyIterator(obj: self)\n    }\n}\n```\n\nPersion 遵守了 Sequence 协议，并返回了一个自定义的迭代器。迭代器的实现也很简单：\n\n```Swift\nstruct MyIterator: IteratorProtocol {\n    var children: Mirror.Children\n    \n    init(obj: Persion) {\n        children = Mirror(reflecting: obj).children\n    }\n   \n    mutating func next() -> String? {\n        guard let child = children.popFirst() else { return nil }\n        return \"\\(child.label.wrapped) is \\(child.value)\"\n    }\n}\n```\n\n迭代器中的 `children` 是 `AnyCollection<Mirror.Child>`  的集合类型，每次迭代返回一个值后，更新 `children` 这个状态，这样我们的迭代器就可以持续的输出正确的值了，直到输出完 `children` 中的所有值。\n\n现在可以使用 for 循环输出 Persion 中所有的属性值了：\n\n```Swift\nfor item in Persion.author {\n    print(item)\n}\n\n// out put:\n// name is jewelz\n// age is 23\n// email is hujewelz@gmail.com\n```\n\n如果现在有另外一个结构体或类也需要迭代输出所以属性呢？，这很好办，让我们的结构体遵守 Sequence 协议，并返回一个我们自定义的迭代器就可以了。这种拷贝代码的方式确实能满足需求，但是如果我们利用协议拓展就能写出更易于维护的代码，类似下面这样：\n\n```swift\nstruct _Iterator: IteratorProtocol {\n    var children: Mirror.Children\n    \n    init(obj: Any) {\n        children = Mirror(reflecting: obj).children\n    }\n    \n    mutating func next() -> String? {\n        guard let child = children.popFirst() else { return nil }\n        return \"\\(child.label.wrapped) is \\(child.value)\"\n    }\n}\n\nprotocol Sequencible: Sequence { }\n\nextension Sequencible {\n    func makeIterator() -> _Iterator {\n        return _Iterator(obj: self)\n    }\n}\n```\n\n这里我定义了一个继承 Sequence 的空协议，是为了不影响 Sequence 的默认行为。现在只要我们自定义的类或结构体遵守 Sequencible 就能使用 for 循环输出其所有属性值了。就像下面这样：\n\n```swift\nstruct Demo: Sequencible {\n    var name = \"Sequence\"\n    var author = Persion.author\n}\n```\n\n\n## 表示相同序列的类型 \n\n现在需求又变了，我想将所有遵守了 Sequencible 协议的任何序列存到一个数组中，然后 for 循环遍历数组中的元素，因为数组中的元素都遵守了 Sequencible 协议，所以又可以使用 for 循环输出其所有属性，就像下面这样：\n\n```Swift\nfor obj in array {\n    for item in obj {\n        print(item)\n    }\n}\n```\n\n那么这里的 array 应该定义成什么类型呢？定义成 [Any] 类型肯定是不行的，这样的话在循环中得将 item 强转为 Sequencible，那么是否可以定义成  [Sequencible] 类型呢？答案是否定的。当这样定义时编辑器会报出这样的错误：\n\n{% alert danger %}\n\nProtocol 'Sequencible' can only be used as a generic constraint because it has Self or associated type requirements\n\n{% endalert %}\n\n熟悉 Swift 协议的同学应该对这个报错比较熟了。就是说含有 Self 或者关联类型的协议，只能被当作泛型约束使用。所以像下面这样定义我们的 array 是行不通的。\n\n```Swift\nlet sequencibleStore: [Sequencible] = [Persion.author, Demo()]\n```\n\n如果有这样一个类型，可以隐藏 Sequencible 这个具体的类型不就解决这个问题了吗？这种将指定类型移除的过程，就被称为类型擦除。\n\n\n## 类型擦除\n\n回想一下  Sequence 协议的内容，我们只要通过 `makeIterator()` 返回一个迭代器就可以了。那么我们可以实现一个封装类(结构体也是一样的)，里面用一个属性存储了迭代器的实现，然后在 `makeIterator()` 方法中通过存储的这个属性构造一个迭代器。类似这样：\n\n```Swift\nfunc makeIterator() -> _AnyIterator<Element> {\n    return _AnyIterator(iteratorImpl)\n}\n```\n\n我们的这个封装可以这样定义：\n\n```Swift\nstruct _AnySequence<Element>: Sequence {\n    private var iteratorImpl: () -> Element?\n}\n```\n\n对于刚刚上面的那个数组就可以这样初始化了：\n\n```Swift\nlet sequencibleStore: [_AnySequence<String>] = [_AnySequence(Persion.author), _AnySequence(Demo())]\n```\n\n这里的 _AnySequence 就将具体的 Sequence 类型隐藏了，调用者只知道数组中的元素是一个可以迭代输出字符串类型的序列。\n\n现在我们可以一步步来实现上面的 \\_AnyIterator 和 \\_AnySequence。_AnyIterator 的实现跟上面提到的 _AnySequence 的思路一致。我们不直接存储迭代器，而是让封装类存储迭代器的 next 函数。要做到这一点，我们必须首先将 iterator 参数复制到一个变量中，这样我们就可以调用它的 next 方法了。下面是具体实现：\n\n```Swift\nstruct _AnyIterator<Element> {\n    var nextImpl: () -> Element?\n}\n\nextension _AnyIterator: IteratorProtocol {\n    init<I>(_ iterator: I) where Element == I.Element, I: IteratorProtocol {\n        var mutatedIterator = iterator\n        nextImpl = { mutatedIterator.next() }\n    }\n    \n    mutating func next() -> Element? {\n        return nextImpl()\n    }\n}\n```\n\n现在，在 \\_AnyIterator 中，迭代器的具体类型（比如上面用到的\\_Iterator）只有在创建实例的时候被指定。在那之后具体的类型就被隐藏了起来。我们可以使用任意类型的迭代器来创建 \\_AnyIterator 实例：\n\n```swift\nvar iterator = _AnyIterator(_Iterator(obj: Persion.author))\nwhile let item = iterator.next() {\n    print(item)\n}\n// out put:\n// name is jewelz\n// age is 23\n// email is hujewelz@gmail.com\n```\n\n我们希望外面传入一个闭包也能创建一个 _AnyIterator，现在我们添加下面的代码：\n\n```swift\n init(_ impl: @escaping () -> Element?) {\n     nextImpl = impl\n }\n```\n\n添加这个初始化方法其实为了方便后面实现  \\_AnySequence 用的。上面说过 \\_AnySequence 有个属性存储了迭代器的实现，所以我们的 _AnyIterator 能通过一个闭包来初始化。\n\n_AnyIterator 实现完后就可以来实现我们的 \\_AnySequence 了。我这里直接给出代码，同学们可以自己去实现：\n\n```swift\nstruct _AnySequence<Element> {\n\n    typealias Iterator = _AnyIterator<Element>\n    \n    private var iteratorImpl: () -> Element?\n}\n\nextension _AnySequence: Sequence {\n    init<S>(_ base: S) where Element == S.Iterator.Element, S: Sequence {\n        var iterator = base.makeIterator()\n        iteratorImpl = {\n            iterator.next()\n        }\n    }\n    \n    func makeIterator() -> _AnyIterator<Element> {\n        return _AnyIterator(iteratorImpl)\n    }\n}\n```\n\n \\_AnySequence 的指定构造器也被定义为泛型，接受一个遵循 Sequence 协议的任何序列作为参数，并且规定了这个序列的迭代器的 next() 的返回类型要跟我们定义的这个泛型结构的 Element 类型要一致。这里的这个泛型约束其实就是我们实现类型擦除的魔法所在了。它将具体的序列的类型隐藏了起来，只要序列中的值都是相同的类型就可以当做同一种类型来使用。就像下面的例子中的 array 就可以描述为 \"元素类型是 String 的任意序列的集合\"。\n\n```swift\nlet array = [_AnySequence(Persion.author), _AnySequence(Demo())]\n\nfor obj in array {\n    print(\"+-------------------------+\")\n    for item in obj {\n        print(item)\n    }\n}\n// out put:\n// name is jewelz\n//  age is 23\n// email is hujewelz@gmail.com\n// +-------------------------+\n// name is Sequence\n// author is Persion(name: \"jewelz\", age: 23, email: \"hujewelz@gmail.com\")\n```\n\n得益于 Swift 的类型推断，这里的 array 可以不用显式地指明其类型，点击 option 键，你会发现它是 `[_AnySequence<String>]` 类型。也就是说只有其元素是 String 的任意序列都可以作为数组的元素。这就跟我们平时使用类似 \"一个 Int 类型的数组\" 的语义是一致的了。如果要向数组中插入一个新元素，可以这样创建一个序列：\n\n```swift\nlet s = _AnySequence { () -> _AnyIterator<String> in\n    return _AnyIterator { () -> String? in\n        return arc4random() % 10 == 5 ? nil : String(Int(arc4random() % 10))\n    }\n}\narray.append(s)\n```\n\n上面的代码中通过一个闭包初始化了一个 _AnySequence，这里我就不给出自己的实现，同学们可以自己动手实现一下。\n\n\n## 写在最后\n\n在标准库中，其实已经提供了 **AnyIterator** 和 **AnySequence**。我还没去看标准库的实现，有兴趣的同学可以点击[这里](https://github.com/apple/swift/tree/master/stdlib/public/core)查看。 我这里实现了自己的 \\_AnyIterator 和 \\_AnySequence 就是为了提供一种实现类型擦除的思路。如果你在项目中频繁地使用带有关联类型或 Self 的协议，那么你也一定会遇到跟我一样的问题。这时候实现一个类型擦除的封装，将具体的类型隐藏了起来，你就不用为 Xcode 的报错而抓狂了。\n\n","source":"_posts/Swift-中的-Sequence-协议.md","raw":"---\ntitle: 从 Swift 中的序列到类型擦除\ndate: 2018-01-06 11:52:43\ntags: Swift\ncategories: Swift\ncoverImage: Swift_logo.png\n---\n\n如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。\n\n<!-- excerpt -->\n\n如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。就像下面这样：\n\n```Swift\nlet persion = Persion()\n\nfor i in persion {\n    print(i)\n}\n```\n\n要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。\n\n\n\n## 序列\n\nSequence 协议是集合类型结构中的基础。一个序列 (sequence) 代表的是一系列具有相同类型的值，你可以对这些值进行迭代。Sequence 协议提供了许多强大的功能，满足该协议的类型都可以直接使用这些功能。上面这样步进式的迭代元素的能力看起来十分简单，但它却是 Sequence 可以提供这些强大功能的基础。\n\n\n\n满足 Sequence 协议的要求十分简单，你需要做的所有事情就是提供一个返回迭代器 (iterator) 的 `makeIterator() ` 方法：\n\n```Swift\npublic protocol Sequence {\n    associatedtype Iterator : IteratorProtocol\n    \n    public func makeIterator() -> Self.Iterator\n    \n    // ...\n}\n```\n\n在 Sequence 协议有个关联类型 Iterator，而且它必须遵守 IteratorProtocol 协议。从这里我们可以看出 Sequence 是一个可以创建迭代器协议的类型。所以在搞清楚它的步进式的迭代元素能力之前，有必要了解一下迭代器是什么。\n\n\n## 迭代器\n\n序列通过创建一个迭代器来提供对元素的访问。迭代器每次产生一个序列的值，并且当遍历序列时对遍历状态进行管理。在 IteratorProtocol 协议中唯一的一个方法是 next()，这个方法需要在每次被调用时返回序列中的下一个值。当序列被耗尽时，next() 应该返回 nil，不然迭代器就会一直工作下去，直到资源被耗尽为止。\n\nIteratorProtocol 的定义非常简单：\n\n```Swift\npublic protocol IteratorProtocol {\n    associatedtype Element\n    \n    public mutating func next() -> Self.Element?\n}\n```\n\n关联类型 Element 指定了迭代器产生的值的类型。这里`next()` 被标记了 mutating，表明了迭代器是可以存在可变的状态的。这里的 mutating 也不是必须的，如果你的迭代器返回的值并没有改变迭代器本身，那么没有 mutating 也是没有任何问题的。 不过几乎所有有意义的迭代器都会要求可变状态，这样它们才能够管理在序列中的当前位置。\n\n对 Sequence 和 IteratorProtocol 有了基础了解后，要实现开头提到的需求就很简单了。比如我想迭代输出一个 Person 实例的所有属性，我们可以这样做：\n\n```Swift\nstruct Persion: Sequence {\n    var name: String\n    var age: Int\n    var email: String\n    \n    func makeIterator() -> MyIterator {\n        return MyIterator(obj: self)\n    }\n}\n```\n\nPersion 遵守了 Sequence 协议，并返回了一个自定义的迭代器。迭代器的实现也很简单：\n\n```Swift\nstruct MyIterator: IteratorProtocol {\n    var children: Mirror.Children\n    \n    init(obj: Persion) {\n        children = Mirror(reflecting: obj).children\n    }\n   \n    mutating func next() -> String? {\n        guard let child = children.popFirst() else { return nil }\n        return \"\\(child.label.wrapped) is \\(child.value)\"\n    }\n}\n```\n\n迭代器中的 `children` 是 `AnyCollection<Mirror.Child>`  的集合类型，每次迭代返回一个值后，更新 `children` 这个状态，这样我们的迭代器就可以持续的输出正确的值了，直到输出完 `children` 中的所有值。\n\n现在可以使用 for 循环输出 Persion 中所有的属性值了：\n\n```Swift\nfor item in Persion.author {\n    print(item)\n}\n\n// out put:\n// name is jewelz\n// age is 23\n// email is hujewelz@gmail.com\n```\n\n如果现在有另外一个结构体或类也需要迭代输出所以属性呢？，这很好办，让我们的结构体遵守 Sequence 协议，并返回一个我们自定义的迭代器就可以了。这种拷贝代码的方式确实能满足需求，但是如果我们利用协议拓展就能写出更易于维护的代码，类似下面这样：\n\n```swift\nstruct _Iterator: IteratorProtocol {\n    var children: Mirror.Children\n    \n    init(obj: Any) {\n        children = Mirror(reflecting: obj).children\n    }\n    \n    mutating func next() -> String? {\n        guard let child = children.popFirst() else { return nil }\n        return \"\\(child.label.wrapped) is \\(child.value)\"\n    }\n}\n\nprotocol Sequencible: Sequence { }\n\nextension Sequencible {\n    func makeIterator() -> _Iterator {\n        return _Iterator(obj: self)\n    }\n}\n```\n\n这里我定义了一个继承 Sequence 的空协议，是为了不影响 Sequence 的默认行为。现在只要我们自定义的类或结构体遵守 Sequencible 就能使用 for 循环输出其所有属性值了。就像下面这样：\n\n```swift\nstruct Demo: Sequencible {\n    var name = \"Sequence\"\n    var author = Persion.author\n}\n```\n\n\n## 表示相同序列的类型 \n\n现在需求又变了，我想将所有遵守了 Sequencible 协议的任何序列存到一个数组中，然后 for 循环遍历数组中的元素，因为数组中的元素都遵守了 Sequencible 协议，所以又可以使用 for 循环输出其所有属性，就像下面这样：\n\n```Swift\nfor obj in array {\n    for item in obj {\n        print(item)\n    }\n}\n```\n\n那么这里的 array 应该定义成什么类型呢？定义成 [Any] 类型肯定是不行的，这样的话在循环中得将 item 强转为 Sequencible，那么是否可以定义成  [Sequencible] 类型呢？答案是否定的。当这样定义时编辑器会报出这样的错误：\n\n{% alert danger %}\n\nProtocol 'Sequencible' can only be used as a generic constraint because it has Self or associated type requirements\n\n{% endalert %}\n\n熟悉 Swift 协议的同学应该对这个报错比较熟了。就是说含有 Self 或者关联类型的协议，只能被当作泛型约束使用。所以像下面这样定义我们的 array 是行不通的。\n\n```Swift\nlet sequencibleStore: [Sequencible] = [Persion.author, Demo()]\n```\n\n如果有这样一个类型，可以隐藏 Sequencible 这个具体的类型不就解决这个问题了吗？这种将指定类型移除的过程，就被称为类型擦除。\n\n\n## 类型擦除\n\n回想一下  Sequence 协议的内容，我们只要通过 `makeIterator()` 返回一个迭代器就可以了。那么我们可以实现一个封装类(结构体也是一样的)，里面用一个属性存储了迭代器的实现，然后在 `makeIterator()` 方法中通过存储的这个属性构造一个迭代器。类似这样：\n\n```Swift\nfunc makeIterator() -> _AnyIterator<Element> {\n    return _AnyIterator(iteratorImpl)\n}\n```\n\n我们的这个封装可以这样定义：\n\n```Swift\nstruct _AnySequence<Element>: Sequence {\n    private var iteratorImpl: () -> Element?\n}\n```\n\n对于刚刚上面的那个数组就可以这样初始化了：\n\n```Swift\nlet sequencibleStore: [_AnySequence<String>] = [_AnySequence(Persion.author), _AnySequence(Demo())]\n```\n\n这里的 _AnySequence 就将具体的 Sequence 类型隐藏了，调用者只知道数组中的元素是一个可以迭代输出字符串类型的序列。\n\n现在我们可以一步步来实现上面的 \\_AnyIterator 和 \\_AnySequence。_AnyIterator 的实现跟上面提到的 _AnySequence 的思路一致。我们不直接存储迭代器，而是让封装类存储迭代器的 next 函数。要做到这一点，我们必须首先将 iterator 参数复制到一个变量中，这样我们就可以调用它的 next 方法了。下面是具体实现：\n\n```Swift\nstruct _AnyIterator<Element> {\n    var nextImpl: () -> Element?\n}\n\nextension _AnyIterator: IteratorProtocol {\n    init<I>(_ iterator: I) where Element == I.Element, I: IteratorProtocol {\n        var mutatedIterator = iterator\n        nextImpl = { mutatedIterator.next() }\n    }\n    \n    mutating func next() -> Element? {\n        return nextImpl()\n    }\n}\n```\n\n现在，在 \\_AnyIterator 中，迭代器的具体类型（比如上面用到的\\_Iterator）只有在创建实例的时候被指定。在那之后具体的类型就被隐藏了起来。我们可以使用任意类型的迭代器来创建 \\_AnyIterator 实例：\n\n```swift\nvar iterator = _AnyIterator(_Iterator(obj: Persion.author))\nwhile let item = iterator.next() {\n    print(item)\n}\n// out put:\n// name is jewelz\n// age is 23\n// email is hujewelz@gmail.com\n```\n\n我们希望外面传入一个闭包也能创建一个 _AnyIterator，现在我们添加下面的代码：\n\n```swift\n init(_ impl: @escaping () -> Element?) {\n     nextImpl = impl\n }\n```\n\n添加这个初始化方法其实为了方便后面实现  \\_AnySequence 用的。上面说过 \\_AnySequence 有个属性存储了迭代器的实现，所以我们的 _AnyIterator 能通过一个闭包来初始化。\n\n_AnyIterator 实现完后就可以来实现我们的 \\_AnySequence 了。我这里直接给出代码，同学们可以自己去实现：\n\n```swift\nstruct _AnySequence<Element> {\n\n    typealias Iterator = _AnyIterator<Element>\n    \n    private var iteratorImpl: () -> Element?\n}\n\nextension _AnySequence: Sequence {\n    init<S>(_ base: S) where Element == S.Iterator.Element, S: Sequence {\n        var iterator = base.makeIterator()\n        iteratorImpl = {\n            iterator.next()\n        }\n    }\n    \n    func makeIterator() -> _AnyIterator<Element> {\n        return _AnyIterator(iteratorImpl)\n    }\n}\n```\n\n \\_AnySequence 的指定构造器也被定义为泛型，接受一个遵循 Sequence 协议的任何序列作为参数，并且规定了这个序列的迭代器的 next() 的返回类型要跟我们定义的这个泛型结构的 Element 类型要一致。这里的这个泛型约束其实就是我们实现类型擦除的魔法所在了。它将具体的序列的类型隐藏了起来，只要序列中的值都是相同的类型就可以当做同一种类型来使用。就像下面的例子中的 array 就可以描述为 \"元素类型是 String 的任意序列的集合\"。\n\n```swift\nlet array = [_AnySequence(Persion.author), _AnySequence(Demo())]\n\nfor obj in array {\n    print(\"+-------------------------+\")\n    for item in obj {\n        print(item)\n    }\n}\n// out put:\n// name is jewelz\n//  age is 23\n// email is hujewelz@gmail.com\n// +-------------------------+\n// name is Sequence\n// author is Persion(name: \"jewelz\", age: 23, email: \"hujewelz@gmail.com\")\n```\n\n得益于 Swift 的类型推断，这里的 array 可以不用显式地指明其类型，点击 option 键，你会发现它是 `[_AnySequence<String>]` 类型。也就是说只有其元素是 String 的任意序列都可以作为数组的元素。这就跟我们平时使用类似 \"一个 Int 类型的数组\" 的语义是一致的了。如果要向数组中插入一个新元素，可以这样创建一个序列：\n\n```swift\nlet s = _AnySequence { () -> _AnyIterator<String> in\n    return _AnyIterator { () -> String? in\n        return arc4random() % 10 == 5 ? nil : String(Int(arc4random() % 10))\n    }\n}\narray.append(s)\n```\n\n上面的代码中通过一个闭包初始化了一个 _AnySequence，这里我就不给出自己的实现，同学们可以自己动手实现一下。\n\n\n## 写在最后\n\n在标准库中，其实已经提供了 **AnyIterator** 和 **AnySequence**。我还没去看标准库的实现，有兴趣的同学可以点击[这里](https://github.com/apple/swift/tree/master/stdlib/public/core)查看。 我这里实现了自己的 \\_AnyIterator 和 \\_AnySequence 就是为了提供一种实现类型擦除的思路。如果你在项目中频繁地使用带有关联类型或 Self 的协议，那么你也一定会遇到跟我一样的问题。这时候实现一个类型擦除的封装，将具体的类型隐藏了起来，你就不用为 Xcode 的报错而抓狂了。\n\n","slug":"Swift-中的-Sequence-协议","published":1,"updated":"2018-07-08T01:59:53.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zijn00061u0odvag9i3v","content":"<!-- excerpt -->\n<p>如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> persion = <span class=\"type\">Persion</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> persion &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。</p>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h2><p>Sequence 协议是集合类型结构中的基础。一个序列 (sequence) 代表的是一系列具有相同类型的值，你可以对这些值进行迭代。Sequence 协议提供了许多强大的功能，满足该协议的类型都可以直接使用这些功能。上面这样步进式的迭代元素的能力看起来十分简单，但它却是 Sequence 可以提供这些强大功能的基础。</p>\n<p>满足 Sequence 协议的要求十分简单，你需要做的所有事情就是提供一个返回迭代器 (iterator) 的 <code>makeIterator()</code> 方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    associatedtype <span class=\"type\">Iterator</span> : <span class=\"type\">IteratorProtocol</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span>.<span class=\"type\">Iterator</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Sequence 协议有个关联类型 Iterator，而且它必须遵守 IteratorProtocol 协议。从这里我们可以看出 Sequence 是一个可以创建迭代器协议的类型。所以在搞清楚它的步进式的迭代元素能力之前，有必要了解一下迭代器是什么。</p>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>序列通过创建一个迭代器来提供对元素的访问。迭代器每次产生一个序列的值，并且当遍历序列时对遍历状态进行管理。在 IteratorProtocol 协议中唯一的一个方法是 next()，这个方法需要在每次被调用时返回序列中的下一个值。当序列被耗尽时，next() 应该返回 nil，不然迭代器就会一直工作下去，直到资源被耗尽为止。</p>\n<p>IteratorProtocol 的定义非常简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    associatedtype <span class=\"type\">Element</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span>.<span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关联类型 Element 指定了迭代器产生的值的类型。这里<code>next()</code> 被标记了 mutating，表明了迭代器是可以存在可变的状态的。这里的 mutating 也不是必须的，如果你的迭代器返回的值并没有改变迭代器本身，那么没有 mutating 也是没有任何问题的。 不过几乎所有有意义的迭代器都会要求可变状态，这样它们才能够管理在序列中的当前位置。</p>\n<p>对 Sequence 和 IteratorProtocol 有了基础了解后，要实现开头提到的需求就很简单了。比如我想迭代输出一个 Person 实例的所有属性，我们可以这样做：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Persion</span>: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> email: <span class=\"type\">String</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">MyIterator</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">MyIterator</span>(obj: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Persion 遵守了 Sequence 协议，并返回了一个自定义的迭代器。迭代器的实现也很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyIterator</span>: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children: <span class=\"type\">Mirror</span>.<span class=\"type\">Children</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(obj: <span class=\"type\">Persion</span>) &#123;</span><br><span class=\"line\">        children = <span class=\"type\">Mirror</span>(reflecting: obj).children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> child = children.popFirst() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"subst\">\\(child.label.wrapped)</span> is <span class=\"subst\">\\(child.value)</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迭代器中的 <code>children</code> 是 <code>AnyCollection&lt;Mirror.Child&gt;</code>  的集合类型，每次迭代返回一个值后，更新 <code>children</code> 这个状态，这样我们的迭代器就可以持续的输出正确的值了，直到输出完 <code>children</code> 中的所有值。</p>\n<p>现在可以使用 for 循环输出 Persion 中所有的属性值了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"type\">Persion</span>.author &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// out put:</span></span><br><span class=\"line\"><span class=\"comment\">// name is jewelz</span></span><br><span class=\"line\"><span class=\"comment\">// age is 23</span></span><br><span class=\"line\"><span class=\"comment\">// email is hujewelz@gmail.com</span></span><br></pre></td></tr></table></figure>\n<p>如果现在有另外一个结构体或类也需要迭代输出所以属性呢？，这很好办，让我们的结构体遵守 Sequence 协议，并返回一个我们自定义的迭代器就可以了。这种拷贝代码的方式确实能满足需求，但是如果我们利用协议拓展就能写出更易于维护的代码，类似下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _Iterator: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children: <span class=\"type\">Mirror</span>.<span class=\"type\">Children</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(obj: <span class=\"type\">Any</span>) &#123;</span><br><span class=\"line\">        children = <span class=\"type\">Mirror</span>(reflecting: obj).children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> child = children.popFirst() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"subst\">\\(child.label.wrapped)</span> is <span class=\"subst\">\\(child.value)</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Sequencible</span>: <span class=\"title\">Sequence</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Sequencible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; _Iterator &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _Iterator(obj: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我定义了一个继承 Sequence 的空协议，是为了不影响 Sequence 的默认行为。现在只要我们自定义的类或结构体遵守 Sequencible 就能使用 for 循环输出其所有属性值了。就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Demo</span>: <span class=\"title\">Sequencible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Sequence\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> author = <span class=\"type\">Persion</span>.author</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表示相同序列的类型\"><a href=\"#表示相同序列的类型\" class=\"headerlink\" title=\"表示相同序列的类型\"></a>表示相同序列的类型</h2><p>现在需求又变了，我想将所有遵守了 Sequencible 协议的任何序列存到一个数组中，然后 for 循环遍历数组中的元素，因为数组中的元素都遵守了 Sequencible 协议，所以又可以使用 for 循环输出其所有属性，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> array &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么这里的 array 应该定义成什么类型呢？定义成 [Any] 类型肯定是不行的，这样的话在循环中得将 item 强转为 Sequencible，那么是否可以定义成  [Sequencible] 类型呢？答案是否定的。当这样定义时编辑器会报出这样的错误：</p>\n<div class=\"alert danger\"><p>Protocol ‘Sequencible’ can only be used as a generic constraint because it has Self or associated type requirements</p>\n</div>\n<p>熟悉 Swift 协议的同学应该对这个报错比较熟了。就是说含有 Self 或者关联类型的协议，只能被当作泛型约束使用。所以像下面这样定义我们的 array 是行不通的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sequencibleStore: [<span class=\"type\">Sequencible</span>] = [<span class=\"type\">Persion</span>.author, <span class=\"type\">Demo</span>()]</span><br></pre></td></tr></table></figure>\n<p>如果有这样一个类型，可以隐藏 Sequencible 这个具体的类型不就解决这个问题了吗？这种将指定类型移除的过程，就被称为类型擦除。</p>\n<h2 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h2><p>回想一下  Sequence 协议的内容，我们只要通过 <code>makeIterator()</code> 返回一个迭代器就可以了。那么我们可以实现一个封装类(结构体也是一样的)，里面用一个属性存储了迭代器的实现，然后在 <code>makeIterator()</code> 方法中通过存储的这个属性构造一个迭代器。类似这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; _AnyIterator&lt;<span class=\"type\">Element</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _AnyIterator(iteratorImpl)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的这个封装可以这样定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _AnySequence&lt;<span class=\"title\">Element</span>&gt;: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> iteratorImpl: () -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于刚刚上面的那个数组就可以这样初始化了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sequencibleStore: [_AnySequence&lt;<span class=\"type\">String</span>&gt;] = [_AnySequence(<span class=\"type\">Persion</span>.author), _AnySequence(<span class=\"type\">Demo</span>())]</span><br></pre></td></tr></table></figure>\n<p>这里的 _AnySequence 就将具体的 Sequence 类型隐藏了，调用者只知道数组中的元素是一个可以迭代输出字符串类型的序列。</p>\n<p>现在我们可以一步步来实现上面的 _AnyIterator 和 _AnySequence。_AnyIterator 的实现跟上面提到的 _AnySequence 的思路一致。我们不直接存储迭代器，而是让封装类存储迭代器的 next 函数。要做到这一点，我们必须首先将 iterator 参数复制到一个变量中，这样我们就可以调用它的 next 方法了。下面是具体实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _AnyIterator&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextImpl: () -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> _AnyIterator: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span>&gt;(<span class=\"number\">_</span> iterator: <span class=\"type\">I</span>) <span class=\"keyword\">where</span> <span class=\"type\">Element</span> == <span class=\"type\">I</span>.<span class=\"type\">Element</span>, <span class=\"type\">I</span>: <span class=\"type\">IteratorProtocol</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mutatedIterator = iterator</span><br><span class=\"line\">        nextImpl = &#123; mutatedIterator.next() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextImpl()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，在 _AnyIterator 中，迭代器的具体类型（比如上面用到的_Iterator）只有在创建实例的时候被指定。在那之后具体的类型就被隐藏了起来。我们可以使用任意类型的迭代器来创建 _AnyIterator 实例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iterator = _AnyIterator(_Iterator(obj: <span class=\"type\">Persion</span>.author))</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">let</span> item = iterator.next() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// out put:</span></span><br><span class=\"line\"><span class=\"comment\">// name is jewelz</span></span><br><span class=\"line\"><span class=\"comment\">// age is 23</span></span><br><span class=\"line\"><span class=\"comment\">// email is hujewelz@gmail.com</span></span><br></pre></td></tr></table></figure>\n<p>我们希望外面传入一个闭包也能创建一个 _AnyIterator，现在我们添加下面的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>(<span class=\"number\">_</span> impl: @escaping () -&gt; <span class=\"type\">Element</span>?) &#123;</span><br><span class=\"line\">    nextImpl = impl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加这个初始化方法其实为了方便后面实现  _AnySequence 用的。上面说过 _AnySequence 有个属性存储了迭代器的实现，所以我们的 _AnyIterator 能通过一个闭包来初始化。</p>\n<p>_AnyIterator 实现完后就可以来实现我们的 _AnySequence 了。我这里直接给出代码，同学们可以自己去实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _AnySequence&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Iterator</span> = _AnyIterator&lt;<span class=\"type\">Element</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> iteratorImpl: () -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> _AnySequence: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"number\">_</span> base: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">Element</span> == <span class=\"type\">S</span>.<span class=\"type\">Iterator</span>.<span class=\"type\">Element</span>, <span class=\"type\">S</span>: <span class=\"type\">Sequence</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> iterator = base.makeIterator()</span><br><span class=\"line\">        iteratorImpl = &#123;</span><br><span class=\"line\">            iterator.next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; _AnyIterator&lt;<span class=\"type\">Element</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _AnyIterator(iteratorImpl)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> _AnySequence 的指定构造器也被定义为泛型，接受一个遵循 Sequence 协议的任何序列作为参数，并且规定了这个序列的迭代器的 next() 的返回类型要跟我们定义的这个泛型结构的 Element 类型要一致。这里的这个泛型约束其实就是我们实现类型擦除的魔法所在了。它将具体的序列的类型隐藏了起来，只要序列中的值都是相同的类型就可以当做同一种类型来使用。就像下面的例子中的 array 就可以描述为 “元素类型是 String 的任意序列的集合”。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [_AnySequence(<span class=\"type\">Persion</span>.author), _AnySequence(<span class=\"type\">Demo</span>())]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> array &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"+-------------------------+\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// out put:</span></span><br><span class=\"line\"><span class=\"comment\">// name is jewelz</span></span><br><span class=\"line\"><span class=\"comment\">//  age is 23</span></span><br><span class=\"line\"><span class=\"comment\">// email is hujewelz@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\">// +-------------------------+</span></span><br><span class=\"line\"><span class=\"comment\">// name is Sequence</span></span><br><span class=\"line\"><span class=\"comment\">// author is Persion(name: \"jewelz\", age: 23, email: \"hujewelz@gmail.com\")</span></span><br></pre></td></tr></table></figure>\n<p>得益于 Swift 的类型推断，这里的 array 可以不用显式地指明其类型，点击 option 键，你会发现它是 <code>[_AnySequence&lt;String&gt;]</code> 类型。也就是说只有其元素是 String 的任意序列都可以作为数组的元素。这就跟我们平时使用类似 “一个 Int 类型的数组” 的语义是一致的了。如果要向数组中插入一个新元素，可以这样创建一个序列：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = _AnySequence &#123; () -&gt; _AnyIterator&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _AnyIterator &#123; () -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arc4random() % <span class=\"number\">10</span> == <span class=\"number\">5</span> ? <span class=\"literal\">nil</span> : <span class=\"type\">String</span>(<span class=\"type\">Int</span>(arc4random() % <span class=\"number\">10</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">array.append(s)</span><br></pre></td></tr></table></figure>\n<p>上面的代码中通过一个闭包初始化了一个 _AnySequence，这里我就不给出自己的实现，同学们可以自己动手实现一下。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>在标准库中，其实已经提供了 <strong>AnyIterator</strong> 和 <strong>AnySequence</strong>。我还没去看标准库的实现，有兴趣的同学可以点击<a href=\"https://github.com/apple/swift/tree/master/stdlib/public/core\" target=\"_blank\" rel=\"noopener\">这里</a>查看。 我这里实现了自己的 _AnyIterator 和 _AnySequence 就是为了提供一种实现类型擦除的思路。如果你在项目中频繁地使用带有关联类型或 Self 的协议，那么你也一定会遇到跟我一样的问题。这时候实现一个类型擦除的封装，将具体的类型隐藏了起来，你就不用为 Xcode 的报错而抓狂了。</p>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。</p>","more":"<p>如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。</p>\n<!-- excerpt -->\n<p>如果有这样的一个需求，我希望能像数组一样，用 for 循环遍历一个类或结构体中的所有属性。就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> persion = <span class=\"type\">Persion</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> persion &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要实现这样的需求，我们需要让自定义的类型遵守 Sequence 协议。</p>\n<h2 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h2><p>Sequence 协议是集合类型结构中的基础。一个序列 (sequence) 代表的是一系列具有相同类型的值，你可以对这些值进行迭代。Sequence 协议提供了许多强大的功能，满足该协议的类型都可以直接使用这些功能。上面这样步进式的迭代元素的能力看起来十分简单，但它却是 Sequence 可以提供这些强大功能的基础。</p>\n<p>满足 Sequence 协议的要求十分简单，你需要做的所有事情就是提供一个返回迭代器 (iterator) 的 <code>makeIterator()</code> 方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    associatedtype <span class=\"type\">Iterator</span> : <span class=\"type\">IteratorProtocol</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span>.<span class=\"type\">Iterator</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Sequence 协议有个关联类型 Iterator，而且它必须遵守 IteratorProtocol 协议。从这里我们可以看出 Sequence 是一个可以创建迭代器协议的类型。所以在搞清楚它的步进式的迭代元素能力之前，有必要了解一下迭代器是什么。</p>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>序列通过创建一个迭代器来提供对元素的访问。迭代器每次产生一个序列的值，并且当遍历序列时对遍历状态进行管理。在 IteratorProtocol 协议中唯一的一个方法是 next()，这个方法需要在每次被调用时返回序列中的下一个值。当序列被耗尽时，next() 应该返回 nil，不然迭代器就会一直工作下去，直到资源被耗尽为止。</p>\n<p>IteratorProtocol 的定义非常简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    associatedtype <span class=\"type\">Element</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span>.<span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关联类型 Element 指定了迭代器产生的值的类型。这里<code>next()</code> 被标记了 mutating，表明了迭代器是可以存在可变的状态的。这里的 mutating 也不是必须的，如果你的迭代器返回的值并没有改变迭代器本身，那么没有 mutating 也是没有任何问题的。 不过几乎所有有意义的迭代器都会要求可变状态，这样它们才能够管理在序列中的当前位置。</p>\n<p>对 Sequence 和 IteratorProtocol 有了基础了解后，要实现开头提到的需求就很简单了。比如我想迭代输出一个 Person 实例的所有属性，我们可以这样做：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Persion</span>: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> email: <span class=\"type\">String</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">MyIterator</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">MyIterator</span>(obj: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Persion 遵守了 Sequence 协议，并返回了一个自定义的迭代器。迭代器的实现也很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyIterator</span>: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children: <span class=\"type\">Mirror</span>.<span class=\"type\">Children</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(obj: <span class=\"type\">Persion</span>) &#123;</span><br><span class=\"line\">        children = <span class=\"type\">Mirror</span>(reflecting: obj).children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> child = children.popFirst() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"subst\">\\(child.label.wrapped)</span> is <span class=\"subst\">\\(child.value)</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迭代器中的 <code>children</code> 是 <code>AnyCollection&lt;Mirror.Child&gt;</code>  的集合类型，每次迭代返回一个值后，更新 <code>children</code> 这个状态，这样我们的迭代器就可以持续的输出正确的值了，直到输出完 <code>children</code> 中的所有值。</p>\n<p>现在可以使用 for 循环输出 Persion 中所有的属性值了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"type\">Persion</span>.author &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// out put:</span></span><br><span class=\"line\"><span class=\"comment\">// name is jewelz</span></span><br><span class=\"line\"><span class=\"comment\">// age is 23</span></span><br><span class=\"line\"><span class=\"comment\">// email is hujewelz@gmail.com</span></span><br></pre></td></tr></table></figure>\n<p>如果现在有另外一个结构体或类也需要迭代输出所以属性呢？，这很好办，让我们的结构体遵守 Sequence 协议，并返回一个我们自定义的迭代器就可以了。这种拷贝代码的方式确实能满足需求，但是如果我们利用协议拓展就能写出更易于维护的代码，类似下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _Iterator: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children: <span class=\"type\">Mirror</span>.<span class=\"type\">Children</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(obj: <span class=\"type\">Any</span>) &#123;</span><br><span class=\"line\">        children = <span class=\"type\">Mirror</span>(reflecting: obj).children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> child = children.popFirst() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"<span class=\"subst\">\\(child.label.wrapped)</span> is <span class=\"subst\">\\(child.value)</span>\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Sequencible</span>: <span class=\"title\">Sequence</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Sequencible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; _Iterator &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _Iterator(obj: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我定义了一个继承 Sequence 的空协议，是为了不影响 Sequence 的默认行为。现在只要我们自定义的类或结构体遵守 Sequencible 就能使用 for 循环输出其所有属性值了。就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Demo</span>: <span class=\"title\">Sequencible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Sequence\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> author = <span class=\"type\">Persion</span>.author</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表示相同序列的类型\"><a href=\"#表示相同序列的类型\" class=\"headerlink\" title=\"表示相同序列的类型\"></a>表示相同序列的类型</h2><p>现在需求又变了，我想将所有遵守了 Sequencible 协议的任何序列存到一个数组中，然后 for 循环遍历数组中的元素，因为数组中的元素都遵守了 Sequencible 协议，所以又可以使用 for 循环输出其所有属性，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> array &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么这里的 array 应该定义成什么类型呢？定义成 [Any] 类型肯定是不行的，这样的话在循环中得将 item 强转为 Sequencible，那么是否可以定义成  [Sequencible] 类型呢？答案是否定的。当这样定义时编辑器会报出这样的错误：</p>\n<div class=\"alert danger\"><p>Protocol ‘Sequencible’ can only be used as a generic constraint because it has Self or associated type requirements</p>\n</div>\n<p>熟悉 Swift 协议的同学应该对这个报错比较熟了。就是说含有 Self 或者关联类型的协议，只能被当作泛型约束使用。所以像下面这样定义我们的 array 是行不通的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sequencibleStore: [<span class=\"type\">Sequencible</span>] = [<span class=\"type\">Persion</span>.author, <span class=\"type\">Demo</span>()]</span><br></pre></td></tr></table></figure>\n<p>如果有这样一个类型，可以隐藏 Sequencible 这个具体的类型不就解决这个问题了吗？这种将指定类型移除的过程，就被称为类型擦除。</p>\n<h2 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h2><p>回想一下  Sequence 协议的内容，我们只要通过 <code>makeIterator()</code> 返回一个迭代器就可以了。那么我们可以实现一个封装类(结构体也是一样的)，里面用一个属性存储了迭代器的实现，然后在 <code>makeIterator()</code> 方法中通过存储的这个属性构造一个迭代器。类似这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; _AnyIterator&lt;<span class=\"type\">Element</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _AnyIterator(iteratorImpl)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们的这个封装可以这样定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _AnySequence&lt;<span class=\"title\">Element</span>&gt;: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> iteratorImpl: () -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于刚刚上面的那个数组就可以这样初始化了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sequencibleStore: [_AnySequence&lt;<span class=\"type\">String</span>&gt;] = [_AnySequence(<span class=\"type\">Persion</span>.author), _AnySequence(<span class=\"type\">Demo</span>())]</span><br></pre></td></tr></table></figure>\n<p>这里的 _AnySequence 就将具体的 Sequence 类型隐藏了，调用者只知道数组中的元素是一个可以迭代输出字符串类型的序列。</p>\n<p>现在我们可以一步步来实现上面的 _AnyIterator 和 _AnySequence。_AnyIterator 的实现跟上面提到的 _AnySequence 的思路一致。我们不直接存储迭代器，而是让封装类存储迭代器的 next 函数。要做到这一点，我们必须首先将 iterator 参数复制到一个变量中，这样我们就可以调用它的 next 方法了。下面是具体实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _AnyIterator&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextImpl: () -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> _AnyIterator: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span>&gt;(<span class=\"number\">_</span> iterator: <span class=\"type\">I</span>) <span class=\"keyword\">where</span> <span class=\"type\">Element</span> == <span class=\"type\">I</span>.<span class=\"type\">Element</span>, <span class=\"type\">I</span>: <span class=\"type\">IteratorProtocol</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mutatedIterator = iterator</span><br><span class=\"line\">        nextImpl = &#123; mutatedIterator.next() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextImpl()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，在 _AnyIterator 中，迭代器的具体类型（比如上面用到的_Iterator）只有在创建实例的时候被指定。在那之后具体的类型就被隐藏了起来。我们可以使用任意类型的迭代器来创建 _AnyIterator 实例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iterator = _AnyIterator(_Iterator(obj: <span class=\"type\">Persion</span>.author))</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">let</span> item = iterator.next() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// out put:</span></span><br><span class=\"line\"><span class=\"comment\">// name is jewelz</span></span><br><span class=\"line\"><span class=\"comment\">// age is 23</span></span><br><span class=\"line\"><span class=\"comment\">// email is hujewelz@gmail.com</span></span><br></pre></td></tr></table></figure>\n<p>我们希望外面传入一个闭包也能创建一个 _AnyIterator，现在我们添加下面的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>(<span class=\"number\">_</span> impl: @escaping () -&gt; <span class=\"type\">Element</span>?) &#123;</span><br><span class=\"line\">    nextImpl = impl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加这个初始化方法其实为了方便后面实现  _AnySequence 用的。上面说过 _AnySequence 有个属性存储了迭代器的实现，所以我们的 _AnyIterator 能通过一个闭包来初始化。</p>\n<p>_AnyIterator 实现完后就可以来实现我们的 _AnySequence 了。我这里直接给出代码，同学们可以自己去实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _AnySequence&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Iterator</span> = _AnyIterator&lt;<span class=\"type\">Element</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> iteratorImpl: () -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> _AnySequence: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"number\">_</span> base: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">Element</span> == <span class=\"type\">S</span>.<span class=\"type\">Iterator</span>.<span class=\"type\">Element</span>, <span class=\"type\">S</span>: <span class=\"type\">Sequence</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> iterator = base.makeIterator()</span><br><span class=\"line\">        iteratorImpl = &#123;</span><br><span class=\"line\">            iterator.next()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span><span class=\"params\">()</span></span> -&gt; _AnyIterator&lt;<span class=\"type\">Element</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _AnyIterator(iteratorImpl)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> _AnySequence 的指定构造器也被定义为泛型，接受一个遵循 Sequence 协议的任何序列作为参数，并且规定了这个序列的迭代器的 next() 的返回类型要跟我们定义的这个泛型结构的 Element 类型要一致。这里的这个泛型约束其实就是我们实现类型擦除的魔法所在了。它将具体的序列的类型隐藏了起来，只要序列中的值都是相同的类型就可以当做同一种类型来使用。就像下面的例子中的 array 就可以描述为 “元素类型是 String 的任意序列的集合”。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [_AnySequence(<span class=\"type\">Persion</span>.author), _AnySequence(<span class=\"type\">Demo</span>())]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> array &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"+-------------------------+\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// out put:</span></span><br><span class=\"line\"><span class=\"comment\">// name is jewelz</span></span><br><span class=\"line\"><span class=\"comment\">//  age is 23</span></span><br><span class=\"line\"><span class=\"comment\">// email is hujewelz@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\">// +-------------------------+</span></span><br><span class=\"line\"><span class=\"comment\">// name is Sequence</span></span><br><span class=\"line\"><span class=\"comment\">// author is Persion(name: \"jewelz\", age: 23, email: \"hujewelz@gmail.com\")</span></span><br></pre></td></tr></table></figure>\n<p>得益于 Swift 的类型推断，这里的 array 可以不用显式地指明其类型，点击 option 键，你会发现它是 <code>[_AnySequence&lt;String&gt;]</code> 类型。也就是说只有其元素是 String 的任意序列都可以作为数组的元素。这就跟我们平时使用类似 “一个 Int 类型的数组” 的语义是一致的了。如果要向数组中插入一个新元素，可以这样创建一个序列：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = _AnySequence &#123; () -&gt; _AnyIterator&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _AnyIterator &#123; () -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arc4random() % <span class=\"number\">10</span> == <span class=\"number\">5</span> ? <span class=\"literal\">nil</span> : <span class=\"type\">String</span>(<span class=\"type\">Int</span>(arc4random() % <span class=\"number\">10</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">array.append(s)</span><br></pre></td></tr></table></figure>\n<p>上面的代码中通过一个闭包初始化了一个 _AnySequence，这里我就不给出自己的实现，同学们可以自己动手实现一下。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>在标准库中，其实已经提供了 <strong>AnyIterator</strong> 和 <strong>AnySequence</strong>。我还没去看标准库的实现，有兴趣的同学可以点击<a href=\"https://github.com/apple/swift/tree/master/stdlib/public/core\" target=\"_blank\" rel=\"noopener\">这里</a>查看。 我这里实现了自己的 _AnyIterator 和 _AnySequence 就是为了提供一种实现类型擦除的思路。如果你在项目中频繁地使用带有关联类型或 Self 的协议，那么你也一定会遇到跟我一样的问题。这时候实现一个类型擦除的封装，将具体的类型隐藏了起来，你就不用为 Xcode 的报错而抓狂了。</p>\n"},{"title":"Swift构造器","date":"2016-02-28T01:05:06.000Z","_content":"构造过程就是为一个实例上的每个存储属性设置初始值，并在新实例准备就绪之前执行所需的任何其他设置或初始化。\n\n<!--more-->\n\n我们通过定义构造器（暂时就这么叫吧，因为大家都这么叫，其实我觉得称为初始化器或初始化方法更合适一点）来实现这个构造过程，其实它就是一个特殊的方法，可以用来创建一个特定类型的新示例。\n\nSwift 中的构造器与 Objective-C 中不同，它没有返回值。不过它们的主要作用都是确保类型的新实例在第一次使用之前已正确初始化。OC 中我们并没有显示地给每个属性赋初始值，是因为它们在定义时有默认值，这一点与 Swift 不同。\n\n\n\n## 为存储属性设置初始值\n类和结构体必须在创建该类或结构体的实例时将其所有存储属性设置为适当的初始值。当然我们可以在定义属性时做好这个工作，不过大多数情况下，我们都是在构造器中给存储属性设置初始值。其实也并不是所有的存储属性都得去设置初始值，可选类型因为会被默认置为nil，所以并不强制在初始化时赋值。有一点需要注意的是不论是你在定义属性时就给定一个初值还是在构造器中给定初始值都不会触发属性监听。\n\n\n\n### 构造器\n\n构造器会在创建实例的时候自动调用，一般来说每个类都需要构造器，无论是自己写的还是编译器为你生成的。我们使用 `init` 关键字就可以定义一定构造器，并且不用使用 `func` 关键字:\n```swift\ninit() {\n}\n```\n我们可以在括号里面可以加各种参数，来进行更复杂的初始化。\n```swift\nvar name: String\nvar age: Int\n\ninit(name: String, age: Int) {\n    self.name = name\n    self.age = age\n}\n```\n和普通函数一样，构造函数也可以有内部参数名和外部参数名，在我们没有给定外部参数名的情况下，Swift 会自动给我们生成一个跟内部参数名一样的外部参数名。如果不想使用外部参数名，可以在内部参数名之前加上 `_` 即可。\n```swift\ninit(_ name: String) {\n}\n```\n\n\n\n## 默认构造器\n\n如果在一个类或结构体中所有的存储属性都有默认值，并且没有定义任何构造器也没有父类，那么 Swift 就会提供一个默认的构造器。\n```\nclass ShoppingListItem {\n    var name: String?\n    var quantity = 1\n    var purchased = false\n}\nvar item = ShoppingListItem()\n```\n\n### 结构体的逐一成员构造器\n如果我们在结构体中没有定义任何自己的构造器，那么 Swift 会给我们提供一个逐一成员构造器，这和默认构造器不同，不管结构体中的存储属性有没有赋初识值，包括常量属性。\n```swift\n\nstruct Size {\n  var width: Float\n  var height: Float\n  \n  let maxWH: Float\n}\n\nlet aSize = Size(width: 200, height: 300, maxWH: 200)\n```\n\n\n\n## 值类型的构造器代理\n\n所谓构造代理就是构造器可以调用别的构造器来辅助完成构造过程， 目的主要是为了避免写重复的代码。\n\n值类型（结构体和枚举）和类的构造器代理规则是不一样的。值类型不支持继承，所以它们的构造器代理就比较简单，只需要通过 `self.init` 调用自己的其他构造器。下面是苹果官方给出的例子：\n```swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\n\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n    init() {}\n    init(origin: Point, size: Size) {\n        self.origin = origin\n        self.size = size\n    }\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n```\n如果给值类型定义了自己的构造器，那么默认的构造器将不会被合成，如果你还是想要默认的构造器，就用extension来写自定义构造器即可。\n\n\n\n## 类的继承和初始化\n\n类的所有存储属性包括从父类继承而来的都必须在初始化的时候赋予初值。Swift 为类定义了两种构造器来确保所有的存储属性都获得初值，即指定构造器和便利构造器。\n\n\n\n### 指定构造器和便利构造器\n\n指定构造器是主要的构造手段，每个类至少要有1个，意味着可以有多个，但是多数情况下会是1个，而便利构造器则没有要求。指定构造器必须完全初始化该类引入的所有存储属性，并调用适当的父类构造器以继续完成父类中属性的初始化过程。便利构造器则要求最终要调用一个指派构造器。\n\n在语法上便利构造器和指定构造器没有太大差别，只是在指定构造器 `init` 前多了一个 `convenience` 关键字\n``` swift\nconvenience init(params) {\n}\n```\n\n\n### 类的构造器代理\n\n为了简化指定构造器和便利构造器之间的关系，Swift 对构造器代理应用以下三个规则：\n\n1. **一个指定构造器必须调用其直接父类的指定构造器。**\n2. **一个便利构造器必须调用类中其它的构造器。**\n3. **一个便利构造器必须最终调用一个指定构造器。**\n\n用两句话概括就是：\n\n* 指定构造器总是向上代理\n* 便利构造器总是横向代理\n\n下面的图很好地解释了这个规则\n![](http://image18-c.poco.cn/mypoco/myphoto/20170228/13/1843604332017022813450909.png?487x379_130)\n\n\n\n### 两段式构造\n\nSwift 中类的初始化分为两个阶段。在第一个阶段中，每个存储属性都要被赋值，如果有一部分属性是从父类继承得来，那么调用父类的构造器来完成所有存储属性的赋值。反正就是在第一个阶段要保证所有的存储属性都要有初始值。第二阶段就可以对属性进行进一步操作了。\n\n使用两段式构造会让初始化过程更加安全。两段式构造防止属性值在初始化之前被访问，并防止属性值被另一个构造器意外设置为不同的值。\n\n同时，Swift 的编译器会为两段式构造执行四个有用的安全检查，以确保这个过程不会发生错误：\n\n* **安全检查 1：在进行构造器的向上代理之前，必须确保类中所有的存储属性都被初始化。**\n\n如上所述，当所有存储属性的初始状态已知时，对象的内存才被认为是完全初始化的。为了满足这条规则，指定构造器必须确保在它在移交给初始化链之前初始化它自己的所有属性。\n\n* **安全检查 2：在给继承来的属性赋值之前，指定构造器必须先向上代理父类的构造器。如果不这么做的话，在给继承来的属性赋完值后，它可能会在父类的构造器中被重写。**\n* **安全检查 3：一个便利构造器在给任何属性赋值之前，必须先调用其它的构造器。如果不这么做的话，便利构造器赋的值会被指定构造器覆盖。**\n* **安全检查 4：在两段式构造过程的第一阶段完成之前，初始化函数不能调用其它实例方法, 不能从实例属性中取值, 也不能用`self`。**\n\n结合上面的四个安全检查，再来看看两段式构造过程做了什么：\n\n##### 阶段 1\n* 类的一个指定构造器或便利构造器被调用。\n* 为该类的新实例分配内存。但是内存还未初始化。\n* 指定构造器确保所有的存储属性都有值。这些存储属性的内存现在已初始化。\n* 指定构造器将初始化移交给父类初始化函数来对父类存储属性实现同样的操作。\n* 这个过程一直沿着继承链持续下去，直到达到继承链顶端。\n* 到了继承链顶端，并且最终父类保证所有的存储属性都有值之后，实例的内存就被当做完全初始化了，此时阶段1完成。\n\n##### 阶段 2\n* 从继承链顶端倒回来，每一个指派初始化函数都可以进一步定制实例，初始化函数至此可以访问 `self`，并且可以修改自己的属性，调用实例方法，等等。\n* 最终，调用链上的任意便利构造器都可以操作实例了，也可以访问 `self`。\n\n\n\n### 构造器的继承和重载\n\n与 Objective-C 不同，Swift 中的子类默认不会自动从父类那里继承其构造器。虽然不能自动继承不过我们还是有办法从父类那里继承构造器。\n\n当子类在覆盖父类的指定构造器时，需要要用 `override` 来修饰，即使你的子类的构造器的实现是一个便利构造器。但是，如果子类的指定造器与父类的便利构造器相同，那么父类的便利构造器永远都不会被子类调用到，所以这种情况是不需要 `override` 的。\n\n```\nclass Animal {\n  var numberOfFoots: Int\n  var name: String\n  \n  init(name: String, foots: Int) {\n    self.name = name\n    numberOfFoots = foots\n  }\n  \n  convenience init(name: String) {\n    self.init(name: name, foots: 4)\n  }\n}\n\nclass 🐔: Animal {\n  \n  override init(name: String, foots: Int) {\n    super.init(name: name, foots: foots)\n    numberOfFoots = 2\n  }\n  \n  init(name: String) {\n    super.init(name: name, foots: 2)\n  }\n}\n```\n在上面的例子中，`Animal` 分别定义了一个指定构造器和便利构造器，在 🐔 中重写了父类的` init(name: String, foots: Int)`，所以要使用 `override` 关键字，并且又定义了一个跟父类便利构造器相同的指定构造器，这个时候就不需要 `override` 关键字了。因为便利构造器只能横向代理，是不会被子类重写的。\n\n\n\n### 构造器的自动继承\n\n上面已经说过，Swift 中的子类默认不会自动继承父类的构造函数。但是，如果满足某些条件，父类的构造器会自动继承。以下就是构造器会自动继承的两个规则：\n\n* **规则 1** <br>\n    如果子类没有定义任何指定构造器，它会自动继承父类所有的指定构造器。\n* **规则 2** <br>\n    如果子类实现了父类中所有的指定构造器——不管是从规则1继承而来还是提供了自己的实现，那么它会自动继承父类所有的便利构造器。\n\n```swift\nclass Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n    \n    convenience init(age: Int) {\n      self.init(name: \"unknow\", age: age)\n    }\n    \n    convenience init(name: String) {\n        self.init(name: name, age: 0)\n    }\n}\n\nclass Man: Person {}\n```\n上面的代码中 `Man` 继承了 `Person` ，根据规则 1，`Man` 会继承父类的所有的指定构造器，同时根据规则 2，`Man` 实现了父类中所有的指定构造器 (这里是继承得来)，所以它会自动继承父类所有的便利构造器。就像下面这样：\n![](http://image18-c.poco.cn/mypoco/myphoto/20170228/15/18436043320170228153534059.png?421x118_130)\n\n\n\n## 可失败的构造器\n\n有时候我们需要构造失败，例如传入了不恰当的参数，这种情况使用可失败的构造器是很有用的，这样可以引起调用者的注意。\n\n为了应对可能失败的初始化条件，可以为我们的类型（类、结构体或枚举）定义一个或多个可失败构造器。用 `init?` 就可以定义一个可失败构造器。不过可失败和不可失败的构造器不能有一样的参数类型列表，否则就有二义性了。当构造失败时，可以返回 `nil`。\n```swift\nstruct Animal {\n    let species: String\n    init?(species: String) {\n        if species.isEmpty { return nil }\n        self.species = species\n    }\n}\n\n```\n通过可失败构造器实例化的对象是个可选值，所以在使用时需要解包：\n```swift\nif let giraffe = Animal(species: \"Giraffe\") {\n    print(\"An animal was initialized with a species of \\(giraffe.species)\")\n}\n```\n\n\n\n### 可失败构造器的传递\n\n类，结构或枚举的可失败构造器可以从相同的类，结构或枚举中代理给另一个可失败构造器。类似地，子类的可失败构造器可以向上代理父类的可失败构造器。\n\n在任何种情况下，如果委托给另一个构造器导致初始化失败，整个初始化过程立即失败，并且不再执行初始化代码。\n```swift\nlass Product {\n    let name: String\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n \nclass CartItem: Product {\n    let quantity: Int\n    init?(name: String, quantity: Int) {\n        if quantity < 1 { return nil }\n        self.quantity = quantity\n        super.init(name: name)\n    }\n}\n\n```\n\n\n\n### 重载可失败构造器\n\n你可以像重载普通构造器一样，重载父类的可失败构造器。你可以在子类中用普通的构造器重载父类的可失败构造器，但是不能反过来。看下面的例子就很清楚了：\n```swift\nclass Document {\n    var name: String?\n\n    init() {}\n\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n\nclass AutomaticallyNamedDocument: Document {\n    override init() {\n        super.init()\n        self.name = \"[Untitled]\"\n    }\n    override init(name: String) {\n        super.init()\n        if name.isEmpty {\n            self.name = \"[Untitled]\"\n        } else {\n            self.name = name\n        }\n    }\n}\n\nclass UntitledDocument: Document {\n    override init() {\n        super.init(name: \"[Untitled]\")!\n    }\n}\n\n```\n\n\n\n## 必需构造器(Required Initializers)\n\n如果 `init` 用了 `required` 来修饰， 那么意味着子类必需要实现这个构造器。\n```swift\nclass SomeClass {\n    required init() {\n        // initializer implementation goes here\n    }\n}\n\n```\n在子类重写父类的必需构造器时，仍然需要用`required` 来修饰，而不用使用 `override` 关键字。\n```swift\nclass SomeSubclass: SomeClass {\n    required init() {\n        // subclass implementation of the required initializer goes here\n    }\n}\n\n```\n如果你满足构造器继承的条件的话，必需构造器也不是一定要自己实现的。\n\n\n\n## 总结\n\n以上就是 Swift 中构造器的简单介绍。与 Objective-C 相比，Swift 中的构造过程确实比较复杂，这也确确实实地体现了 Swift 是一门安全的语言。总的来说，Swift 的构造过程就是为了在任何实例使用之前所有的存储属性都要先初始化完成。\n\n","source":"_posts/Swift构造器.md","raw":"---\ntitle: Swift构造器\ndate: 2016-02-28 09:05:06\ntags: Swift\ncategory: Swift\n---\n构造过程就是为一个实例上的每个存储属性设置初始值，并在新实例准备就绪之前执行所需的任何其他设置或初始化。\n\n<!--more-->\n\n我们通过定义构造器（暂时就这么叫吧，因为大家都这么叫，其实我觉得称为初始化器或初始化方法更合适一点）来实现这个构造过程，其实它就是一个特殊的方法，可以用来创建一个特定类型的新示例。\n\nSwift 中的构造器与 Objective-C 中不同，它没有返回值。不过它们的主要作用都是确保类型的新实例在第一次使用之前已正确初始化。OC 中我们并没有显示地给每个属性赋初始值，是因为它们在定义时有默认值，这一点与 Swift 不同。\n\n\n\n## 为存储属性设置初始值\n类和结构体必须在创建该类或结构体的实例时将其所有存储属性设置为适当的初始值。当然我们可以在定义属性时做好这个工作，不过大多数情况下，我们都是在构造器中给存储属性设置初始值。其实也并不是所有的存储属性都得去设置初始值，可选类型因为会被默认置为nil，所以并不强制在初始化时赋值。有一点需要注意的是不论是你在定义属性时就给定一个初值还是在构造器中给定初始值都不会触发属性监听。\n\n\n\n### 构造器\n\n构造器会在创建实例的时候自动调用，一般来说每个类都需要构造器，无论是自己写的还是编译器为你生成的。我们使用 `init` 关键字就可以定义一定构造器，并且不用使用 `func` 关键字:\n```swift\ninit() {\n}\n```\n我们可以在括号里面可以加各种参数，来进行更复杂的初始化。\n```swift\nvar name: String\nvar age: Int\n\ninit(name: String, age: Int) {\n    self.name = name\n    self.age = age\n}\n```\n和普通函数一样，构造函数也可以有内部参数名和外部参数名，在我们没有给定外部参数名的情况下，Swift 会自动给我们生成一个跟内部参数名一样的外部参数名。如果不想使用外部参数名，可以在内部参数名之前加上 `_` 即可。\n```swift\ninit(_ name: String) {\n}\n```\n\n\n\n## 默认构造器\n\n如果在一个类或结构体中所有的存储属性都有默认值，并且没有定义任何构造器也没有父类，那么 Swift 就会提供一个默认的构造器。\n```\nclass ShoppingListItem {\n    var name: String?\n    var quantity = 1\n    var purchased = false\n}\nvar item = ShoppingListItem()\n```\n\n### 结构体的逐一成员构造器\n如果我们在结构体中没有定义任何自己的构造器，那么 Swift 会给我们提供一个逐一成员构造器，这和默认构造器不同，不管结构体中的存储属性有没有赋初识值，包括常量属性。\n```swift\n\nstruct Size {\n  var width: Float\n  var height: Float\n  \n  let maxWH: Float\n}\n\nlet aSize = Size(width: 200, height: 300, maxWH: 200)\n```\n\n\n\n## 值类型的构造器代理\n\n所谓构造代理就是构造器可以调用别的构造器来辅助完成构造过程， 目的主要是为了避免写重复的代码。\n\n值类型（结构体和枚举）和类的构造器代理规则是不一样的。值类型不支持继承，所以它们的构造器代理就比较简单，只需要通过 `self.init` 调用自己的其他构造器。下面是苹果官方给出的例子：\n```swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\n\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n    init() {}\n    init(origin: Point, size: Size) {\n        self.origin = origin\n        self.size = size\n    }\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n```\n如果给值类型定义了自己的构造器，那么默认的构造器将不会被合成，如果你还是想要默认的构造器，就用extension来写自定义构造器即可。\n\n\n\n## 类的继承和初始化\n\n类的所有存储属性包括从父类继承而来的都必须在初始化的时候赋予初值。Swift 为类定义了两种构造器来确保所有的存储属性都获得初值，即指定构造器和便利构造器。\n\n\n\n### 指定构造器和便利构造器\n\n指定构造器是主要的构造手段，每个类至少要有1个，意味着可以有多个，但是多数情况下会是1个，而便利构造器则没有要求。指定构造器必须完全初始化该类引入的所有存储属性，并调用适当的父类构造器以继续完成父类中属性的初始化过程。便利构造器则要求最终要调用一个指派构造器。\n\n在语法上便利构造器和指定构造器没有太大差别，只是在指定构造器 `init` 前多了一个 `convenience` 关键字\n``` swift\nconvenience init(params) {\n}\n```\n\n\n### 类的构造器代理\n\n为了简化指定构造器和便利构造器之间的关系，Swift 对构造器代理应用以下三个规则：\n\n1. **一个指定构造器必须调用其直接父类的指定构造器。**\n2. **一个便利构造器必须调用类中其它的构造器。**\n3. **一个便利构造器必须最终调用一个指定构造器。**\n\n用两句话概括就是：\n\n* 指定构造器总是向上代理\n* 便利构造器总是横向代理\n\n下面的图很好地解释了这个规则\n![](http://image18-c.poco.cn/mypoco/myphoto/20170228/13/1843604332017022813450909.png?487x379_130)\n\n\n\n### 两段式构造\n\nSwift 中类的初始化分为两个阶段。在第一个阶段中，每个存储属性都要被赋值，如果有一部分属性是从父类继承得来，那么调用父类的构造器来完成所有存储属性的赋值。反正就是在第一个阶段要保证所有的存储属性都要有初始值。第二阶段就可以对属性进行进一步操作了。\n\n使用两段式构造会让初始化过程更加安全。两段式构造防止属性值在初始化之前被访问，并防止属性值被另一个构造器意外设置为不同的值。\n\n同时，Swift 的编译器会为两段式构造执行四个有用的安全检查，以确保这个过程不会发生错误：\n\n* **安全检查 1：在进行构造器的向上代理之前，必须确保类中所有的存储属性都被初始化。**\n\n如上所述，当所有存储属性的初始状态已知时，对象的内存才被认为是完全初始化的。为了满足这条规则，指定构造器必须确保在它在移交给初始化链之前初始化它自己的所有属性。\n\n* **安全检查 2：在给继承来的属性赋值之前，指定构造器必须先向上代理父类的构造器。如果不这么做的话，在给继承来的属性赋完值后，它可能会在父类的构造器中被重写。**\n* **安全检查 3：一个便利构造器在给任何属性赋值之前，必须先调用其它的构造器。如果不这么做的话，便利构造器赋的值会被指定构造器覆盖。**\n* **安全检查 4：在两段式构造过程的第一阶段完成之前，初始化函数不能调用其它实例方法, 不能从实例属性中取值, 也不能用`self`。**\n\n结合上面的四个安全检查，再来看看两段式构造过程做了什么：\n\n##### 阶段 1\n* 类的一个指定构造器或便利构造器被调用。\n* 为该类的新实例分配内存。但是内存还未初始化。\n* 指定构造器确保所有的存储属性都有值。这些存储属性的内存现在已初始化。\n* 指定构造器将初始化移交给父类初始化函数来对父类存储属性实现同样的操作。\n* 这个过程一直沿着继承链持续下去，直到达到继承链顶端。\n* 到了继承链顶端，并且最终父类保证所有的存储属性都有值之后，实例的内存就被当做完全初始化了，此时阶段1完成。\n\n##### 阶段 2\n* 从继承链顶端倒回来，每一个指派初始化函数都可以进一步定制实例，初始化函数至此可以访问 `self`，并且可以修改自己的属性，调用实例方法，等等。\n* 最终，调用链上的任意便利构造器都可以操作实例了，也可以访问 `self`。\n\n\n\n### 构造器的继承和重载\n\n与 Objective-C 不同，Swift 中的子类默认不会自动从父类那里继承其构造器。虽然不能自动继承不过我们还是有办法从父类那里继承构造器。\n\n当子类在覆盖父类的指定构造器时，需要要用 `override` 来修饰，即使你的子类的构造器的实现是一个便利构造器。但是，如果子类的指定造器与父类的便利构造器相同，那么父类的便利构造器永远都不会被子类调用到，所以这种情况是不需要 `override` 的。\n\n```\nclass Animal {\n  var numberOfFoots: Int\n  var name: String\n  \n  init(name: String, foots: Int) {\n    self.name = name\n    numberOfFoots = foots\n  }\n  \n  convenience init(name: String) {\n    self.init(name: name, foots: 4)\n  }\n}\n\nclass 🐔: Animal {\n  \n  override init(name: String, foots: Int) {\n    super.init(name: name, foots: foots)\n    numberOfFoots = 2\n  }\n  \n  init(name: String) {\n    super.init(name: name, foots: 2)\n  }\n}\n```\n在上面的例子中，`Animal` 分别定义了一个指定构造器和便利构造器，在 🐔 中重写了父类的` init(name: String, foots: Int)`，所以要使用 `override` 关键字，并且又定义了一个跟父类便利构造器相同的指定构造器，这个时候就不需要 `override` 关键字了。因为便利构造器只能横向代理，是不会被子类重写的。\n\n\n\n### 构造器的自动继承\n\n上面已经说过，Swift 中的子类默认不会自动继承父类的构造函数。但是，如果满足某些条件，父类的构造器会自动继承。以下就是构造器会自动继承的两个规则：\n\n* **规则 1** <br>\n    如果子类没有定义任何指定构造器，它会自动继承父类所有的指定构造器。\n* **规则 2** <br>\n    如果子类实现了父类中所有的指定构造器——不管是从规则1继承而来还是提供了自己的实现，那么它会自动继承父类所有的便利构造器。\n\n```swift\nclass Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n    \n    convenience init(age: Int) {\n      self.init(name: \"unknow\", age: age)\n    }\n    \n    convenience init(name: String) {\n        self.init(name: name, age: 0)\n    }\n}\n\nclass Man: Person {}\n```\n上面的代码中 `Man` 继承了 `Person` ，根据规则 1，`Man` 会继承父类的所有的指定构造器，同时根据规则 2，`Man` 实现了父类中所有的指定构造器 (这里是继承得来)，所以它会自动继承父类所有的便利构造器。就像下面这样：\n![](http://image18-c.poco.cn/mypoco/myphoto/20170228/15/18436043320170228153534059.png?421x118_130)\n\n\n\n## 可失败的构造器\n\n有时候我们需要构造失败，例如传入了不恰当的参数，这种情况使用可失败的构造器是很有用的，这样可以引起调用者的注意。\n\n为了应对可能失败的初始化条件，可以为我们的类型（类、结构体或枚举）定义一个或多个可失败构造器。用 `init?` 就可以定义一个可失败构造器。不过可失败和不可失败的构造器不能有一样的参数类型列表，否则就有二义性了。当构造失败时，可以返回 `nil`。\n```swift\nstruct Animal {\n    let species: String\n    init?(species: String) {\n        if species.isEmpty { return nil }\n        self.species = species\n    }\n}\n\n```\n通过可失败构造器实例化的对象是个可选值，所以在使用时需要解包：\n```swift\nif let giraffe = Animal(species: \"Giraffe\") {\n    print(\"An animal was initialized with a species of \\(giraffe.species)\")\n}\n```\n\n\n\n### 可失败构造器的传递\n\n类，结构或枚举的可失败构造器可以从相同的类，结构或枚举中代理给另一个可失败构造器。类似地，子类的可失败构造器可以向上代理父类的可失败构造器。\n\n在任何种情况下，如果委托给另一个构造器导致初始化失败，整个初始化过程立即失败，并且不再执行初始化代码。\n```swift\nlass Product {\n    let name: String\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n \nclass CartItem: Product {\n    let quantity: Int\n    init?(name: String, quantity: Int) {\n        if quantity < 1 { return nil }\n        self.quantity = quantity\n        super.init(name: name)\n    }\n}\n\n```\n\n\n\n### 重载可失败构造器\n\n你可以像重载普通构造器一样，重载父类的可失败构造器。你可以在子类中用普通的构造器重载父类的可失败构造器，但是不能反过来。看下面的例子就很清楚了：\n```swift\nclass Document {\n    var name: String?\n\n    init() {}\n\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n\nclass AutomaticallyNamedDocument: Document {\n    override init() {\n        super.init()\n        self.name = \"[Untitled]\"\n    }\n    override init(name: String) {\n        super.init()\n        if name.isEmpty {\n            self.name = \"[Untitled]\"\n        } else {\n            self.name = name\n        }\n    }\n}\n\nclass UntitledDocument: Document {\n    override init() {\n        super.init(name: \"[Untitled]\")!\n    }\n}\n\n```\n\n\n\n## 必需构造器(Required Initializers)\n\n如果 `init` 用了 `required` 来修饰， 那么意味着子类必需要实现这个构造器。\n```swift\nclass SomeClass {\n    required init() {\n        // initializer implementation goes here\n    }\n}\n\n```\n在子类重写父类的必需构造器时，仍然需要用`required` 来修饰，而不用使用 `override` 关键字。\n```swift\nclass SomeSubclass: SomeClass {\n    required init() {\n        // subclass implementation of the required initializer goes here\n    }\n}\n\n```\n如果你满足构造器继承的条件的话，必需构造器也不是一定要自己实现的。\n\n\n\n## 总结\n\n以上就是 Swift 中构造器的简单介绍。与 Objective-C 相比，Swift 中的构造过程确实比较复杂，这也确确实实地体现了 Swift 是一门安全的语言。总的来说，Swift 的构造过程就是为了在任何实例使用之前所有的存储属性都要先初始化完成。\n\n","slug":"Swift构造器","published":1,"updated":"2018-05-27T00:14:08.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zijr00081u0of844dkoo","content":"<p>构造过程就是为一个实例上的每个存储属性设置初始值，并在新实例准备就绪之前执行所需的任何其他设置或初始化。</p>\n<a id=\"more\"></a>\n<p>我们通过定义构造器（暂时就这么叫吧，因为大家都这么叫，其实我觉得称为初始化器或初始化方法更合适一点）来实现这个构造过程，其实它就是一个特殊的方法，可以用来创建一个特定类型的新示例。</p>\n<p>Swift 中的构造器与 Objective-C 中不同，它没有返回值。不过它们的主要作用都是确保类型的新实例在第一次使用之前已正确初始化。OC 中我们并没有显示地给每个属性赋初始值，是因为它们在定义时有默认值，这一点与 Swift 不同。</p>\n<h2 id=\"为存储属性设置初始值\"><a href=\"#为存储属性设置初始值\" class=\"headerlink\" title=\"为存储属性设置初始值\"></a>为存储属性设置初始值</h2><p>类和结构体必须在创建该类或结构体的实例时将其所有存储属性设置为适当的初始值。当然我们可以在定义属性时做好这个工作，不过大多数情况下，我们都是在构造器中给存储属性设置初始值。其实也并不是所有的存储属性都得去设置初始值，可选类型因为会被默认置为nil，所以并不强制在初始化时赋值。有一点需要注意的是不论是你在定义属性时就给定一个初值还是在构造器中给定初始值都不会触发属性监听。</p>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><p>构造器会在创建实例的时候自动调用，一般来说每个类都需要构造器，无论是自己写的还是编译器为你生成的。我们使用 <code>init</code> 关键字就可以定义一定构造器，并且不用使用 <code>func</code> 关键字:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以在括号里面可以加各种参数，来进行更复杂的初始化。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age = age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和普通函数一样，构造函数也可以有内部参数名和外部参数名，在我们没有给定外部参数名的情况下，Swift 会自动给我们生成一个跟内部参数名一样的外部参数名。如果不想使用外部参数名，可以在内部参数名之前加上 <code>_</code> 即可。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>(<span class=\"number\">_</span> name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"默认构造器\"><a href=\"#默认构造器\" class=\"headerlink\" title=\"默认构造器\"></a>默认构造器</h2><p>如果在一个类或结构体中所有的存储属性都有默认值，并且没有定义任何构造器也没有父类，那么 Swift 就会提供一个默认的构造器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ShoppingListItem &#123;</span><br><span class=\"line\">    var name: String?</span><br><span class=\"line\">    var quantity = 1</span><br><span class=\"line\">    var purchased = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var item = ShoppingListItem()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结构体的逐一成员构造器\"><a href=\"#结构体的逐一成员构造器\" class=\"headerlink\" title=\"结构体的逐一成员构造器\"></a>结构体的逐一成员构造器</h3><p>如果我们在结构体中没有定义任何自己的构造器，那么 Swift 会给我们提供一个逐一成员构造器，这和默认构造器不同，不管结构体中的存储属性有没有赋初识值，包括常量属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width: <span class=\"type\">Float</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> height: <span class=\"type\">Float</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxWH: <span class=\"type\">Float</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> aSize = <span class=\"type\">Size</span>(width: <span class=\"number\">200</span>, height: <span class=\"number\">300</span>, maxWH: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"值类型的构造器代理\"><a href=\"#值类型的构造器代理\" class=\"headerlink\" title=\"值类型的构造器代理\"></a>值类型的构造器代理</h2><p>所谓构造代理就是构造器可以调用别的构造器来辅助完成构造过程， 目的主要是为了避免写重复的代码。</p>\n<p>值类型（结构体和枚举）和类的构造器代理规则是不一样的。值类型不支持继承，所以它们的构造器代理就比较简单，只需要通过 <code>self.init</code> 调用自己的其他构造器。下面是苹果官方给出的例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.origin = origin</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.size = size</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(center: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> originX = center.x - (size.width / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> originY = center.y - (size.height / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果给值类型定义了自己的构造器，那么默认的构造器将不会被合成，如果你还是想要默认的构造器，就用extension来写自定义构造器即可。</p>\n<h2 id=\"类的继承和初始化\"><a href=\"#类的继承和初始化\" class=\"headerlink\" title=\"类的继承和初始化\"></a>类的继承和初始化</h2><p>类的所有存储属性包括从父类继承而来的都必须在初始化的时候赋予初值。Swift 为类定义了两种构造器来确保所有的存储属性都获得初值，即指定构造器和便利构造器。</p>\n<h3 id=\"指定构造器和便利构造器\"><a href=\"#指定构造器和便利构造器\" class=\"headerlink\" title=\"指定构造器和便利构造器\"></a>指定构造器和便利构造器</h3><p>指定构造器是主要的构造手段，每个类至少要有1个，意味着可以有多个，但是多数情况下会是1个，而便利构造器则没有要求。指定构造器必须完全初始化该类引入的所有存储属性，并调用适当的父类构造器以继续完成父类中属性的初始化过程。便利构造器则要求最终要调用一个指派构造器。</p>\n<p>在语法上便利构造器和指定构造器没有太大差别，只是在指定构造器 <code>init</code> 前多了一个 <code>convenience</code> 关键字<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(params) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类的构造器代理\"><a href=\"#类的构造器代理\" class=\"headerlink\" title=\"类的构造器代理\"></a>类的构造器代理</h3><p>为了简化指定构造器和便利构造器之间的关系，Swift 对构造器代理应用以下三个规则：</p>\n<ol>\n<li><strong>一个指定构造器必须调用其直接父类的指定构造器。</strong></li>\n<li><strong>一个便利构造器必须调用类中其它的构造器。</strong></li>\n<li><strong>一个便利构造器必须最终调用一个指定构造器。</strong></li>\n</ol>\n<p>用两句话概括就是：</p>\n<ul>\n<li>指定构造器总是向上代理</li>\n<li>便利构造器总是横向代理</li>\n</ul>\n<p>下面的图很好地解释了这个规则<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170228/13/1843604332017022813450909.png?487x379_130\" alt=\"\"></p>\n<h3 id=\"两段式构造\"><a href=\"#两段式构造\" class=\"headerlink\" title=\"两段式构造\"></a>两段式构造</h3><p>Swift 中类的初始化分为两个阶段。在第一个阶段中，每个存储属性都要被赋值，如果有一部分属性是从父类继承得来，那么调用父类的构造器来完成所有存储属性的赋值。反正就是在第一个阶段要保证所有的存储属性都要有初始值。第二阶段就可以对属性进行进一步操作了。</p>\n<p>使用两段式构造会让初始化过程更加安全。两段式构造防止属性值在初始化之前被访问，并防止属性值被另一个构造器意外设置为不同的值。</p>\n<p>同时，Swift 的编译器会为两段式构造执行四个有用的安全检查，以确保这个过程不会发生错误：</p>\n<ul>\n<li><strong>安全检查 1：在进行构造器的向上代理之前，必须确保类中所有的存储属性都被初始化。</strong></li>\n</ul>\n<p>如上所述，当所有存储属性的初始状态已知时，对象的内存才被认为是完全初始化的。为了满足这条规则，指定构造器必须确保在它在移交给初始化链之前初始化它自己的所有属性。</p>\n<ul>\n<li><strong>安全检查 2：在给继承来的属性赋值之前，指定构造器必须先向上代理父类的构造器。如果不这么做的话，在给继承来的属性赋完值后，它可能会在父类的构造器中被重写。</strong></li>\n<li><strong>安全检查 3：一个便利构造器在给任何属性赋值之前，必须先调用其它的构造器。如果不这么做的话，便利构造器赋的值会被指定构造器覆盖。</strong></li>\n<li><strong>安全检查 4：在两段式构造过程的第一阶段完成之前，初始化函数不能调用其它实例方法, 不能从实例属性中取值, 也不能用<code>self</code>。</strong></li>\n</ul>\n<p>结合上面的四个安全检查，再来看看两段式构造过程做了什么：</p>\n<h5 id=\"阶段-1\"><a href=\"#阶段-1\" class=\"headerlink\" title=\"阶段 1\"></a>阶段 1</h5><ul>\n<li>类的一个指定构造器或便利构造器被调用。</li>\n<li>为该类的新实例分配内存。但是内存还未初始化。</li>\n<li>指定构造器确保所有的存储属性都有值。这些存储属性的内存现在已初始化。</li>\n<li>指定构造器将初始化移交给父类初始化函数来对父类存储属性实现同样的操作。</li>\n<li>这个过程一直沿着继承链持续下去，直到达到继承链顶端。</li>\n<li>到了继承链顶端，并且最终父类保证所有的存储属性都有值之后，实例的内存就被当做完全初始化了，此时阶段1完成。</li>\n</ul>\n<h5 id=\"阶段-2\"><a href=\"#阶段-2\" class=\"headerlink\" title=\"阶段 2\"></a>阶段 2</h5><ul>\n<li>从继承链顶端倒回来，每一个指派初始化函数都可以进一步定制实例，初始化函数至此可以访问 <code>self</code>，并且可以修改自己的属性，调用实例方法，等等。</li>\n<li>最终，调用链上的任意便利构造器都可以操作实例了，也可以访问 <code>self</code>。</li>\n</ul>\n<h3 id=\"构造器的继承和重载\"><a href=\"#构造器的继承和重载\" class=\"headerlink\" title=\"构造器的继承和重载\"></a>构造器的继承和重载</h3><p>与 Objective-C 不同，Swift 中的子类默认不会自动从父类那里继承其构造器。虽然不能自动继承不过我们还是有办法从父类那里继承构造器。</p>\n<p>当子类在覆盖父类的指定构造器时，需要要用 <code>override</code> 来修饰，即使你的子类的构造器的实现是一个便利构造器。但是，如果子类的指定造器与父类的便利构造器相同，那么父类的便利构造器永远都不会被子类调用到，所以这种情况是不需要 <code>override</code> 的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal &#123;</span><br><span class=\"line\">  var numberOfFoots: Int</span><br><span class=\"line\">  var name: String</span><br><span class=\"line\">  </span><br><span class=\"line\">  init(name: String, foots: Int) &#123;</span><br><span class=\"line\">    self.name = name</span><br><span class=\"line\">    numberOfFoots = foots</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  convenience init(name: String) &#123;</span><br><span class=\"line\">    self.init(name: name, foots: 4)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class 🐔: Animal &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  override init(name: String, foots: Int) &#123;</span><br><span class=\"line\">    super.init(name: name, foots: foots)</span><br><span class=\"line\">    numberOfFoots = 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  init(name: String) &#123;</span><br><span class=\"line\">    super.init(name: name, foots: 2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，<code>Animal</code> 分别定义了一个指定构造器和便利构造器，在 🐔 中重写了父类的<code>init(name: String, foots: Int)</code>，所以要使用 <code>override</code> 关键字，并且又定义了一个跟父类便利构造器相同的指定构造器，这个时候就不需要 <code>override</code> 关键字了。因为便利构造器只能横向代理，是不会被子类重写的。</p>\n<h3 id=\"构造器的自动继承\"><a href=\"#构造器的自动继承\" class=\"headerlink\" title=\"构造器的自动继承\"></a>构造器的自动继承</h3><p>上面已经说过，Swift 中的子类默认不会自动继承父类的构造函数。但是，如果满足某些条件，父类的构造器会自动继承。以下就是构造器会自动继承的两个规则：</p>\n<ul>\n<li><strong>规则 1</strong> <br><br>  如果子类没有定义任何指定构造器，它会自动继承父类所有的指定构造器。</li>\n<li><strong>规则 2</strong> <br><br>  如果子类实现了父类中所有的指定构造器——不管是从规则1继承而来还是提供了自己的实现，那么它会自动继承父类所有的便利构造器。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">\"unknow\"</span>, age: age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: name, age: <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span>: <span class=\"title\">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中 <code>Man</code> 继承了 <code>Person</code> ，根据规则 1，<code>Man</code> 会继承父类的所有的指定构造器，同时根据规则 2，<code>Man</code> 实现了父类中所有的指定构造器 (这里是继承得来)，所以它会自动继承父类所有的便利构造器。就像下面这样：<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170228/15/18436043320170228153534059.png?421x118_130\" alt=\"\"></p>\n<h2 id=\"可失败的构造器\"><a href=\"#可失败的构造器\" class=\"headerlink\" title=\"可失败的构造器\"></a>可失败的构造器</h2><p>有时候我们需要构造失败，例如传入了不恰当的参数，这种情况使用可失败的构造器是很有用的，这样可以引起调用者的注意。</p>\n<p>为了应对可能失败的初始化条件，可以为我们的类型（类、结构体或枚举）定义一个或多个可失败构造器。用 <code>init?</code> 就可以定义一个可失败构造器。不过可失败和不可失败的构造器不能有一样的参数类型列表，否则就有二义性了。当构造失败时，可以返回 <code>nil</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> species: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(species: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> species.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.species = species</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过可失败构造器实例化的对象是个可选值，所以在使用时需要解包：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> giraffe = <span class=\"type\">Animal</span>(species: <span class=\"string\">\"Giraffe\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"An animal was initialized with a species of <span class=\"subst\">\\(giraffe.species)</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可失败构造器的传递\"><a href=\"#可失败构造器的传递\" class=\"headerlink\" title=\"可失败构造器的传递\"></a>可失败构造器的传递</h3><p>类，结构或枚举的可失败构造器可以从相同的类，结构或枚举中代理给另一个可失败构造器。类似地，子类的可失败构造器可以向上代理父类的可失败构造器。</p>\n<p>在任何种情况下，如果委托给另一个构造器导致初始化失败，整个初始化过程立即失败，并且不再执行初始化代码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lass <span class=\"type\">Product</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartItem</span>: <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> quantity: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> quantity &lt; <span class=\"number\">1</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.quantity = quantity</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重载可失败构造器\"><a href=\"#重载可失败构造器\" class=\"headerlink\" title=\"重载可失败构造器\"></a>重载可失败构造器</h3><p>你可以像重载普通构造器一样，重载父类的可失败构造器。你可以在子类中用普通的构造器重载父类的可失败构造器，但是不能反过来。看下面的例子就很清楚了：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Document</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutomaticallyNamedDocument</span>: <span class=\"title\">Document</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UntitledDocument</span>: <span class=\"title\">Document</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">\"[Untitled]\"</span>)!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"必需构造器-Required-Initializers\"><a href=\"#必需构造器-Required-Initializers\" class=\"headerlink\" title=\"必需构造器(Required Initializers)\"></a>必需构造器(Required Initializers)</h2><p>如果 <code>init</code> 用了 <code>required</code> 来修饰， 那么意味着子类必需要实现这个构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// initializer implementation goes here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在子类重写父类的必需构造器时，仍然需要用<code>required</code> 来修饰，而不用使用 <code>override</code> 关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSubclass</span>: <span class=\"title\">SomeClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// subclass implementation of the required initializer goes here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你满足构造器继承的条件的话，必需构造器也不是一定要自己实现的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是 Swift 中构造器的简单介绍。与 Objective-C 相比，Swift 中的构造过程确实比较复杂，这也确确实实地体现了 Swift 是一门安全的语言。总的来说，Swift 的构造过程就是为了在任何实例使用之前所有的存储属性都要先初始化完成。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>构造过程就是为一个实例上的每个存储属性设置初始值，并在新实例准备就绪之前执行所需的任何其他设置或初始化。</p>","more":"<p>我们通过定义构造器（暂时就这么叫吧，因为大家都这么叫，其实我觉得称为初始化器或初始化方法更合适一点）来实现这个构造过程，其实它就是一个特殊的方法，可以用来创建一个特定类型的新示例。</p>\n<p>Swift 中的构造器与 Objective-C 中不同，它没有返回值。不过它们的主要作用都是确保类型的新实例在第一次使用之前已正确初始化。OC 中我们并没有显示地给每个属性赋初始值，是因为它们在定义时有默认值，这一点与 Swift 不同。</p>\n<h2 id=\"为存储属性设置初始值\"><a href=\"#为存储属性设置初始值\" class=\"headerlink\" title=\"为存储属性设置初始值\"></a>为存储属性设置初始值</h2><p>类和结构体必须在创建该类或结构体的实例时将其所有存储属性设置为适当的初始值。当然我们可以在定义属性时做好这个工作，不过大多数情况下，我们都是在构造器中给存储属性设置初始值。其实也并不是所有的存储属性都得去设置初始值，可选类型因为会被默认置为nil，所以并不强制在初始化时赋值。有一点需要注意的是不论是你在定义属性时就给定一个初值还是在构造器中给定初始值都不会触发属性监听。</p>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><p>构造器会在创建实例的时候自动调用，一般来说每个类都需要构造器，无论是自己写的还是编译器为你生成的。我们使用 <code>init</code> 关键字就可以定义一定构造器，并且不用使用 <code>func</code> 关键字:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以在括号里面可以加各种参数，来进行更复杂的初始化。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age = age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和普通函数一样，构造函数也可以有内部参数名和外部参数名，在我们没有给定外部参数名的情况下，Swift 会自动给我们生成一个跟内部参数名一样的外部参数名。如果不想使用外部参数名，可以在内部参数名之前加上 <code>_</code> 即可。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>(<span class=\"number\">_</span> name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"默认构造器\"><a href=\"#默认构造器\" class=\"headerlink\" title=\"默认构造器\"></a>默认构造器</h2><p>如果在一个类或结构体中所有的存储属性都有默认值，并且没有定义任何构造器也没有父类，那么 Swift 就会提供一个默认的构造器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ShoppingListItem &#123;</span><br><span class=\"line\">    var name: String?</span><br><span class=\"line\">    var quantity = 1</span><br><span class=\"line\">    var purchased = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var item = ShoppingListItem()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结构体的逐一成员构造器\"><a href=\"#结构体的逐一成员构造器\" class=\"headerlink\" title=\"结构体的逐一成员构造器\"></a>结构体的逐一成员构造器</h3><p>如果我们在结构体中没有定义任何自己的构造器，那么 Swift 会给我们提供一个逐一成员构造器，这和默认构造器不同，不管结构体中的存储属性有没有赋初识值，包括常量属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width: <span class=\"type\">Float</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> height: <span class=\"type\">Float</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxWH: <span class=\"type\">Float</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> aSize = <span class=\"type\">Size</span>(width: <span class=\"number\">200</span>, height: <span class=\"number\">300</span>, maxWH: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"值类型的构造器代理\"><a href=\"#值类型的构造器代理\" class=\"headerlink\" title=\"值类型的构造器代理\"></a>值类型的构造器代理</h2><p>所谓构造代理就是构造器可以调用别的构造器来辅助完成构造过程， 目的主要是为了避免写重复的代码。</p>\n<p>值类型（结构体和枚举）和类的构造器代理规则是不一样的。值类型不支持继承，所以它们的构造器代理就比较简单，只需要通过 <code>self.init</code> 调用自己的其他构造器。下面是苹果官方给出的例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.origin = origin</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.size = size</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(center: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> originX = center.x - (size.width / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> originY = center.y - (size.height / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果给值类型定义了自己的构造器，那么默认的构造器将不会被合成，如果你还是想要默认的构造器，就用extension来写自定义构造器即可。</p>\n<h2 id=\"类的继承和初始化\"><a href=\"#类的继承和初始化\" class=\"headerlink\" title=\"类的继承和初始化\"></a>类的继承和初始化</h2><p>类的所有存储属性包括从父类继承而来的都必须在初始化的时候赋予初值。Swift 为类定义了两种构造器来确保所有的存储属性都获得初值，即指定构造器和便利构造器。</p>\n<h3 id=\"指定构造器和便利构造器\"><a href=\"#指定构造器和便利构造器\" class=\"headerlink\" title=\"指定构造器和便利构造器\"></a>指定构造器和便利构造器</h3><p>指定构造器是主要的构造手段，每个类至少要有1个，意味着可以有多个，但是多数情况下会是1个，而便利构造器则没有要求。指定构造器必须完全初始化该类引入的所有存储属性，并调用适当的父类构造器以继续完成父类中属性的初始化过程。便利构造器则要求最终要调用一个指派构造器。</p>\n<p>在语法上便利构造器和指定构造器没有太大差别，只是在指定构造器 <code>init</code> 前多了一个 <code>convenience</code> 关键字<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(params) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类的构造器代理\"><a href=\"#类的构造器代理\" class=\"headerlink\" title=\"类的构造器代理\"></a>类的构造器代理</h3><p>为了简化指定构造器和便利构造器之间的关系，Swift 对构造器代理应用以下三个规则：</p>\n<ol>\n<li><strong>一个指定构造器必须调用其直接父类的指定构造器。</strong></li>\n<li><strong>一个便利构造器必须调用类中其它的构造器。</strong></li>\n<li><strong>一个便利构造器必须最终调用一个指定构造器。</strong></li>\n</ol>\n<p>用两句话概括就是：</p>\n<ul>\n<li>指定构造器总是向上代理</li>\n<li>便利构造器总是横向代理</li>\n</ul>\n<p>下面的图很好地解释了这个规则<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170228/13/1843604332017022813450909.png?487x379_130\" alt=\"\"></p>\n<h3 id=\"两段式构造\"><a href=\"#两段式构造\" class=\"headerlink\" title=\"两段式构造\"></a>两段式构造</h3><p>Swift 中类的初始化分为两个阶段。在第一个阶段中，每个存储属性都要被赋值，如果有一部分属性是从父类继承得来，那么调用父类的构造器来完成所有存储属性的赋值。反正就是在第一个阶段要保证所有的存储属性都要有初始值。第二阶段就可以对属性进行进一步操作了。</p>\n<p>使用两段式构造会让初始化过程更加安全。两段式构造防止属性值在初始化之前被访问，并防止属性值被另一个构造器意外设置为不同的值。</p>\n<p>同时，Swift 的编译器会为两段式构造执行四个有用的安全检查，以确保这个过程不会发生错误：</p>\n<ul>\n<li><strong>安全检查 1：在进行构造器的向上代理之前，必须确保类中所有的存储属性都被初始化。</strong></li>\n</ul>\n<p>如上所述，当所有存储属性的初始状态已知时，对象的内存才被认为是完全初始化的。为了满足这条规则，指定构造器必须确保在它在移交给初始化链之前初始化它自己的所有属性。</p>\n<ul>\n<li><strong>安全检查 2：在给继承来的属性赋值之前，指定构造器必须先向上代理父类的构造器。如果不这么做的话，在给继承来的属性赋完值后，它可能会在父类的构造器中被重写。</strong></li>\n<li><strong>安全检查 3：一个便利构造器在给任何属性赋值之前，必须先调用其它的构造器。如果不这么做的话，便利构造器赋的值会被指定构造器覆盖。</strong></li>\n<li><strong>安全检查 4：在两段式构造过程的第一阶段完成之前，初始化函数不能调用其它实例方法, 不能从实例属性中取值, 也不能用<code>self</code>。</strong></li>\n</ul>\n<p>结合上面的四个安全检查，再来看看两段式构造过程做了什么：</p>\n<h5 id=\"阶段-1\"><a href=\"#阶段-1\" class=\"headerlink\" title=\"阶段 1\"></a>阶段 1</h5><ul>\n<li>类的一个指定构造器或便利构造器被调用。</li>\n<li>为该类的新实例分配内存。但是内存还未初始化。</li>\n<li>指定构造器确保所有的存储属性都有值。这些存储属性的内存现在已初始化。</li>\n<li>指定构造器将初始化移交给父类初始化函数来对父类存储属性实现同样的操作。</li>\n<li>这个过程一直沿着继承链持续下去，直到达到继承链顶端。</li>\n<li>到了继承链顶端，并且最终父类保证所有的存储属性都有值之后，实例的内存就被当做完全初始化了，此时阶段1完成。</li>\n</ul>\n<h5 id=\"阶段-2\"><a href=\"#阶段-2\" class=\"headerlink\" title=\"阶段 2\"></a>阶段 2</h5><ul>\n<li>从继承链顶端倒回来，每一个指派初始化函数都可以进一步定制实例，初始化函数至此可以访问 <code>self</code>，并且可以修改自己的属性，调用实例方法，等等。</li>\n<li>最终，调用链上的任意便利构造器都可以操作实例了，也可以访问 <code>self</code>。</li>\n</ul>\n<h3 id=\"构造器的继承和重载\"><a href=\"#构造器的继承和重载\" class=\"headerlink\" title=\"构造器的继承和重载\"></a>构造器的继承和重载</h3><p>与 Objective-C 不同，Swift 中的子类默认不会自动从父类那里继承其构造器。虽然不能自动继承不过我们还是有办法从父类那里继承构造器。</p>\n<p>当子类在覆盖父类的指定构造器时，需要要用 <code>override</code> 来修饰，即使你的子类的构造器的实现是一个便利构造器。但是，如果子类的指定造器与父类的便利构造器相同，那么父类的便利构造器永远都不会被子类调用到，所以这种情况是不需要 <code>override</code> 的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal &#123;</span><br><span class=\"line\">  var numberOfFoots: Int</span><br><span class=\"line\">  var name: String</span><br><span class=\"line\">  </span><br><span class=\"line\">  init(name: String, foots: Int) &#123;</span><br><span class=\"line\">    self.name = name</span><br><span class=\"line\">    numberOfFoots = foots</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  convenience init(name: String) &#123;</span><br><span class=\"line\">    self.init(name: name, foots: 4)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class 🐔: Animal &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  override init(name: String, foots: Int) &#123;</span><br><span class=\"line\">    super.init(name: name, foots: foots)</span><br><span class=\"line\">    numberOfFoots = 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  init(name: String) &#123;</span><br><span class=\"line\">    super.init(name: name, foots: 2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，<code>Animal</code> 分别定义了一个指定构造器和便利构造器，在 🐔 中重写了父类的<code>init(name: String, foots: Int)</code>，所以要使用 <code>override</code> 关键字，并且又定义了一个跟父类便利构造器相同的指定构造器，这个时候就不需要 <code>override</code> 关键字了。因为便利构造器只能横向代理，是不会被子类重写的。</p>\n<h3 id=\"构造器的自动继承\"><a href=\"#构造器的自动继承\" class=\"headerlink\" title=\"构造器的自动继承\"></a>构造器的自动继承</h3><p>上面已经说过，Swift 中的子类默认不会自动继承父类的构造函数。但是，如果满足某些条件，父类的构造器会自动继承。以下就是构造器会自动继承的两个规则：</p>\n<ul>\n<li><strong>规则 1</strong> <br><br>  如果子类没有定义任何指定构造器，它会自动继承父类所有的指定构造器。</li>\n<li><strong>规则 2</strong> <br><br>  如果子类实现了父类中所有的指定构造器——不管是从规则1继承而来还是提供了自己的实现，那么它会自动继承父类所有的便利构造器。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">\"unknow\"</span>, age: age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: name, age: <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span>: <span class=\"title\">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中 <code>Man</code> 继承了 <code>Person</code> ，根据规则 1，<code>Man</code> 会继承父类的所有的指定构造器，同时根据规则 2，<code>Man</code> 实现了父类中所有的指定构造器 (这里是继承得来)，所以它会自动继承父类所有的便利构造器。就像下面这样：<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170228/15/18436043320170228153534059.png?421x118_130\" alt=\"\"></p>\n<h2 id=\"可失败的构造器\"><a href=\"#可失败的构造器\" class=\"headerlink\" title=\"可失败的构造器\"></a>可失败的构造器</h2><p>有时候我们需要构造失败，例如传入了不恰当的参数，这种情况使用可失败的构造器是很有用的，这样可以引起调用者的注意。</p>\n<p>为了应对可能失败的初始化条件，可以为我们的类型（类、结构体或枚举）定义一个或多个可失败构造器。用 <code>init?</code> 就可以定义一个可失败构造器。不过可失败和不可失败的构造器不能有一样的参数类型列表，否则就有二义性了。当构造失败时，可以返回 <code>nil</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> species: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(species: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> species.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.species = species</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过可失败构造器实例化的对象是个可选值，所以在使用时需要解包：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> giraffe = <span class=\"type\">Animal</span>(species: <span class=\"string\">\"Giraffe\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"An animal was initialized with a species of <span class=\"subst\">\\(giraffe.species)</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可失败构造器的传递\"><a href=\"#可失败构造器的传递\" class=\"headerlink\" title=\"可失败构造器的传递\"></a>可失败构造器的传递</h3><p>类，结构或枚举的可失败构造器可以从相同的类，结构或枚举中代理给另一个可失败构造器。类似地，子类的可失败构造器可以向上代理父类的可失败构造器。</p>\n<p>在任何种情况下，如果委托给另一个构造器导致初始化失败，整个初始化过程立即失败，并且不再执行初始化代码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lass <span class=\"type\">Product</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartItem</span>: <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> quantity: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> quantity &lt; <span class=\"number\">1</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.quantity = quantity</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重载可失败构造器\"><a href=\"#重载可失败构造器\" class=\"headerlink\" title=\"重载可失败构造器\"></a>重载可失败构造器</h3><p>你可以像重载普通构造器一样，重载父类的可失败构造器。你可以在子类中用普通的构造器重载父类的可失败构造器，但是不能反过来。看下面的例子就很清楚了：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Document</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutomaticallyNamedDocument</span>: <span class=\"title\">Document</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UntitledDocument</span>: <span class=\"title\">Document</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">\"[Untitled]\"</span>)!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"必需构造器-Required-Initializers\"><a href=\"#必需构造器-Required-Initializers\" class=\"headerlink\" title=\"必需构造器(Required Initializers)\"></a>必需构造器(Required Initializers)</h2><p>如果 <code>init</code> 用了 <code>required</code> 来修饰， 那么意味着子类必需要实现这个构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// initializer implementation goes here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在子类重写父类的必需构造器时，仍然需要用<code>required</code> 来修饰，而不用使用 <code>override</code> 关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSubclass</span>: <span class=\"title\">SomeClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// subclass implementation of the required initializer goes here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你满足构造器继承的条件的话，必需构造器也不是一定要自己实现的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是 Swift 中构造器的简单介绍。与 Objective-C 相比，Swift 中的构造过程确实比较复杂，这也确确实实地体现了 Swift 是一门安全的语言。总的来说，Swift 的构造过程就是为了在任何实例使用之前所有的存储属性都要先初始化完成。</p>"},{"title":"Swift与面向协议编程的那些事","date":"2018-01-08T03:53:41.000Z","_content":"\n\n\n一直想写一些 Swift 的东西，却不知道从何写起。因为想写的东西太多，然后所有的东西都混杂在一起，导致什么都写不出来。翻了翻以前在组内分享的一些东西，想想把这些内容整理下，写进博客吧。我对计划要写的东西做了个清单（最近做什么都喜欢在前一天睡觉前做个清单，这样多少改善了我的拖延症🤪）：\n\n<!--more-->\n\n- [ ] 面向协议编程\n- [ ] 使用值类型代替引用类型\n- [ ] 函数式编程\n- [ ] 单向数据流\n\n\n\n面向协议编程是 Swift 不同于其他语言的一个特性之一，也是比 Objective-C 强大的一个语言特性（并不是Swift 独有的，但是比 OC 的协议要强大很多），所以以面向协议编程作为 Swift 系列文章的开端是最合适不过的了。\n\n文章的内容可能有点长，我就把要讲的内容简单地列了一下，同学们可以根据自己掌握的情况，跳到对应的小结进行阅读。下面是主要内容：\n\n* 面向协议编程不是个新概念\n* Swift 中的协议\n  * 从一个绘图应用开始。通过实现一个绘图应用，来讲解在 Swift 中使用协议\n  * 带有 Self 和关联类型的协议\n    * 带有 Self 的协议。通过实现一个二分查找，来讲解如何在协议中使用 Self\n    * 带有关联类型的协议。通过实现一个带加载动画的数据加载器，来讲解如何在协议中使用关联类型\n  * 协议与函数派发。通过一个使用多态的例子，来讲解函数派发在协议中的表现\n* 使用协议改善既有的代码设计\n\n\n\n## 面向协议编程不是个新概念\n\n面向协议编程并不是一个新概念，它其实就是广为所知的面向接口编程。面向协议编程 (Protocol Oriented Programming) 是 Apple 在 2015 年 WWDC 上提出的 Swift 的一种编程范式。\n\n\n\n很多程序员都能理解类、对象、继承和接口这些面向对象的概念（不知道的自己面壁去啊）。可是类与接口的区别何在？有类了干嘛要使用接口？相信很多人都有这样的疑问。接口（协议是同一个东西）定义了类型，实现接口（子类型化）让我们可以用一个对象来代替另一个对象。另一方面，类继承是通过复用父类的功能或者只是简单地共享代码和表述，来定义对象的实现和类型的一种机制。类继承让我们能够从现成的类继承所需要大部分功能，从而快速定义新的类。所以接口侧重的是类型（是把某个类型当做另一种类型来用），而类侧重的是复用。理解了这个区别你就知道在什么时候使用接口，什么时候使用类了。\n\nGoF 在《设计模式》一书中提到了可复用面向对象软件设计的原则：\n\n> 针对接口编程，而不是针对实现编程\n\n定义具有相同接口的类群很重要，因为多态是基于接口的。其他面向对象的编程语言，类如 Java，允许我们定义 \"接口\"类型，它确定了客户端同所有其他具体类直接到一种 \"合约\"。Objective-C 和 Swift中与之对应的就是协议（protocol）了。协议也是对象之间的一种合约，但本身是不能够实例化为对象的。实现协议或者从抽象类继承，使得对象共享相同的接口。因此，子类型的所有对象，都可以针对协议或抽象类的接口做出应答。\n\n\n\n## Swift 中的协议\n\n在 WWDC2015 上，Apple 发布了Swift 2。新版本包含了很多新的语言特性。在众多改动之中，最引人注意的就是 protocol extensions。在 Swift 第一版中，我们可以通过 extension 来为已有的 class，struct 或 enum 拓展功能。而在 Swift 2 中，我们也可以为 protocol 添加 extension。可能一开始看上去这个新特性并不起眼，实际上 protocol extensions 非常强大，以至于可以改变 Swift 之前的某些编程思想。后面我会给出一个 protocol extension 在实际项目中使用案例。\n\n\n\n除了协议拓展，Swift 中的协议还有一些具有其他特性的协议，比如带有关联类型的协议、包含 Self 的协议。这两种协议跟普通的协议还是有一些不同的，后面我也会给出具体的例子。\n\n\n\n我们现在可以开始编写代码，来掌握在实际开发中使用 Swift 协议的技巧。下面的绘图应用和二分查找的例子是来自 WWDC2015 中[这个 Session](https://developer.apple.com/videos/play/wwdc2015/408/)。在写本文前，笔者也想了很多例子，但是始终觉得没有官方的例子好。所以我的建议是：[这个 Session](https://developer.apple.com/videos/play/wwdc2015/408/) 至少要看一遍。看了一遍后，开始写自己的实现。\n\n\n\n### 从一个绘图应用开始\n\n现在我们可以先通过完成一个具体的需求，来学习如何在 Swift 中使用协议。\n\n我们的需求是实现一个可以绘制复杂图形的绘图程序，我们可以先通过一个 Render 来定义一个简单的绘制过程：\n\n```swift\nstruct Renderer {\n    func move(to p: CGPoint) { print(\"move to (\\(p.x), \\(p.y))\") }\n    \n    func line(to p: CGPoint) { print(\"line to (\\(p.x), \\(p.y))\")}\n    \n    func arc(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arc at center: \\(center), radius: \\(radius), startAngel: \\(starAngle), endAngle: \\(endAngle)\")\n    }\n}\n```\n\n然后可以定义一个 Drawable 协议来定义一个绘制操作：\n\n```swift\nprotocol Drawable {\n    func draw(with render: Renderer)\n}\n```\n\nDrawable 协议定义了一个绘制操作，它接受一个具体的绘制工具来进行绘图。这里将可绘制的内容和实际的绘制操作分开了，这么做的目的是为了职责分离，在后面你会看到这种设计的好处。\n\n\n\n如果我们想绘制一个圆，我们可以很简单地利用上面实现好了的绘制工具来绘制一个圆形，就像下面这样：\n\n```swift\nstruct Circle: Drawable {\n    let center: CGPoint\n    let radius: CGFloat\n    \n    func draw(with render: Renderer) {\n        render.arc(at: center, radius: radius, starAngle: 0, endAngle: CGFloat.pi * 2)\n    }\n}\n```\n\n现在我们又想要绘制一个多边形，那么有了 Drawable 协议，实现起来也非常简单：\n\n```swift\nstruct Polygon: Drawable {\n    let corners: [CGPoint]\n    \n    func draw(with render: Renderer) {\n        if corners.isEmpty { return }\n        render.move(to: corners.last!)\n        for p in corners { render.line(to: p) }\n    }\n}\n```\n\n简单图形的绘制已经完成了，现在可以完成我们这个绘图程序了：\n\n```swift\nstruct Diagram: Drawable {\n    let elements: [Drawable]\n    \n    func draw(with render: Renderer) {\n        for ele in elements { ele.draw(with: render) }\n    }\n}\n\nlet render = Renderer()\n\nlet circle = Circle(center: CGPoint(x: 100, y: 100), radius: 100)\nlet triangle = Polygon(corners: [\n    CGPoint(x: 100, y: 0),\n    CGPoint(x: 0, y: 150),\n    CGPoint(x: 200, y: 150)])\n\nlet client = Diagram(elements: [triangle, circle])\nclient.draw(with: render)\n\n// Result:\n// move to (200.0, 150.0)\n// line to (100.0, 0.0)\n// line to (0.0, 150.0)\n// line to (200.0, 150.0)\n// arc at center: (100.0, 100.0), radius: 100.0, startAngel: 0.0, endAngle: 6.28318530717959\n```\n\n通过上面的代码很容易就实现了一个简单的绘图程序了。不过，目前这个绘图程序只能在控制台中显示绘制的过程，我们想把它绘制到屏幕上怎么办呢？要想把内容绘制到屏幕上其实也简单的很，仍然是使用协议，我们可以把 Renderer 结构体改成 protocol：\n\n```swift\nprotocol Renderer {\n    func move(to p: CGPoint)\n    \n    func line(to p: CGPoint)\n    \n    func arc(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)\n}\n```\n\n完成了 Renderer 的改造，我们可以使用 CoreGraphics 来在屏幕上绘制图形了：\n\n```swift\nextension CGContext: Renderer {\n    func line(to p: CGPoint) {\n        addLine(to: p)\n    }\n    \n    func arc(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat) {\n        let path = CGMutablePath()\n        path.addArc(center: center, radius: radius, startAngle: starAngle, endAngle: endAngle, clockwise: true)\n        addPath(path)\n    }\n}\n```\n\n通过拓展 CGContext，使其遵守 Renderer 协议，然后使用 CGContext 提供的接口非常简单的实现了绘制工作。 下图是这个绘图程序最终的效果：\n\n![](render.png)\n\n完成上面绘图程序的关键，是将图形的定义和实际绘制操作拆开了，通过设计 `Drawable` 和 `Renderer` 两个协议，完成了一个高拓展的程序。想绘制其他形状，只要实现一个新的 Drawable 就可以了。例如我想绘制下面这样的图形：\n\n<img src=\"render2.png\" width=\"390px\" height=\"390px\" />\n\n我们可以将原来的 Diagram 进行缩放就可以了。代码如下：\n\n```swift\nlet big = Diagram(elements: [triangle, circle])\ndiagram = Diagram(elements: [big, big.scaled(by: 0.2)])\n```\n\n而通过实现 Renderer 协议，你既可以完成基于控制台的绘图程序也可以完成使用 CoreGraphics 的绘图程序，甚至可以很简单地就能实现一个使用 OpenGL 的绘图程序。这种编程思想，在编写跨平台的程序是非常有用的。\n\n\n\n### 带有 Self 和关联类型的协议\n\n我在前面部分已经指出，带有关联类型的协议和普通的协议是有一些不同的。对于那些在协议中使用了 Self 关键字的协议来说也是如此。在 Swift 3 中，这样的协议不能被当作独立的类型来使用。这个限制可能会在今后实现了完整的泛型系统后被移除，但是在那之前，我们都必须要面对和处理这个限制。\n\n\n\n#### 带有 Self 的协议\n\n我们仍然从一个例子开始：\n\n```swift\nfunc binarySearch(_ keys: [Int], for key: Int) -> Int {\n    var lo = 0, hi = keys.count - 1\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2\n        if keys[mid] == key { return mid }\n        else if keys[mid] < key { lo = mid + 1 }\n        else { hi = mid - 1 }\n    }\n    return -1\n}\n\nlet position = binarySearch([Int](1...10), for: 3)\n// result: 2\n```\n\n上面的代码实现了一个简单的二分查找，但是目前只支持查找 Int 类型的数据。如果想支持其他类型的数据，我们必须对上面的代码进行改造，改造的方向就是使用 protocol，例如我可以添加下面的实现：\n\n```swift\nprotocol Ordered {\n    func precedes(other: Ordered) -> Bool\n    \n    func equal(to other: Ordered) -> Bool\n}\n\nfunc binarySearch(_ keys: [Ordered], for key: Ordered) -> Int {\n    var lo = 0, hi = keys.count - 1\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2\n        if keys[mid].equal(to: key) { return mid }\n        else if keys[mid].precedes(other: key) { lo = mid + 1 }\n        else { hi = mid - 1 }\n    }\n    return -1\n}\n```\n\n为了支持查找 Int 类型数据，我们就必须让 Int 实现 `Oredered` 协议：\n\n![](binarysearch1.png)\n\n写完上面的实现，发现代码根本就不能执行，报错说的是 Int 类型和 Oredered 类型不能使用 `<` 进行比较，下面的 `==` 也是一样。为了解决这个问题，我们可以在 protocol 中使用 Self：\n\n```swift\nprotocol Ordered {\n    func precedes(other: Self) -> Bool\n    \n    func equal(to other: Self) -> Bool\n}\n\nextension Int: Ordered {\n    func precedes(other: Int) -> Bool { return self < other }\n    \n    func equal(to other: Int) -> Bool { return self == other }\n}\n```\n\n在 Oredered 中使用了 Self 后，编译器会在实现中将 Self 替换成具体的类型，就像上面的代码中，将 Self 替换成了 Int。这样我们就解决了上面的问题。但是又出现了新的问题：\n\n![](binarysearch2.png)\n\n这就是上面所说的，带有 Self 的协议不能被当作独立的类型来使用。在这种情况下，我们可以使用泛型来解决这个问题：\n\n```swift\nfunc binarySearch<T: Ordered>(_ keys: [T], for key: T) -> Int {...}\n```\n\n如果是 String 类型的数据，也可以使用这个版本的二分查找了：\n\n```swift\nextension String: Ordered {\n    func precedes(other: String) -> Bool { return self < other }\n    \n    func equal(to other: String) -> Bool { return self == other }\n}\n\nlet position = binarySearch([\"a\", \"b\", \"c\", \"d\"], for: \"d\")\n// result: 3\n```\n\n当然，如果你熟悉 Swift 标准库中的协议的话，你会发现上面的实现可以简化为下面的几行代码：\n\n```swift\nfunc binarySearch<T: Comparable>(_ keys: [T], for key: T) -> Int? {\n    var lo = 0, hi = keys.count - 1\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2\n        if keys[mid] == key { return mid }\n        else if keys[mid] < key { lo = mid + 1 }\n        else { hi = mid - 1 }\n    }\n    return nil\n}\n```\n\n这里我们定义 Ordered 协议只是为了演示在协议中使用 Self 的过程。实际开发中，可以灵活地运用标准库中提供的协议。其实在标准库中 Comparable 协议中也是用到了 Self 的：\n\n```swift\nextension Comparable {\n    public static func > (lhs: Self, rhs: Self) -> Bool\n}\n```\n\n\n\n上面通过实现一个二分查找算法，演示了如何使用带有 Self 的协议。简单来讲，你可以把 Self 看做一个占位符，在后面具体类型的实现中可以替换成实际的类型。\n\n\n\n#### 带有关联类型的协议\n\n带有关联类型的协议也不能被当作独立的类型来使用。在 Swift 中这样的协议非常多，例如 Collection，Sequence，IteratorProtocol 等等。如果你仍然想使用这种协议作为类型，可以使用一种叫做类型擦除的技术。你可以从[这里](http://jewelz.me/cjs77iamr00028is6rdrwj0cw/)了解如何实现它。\n\n下面仍然通过一个例子来演示如何在项目中使用带有关联类型的协议。这次我们要通过协议实现一个带有加载动画的数据加载器，并且在出错时展示相应的占位图。\n\n这里，我们定义了一个 Loading 协议，代表可以加载数据，不过要满足 Loading 协议，必须要提供一个 `loadingView`，这里的 `loadingView` 就是协议中关联类型的实例。\n\n```swift\nprotocol Loading: class {\n    associatedtype LoadingView: UIView, LoadingViewType\n    \n    var loadingView: LoadingView { get }\n}\n```\n\n Loading 协议中的关联类型有两个要求，首先必须是 UIView 的子类，其次需要遵守 LoadingViewType 协议。LoadingViewType 可以简单定义成下面这样：\n\n```swift\nprotocol LoadingViewType: class {\n    var isAnimating: Bool { get set }\n    var isError: Bool { get set }\n    \n    func startAnimating()\n    func stopAnimating()\n}\n```\n\n我们可以在 Loading 协议的拓展中定义一些跟加载逻辑相关的方法：\n\n```swift\nextension Loading where Self: UIViewController {\n    func startLoading() {\n        if !view.subviews.contains(loadingView) {\n            view.addSubview(loadingView)\n            loadingView.frame = view.bounds\n        }\n        view.bringSubview(toFront: loadingView)\n        loadingView.startAnimating()\n    }\n    \n    func stopLoading() {\n        loadingView.stopAnimating()\n    }\n}\n\n```\n\n我们可以继续给 Loading 添加一个带网络数据加载的逻辑：\n\n```swift\nextension Loading where Self: UIViewController {\n    func loadData(with re: Resource, completion: @escaping (Result) -> Void) {\n        startLoading()\n        NetworkTool.shared.request(re) { result in\n            guard case .succeed = result else {\n                self.loadingView.isError = true // 显示出错的视图，这里可以根据错误类型显示对应的视图，这里简单处理了\n                self.stopLoading()\n                return\n            }\n            completion(result)\n            self.loadingView.isError = false\n            self.stopLoading()\n        }\n    }\n}\n```\n\n以上就是整个 Loading 协议的实现。这里跟上面的例子不同，这儿主要使用了协议的拓展来实现需求。这样做的原因，是因为所有的加载逻辑几乎都是一样的，可能的区别就是加载的动画不同。所以这里把负责动画的部分放到了  LoadingViewType 协议里，Loading 的加载逻辑都放到协议的拓展里进行定义。协议声明里定义的方法与在协议拓展里定义的方法其实是有区别的，后面也会给出一个例子来说明它们都区别。\n\n要想让 ViewController 有加载数据的功能，只要让控制器遵守 Loading 协议就行，然后在合适的地方调用 `loadData` 方法：\n\n```swift\nclass ViewController: UIViewController, Loading {\n    var loadingView = TestLoadingView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        loadData(with: Test.justEmpty) { print($0) }\n    }\n}\n```\n\n下面是运行结果：\n\n![](loading.gif)\n\n我们只要让控制器遵守 Loading 协议，就实现了从网络加载数据并带有加载动画，而且在出错时显示错误视图的功能。这里肯定有人会说，使用继承也可以实现上述需求。当然，我们可以把协议中的加载逻辑都放到一个基类中，也可以实现该需求。如果后面又要添加刷新和分页功能，那么这些代码也只能放到基类中，这样就会随着项目越来越大，基类也变得越来越臃肿，这就是所谓的上帝类。如果我们将数据加载、刷新、分页作为不同的协议，让控制器需要什么就遵守相应的协议，那么控制器就不会包含那些它不需要的功能了。这就像搭积木一样，可以灵活地给程序添加它需要的内容。\n\n\n\n### 协议与函数派发\n\n函数派发就是一个程序在调用一个方法时，如何选择要执行的指令的过程。当我们每次调用一个方法时函数派发都会发生。\n\n编译型语言有三种基础的函数派发方式：直接派发(Direct Dispatch)，函数表(Table Dispatch) 和消息(Message Dispatch)。大部分语言支持一到两种。Java 默认使用函数表派发，你可以通过使用 `final` 关键字将其变为直接派发。C++ 默认使用直接派发，通过 `virtual` 关键字可以改为函数表派发。Objective-C 总是使用消息派发，但允许开发者使用 C 直接派发来获取性能的提高（比如直接调用 IMP）。Swift 在这方面走在了前面，她支持全部的3种派发方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。\n\n这里只简单说一下函数派发在 protocol 中的不同表现。看下面的例子：\n\n```swift\nprotocol Flyable {\n    func fly()\n}\n```\n\n上面定义了 Flyable 协议，表示了飞行的能力。遵守该协议就必须实现 `fly()` 方法。我们可以提供几个实现：\n\n```swift\nstruct Eagle: Flyable {\n    func fly() { print(\"🦅 is flying\") }\n}\n\nstruct Plane: Flyable {\n    func fly() { print(\"✈️ is flying\") }\n}\n```\n\n写个客户端程序测试一下：\n\n```swift\nlet fls: [Flyable] = [Eagle(), Plane()]\nfor fl in fls {\n    fl.fly()\n}\n\n// result:\n🦅 is flying\n✈️ is flying\n```\n\n上面测试程序的运行结果和我们的设想完全一样。上面 `fly()` 方法是在协议的定义里进行声明的，现在我们把它放到协议拓展里进行声明，就像下面这样：\n\n```swift\nextension Flyable {\n    func fly() { print(\"Something is flying\") }\n}\n```\n\n在运行前你可以先猜测一下运行的结果。\n\n先暂停 3 秒钟...\n\n\n\n下面是运行结果：\n\n```\nSomething is flying\nSomething is flying\n```\n\n你看，我们只是简单地把在协议定义里的方法挪到了协议拓展里，运行结果却完全不同。出现像上面那样的运行结果还跟这行代码有关：\n\n```swift\nlet fls: [Flyable] = [Eagle(), Plane()]\n```\n\n如果你直接使用具体类型进行调用，肯定是没有问题的，就像下面这样：\n\n```swift\nEagle().fly() \t// 🦅 is flying\nPlane().fly() \t// ✈️ is flying\n```\n\n出现上面两种完全不同的结果，主要是因为函数派发根据方法声明的位置的不同而采用了不同的策略，总结起来有这么几点:\n\n- 值类型（struct, enum）总是会使用直接派发\n- 而协议和类的 `extension` 都会使用直接派发\n- 协议和普通 Swift 类声明作用域里的方法都会使用函数表进行派发\n- 继承 `NSObject` 的类声明作用域里的方法都会使用函数表派发\n- 继承 `NSObject` 的类的 `extension` 、使用 `dynamic` 标记的方法会使用消息派发\n\n下面这张图很清楚地总结了 Swift 中函数派发方式，不过少了 `dynamic` 的方式。\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png)\n\n在上面的例子中，虽然 `Eagle` 和 `Plane` 都实现了 `fly()` 方法，但在多态时，仍然会调用协议拓展里的默认实现。因为，在协议拓展声明的方法，在调用时，使用的是直接派发，直接派发总是要优于其他的派发方式的。\n\n所以理解 Swift 中的函数派发，对于我们写出结构清晰、没有 bug 的代码是非常重要的。当然，如果你没有使用到多态，直接使用具体的类型，是不会出现上面的问题的。既然你都开始 \"针对接口编程，而不是针对实现编程\"，怎么会用不到多态呢，是吧。\n\n\n\n## 使用协议改善既有的代码设计\n\n通过上面的例子可以看出，通过协议进行代码共享相比与通过继承的共享，有这几个优势：\n\n- 我们不需要被强制使用某个父类。\n- 我们可以让已经存在的类型满足协议 (比如我们让 CGContext 满足了 Renderer)。子类就没那么灵活了，如果 CGContext 是一个类的话，我们无法以追溯的方式去变更它的父类。\n- 协议既可以用于类，也可以用于结构体、枚举，而继承就无法和结构体、枚举一起使用了。\n- 协议可以模拟多继承。\n- 最后，当处理协议时，我们无需担心方法重写或者在正确的时间调用 super 这样的问题。\n\n\n\n通过面向协议的编程，我们可以从传统的继承上解放出来，用一种更灵活的方式，像搭积木一样对程序进行组装。协议和类一样，在设计时要遵守 \"单一职责\" 原则，让每个协议专注于自己的功能。得益于协议扩展，我们可以减少继承带来的共享状态的风险，让代码更加清晰。\n\n使用面向协议编程有助于我们写出低耦合、易于扩展以及可测试的代码，而结合泛型来使用协议，更可以让我们免于动态调用和类型转换的苦恼，保证了代码的安全性。\n\n","source":"_posts/Swift-面向协议编程的那些事.md","raw":"---\ntitle: Swift与面向协议编程的那些事\ndate: 2018-01-08 11:53:41\ntags: Swift\ncategories: Swift\n---\n\n\n\n一直想写一些 Swift 的东西，却不知道从何写起。因为想写的东西太多，然后所有的东西都混杂在一起，导致什么都写不出来。翻了翻以前在组内分享的一些东西，想想把这些内容整理下，写进博客吧。我对计划要写的东西做了个清单（最近做什么都喜欢在前一天睡觉前做个清单，这样多少改善了我的拖延症🤪）：\n\n<!--more-->\n\n- [ ] 面向协议编程\n- [ ] 使用值类型代替引用类型\n- [ ] 函数式编程\n- [ ] 单向数据流\n\n\n\n面向协议编程是 Swift 不同于其他语言的一个特性之一，也是比 Objective-C 强大的一个语言特性（并不是Swift 独有的，但是比 OC 的协议要强大很多），所以以面向协议编程作为 Swift 系列文章的开端是最合适不过的了。\n\n文章的内容可能有点长，我就把要讲的内容简单地列了一下，同学们可以根据自己掌握的情况，跳到对应的小结进行阅读。下面是主要内容：\n\n* 面向协议编程不是个新概念\n* Swift 中的协议\n  * 从一个绘图应用开始。通过实现一个绘图应用，来讲解在 Swift 中使用协议\n  * 带有 Self 和关联类型的协议\n    * 带有 Self 的协议。通过实现一个二分查找，来讲解如何在协议中使用 Self\n    * 带有关联类型的协议。通过实现一个带加载动画的数据加载器，来讲解如何在协议中使用关联类型\n  * 协议与函数派发。通过一个使用多态的例子，来讲解函数派发在协议中的表现\n* 使用协议改善既有的代码设计\n\n\n\n## 面向协议编程不是个新概念\n\n面向协议编程并不是一个新概念，它其实就是广为所知的面向接口编程。面向协议编程 (Protocol Oriented Programming) 是 Apple 在 2015 年 WWDC 上提出的 Swift 的一种编程范式。\n\n\n\n很多程序员都能理解类、对象、继承和接口这些面向对象的概念（不知道的自己面壁去啊）。可是类与接口的区别何在？有类了干嘛要使用接口？相信很多人都有这样的疑问。接口（协议是同一个东西）定义了类型，实现接口（子类型化）让我们可以用一个对象来代替另一个对象。另一方面，类继承是通过复用父类的功能或者只是简单地共享代码和表述，来定义对象的实现和类型的一种机制。类继承让我们能够从现成的类继承所需要大部分功能，从而快速定义新的类。所以接口侧重的是类型（是把某个类型当做另一种类型来用），而类侧重的是复用。理解了这个区别你就知道在什么时候使用接口，什么时候使用类了。\n\nGoF 在《设计模式》一书中提到了可复用面向对象软件设计的原则：\n\n> 针对接口编程，而不是针对实现编程\n\n定义具有相同接口的类群很重要，因为多态是基于接口的。其他面向对象的编程语言，类如 Java，允许我们定义 \"接口\"类型，它确定了客户端同所有其他具体类直接到一种 \"合约\"。Objective-C 和 Swift中与之对应的就是协议（protocol）了。协议也是对象之间的一种合约，但本身是不能够实例化为对象的。实现协议或者从抽象类继承，使得对象共享相同的接口。因此，子类型的所有对象，都可以针对协议或抽象类的接口做出应答。\n\n\n\n## Swift 中的协议\n\n在 WWDC2015 上，Apple 发布了Swift 2。新版本包含了很多新的语言特性。在众多改动之中，最引人注意的就是 protocol extensions。在 Swift 第一版中，我们可以通过 extension 来为已有的 class，struct 或 enum 拓展功能。而在 Swift 2 中，我们也可以为 protocol 添加 extension。可能一开始看上去这个新特性并不起眼，实际上 protocol extensions 非常强大，以至于可以改变 Swift 之前的某些编程思想。后面我会给出一个 protocol extension 在实际项目中使用案例。\n\n\n\n除了协议拓展，Swift 中的协议还有一些具有其他特性的协议，比如带有关联类型的协议、包含 Self 的协议。这两种协议跟普通的协议还是有一些不同的，后面我也会给出具体的例子。\n\n\n\n我们现在可以开始编写代码，来掌握在实际开发中使用 Swift 协议的技巧。下面的绘图应用和二分查找的例子是来自 WWDC2015 中[这个 Session](https://developer.apple.com/videos/play/wwdc2015/408/)。在写本文前，笔者也想了很多例子，但是始终觉得没有官方的例子好。所以我的建议是：[这个 Session](https://developer.apple.com/videos/play/wwdc2015/408/) 至少要看一遍。看了一遍后，开始写自己的实现。\n\n\n\n### 从一个绘图应用开始\n\n现在我们可以先通过完成一个具体的需求，来学习如何在 Swift 中使用协议。\n\n我们的需求是实现一个可以绘制复杂图形的绘图程序，我们可以先通过一个 Render 来定义一个简单的绘制过程：\n\n```swift\nstruct Renderer {\n    func move(to p: CGPoint) { print(\"move to (\\(p.x), \\(p.y))\") }\n    \n    func line(to p: CGPoint) { print(\"line to (\\(p.x), \\(p.y))\")}\n    \n    func arc(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat) {\n        print(\"arc at center: \\(center), radius: \\(radius), startAngel: \\(starAngle), endAngle: \\(endAngle)\")\n    }\n}\n```\n\n然后可以定义一个 Drawable 协议来定义一个绘制操作：\n\n```swift\nprotocol Drawable {\n    func draw(with render: Renderer)\n}\n```\n\nDrawable 协议定义了一个绘制操作，它接受一个具体的绘制工具来进行绘图。这里将可绘制的内容和实际的绘制操作分开了，这么做的目的是为了职责分离，在后面你会看到这种设计的好处。\n\n\n\n如果我们想绘制一个圆，我们可以很简单地利用上面实现好了的绘制工具来绘制一个圆形，就像下面这样：\n\n```swift\nstruct Circle: Drawable {\n    let center: CGPoint\n    let radius: CGFloat\n    \n    func draw(with render: Renderer) {\n        render.arc(at: center, radius: radius, starAngle: 0, endAngle: CGFloat.pi * 2)\n    }\n}\n```\n\n现在我们又想要绘制一个多边形，那么有了 Drawable 协议，实现起来也非常简单：\n\n```swift\nstruct Polygon: Drawable {\n    let corners: [CGPoint]\n    \n    func draw(with render: Renderer) {\n        if corners.isEmpty { return }\n        render.move(to: corners.last!)\n        for p in corners { render.line(to: p) }\n    }\n}\n```\n\n简单图形的绘制已经完成了，现在可以完成我们这个绘图程序了：\n\n```swift\nstruct Diagram: Drawable {\n    let elements: [Drawable]\n    \n    func draw(with render: Renderer) {\n        for ele in elements { ele.draw(with: render) }\n    }\n}\n\nlet render = Renderer()\n\nlet circle = Circle(center: CGPoint(x: 100, y: 100), radius: 100)\nlet triangle = Polygon(corners: [\n    CGPoint(x: 100, y: 0),\n    CGPoint(x: 0, y: 150),\n    CGPoint(x: 200, y: 150)])\n\nlet client = Diagram(elements: [triangle, circle])\nclient.draw(with: render)\n\n// Result:\n// move to (200.0, 150.0)\n// line to (100.0, 0.0)\n// line to (0.0, 150.0)\n// line to (200.0, 150.0)\n// arc at center: (100.0, 100.0), radius: 100.0, startAngel: 0.0, endAngle: 6.28318530717959\n```\n\n通过上面的代码很容易就实现了一个简单的绘图程序了。不过，目前这个绘图程序只能在控制台中显示绘制的过程，我们想把它绘制到屏幕上怎么办呢？要想把内容绘制到屏幕上其实也简单的很，仍然是使用协议，我们可以把 Renderer 结构体改成 protocol：\n\n```swift\nprotocol Renderer {\n    func move(to p: CGPoint)\n    \n    func line(to p: CGPoint)\n    \n    func arc(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)\n}\n```\n\n完成了 Renderer 的改造，我们可以使用 CoreGraphics 来在屏幕上绘制图形了：\n\n```swift\nextension CGContext: Renderer {\n    func line(to p: CGPoint) {\n        addLine(to: p)\n    }\n    \n    func arc(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat) {\n        let path = CGMutablePath()\n        path.addArc(center: center, radius: radius, startAngle: starAngle, endAngle: endAngle, clockwise: true)\n        addPath(path)\n    }\n}\n```\n\n通过拓展 CGContext，使其遵守 Renderer 协议，然后使用 CGContext 提供的接口非常简单的实现了绘制工作。 下图是这个绘图程序最终的效果：\n\n![](render.png)\n\n完成上面绘图程序的关键，是将图形的定义和实际绘制操作拆开了，通过设计 `Drawable` 和 `Renderer` 两个协议，完成了一个高拓展的程序。想绘制其他形状，只要实现一个新的 Drawable 就可以了。例如我想绘制下面这样的图形：\n\n<img src=\"render2.png\" width=\"390px\" height=\"390px\" />\n\n我们可以将原来的 Diagram 进行缩放就可以了。代码如下：\n\n```swift\nlet big = Diagram(elements: [triangle, circle])\ndiagram = Diagram(elements: [big, big.scaled(by: 0.2)])\n```\n\n而通过实现 Renderer 协议，你既可以完成基于控制台的绘图程序也可以完成使用 CoreGraphics 的绘图程序，甚至可以很简单地就能实现一个使用 OpenGL 的绘图程序。这种编程思想，在编写跨平台的程序是非常有用的。\n\n\n\n### 带有 Self 和关联类型的协议\n\n我在前面部分已经指出，带有关联类型的协议和普通的协议是有一些不同的。对于那些在协议中使用了 Self 关键字的协议来说也是如此。在 Swift 3 中，这样的协议不能被当作独立的类型来使用。这个限制可能会在今后实现了完整的泛型系统后被移除，但是在那之前，我们都必须要面对和处理这个限制。\n\n\n\n#### 带有 Self 的协议\n\n我们仍然从一个例子开始：\n\n```swift\nfunc binarySearch(_ keys: [Int], for key: Int) -> Int {\n    var lo = 0, hi = keys.count - 1\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2\n        if keys[mid] == key { return mid }\n        else if keys[mid] < key { lo = mid + 1 }\n        else { hi = mid - 1 }\n    }\n    return -1\n}\n\nlet position = binarySearch([Int](1...10), for: 3)\n// result: 2\n```\n\n上面的代码实现了一个简单的二分查找，但是目前只支持查找 Int 类型的数据。如果想支持其他类型的数据，我们必须对上面的代码进行改造，改造的方向就是使用 protocol，例如我可以添加下面的实现：\n\n```swift\nprotocol Ordered {\n    func precedes(other: Ordered) -> Bool\n    \n    func equal(to other: Ordered) -> Bool\n}\n\nfunc binarySearch(_ keys: [Ordered], for key: Ordered) -> Int {\n    var lo = 0, hi = keys.count - 1\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2\n        if keys[mid].equal(to: key) { return mid }\n        else if keys[mid].precedes(other: key) { lo = mid + 1 }\n        else { hi = mid - 1 }\n    }\n    return -1\n}\n```\n\n为了支持查找 Int 类型数据，我们就必须让 Int 实现 `Oredered` 协议：\n\n![](binarysearch1.png)\n\n写完上面的实现，发现代码根本就不能执行，报错说的是 Int 类型和 Oredered 类型不能使用 `<` 进行比较，下面的 `==` 也是一样。为了解决这个问题，我们可以在 protocol 中使用 Self：\n\n```swift\nprotocol Ordered {\n    func precedes(other: Self) -> Bool\n    \n    func equal(to other: Self) -> Bool\n}\n\nextension Int: Ordered {\n    func precedes(other: Int) -> Bool { return self < other }\n    \n    func equal(to other: Int) -> Bool { return self == other }\n}\n```\n\n在 Oredered 中使用了 Self 后，编译器会在实现中将 Self 替换成具体的类型，就像上面的代码中，将 Self 替换成了 Int。这样我们就解决了上面的问题。但是又出现了新的问题：\n\n![](binarysearch2.png)\n\n这就是上面所说的，带有 Self 的协议不能被当作独立的类型来使用。在这种情况下，我们可以使用泛型来解决这个问题：\n\n```swift\nfunc binarySearch<T: Ordered>(_ keys: [T], for key: T) -> Int {...}\n```\n\n如果是 String 类型的数据，也可以使用这个版本的二分查找了：\n\n```swift\nextension String: Ordered {\n    func precedes(other: String) -> Bool { return self < other }\n    \n    func equal(to other: String) -> Bool { return self == other }\n}\n\nlet position = binarySearch([\"a\", \"b\", \"c\", \"d\"], for: \"d\")\n// result: 3\n```\n\n当然，如果你熟悉 Swift 标准库中的协议的话，你会发现上面的实现可以简化为下面的几行代码：\n\n```swift\nfunc binarySearch<T: Comparable>(_ keys: [T], for key: T) -> Int? {\n    var lo = 0, hi = keys.count - 1\n    while lo <= hi {\n        let mid = lo + (hi - lo) / 2\n        if keys[mid] == key { return mid }\n        else if keys[mid] < key { lo = mid + 1 }\n        else { hi = mid - 1 }\n    }\n    return nil\n}\n```\n\n这里我们定义 Ordered 协议只是为了演示在协议中使用 Self 的过程。实际开发中，可以灵活地运用标准库中提供的协议。其实在标准库中 Comparable 协议中也是用到了 Self 的：\n\n```swift\nextension Comparable {\n    public static func > (lhs: Self, rhs: Self) -> Bool\n}\n```\n\n\n\n上面通过实现一个二分查找算法，演示了如何使用带有 Self 的协议。简单来讲，你可以把 Self 看做一个占位符，在后面具体类型的实现中可以替换成实际的类型。\n\n\n\n#### 带有关联类型的协议\n\n带有关联类型的协议也不能被当作独立的类型来使用。在 Swift 中这样的协议非常多，例如 Collection，Sequence，IteratorProtocol 等等。如果你仍然想使用这种协议作为类型，可以使用一种叫做类型擦除的技术。你可以从[这里](http://jewelz.me/cjs77iamr00028is6rdrwj0cw/)了解如何实现它。\n\n下面仍然通过一个例子来演示如何在项目中使用带有关联类型的协议。这次我们要通过协议实现一个带有加载动画的数据加载器，并且在出错时展示相应的占位图。\n\n这里，我们定义了一个 Loading 协议，代表可以加载数据，不过要满足 Loading 协议，必须要提供一个 `loadingView`，这里的 `loadingView` 就是协议中关联类型的实例。\n\n```swift\nprotocol Loading: class {\n    associatedtype LoadingView: UIView, LoadingViewType\n    \n    var loadingView: LoadingView { get }\n}\n```\n\n Loading 协议中的关联类型有两个要求，首先必须是 UIView 的子类，其次需要遵守 LoadingViewType 协议。LoadingViewType 可以简单定义成下面这样：\n\n```swift\nprotocol LoadingViewType: class {\n    var isAnimating: Bool { get set }\n    var isError: Bool { get set }\n    \n    func startAnimating()\n    func stopAnimating()\n}\n```\n\n我们可以在 Loading 协议的拓展中定义一些跟加载逻辑相关的方法：\n\n```swift\nextension Loading where Self: UIViewController {\n    func startLoading() {\n        if !view.subviews.contains(loadingView) {\n            view.addSubview(loadingView)\n            loadingView.frame = view.bounds\n        }\n        view.bringSubview(toFront: loadingView)\n        loadingView.startAnimating()\n    }\n    \n    func stopLoading() {\n        loadingView.stopAnimating()\n    }\n}\n\n```\n\n我们可以继续给 Loading 添加一个带网络数据加载的逻辑：\n\n```swift\nextension Loading where Self: UIViewController {\n    func loadData(with re: Resource, completion: @escaping (Result) -> Void) {\n        startLoading()\n        NetworkTool.shared.request(re) { result in\n            guard case .succeed = result else {\n                self.loadingView.isError = true // 显示出错的视图，这里可以根据错误类型显示对应的视图，这里简单处理了\n                self.stopLoading()\n                return\n            }\n            completion(result)\n            self.loadingView.isError = false\n            self.stopLoading()\n        }\n    }\n}\n```\n\n以上就是整个 Loading 协议的实现。这里跟上面的例子不同，这儿主要使用了协议的拓展来实现需求。这样做的原因，是因为所有的加载逻辑几乎都是一样的，可能的区别就是加载的动画不同。所以这里把负责动画的部分放到了  LoadingViewType 协议里，Loading 的加载逻辑都放到协议的拓展里进行定义。协议声明里定义的方法与在协议拓展里定义的方法其实是有区别的，后面也会给出一个例子来说明它们都区别。\n\n要想让 ViewController 有加载数据的功能，只要让控制器遵守 Loading 协议就行，然后在合适的地方调用 `loadData` 方法：\n\n```swift\nclass ViewController: UIViewController, Loading {\n    var loadingView = TestLoadingView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        loadData(with: Test.justEmpty) { print($0) }\n    }\n}\n```\n\n下面是运行结果：\n\n![](loading.gif)\n\n我们只要让控制器遵守 Loading 协议，就实现了从网络加载数据并带有加载动画，而且在出错时显示错误视图的功能。这里肯定有人会说，使用继承也可以实现上述需求。当然，我们可以把协议中的加载逻辑都放到一个基类中，也可以实现该需求。如果后面又要添加刷新和分页功能，那么这些代码也只能放到基类中，这样就会随着项目越来越大，基类也变得越来越臃肿，这就是所谓的上帝类。如果我们将数据加载、刷新、分页作为不同的协议，让控制器需要什么就遵守相应的协议，那么控制器就不会包含那些它不需要的功能了。这就像搭积木一样，可以灵活地给程序添加它需要的内容。\n\n\n\n### 协议与函数派发\n\n函数派发就是一个程序在调用一个方法时，如何选择要执行的指令的过程。当我们每次调用一个方法时函数派发都会发生。\n\n编译型语言有三种基础的函数派发方式：直接派发(Direct Dispatch)，函数表(Table Dispatch) 和消息(Message Dispatch)。大部分语言支持一到两种。Java 默认使用函数表派发，你可以通过使用 `final` 关键字将其变为直接派发。C++ 默认使用直接派发，通过 `virtual` 关键字可以改为函数表派发。Objective-C 总是使用消息派发，但允许开发者使用 C 直接派发来获取性能的提高（比如直接调用 IMP）。Swift 在这方面走在了前面，她支持全部的3种派发方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。\n\n这里只简单说一下函数派发在 protocol 中的不同表现。看下面的例子：\n\n```swift\nprotocol Flyable {\n    func fly()\n}\n```\n\n上面定义了 Flyable 协议，表示了飞行的能力。遵守该协议就必须实现 `fly()` 方法。我们可以提供几个实现：\n\n```swift\nstruct Eagle: Flyable {\n    func fly() { print(\"🦅 is flying\") }\n}\n\nstruct Plane: Flyable {\n    func fly() { print(\"✈️ is flying\") }\n}\n```\n\n写个客户端程序测试一下：\n\n```swift\nlet fls: [Flyable] = [Eagle(), Plane()]\nfor fl in fls {\n    fl.fly()\n}\n\n// result:\n🦅 is flying\n✈️ is flying\n```\n\n上面测试程序的运行结果和我们的设想完全一样。上面 `fly()` 方法是在协议的定义里进行声明的，现在我们把它放到协议拓展里进行声明，就像下面这样：\n\n```swift\nextension Flyable {\n    func fly() { print(\"Something is flying\") }\n}\n```\n\n在运行前你可以先猜测一下运行的结果。\n\n先暂停 3 秒钟...\n\n\n\n下面是运行结果：\n\n```\nSomething is flying\nSomething is flying\n```\n\n你看，我们只是简单地把在协议定义里的方法挪到了协议拓展里，运行结果却完全不同。出现像上面那样的运行结果还跟这行代码有关：\n\n```swift\nlet fls: [Flyable] = [Eagle(), Plane()]\n```\n\n如果你直接使用具体类型进行调用，肯定是没有问题的，就像下面这样：\n\n```swift\nEagle().fly() \t// 🦅 is flying\nPlane().fly() \t// ✈️ is flying\n```\n\n出现上面两种完全不同的结果，主要是因为函数派发根据方法声明的位置的不同而采用了不同的策略，总结起来有这么几点:\n\n- 值类型（struct, enum）总是会使用直接派发\n- 而协议和类的 `extension` 都会使用直接派发\n- 协议和普通 Swift 类声明作用域里的方法都会使用函数表进行派发\n- 继承 `NSObject` 的类声明作用域里的方法都会使用函数表派发\n- 继承 `NSObject` 的类的 `extension` 、使用 `dynamic` 标记的方法会使用消息派发\n\n下面这张图很清楚地总结了 Swift 中函数派发方式，不过少了 `dynamic` 的方式。\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png)\n\n在上面的例子中，虽然 `Eagle` 和 `Plane` 都实现了 `fly()` 方法，但在多态时，仍然会调用协议拓展里的默认实现。因为，在协议拓展声明的方法，在调用时，使用的是直接派发，直接派发总是要优于其他的派发方式的。\n\n所以理解 Swift 中的函数派发，对于我们写出结构清晰、没有 bug 的代码是非常重要的。当然，如果你没有使用到多态，直接使用具体的类型，是不会出现上面的问题的。既然你都开始 \"针对接口编程，而不是针对实现编程\"，怎么会用不到多态呢，是吧。\n\n\n\n## 使用协议改善既有的代码设计\n\n通过上面的例子可以看出，通过协议进行代码共享相比与通过继承的共享，有这几个优势：\n\n- 我们不需要被强制使用某个父类。\n- 我们可以让已经存在的类型满足协议 (比如我们让 CGContext 满足了 Renderer)。子类就没那么灵活了，如果 CGContext 是一个类的话，我们无法以追溯的方式去变更它的父类。\n- 协议既可以用于类，也可以用于结构体、枚举，而继承就无法和结构体、枚举一起使用了。\n- 协议可以模拟多继承。\n- 最后，当处理协议时，我们无需担心方法重写或者在正确的时间调用 super 这样的问题。\n\n\n\n通过面向协议的编程，我们可以从传统的继承上解放出来，用一种更灵活的方式，像搭积木一样对程序进行组装。协议和类一样，在设计时要遵守 \"单一职责\" 原则，让每个协议专注于自己的功能。得益于协议扩展，我们可以减少继承带来的共享状态的风险，让代码更加清晰。\n\n使用面向协议编程有助于我们写出低耦合、易于扩展以及可测试的代码，而结合泛型来使用协议，更可以让我们免于动态调用和类型转换的苦恼，保证了代码的安全性。\n\n","slug":"Swift-面向协议编程的那些事","published":1,"updated":"2019-03-09T11:18:19.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6ziju00091u0ogsx0c09i","content":"<p>一直想写一些 Swift 的东西，却不知道从何写起。因为想写的东西太多，然后所有的东西都混杂在一起，导致什么都写不出来。翻了翻以前在组内分享的一些东西，想想把这些内容整理下，写进博客吧。我对计划要写的东西做了个清单（最近做什么都喜欢在前一天睡觉前做个清单，这样多少改善了我的拖延症🤪）：</p>\n<a id=\"more\"></a>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 面向协议编程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用值类型代替引用类型</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 函数式编程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 单向数据流</li>\n</ul>\n<p>面向协议编程是 Swift 不同于其他语言的一个特性之一，也是比 Objective-C 强大的一个语言特性（并不是Swift 独有的，但是比 OC 的协议要强大很多），所以以面向协议编程作为 Swift 系列文章的开端是最合适不过的了。</p>\n<p>文章的内容可能有点长，我就把要讲的内容简单地列了一下，同学们可以根据自己掌握的情况，跳到对应的小结进行阅读。下面是主要内容：</p>\n<ul>\n<li>面向协议编程不是个新概念</li>\n<li>Swift 中的协议<ul>\n<li>从一个绘图应用开始。通过实现一个绘图应用，来讲解在 Swift 中使用协议</li>\n<li>带有 Self 和关联类型的协议<ul>\n<li>带有 Self 的协议。通过实现一个二分查找，来讲解如何在协议中使用 Self</li>\n<li>带有关联类型的协议。通过实现一个带加载动画的数据加载器，来讲解如何在协议中使用关联类型</li>\n</ul>\n</li>\n<li>协议与函数派发。通过一个使用多态的例子，来讲解函数派发在协议中的表现</li>\n</ul>\n</li>\n<li>使用协议改善既有的代码设计</li>\n</ul>\n<h2 id=\"面向协议编程不是个新概念\"><a href=\"#面向协议编程不是个新概念\" class=\"headerlink\" title=\"面向协议编程不是个新概念\"></a>面向协议编程不是个新概念</h2><p>面向协议编程并不是一个新概念，它其实就是广为所知的面向接口编程。面向协议编程 (Protocol Oriented Programming) 是 Apple 在 2015 年 WWDC 上提出的 Swift 的一种编程范式。</p>\n<p>很多程序员都能理解类、对象、继承和接口这些面向对象的概念（不知道的自己面壁去啊）。可是类与接口的区别何在？有类了干嘛要使用接口？相信很多人都有这样的疑问。接口（协议是同一个东西）定义了类型，实现接口（子类型化）让我们可以用一个对象来代替另一个对象。另一方面，类继承是通过复用父类的功能或者只是简单地共享代码和表述，来定义对象的实现和类型的一种机制。类继承让我们能够从现成的类继承所需要大部分功能，从而快速定义新的类。所以接口侧重的是类型（是把某个类型当做另一种类型来用），而类侧重的是复用。理解了这个区别你就知道在什么时候使用接口，什么时候使用类了。</p>\n<p>GoF 在《设计模式》一书中提到了可复用面向对象软件设计的原则：</p>\n<blockquote>\n<p>针对接口编程，而不是针对实现编程</p>\n</blockquote>\n<p>定义具有相同接口的类群很重要，因为多态是基于接口的。其他面向对象的编程语言，类如 Java，允许我们定义 “接口”类型，它确定了客户端同所有其他具体类直接到一种 “合约”。Objective-C 和 Swift中与之对应的就是协议（protocol）了。协议也是对象之间的一种合约，但本身是不能够实例化为对象的。实现协议或者从抽象类继承，使得对象共享相同的接口。因此，子类型的所有对象，都可以针对协议或抽象类的接口做出应答。</p>\n<h2 id=\"Swift-中的协议\"><a href=\"#Swift-中的协议\" class=\"headerlink\" title=\"Swift 中的协议\"></a>Swift 中的协议</h2><p>在 WWDC2015 上，Apple 发布了Swift 2。新版本包含了很多新的语言特性。在众多改动之中，最引人注意的就是 protocol extensions。在 Swift 第一版中，我们可以通过 extension 来为已有的 class，struct 或 enum 拓展功能。而在 Swift 2 中，我们也可以为 protocol 添加 extension。可能一开始看上去这个新特性并不起眼，实际上 protocol extensions 非常强大，以至于可以改变 Swift 之前的某些编程思想。后面我会给出一个 protocol extension 在实际项目中使用案例。</p>\n<p>除了协议拓展，Swift 中的协议还有一些具有其他特性的协议，比如带有关联类型的协议、包含 Self 的协议。这两种协议跟普通的协议还是有一些不同的，后面我也会给出具体的例子。</p>\n<p>我们现在可以开始编写代码，来掌握在实际开发中使用 Swift 协议的技巧。下面的绘图应用和二分查找的例子是来自 WWDC2015 中<a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\" target=\"_blank\" rel=\"noopener\">这个 Session</a>。在写本文前，笔者也想了很多例子，但是始终觉得没有官方的例子好。所以我的建议是：<a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\" target=\"_blank\" rel=\"noopener\">这个 Session</a> 至少要看一遍。看了一遍后，开始写自己的实现。</p>\n<h3 id=\"从一个绘图应用开始\"><a href=\"#从一个绘图应用开始\" class=\"headerlink\" title=\"从一个绘图应用开始\"></a>从一个绘图应用开始</h3><p>现在我们可以先通过完成一个具体的需求，来学习如何在 Swift 中使用协议。</p>\n<p>我们的需求是实现一个可以绘制复杂图形的绘图程序，我们可以先通过一个 Render 来定义一个简单的绘制过程：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Renderer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">move</span><span class=\"params\">(to p: CGPoint)</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"move to (<span class=\"subst\">\\(p.x)</span>, <span class=\"subst\">\\(p.y)</span>)\"</span>) &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">line</span><span class=\"params\">(to p: CGPoint)</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"line to (<span class=\"subst\">\\(p.x)</span>, <span class=\"subst\">\\(p.y)</span>)\"</span>)&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arc</span><span class=\"params\">(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"arc at center: <span class=\"subst\">\\(center)</span>, radius: <span class=\"subst\">\\(radius)</span>, startAngel: <span class=\"subst\">\\(starAngle)</span>, endAngle: <span class=\"subst\">\\(endAngle)</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后可以定义一个 Drawable 协议来定义一个绘制操作：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Drawable 协议定义了一个绘制操作，它接受一个具体的绘制工具来进行绘图。这里将可绘制的内容和实际的绘制操作分开了，这么做的目的是为了职责分离，在后面你会看到这种设计的好处。</p>\n<p>如果我们想绘制一个圆，我们可以很简单地利用上面实现好了的绘制工具来绘制一个圆形，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Circle</span>: <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> center: <span class=\"type\">CGPoint</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> radius: <span class=\"type\">CGFloat</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span> &#123;</span><br><span class=\"line\">        render.arc(at: center, radius: radius, starAngle: <span class=\"number\">0</span>, endAngle: <span class=\"type\">CGFloat</span>.pi * <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们又想要绘制一个多边形，那么有了 Drawable 协议，实现起来也非常简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Polygon</span>: <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> corners: [<span class=\"type\">CGPoint</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> corners.isEmpty &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        render.move(to: corners.last!)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> corners &#123; render.line(to: p) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单图形的绘制已经完成了，现在可以完成我们这个绘图程序了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Diagram</span>: <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elements: [<span class=\"type\">Drawable</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> elements &#123; ele.draw(with: render) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"type\">Renderer</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> circle = <span class=\"type\">Circle</span>(center: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>), radius: <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> triangle = <span class=\"type\">Polygon</span>(corners: [</span><br><span class=\"line\">    <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">0</span>),</span><br><span class=\"line\">    <span class=\"type\">CGPoint</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">150</span>),</span><br><span class=\"line\">    <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">150</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> client = <span class=\"type\">Diagram</span>(elements: [triangle, circle])</span><br><span class=\"line\">client.draw(with: render)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Result:</span></span><br><span class=\"line\"><span class=\"comment\">// move to (200.0, 150.0)</span></span><br><span class=\"line\"><span class=\"comment\">// line to (100.0, 0.0)</span></span><br><span class=\"line\"><span class=\"comment\">// line to (0.0, 150.0)</span></span><br><span class=\"line\"><span class=\"comment\">// line to (200.0, 150.0)</span></span><br><span class=\"line\"><span class=\"comment\">// arc at center: (100.0, 100.0), radius: 100.0, startAngel: 0.0, endAngle: 6.28318530717959</span></span><br></pre></td></tr></table></figure>\n<p>通过上面的代码很容易就实现了一个简单的绘图程序了。不过，目前这个绘图程序只能在控制台中显示绘制的过程，我们想把它绘制到屏幕上怎么办呢？要想把内容绘制到屏幕上其实也简单的很，仍然是使用协议，我们可以把 Renderer 结构体改成 protocol：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Renderer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">move</span><span class=\"params\">(to p: CGPoint)</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">line</span><span class=\"params\">(to p: CGPoint)</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arc</span><span class=\"params\">(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成了 Renderer 的改造，我们可以使用 CoreGraphics 来在屏幕上绘制图形了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">CGContext</span>: <span class=\"title\">Renderer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">line</span><span class=\"params\">(to p: CGPoint)</span></span> &#123;</span><br><span class=\"line\">        addLine(to: p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arc</span><span class=\"params\">(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> path = <span class=\"type\">CGMutablePath</span>()</span><br><span class=\"line\">        path.addArc(center: center, radius: radius, startAngle: starAngle, endAngle: endAngle, clockwise: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        addPath(path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过拓展 CGContext，使其遵守 Renderer 协议，然后使用 CGContext 提供的接口非常简单的实现了绘制工作。 下图是这个绘图程序最终的效果：</p>\n<p><img src=\"render.png\" alt=\"\"></p>\n<p>完成上面绘图程序的关键，是将图形的定义和实际绘制操作拆开了，通过设计 <code>Drawable</code> 和 <code>Renderer</code> 两个协议，完成了一个高拓展的程序。想绘制其他形状，只要实现一个新的 Drawable 就可以了。例如我想绘制下面这样的图形：</p>\n<p><img src=\"render2.png\" width=\"390px\" height=\"390px\"></p>\n<p>我们可以将原来的 Diagram 进行缩放就可以了。代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> big = <span class=\"type\">Diagram</span>(elements: [triangle, circle])</span><br><span class=\"line\">diagram = <span class=\"type\">Diagram</span>(elements: [big, big.scaled(by: <span class=\"number\">0.2</span>)])</span><br></pre></td></tr></table></figure>\n<p>而通过实现 Renderer 协议，你既可以完成基于控制台的绘图程序也可以完成使用 CoreGraphics 的绘图程序，甚至可以很简单地就能实现一个使用 OpenGL 的绘图程序。这种编程思想，在编写跨平台的程序是非常有用的。</p>\n<h3 id=\"带有-Self-和关联类型的协议\"><a href=\"#带有-Self-和关联类型的协议\" class=\"headerlink\" title=\"带有 Self 和关联类型的协议\"></a>带有 Self 和关联类型的协议</h3><p>我在前面部分已经指出，带有关联类型的协议和普通的协议是有一些不同的。对于那些在协议中使用了 Self 关键字的协议来说也是如此。在 Swift 3 中，这样的协议不能被当作独立的类型来使用。这个限制可能会在今后实现了完整的泛型系统后被移除，但是在那之前，我们都必须要面对和处理这个限制。</p>\n<h4 id=\"带有-Self-的协议\"><a href=\"#带有-Self-的协议\" class=\"headerlink\" title=\"带有 Self 的协议\"></a>带有 Self 的协议</h4><p>我们仍然从一个例子开始：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"number\">_</span> keys: [Int], <span class=\"keyword\">for</span> key: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lo = <span class=\"number\">0</span>, hi = keys.<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lo &lt;= hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = lo + (hi - lo) / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys[mid] == key &#123; <span class=\"keyword\">return</span> mid &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> keys[mid] &lt; key &#123; lo = mid + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; hi = mid - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> position = binarySearch([<span class=\"type\">Int</span>](<span class=\"number\">1</span>...<span class=\"number\">10</span>), <span class=\"keyword\">for</span>: <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// result: 2</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码实现了一个简单的二分查找，但是目前只支持查找 Int 类型的数据。如果想支持其他类型的数据，我们必须对上面的代码进行改造，改造的方向就是使用 protocol，例如我可以添加下面的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: Ordered)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: Ordered)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"number\">_</span> keys: [Ordered], <span class=\"keyword\">for</span> key: Ordered)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lo = <span class=\"number\">0</span>, hi = keys.<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lo &lt;= hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = lo + (hi - lo) / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys[mid].<span class=\"built_in\">equal</span>(to: key) &#123; <span class=\"keyword\">return</span> mid &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> keys[mid].precedes(other: key) &#123; lo = mid + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; hi = mid - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了支持查找 Int 类型数据，我们就必须让 Int 实现 <code>Oredered</code> 协议：</p>\n<p><img src=\"binarysearch1.png\" alt=\"\"></p>\n<p>写完上面的实现，发现代码根本就不能执行，报错说的是 Int 类型和 Oredered 类型不能使用 <code>&lt;</code> 进行比较，下面的 <code>==</code> 也是一样。为了解决这个问题，我们可以在 protocol 中使用 Self：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: <span class=\"keyword\">Self</span>)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: <span class=\"keyword\">Self</span>)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> &lt; other &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> == other &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Oredered 中使用了 Self 后，编译器会在实现中将 Self 替换成具体的类型，就像上面的代码中，将 Self 替换成了 Int。这样我们就解决了上面的问题。但是又出现了新的问题：</p>\n<p><img src=\"binarysearch2.png\" alt=\"\"></p>\n<p>这就是上面所说的，带有 Self 的协议不能被当作独立的类型来使用。在这种情况下，我们可以使用泛型来解决这个问题：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span>&lt;T: Ordered&gt;<span class=\"params\">(<span class=\"number\">_</span> keys: [T], <span class=\"keyword\">for</span> key: T)</span></span> -&gt; <span class=\"type\">Int</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是 String 类型的数据，也可以使用这个版本的二分查找了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span>: <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> &lt; other &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> == other &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> position = binarySearch([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>], <span class=\"keyword\">for</span>: <span class=\"string\">\"d\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// result: 3</span></span><br></pre></td></tr></table></figure>\n<p>当然，如果你熟悉 Swift 标准库中的协议的话，你会发现上面的实现可以简化为下面的几行代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span>&lt;T: Comparable&gt;<span class=\"params\">(<span class=\"number\">_</span> keys: [T], <span class=\"keyword\">for</span> key: T)</span></span> -&gt; <span class=\"type\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lo = <span class=\"number\">0</span>, hi = keys.<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lo &lt;= hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = lo + (hi - lo) / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys[mid] == key &#123; <span class=\"keyword\">return</span> mid &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> keys[mid] &lt; key &#123; lo = mid + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; hi = mid - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们定义 Ordered 协议只是为了演示在协议中使用 Self 的过程。实际开发中，可以灵活地运用标准库中提供的协议。其实在标准库中 Comparable 协议中也是用到了 Self 的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> &gt; <span class=\"params\">(lhs: <span class=\"keyword\">Self</span>, rhs: <span class=\"keyword\">Self</span>)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面通过实现一个二分查找算法，演示了如何使用带有 Self 的协议。简单来讲，你可以把 Self 看做一个占位符，在后面具体类型的实现中可以替换成实际的类型。</p>\n<h4 id=\"带有关联类型的协议\"><a href=\"#带有关联类型的协议\" class=\"headerlink\" title=\"带有关联类型的协议\"></a>带有关联类型的协议</h4><p>带有关联类型的协议也不能被当作独立的类型来使用。在 Swift 中这样的协议非常多，例如 Collection，Sequence，IteratorProtocol 等等。如果你仍然想使用这种协议作为类型，可以使用一种叫做类型擦除的技术。你可以从<a href=\"http://jewelz.me/cjs77iamr00028is6rdrwj0cw/\" target=\"_blank\" rel=\"noopener\">这里</a>了解如何实现它。</p>\n<p>下面仍然通过一个例子来演示如何在项目中使用带有关联类型的协议。这次我们要通过协议实现一个带有加载动画的数据加载器，并且在出错时展示相应的占位图。</p>\n<p>这里，我们定义了一个 Loading 协议，代表可以加载数据，不过要满足 Loading 协议，必须要提供一个 <code>loadingView</code>，这里的 <code>loadingView</code> 就是协议中关联类型的实例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Loading</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    associatedtype <span class=\"type\">LoadingView</span>: <span class=\"type\">UIView</span>, <span class=\"type\">LoadingViewType</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingView: <span class=\"type\">LoadingView</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Loading 协议中的关联类型有两个要求，首先必须是 UIView 的子类，其次需要遵守 LoadingViewType 协议。LoadingViewType 可以简单定义成下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">LoadingViewType</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAnimating: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isError: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startAnimating</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stopAnimating</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在 Loading 协议的拓展中定义一些跟加载逻辑相关的方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Loading</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startLoading</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !view.subviews.<span class=\"built_in\">contains</span>(loadingView) &#123;</span><br><span class=\"line\">            view.addSubview(loadingView)</span><br><span class=\"line\">            loadingView.frame = view.bounds</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        view.bringSubview(toFront: loadingView)</span><br><span class=\"line\">        loadingView.startAnimating()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stopLoading</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        loadingView.stopAnimating()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以继续给 Loading 添加一个带网络数据加载的逻辑：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Loading</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadData</span><span class=\"params\">(with re: Resource, completion: @escaping <span class=\"params\">(Result)</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        startLoading()</span><br><span class=\"line\">        <span class=\"type\">NetworkTool</span>.shared.request(re) &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">case</span> .succeed = result <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.loadingView.isError = <span class=\"literal\">true</span> <span class=\"comment\">// 显示出错的视图，这里可以根据错误类型显示对应的视图，这里简单处理了</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.stopLoading()</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            completion(result)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.loadingView.isError = <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.stopLoading()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是整个 Loading 协议的实现。这里跟上面的例子不同，这儿主要使用了协议的拓展来实现需求。这样做的原因，是因为所有的加载逻辑几乎都是一样的，可能的区别就是加载的动画不同。所以这里把负责动画的部分放到了  LoadingViewType 协议里，Loading 的加载逻辑都放到协议的拓展里进行定义。协议声明里定义的方法与在协议拓展里定义的方法其实是有区别的，后面也会给出一个例子来说明它们都区别。</p>\n<p>要想让 ViewController 有加载数据的功能，只要让控制器遵守 Loading 协议就行，然后在合适的地方调用 <code>loadData</code> 方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">Loading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingView = <span class=\"type\">TestLoadingView</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        loadData(with: <span class=\"type\">Test</span>.justEmpty) &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是运行结果：</p>\n<p><img src=\"loading.gif\" alt=\"\"></p>\n<p>我们只要让控制器遵守 Loading 协议，就实现了从网络加载数据并带有加载动画，而且在出错时显示错误视图的功能。这里肯定有人会说，使用继承也可以实现上述需求。当然，我们可以把协议中的加载逻辑都放到一个基类中，也可以实现该需求。如果后面又要添加刷新和分页功能，那么这些代码也只能放到基类中，这样就会随着项目越来越大，基类也变得越来越臃肿，这就是所谓的上帝类。如果我们将数据加载、刷新、分页作为不同的协议，让控制器需要什么就遵守相应的协议，那么控制器就不会包含那些它不需要的功能了。这就像搭积木一样，可以灵活地给程序添加它需要的内容。</p>\n<h3 id=\"协议与函数派发\"><a href=\"#协议与函数派发\" class=\"headerlink\" title=\"协议与函数派发\"></a>协议与函数派发</h3><p>函数派发就是一个程序在调用一个方法时，如何选择要执行的指令的过程。当我们每次调用一个方法时函数派发都会发生。</p>\n<p>编译型语言有三种基础的函数派发方式：直接派发(Direct Dispatch)，函数表(Table Dispatch) 和消息(Message Dispatch)。大部分语言支持一到两种。Java 默认使用函数表派发，你可以通过使用 <code>final</code> 关键字将其变为直接派发。C++ 默认使用直接派发，通过 <code>virtual</code> 关键字可以改为函数表派发。Objective-C 总是使用消息派发，但允许开发者使用 C 直接派发来获取性能的提高（比如直接调用 IMP）。Swift 在这方面走在了前面，她支持全部的3种派发方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。</p>\n<p>这里只简单说一下函数派发在 protocol 中的不同表现。看下面的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义了 Flyable 协议，表示了飞行的能力。遵守该协议就必须实现 <code>fly()</code> 方法。我们可以提供几个实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Eagle</span>: <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"🦅 is flying\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Plane</span>: <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"✈️ is flying\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写个客户端程序测试一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fls: [<span class=\"type\">Flyable</span>] = [<span class=\"type\">Eagle</span>(), <span class=\"type\">Plane</span>()]</span><br><span class=\"line\"><span class=\"keyword\">for</span> fl <span class=\"keyword\">in</span> fls &#123;</span><br><span class=\"line\">    fl.fly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result:</span></span><br><span class=\"line\">🦅 <span class=\"keyword\">is</span> flying</span><br><span class=\"line\">✈️ <span class=\"keyword\">is</span> flying</span><br></pre></td></tr></table></figure>\n<p>上面测试程序的运行结果和我们的设想完全一样。上面 <code>fly()</code> 方法是在协议的定义里进行声明的，现在我们把它放到协议拓展里进行声明，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Something is flying\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在运行前你可以先猜测一下运行的结果。</p>\n<p>先暂停 3 秒钟…</p>\n<p>下面是运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something is flying</span><br><span class=\"line\">Something is flying</span><br></pre></td></tr></table></figure>\n<p>你看，我们只是简单地把在协议定义里的方法挪到了协议拓展里，运行结果却完全不同。出现像上面那样的运行结果还跟这行代码有关：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fls: [<span class=\"type\">Flyable</span>] = [<span class=\"type\">Eagle</span>(), <span class=\"type\">Plane</span>()]</span><br></pre></td></tr></table></figure>\n<p>如果你直接使用具体类型进行调用，肯定是没有问题的，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Eagle</span>().fly() \t<span class=\"comment\">// 🦅 is flying</span></span><br><span class=\"line\"><span class=\"type\">Plane</span>().fly() \t<span class=\"comment\">// ✈️ is flying</span></span><br></pre></td></tr></table></figure>\n<p>出现上面两种完全不同的结果，主要是因为函数派发根据方法声明的位置的不同而采用了不同的策略，总结起来有这么几点:</p>\n<ul>\n<li>值类型（struct, enum）总是会使用直接派发</li>\n<li>而协议和类的 <code>extension</code> 都会使用直接派发</li>\n<li>协议和普通 Swift 类声明作用域里的方法都会使用函数表进行派发</li>\n<li>继承 <code>NSObject</code> 的类声明作用域里的方法都会使用函数表派发</li>\n<li>继承 <code>NSObject</code> 的类的 <code>extension</code> 、使用 <code>dynamic</code> 标记的方法会使用消息派发</li>\n</ul>\n<p>下面这张图很清楚地总结了 Swift 中函数派发方式，不过少了 <code>dynamic</code> 的方式。</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png\" alt=\"\"></p>\n<p>在上面的例子中，虽然 <code>Eagle</code> 和 <code>Plane</code> 都实现了 <code>fly()</code> 方法，但在多态时，仍然会调用协议拓展里的默认实现。因为，在协议拓展声明的方法，在调用时，使用的是直接派发，直接派发总是要优于其他的派发方式的。</p>\n<p>所以理解 Swift 中的函数派发，对于我们写出结构清晰、没有 bug 的代码是非常重要的。当然，如果你没有使用到多态，直接使用具体的类型，是不会出现上面的问题的。既然你都开始 “针对接口编程，而不是针对实现编程”，怎么会用不到多态呢，是吧。</p>\n<h2 id=\"使用协议改善既有的代码设计\"><a href=\"#使用协议改善既有的代码设计\" class=\"headerlink\" title=\"使用协议改善既有的代码设计\"></a>使用协议改善既有的代码设计</h2><p>通过上面的例子可以看出，通过协议进行代码共享相比与通过继承的共享，有这几个优势：</p>\n<ul>\n<li>我们不需要被强制使用某个父类。</li>\n<li>我们可以让已经存在的类型满足协议 (比如我们让 CGContext 满足了 Renderer)。子类就没那么灵活了，如果 CGContext 是一个类的话，我们无法以追溯的方式去变更它的父类。</li>\n<li>协议既可以用于类，也可以用于结构体、枚举，而继承就无法和结构体、枚举一起使用了。</li>\n<li>协议可以模拟多继承。</li>\n<li>最后，当处理协议时，我们无需担心方法重写或者在正确的时间调用 super 这样的问题。</li>\n</ul>\n<p>通过面向协议的编程，我们可以从传统的继承上解放出来，用一种更灵活的方式，像搭积木一样对程序进行组装。协议和类一样，在设计时要遵守 “单一职责” 原则，让每个协议专注于自己的功能。得益于协议扩展，我们可以减少继承带来的共享状态的风险，让代码更加清晰。</p>\n<p>使用面向协议编程有助于我们写出低耦合、易于扩展以及可测试的代码，而结合泛型来使用协议，更可以让我们免于动态调用和类型转换的苦恼，保证了代码的安全性。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>一直想写一些 Swift 的东西，却不知道从何写起。因为想写的东西太多，然后所有的东西都混杂在一起，导致什么都写不出来。翻了翻以前在组内分享的一些东西，想想把这些内容整理下，写进博客吧。我对计划要写的东西做了个清单（最近做什么都喜欢在前一天睡觉前做个清单，这样多少改善了我的拖延症🤪）：</p>","more":"<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 面向协议编程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 使用值类型代替引用类型</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 函数式编程</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 单向数据流</li>\n</ul>\n<p>面向协议编程是 Swift 不同于其他语言的一个特性之一，也是比 Objective-C 强大的一个语言特性（并不是Swift 独有的，但是比 OC 的协议要强大很多），所以以面向协议编程作为 Swift 系列文章的开端是最合适不过的了。</p>\n<p>文章的内容可能有点长，我就把要讲的内容简单地列了一下，同学们可以根据自己掌握的情况，跳到对应的小结进行阅读。下面是主要内容：</p>\n<ul>\n<li>面向协议编程不是个新概念</li>\n<li>Swift 中的协议<ul>\n<li>从一个绘图应用开始。通过实现一个绘图应用，来讲解在 Swift 中使用协议</li>\n<li>带有 Self 和关联类型的协议<ul>\n<li>带有 Self 的协议。通过实现一个二分查找，来讲解如何在协议中使用 Self</li>\n<li>带有关联类型的协议。通过实现一个带加载动画的数据加载器，来讲解如何在协议中使用关联类型</li>\n</ul>\n</li>\n<li>协议与函数派发。通过一个使用多态的例子，来讲解函数派发在协议中的表现</li>\n</ul>\n</li>\n<li>使用协议改善既有的代码设计</li>\n</ul>\n<h2 id=\"面向协议编程不是个新概念\"><a href=\"#面向协议编程不是个新概念\" class=\"headerlink\" title=\"面向协议编程不是个新概念\"></a>面向协议编程不是个新概念</h2><p>面向协议编程并不是一个新概念，它其实就是广为所知的面向接口编程。面向协议编程 (Protocol Oriented Programming) 是 Apple 在 2015 年 WWDC 上提出的 Swift 的一种编程范式。</p>\n<p>很多程序员都能理解类、对象、继承和接口这些面向对象的概念（不知道的自己面壁去啊）。可是类与接口的区别何在？有类了干嘛要使用接口？相信很多人都有这样的疑问。接口（协议是同一个东西）定义了类型，实现接口（子类型化）让我们可以用一个对象来代替另一个对象。另一方面，类继承是通过复用父类的功能或者只是简单地共享代码和表述，来定义对象的实现和类型的一种机制。类继承让我们能够从现成的类继承所需要大部分功能，从而快速定义新的类。所以接口侧重的是类型（是把某个类型当做另一种类型来用），而类侧重的是复用。理解了这个区别你就知道在什么时候使用接口，什么时候使用类了。</p>\n<p>GoF 在《设计模式》一书中提到了可复用面向对象软件设计的原则：</p>\n<blockquote>\n<p>针对接口编程，而不是针对实现编程</p>\n</blockquote>\n<p>定义具有相同接口的类群很重要，因为多态是基于接口的。其他面向对象的编程语言，类如 Java，允许我们定义 “接口”类型，它确定了客户端同所有其他具体类直接到一种 “合约”。Objective-C 和 Swift中与之对应的就是协议（protocol）了。协议也是对象之间的一种合约，但本身是不能够实例化为对象的。实现协议或者从抽象类继承，使得对象共享相同的接口。因此，子类型的所有对象，都可以针对协议或抽象类的接口做出应答。</p>\n<h2 id=\"Swift-中的协议\"><a href=\"#Swift-中的协议\" class=\"headerlink\" title=\"Swift 中的协议\"></a>Swift 中的协议</h2><p>在 WWDC2015 上，Apple 发布了Swift 2。新版本包含了很多新的语言特性。在众多改动之中，最引人注意的就是 protocol extensions。在 Swift 第一版中，我们可以通过 extension 来为已有的 class，struct 或 enum 拓展功能。而在 Swift 2 中，我们也可以为 protocol 添加 extension。可能一开始看上去这个新特性并不起眼，实际上 protocol extensions 非常强大，以至于可以改变 Swift 之前的某些编程思想。后面我会给出一个 protocol extension 在实际项目中使用案例。</p>\n<p>除了协议拓展，Swift 中的协议还有一些具有其他特性的协议，比如带有关联类型的协议、包含 Self 的协议。这两种协议跟普通的协议还是有一些不同的，后面我也会给出具体的例子。</p>\n<p>我们现在可以开始编写代码，来掌握在实际开发中使用 Swift 协议的技巧。下面的绘图应用和二分查找的例子是来自 WWDC2015 中<a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\" target=\"_blank\" rel=\"noopener\">这个 Session</a>。在写本文前，笔者也想了很多例子，但是始终觉得没有官方的例子好。所以我的建议是：<a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\" target=\"_blank\" rel=\"noopener\">这个 Session</a> 至少要看一遍。看了一遍后，开始写自己的实现。</p>\n<h3 id=\"从一个绘图应用开始\"><a href=\"#从一个绘图应用开始\" class=\"headerlink\" title=\"从一个绘图应用开始\"></a>从一个绘图应用开始</h3><p>现在我们可以先通过完成一个具体的需求，来学习如何在 Swift 中使用协议。</p>\n<p>我们的需求是实现一个可以绘制复杂图形的绘图程序，我们可以先通过一个 Render 来定义一个简单的绘制过程：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Renderer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">move</span><span class=\"params\">(to p: CGPoint)</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"move to (<span class=\"subst\">\\(p.x)</span>, <span class=\"subst\">\\(p.y)</span>)\"</span>) &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">line</span><span class=\"params\">(to p: CGPoint)</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"line to (<span class=\"subst\">\\(p.x)</span>, <span class=\"subst\">\\(p.y)</span>)\"</span>)&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arc</span><span class=\"params\">(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"arc at center: <span class=\"subst\">\\(center)</span>, radius: <span class=\"subst\">\\(radius)</span>, startAngel: <span class=\"subst\">\\(starAngle)</span>, endAngle: <span class=\"subst\">\\(endAngle)</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后可以定义一个 Drawable 协议来定义一个绘制操作：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Drawable 协议定义了一个绘制操作，它接受一个具体的绘制工具来进行绘图。这里将可绘制的内容和实际的绘制操作分开了，这么做的目的是为了职责分离，在后面你会看到这种设计的好处。</p>\n<p>如果我们想绘制一个圆，我们可以很简单地利用上面实现好了的绘制工具来绘制一个圆形，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Circle</span>: <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> center: <span class=\"type\">CGPoint</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> radius: <span class=\"type\">CGFloat</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span> &#123;</span><br><span class=\"line\">        render.arc(at: center, radius: radius, starAngle: <span class=\"number\">0</span>, endAngle: <span class=\"type\">CGFloat</span>.pi * <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们又想要绘制一个多边形，那么有了 Drawable 协议，实现起来也非常简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Polygon</span>: <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> corners: [<span class=\"type\">CGPoint</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> corners.isEmpty &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        render.move(to: corners.last!)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> corners &#123; render.line(to: p) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单图形的绘制已经完成了，现在可以完成我们这个绘图程序了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Diagram</span>: <span class=\"title\">Drawable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elements: [<span class=\"type\">Drawable</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(with render: Renderer)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> elements &#123; ele.draw(with: render) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> render = <span class=\"type\">Renderer</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> circle = <span class=\"type\">Circle</span>(center: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>), radius: <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> triangle = <span class=\"type\">Polygon</span>(corners: [</span><br><span class=\"line\">    <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">0</span>),</span><br><span class=\"line\">    <span class=\"type\">CGPoint</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">150</span>),</span><br><span class=\"line\">    <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">150</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> client = <span class=\"type\">Diagram</span>(elements: [triangle, circle])</span><br><span class=\"line\">client.draw(with: render)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Result:</span></span><br><span class=\"line\"><span class=\"comment\">// move to (200.0, 150.0)</span></span><br><span class=\"line\"><span class=\"comment\">// line to (100.0, 0.0)</span></span><br><span class=\"line\"><span class=\"comment\">// line to (0.0, 150.0)</span></span><br><span class=\"line\"><span class=\"comment\">// line to (200.0, 150.0)</span></span><br><span class=\"line\"><span class=\"comment\">// arc at center: (100.0, 100.0), radius: 100.0, startAngel: 0.0, endAngle: 6.28318530717959</span></span><br></pre></td></tr></table></figure>\n<p>通过上面的代码很容易就实现了一个简单的绘图程序了。不过，目前这个绘图程序只能在控制台中显示绘制的过程，我们想把它绘制到屏幕上怎么办呢？要想把内容绘制到屏幕上其实也简单的很，仍然是使用协议，我们可以把 Renderer 结构体改成 protocol：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Renderer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">move</span><span class=\"params\">(to p: CGPoint)</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">line</span><span class=\"params\">(to p: CGPoint)</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arc</span><span class=\"params\">(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成了 Renderer 的改造，我们可以使用 CoreGraphics 来在屏幕上绘制图形了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">CGContext</span>: <span class=\"title\">Renderer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">line</span><span class=\"params\">(to p: CGPoint)</span></span> &#123;</span><br><span class=\"line\">        addLine(to: p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arc</span><span class=\"params\">(at center: CGPoint, radius: CGFloat, starAngle: CGFloat, endAngle: CGFloat)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> path = <span class=\"type\">CGMutablePath</span>()</span><br><span class=\"line\">        path.addArc(center: center, radius: radius, startAngle: starAngle, endAngle: endAngle, clockwise: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        addPath(path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过拓展 CGContext，使其遵守 Renderer 协议，然后使用 CGContext 提供的接口非常简单的实现了绘制工作。 下图是这个绘图程序最终的效果：</p>\n<p><img src=\"render.png\" alt=\"\"></p>\n<p>完成上面绘图程序的关键，是将图形的定义和实际绘制操作拆开了，通过设计 <code>Drawable</code> 和 <code>Renderer</code> 两个协议，完成了一个高拓展的程序。想绘制其他形状，只要实现一个新的 Drawable 就可以了。例如我想绘制下面这样的图形：</p>\n<p><img src=\"render2.png\" width=\"390px\" height=\"390px\"></p>\n<p>我们可以将原来的 Diagram 进行缩放就可以了。代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> big = <span class=\"type\">Diagram</span>(elements: [triangle, circle])</span><br><span class=\"line\">diagram = <span class=\"type\">Diagram</span>(elements: [big, big.scaled(by: <span class=\"number\">0.2</span>)])</span><br></pre></td></tr></table></figure>\n<p>而通过实现 Renderer 协议，你既可以完成基于控制台的绘图程序也可以完成使用 CoreGraphics 的绘图程序，甚至可以很简单地就能实现一个使用 OpenGL 的绘图程序。这种编程思想，在编写跨平台的程序是非常有用的。</p>\n<h3 id=\"带有-Self-和关联类型的协议\"><a href=\"#带有-Self-和关联类型的协议\" class=\"headerlink\" title=\"带有 Self 和关联类型的协议\"></a>带有 Self 和关联类型的协议</h3><p>我在前面部分已经指出，带有关联类型的协议和普通的协议是有一些不同的。对于那些在协议中使用了 Self 关键字的协议来说也是如此。在 Swift 3 中，这样的协议不能被当作独立的类型来使用。这个限制可能会在今后实现了完整的泛型系统后被移除，但是在那之前，我们都必须要面对和处理这个限制。</p>\n<h4 id=\"带有-Self-的协议\"><a href=\"#带有-Self-的协议\" class=\"headerlink\" title=\"带有 Self 的协议\"></a>带有 Self 的协议</h4><p>我们仍然从一个例子开始：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"number\">_</span> keys: [Int], <span class=\"keyword\">for</span> key: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lo = <span class=\"number\">0</span>, hi = keys.<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lo &lt;= hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = lo + (hi - lo) / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys[mid] == key &#123; <span class=\"keyword\">return</span> mid &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> keys[mid] &lt; key &#123; lo = mid + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; hi = mid - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> position = binarySearch([<span class=\"type\">Int</span>](<span class=\"number\">1</span>...<span class=\"number\">10</span>), <span class=\"keyword\">for</span>: <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// result: 2</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码实现了一个简单的二分查找，但是目前只支持查找 Int 类型的数据。如果想支持其他类型的数据，我们必须对上面的代码进行改造，改造的方向就是使用 protocol，例如我可以添加下面的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: Ordered)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: Ordered)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"number\">_</span> keys: [Ordered], <span class=\"keyword\">for</span> key: Ordered)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lo = <span class=\"number\">0</span>, hi = keys.<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lo &lt;= hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = lo + (hi - lo) / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys[mid].<span class=\"built_in\">equal</span>(to: key) &#123; <span class=\"keyword\">return</span> mid &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> keys[mid].precedes(other: key) &#123; lo = mid + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; hi = mid - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了支持查找 Int 类型数据，我们就必须让 Int 实现 <code>Oredered</code> 协议：</p>\n<p><img src=\"binarysearch1.png\" alt=\"\"></p>\n<p>写完上面的实现，发现代码根本就不能执行，报错说的是 Int 类型和 Oredered 类型不能使用 <code>&lt;</code> 进行比较，下面的 <code>==</code> 也是一样。为了解决这个问题，我们可以在 protocol 中使用 Self：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: <span class=\"keyword\">Self</span>)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: <span class=\"keyword\">Self</span>)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> &lt; other &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> == other &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Oredered 中使用了 Self 后，编译器会在实现中将 Self 替换成具体的类型，就像上面的代码中，将 Self 替换成了 Int。这样我们就解决了上面的问题。但是又出现了新的问题：</p>\n<p><img src=\"binarysearch2.png\" alt=\"\"></p>\n<p>这就是上面所说的，带有 Self 的协议不能被当作独立的类型来使用。在这种情况下，我们可以使用泛型来解决这个问题：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span>&lt;T: Ordered&gt;<span class=\"params\">(<span class=\"number\">_</span> keys: [T], <span class=\"keyword\">for</span> key: T)</span></span> -&gt; <span class=\"type\">Int</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是 String 类型的数据，也可以使用这个版本的二分查找了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span>: <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">precedes</span><span class=\"params\">(other: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> &lt; other &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">equal</span><span class=\"params\">(to other: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> == other &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> position = binarySearch([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>], <span class=\"keyword\">for</span>: <span class=\"string\">\"d\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// result: 3</span></span><br></pre></td></tr></table></figure>\n<p>当然，如果你熟悉 Swift 标准库中的协议的话，你会发现上面的实现可以简化为下面的几行代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">binarySearch</span>&lt;T: Comparable&gt;<span class=\"params\">(<span class=\"number\">_</span> keys: [T], <span class=\"keyword\">for</span> key: T)</span></span> -&gt; <span class=\"type\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lo = <span class=\"number\">0</span>, hi = keys.<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lo &lt;= hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = lo + (hi - lo) / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys[mid] == key &#123; <span class=\"keyword\">return</span> mid &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> keys[mid] &lt; key &#123; lo = mid + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; hi = mid - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们定义 Ordered 协议只是为了演示在协议中使用 Self 的过程。实际开发中，可以灵活地运用标准库中提供的协议。其实在标准库中 Comparable 协议中也是用到了 Self 的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> &gt; <span class=\"params\">(lhs: <span class=\"keyword\">Self</span>, rhs: <span class=\"keyword\">Self</span>)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面通过实现一个二分查找算法，演示了如何使用带有 Self 的协议。简单来讲，你可以把 Self 看做一个占位符，在后面具体类型的实现中可以替换成实际的类型。</p>\n<h4 id=\"带有关联类型的协议\"><a href=\"#带有关联类型的协议\" class=\"headerlink\" title=\"带有关联类型的协议\"></a>带有关联类型的协议</h4><p>带有关联类型的协议也不能被当作独立的类型来使用。在 Swift 中这样的协议非常多，例如 Collection，Sequence，IteratorProtocol 等等。如果你仍然想使用这种协议作为类型，可以使用一种叫做类型擦除的技术。你可以从<a href=\"http://jewelz.me/cjs77iamr00028is6rdrwj0cw/\" target=\"_blank\" rel=\"noopener\">这里</a>了解如何实现它。</p>\n<p>下面仍然通过一个例子来演示如何在项目中使用带有关联类型的协议。这次我们要通过协议实现一个带有加载动画的数据加载器，并且在出错时展示相应的占位图。</p>\n<p>这里，我们定义了一个 Loading 协议，代表可以加载数据，不过要满足 Loading 协议，必须要提供一个 <code>loadingView</code>，这里的 <code>loadingView</code> 就是协议中关联类型的实例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Loading</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    associatedtype <span class=\"type\">LoadingView</span>: <span class=\"type\">UIView</span>, <span class=\"type\">LoadingViewType</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingView: <span class=\"type\">LoadingView</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Loading 协议中的关联类型有两个要求，首先必须是 UIView 的子类，其次需要遵守 LoadingViewType 协议。LoadingViewType 可以简单定义成下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">LoadingViewType</span>: <span class=\"title\">class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAnimating: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isError: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startAnimating</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stopAnimating</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在 Loading 协议的拓展中定义一些跟加载逻辑相关的方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Loading</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startLoading</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !view.subviews.<span class=\"built_in\">contains</span>(loadingView) &#123;</span><br><span class=\"line\">            view.addSubview(loadingView)</span><br><span class=\"line\">            loadingView.frame = view.bounds</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        view.bringSubview(toFront: loadingView)</span><br><span class=\"line\">        loadingView.startAnimating()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stopLoading</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        loadingView.stopAnimating()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以继续给 Loading 添加一个带网络数据加载的逻辑：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Loading</span> <span class=\"title\">where</span> <span class=\"title\">Self</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadData</span><span class=\"params\">(with re: Resource, completion: @escaping <span class=\"params\">(Result)</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        startLoading()</span><br><span class=\"line\">        <span class=\"type\">NetworkTool</span>.shared.request(re) &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">case</span> .succeed = result <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.loadingView.isError = <span class=\"literal\">true</span> <span class=\"comment\">// 显示出错的视图，这里可以根据错误类型显示对应的视图，这里简单处理了</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.stopLoading()</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            completion(result)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.loadingView.isError = <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.stopLoading()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是整个 Loading 协议的实现。这里跟上面的例子不同，这儿主要使用了协议的拓展来实现需求。这样做的原因，是因为所有的加载逻辑几乎都是一样的，可能的区别就是加载的动画不同。所以这里把负责动画的部分放到了  LoadingViewType 协议里，Loading 的加载逻辑都放到协议的拓展里进行定义。协议声明里定义的方法与在协议拓展里定义的方法其实是有区别的，后面也会给出一个例子来说明它们都区别。</p>\n<p>要想让 ViewController 有加载数据的功能，只要让控制器遵守 Loading 协议就行，然后在合适的地方调用 <code>loadData</code> 方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">Loading</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingView = <span class=\"type\">TestLoadingView</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">        loadData(with: <span class=\"type\">Test</span>.justEmpty) &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是运行结果：</p>\n<p><img src=\"loading.gif\" alt=\"\"></p>\n<p>我们只要让控制器遵守 Loading 协议，就实现了从网络加载数据并带有加载动画，而且在出错时显示错误视图的功能。这里肯定有人会说，使用继承也可以实现上述需求。当然，我们可以把协议中的加载逻辑都放到一个基类中，也可以实现该需求。如果后面又要添加刷新和分页功能，那么这些代码也只能放到基类中，这样就会随着项目越来越大，基类也变得越来越臃肿，这就是所谓的上帝类。如果我们将数据加载、刷新、分页作为不同的协议，让控制器需要什么就遵守相应的协议，那么控制器就不会包含那些它不需要的功能了。这就像搭积木一样，可以灵活地给程序添加它需要的内容。</p>\n<h3 id=\"协议与函数派发\"><a href=\"#协议与函数派发\" class=\"headerlink\" title=\"协议与函数派发\"></a>协议与函数派发</h3><p>函数派发就是一个程序在调用一个方法时，如何选择要执行的指令的过程。当我们每次调用一个方法时函数派发都会发生。</p>\n<p>编译型语言有三种基础的函数派发方式：直接派发(Direct Dispatch)，函数表(Table Dispatch) 和消息(Message Dispatch)。大部分语言支持一到两种。Java 默认使用函数表派发，你可以通过使用 <code>final</code> 关键字将其变为直接派发。C++ 默认使用直接派发，通过 <code>virtual</code> 关键字可以改为函数表派发。Objective-C 总是使用消息派发，但允许开发者使用 C 直接派发来获取性能的提高（比如直接调用 IMP）。Swift 在这方面走在了前面，她支持全部的3种派发方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。</p>\n<p>这里只简单说一下函数派发在 protocol 中的不同表现。看下面的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义了 Flyable 协议，表示了飞行的能力。遵守该协议就必须实现 <code>fly()</code> 方法。我们可以提供几个实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Eagle</span>: <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"🦅 is flying\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Plane</span>: <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"✈️ is flying\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写个客户端程序测试一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fls: [<span class=\"type\">Flyable</span>] = [<span class=\"type\">Eagle</span>(), <span class=\"type\">Plane</span>()]</span><br><span class=\"line\"><span class=\"keyword\">for</span> fl <span class=\"keyword\">in</span> fls &#123;</span><br><span class=\"line\">    fl.fly()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result:</span></span><br><span class=\"line\">🦅 <span class=\"keyword\">is</span> flying</span><br><span class=\"line\">✈️ <span class=\"keyword\">is</span> flying</span><br></pre></td></tr></table></figure>\n<p>上面测试程序的运行结果和我们的设想完全一样。上面 <code>fly()</code> 方法是在协议的定义里进行声明的，现在我们把它放到协议拓展里进行声明，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Flyable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"Something is flying\"</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在运行前你可以先猜测一下运行的结果。</p>\n<p>先暂停 3 秒钟…</p>\n<p>下面是运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something is flying</span><br><span class=\"line\">Something is flying</span><br></pre></td></tr></table></figure>\n<p>你看，我们只是简单地把在协议定义里的方法挪到了协议拓展里，运行结果却完全不同。出现像上面那样的运行结果还跟这行代码有关：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fls: [<span class=\"type\">Flyable</span>] = [<span class=\"type\">Eagle</span>(), <span class=\"type\">Plane</span>()]</span><br></pre></td></tr></table></figure>\n<p>如果你直接使用具体类型进行调用，肯定是没有问题的，就像下面这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Eagle</span>().fly() \t<span class=\"comment\">// 🦅 is flying</span></span><br><span class=\"line\"><span class=\"type\">Plane</span>().fly() \t<span class=\"comment\">// ✈️ is flying</span></span><br></pre></td></tr></table></figure>\n<p>出现上面两种完全不同的结果，主要是因为函数派发根据方法声明的位置的不同而采用了不同的策略，总结起来有这么几点:</p>\n<ul>\n<li>值类型（struct, enum）总是会使用直接派发</li>\n<li>而协议和类的 <code>extension</code> 都会使用直接派发</li>\n<li>协议和普通 Swift 类声明作用域里的方法都会使用函数表进行派发</li>\n<li>继承 <code>NSObject</code> 的类声明作用域里的方法都会使用函数表派发</li>\n<li>继承 <code>NSObject</code> 的类的 <code>extension</code> 、使用 <code>dynamic</code> 标记的方法会使用消息派发</li>\n</ul>\n<p>下面这张图很清楚地总结了 Swift 中函数派发方式，不过少了 <code>dynamic</code> 的方式。</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png\" alt=\"\"></p>\n<p>在上面的例子中，虽然 <code>Eagle</code> 和 <code>Plane</code> 都实现了 <code>fly()</code> 方法，但在多态时，仍然会调用协议拓展里的默认实现。因为，在协议拓展声明的方法，在调用时，使用的是直接派发，直接派发总是要优于其他的派发方式的。</p>\n<p>所以理解 Swift 中的函数派发，对于我们写出结构清晰、没有 bug 的代码是非常重要的。当然，如果你没有使用到多态，直接使用具体的类型，是不会出现上面的问题的。既然你都开始 “针对接口编程，而不是针对实现编程”，怎么会用不到多态呢，是吧。</p>\n<h2 id=\"使用协议改善既有的代码设计\"><a href=\"#使用协议改善既有的代码设计\" class=\"headerlink\" title=\"使用协议改善既有的代码设计\"></a>使用协议改善既有的代码设计</h2><p>通过上面的例子可以看出，通过协议进行代码共享相比与通过继承的共享，有这几个优势：</p>\n<ul>\n<li>我们不需要被强制使用某个父类。</li>\n<li>我们可以让已经存在的类型满足协议 (比如我们让 CGContext 满足了 Renderer)。子类就没那么灵活了，如果 CGContext 是一个类的话，我们无法以追溯的方式去变更它的父类。</li>\n<li>协议既可以用于类，也可以用于结构体、枚举，而继承就无法和结构体、枚举一起使用了。</li>\n<li>协议可以模拟多继承。</li>\n<li>最后，当处理协议时，我们无需担心方法重写或者在正确的时间调用 super 这样的问题。</li>\n</ul>\n<p>通过面向协议的编程，我们可以从传统的继承上解放出来，用一种更灵活的方式，像搭积木一样对程序进行组装。协议和类一样，在设计时要遵守 “单一职责” 原则，让每个协议专注于自己的功能。得益于协议扩展，我们可以减少继承带来的共享状态的风险，让代码更加清晰。</p>\n<p>使用面向协议编程有助于我们写出低耦合、易于扩展以及可测试的代码，而结合泛型来使用协议，更可以让我们免于动态调用和类型转换的苦恼，保证了代码的安全性。</p>"},{"title":"Swift中的rethrows","date":"2016-05-03T06:59:11.000Z","thumbnailImage":"http://d.image.i4.cn/i4web/image/ueditor/php/upload/image/20140723/1406108151591224.jpg","thumbnailImagePosition":"right","autoThumbnailImage":"yes","_content":"我最近在学习Swift函数式编程时，越来越觉得Swift是一门强大的语言。在 Swift 的世界中，函数不再是二等公民。是的，Swift 引入了大量函数式编程的特性，使得我们能够把函数当作一等公民来对待。在Swift中，适当引入函数式编程的思想和方法，常常会有奇效。\n<!--more-->\n然而，当我想去深入了解时，发现这里水好深，还有好多自己不知道的东西。\n废话不多说，我们先从`map`函数说起吧。Swift中`map`是这么声明的：\n```swift\n public func map<T>(@noescape transform: (Self.Generator.Element) throws -> T) rethrows -> [T]\n```\n这里`@noescape`是什么东西？`rethrows `又是什么东西？查了资料才知道原来是这么回事儿：\n`@noescape`，这是一个从 Swift 1.2 引入的关键字，它是专门用于修饰函数闭包这种参数类型的，当出现这个参数时，它表示该闭包不会跳出这个函数调用的生命期：即函数调用完之后，这个闭包的生命期也结束了。以下是苹果的文档原文：\n>A new @noescape attribute may be used on closure parameters to functions. This indicates that the parameter is only ever called (or passed as an @noescape parameter in a call), which means that it cannot outlive the lifetime of the call. This enables some minor performance optimizations, but more importantly disables the self. requirement in closure arguments.\n\n如果想了解更多关于`@noescape`，可以看看这篇文章：http://nshint.io/blog/2015/10/23/noescape-attribute/\n\n那`rethrows `又是怎么一回事儿呢？下面我们就通过写一个我们自己的`map`来看一看`rethrows `是个什么鬼。\n```swift\nextension Array {\n    func mymap<T>(@noescape transform: (Generator.Element) -> T) -> [T] {\n        var ts = [T]()\n        for e in self {\n            ts.append(transform(e))\n        }\n        return ts\n    }\n}\n\nenum CalculationError: ErrorType {\n    case DivideByZero\n}\n\nfunc squareOf(x: Int) -> Int {return x*x}\n\nfunc divideTenBy(x: Int) throws -> Double {\n    guard x != 0 else {\n        throw CalculationError.DivideByZero\n    }\n    return 10.0 / Double(x)\n}\n\n```\n下面我们来调用一下`mymap `函数：\n\n\n![屏幕快照 2016-03-01 上午9.54.43.png](http://upload-images.jianshu.io/upload_images/1351863-2bc93aaf0c7719b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到当我们传人的闭包有异常抛出时，编译器就报错了。根据报错信息我们重写了个`map `函数:\n```swift\nfunc mymapThrow<T>(@noescape transform: (Generator.Element) throws -> T) throws -> [T] {\n        var ts = [T]()\n        for e in self {\n            ts.append(try transform(e))\n        }\n        return ts\n    }\n    \n```\n来调用一下`mymapThrow `函数：\n\n![屏幕快照 2016-03-01 上午10.09.11.png](http://upload-images.jianshu.io/upload_images/1351863-eb9c916287489d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n编译器又报错了，我们让新的`map`函数能抛出异常，然后在调用`mymapThrow `函数的地方处理异常。但是这会带来一个问题，例如`x2`这里我们传入的闭包并没有异常抛出啊，难道我们在每次调用的时候都非得写那么一大串异常处理的代码吗？例如这样：\n```swift\nlet ns: [Double]\ndo {\n    try ns = xs.mymapThrow(divideTenBy)\n    ns\n} catch {\n    \n}\n\nlet ns2: [Double]\ndo {\n    try ns2 = xs.mymapThrow(squareOf)\n} catch {\n    \n}\n```\n按 Swift 类型安全的写法，在有异常抛出的地方就一定需要使用 try 语法。我相信在平时我们传入的闭包函数没有异常的情况一定远远多于有异常的情况，难道我们非得为了代码的安全性就必须牺牲掉方便性吗？显然，Swift比我们想象的要更聪明。于是本文章的主角`rethrows`登场了。\n我们重新写个`map`函数：\n```swift\nfunc _map<T>(@noescape transform: (Generator.Element) throws -> T) rethrows -> [T] {\n        var ts = [T]()\n        for e in self {\n            ts.append(try transform(e))\n        }\n        return ts\n    }\n```\n再来看一下结果：\n\n![屏幕快照 2016-03-01 上午10.28.18.png](http://upload-images.jianshu.io/upload_images/1351863-c837b571719e6495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这一下就没问题了。当传入的闭包函数没有异常时我们也不用去捕获异常，有异常时我们就去处理异常。所以`rethrows`关键字的意义就在于：\n>这个函数如果抛出异常，仅可能是因为传递给它的闭包的调用导致了异常。如果闭包的调用没有导致异常，编译器就知道这个函数不会抛出异常。那么我们也就不用去处理异常了。\n\n哈哈，一个`map`函数就有这么多的学问，看来我还得花更多的精力去学习Swift了。\n\n","source":"_posts/Swift中的rethrows.md","raw":"---\ntitle: Swift中的rethrows\ndate: 2016-05-03 14:59:11\ntags: Swift\ncategory: Swift\nthumbnailImage: http://d.image.i4.cn/i4web/image/ueditor/php/upload/image/20140723/1406108151591224.jpg\nthumbnailImagePosition: right\nautoThumbnailImage: yes\n---\n我最近在学习Swift函数式编程时，越来越觉得Swift是一门强大的语言。在 Swift 的世界中，函数不再是二等公民。是的，Swift 引入了大量函数式编程的特性，使得我们能够把函数当作一等公民来对待。在Swift中，适当引入函数式编程的思想和方法，常常会有奇效。\n<!--more-->\n然而，当我想去深入了解时，发现这里水好深，还有好多自己不知道的东西。\n废话不多说，我们先从`map`函数说起吧。Swift中`map`是这么声明的：\n```swift\n public func map<T>(@noescape transform: (Self.Generator.Element) throws -> T) rethrows -> [T]\n```\n这里`@noescape`是什么东西？`rethrows `又是什么东西？查了资料才知道原来是这么回事儿：\n`@noescape`，这是一个从 Swift 1.2 引入的关键字，它是专门用于修饰函数闭包这种参数类型的，当出现这个参数时，它表示该闭包不会跳出这个函数调用的生命期：即函数调用完之后，这个闭包的生命期也结束了。以下是苹果的文档原文：\n>A new @noescape attribute may be used on closure parameters to functions. This indicates that the parameter is only ever called (or passed as an @noescape parameter in a call), which means that it cannot outlive the lifetime of the call. This enables some minor performance optimizations, but more importantly disables the self. requirement in closure arguments.\n\n如果想了解更多关于`@noescape`，可以看看这篇文章：http://nshint.io/blog/2015/10/23/noescape-attribute/\n\n那`rethrows `又是怎么一回事儿呢？下面我们就通过写一个我们自己的`map`来看一看`rethrows `是个什么鬼。\n```swift\nextension Array {\n    func mymap<T>(@noescape transform: (Generator.Element) -> T) -> [T] {\n        var ts = [T]()\n        for e in self {\n            ts.append(transform(e))\n        }\n        return ts\n    }\n}\n\nenum CalculationError: ErrorType {\n    case DivideByZero\n}\n\nfunc squareOf(x: Int) -> Int {return x*x}\n\nfunc divideTenBy(x: Int) throws -> Double {\n    guard x != 0 else {\n        throw CalculationError.DivideByZero\n    }\n    return 10.0 / Double(x)\n}\n\n```\n下面我们来调用一下`mymap `函数：\n\n\n![屏幕快照 2016-03-01 上午9.54.43.png](http://upload-images.jianshu.io/upload_images/1351863-2bc93aaf0c7719b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到当我们传人的闭包有异常抛出时，编译器就报错了。根据报错信息我们重写了个`map `函数:\n```swift\nfunc mymapThrow<T>(@noescape transform: (Generator.Element) throws -> T) throws -> [T] {\n        var ts = [T]()\n        for e in self {\n            ts.append(try transform(e))\n        }\n        return ts\n    }\n    \n```\n来调用一下`mymapThrow `函数：\n\n![屏幕快照 2016-03-01 上午10.09.11.png](http://upload-images.jianshu.io/upload_images/1351863-eb9c916287489d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n编译器又报错了，我们让新的`map`函数能抛出异常，然后在调用`mymapThrow `函数的地方处理异常。但是这会带来一个问题，例如`x2`这里我们传入的闭包并没有异常抛出啊，难道我们在每次调用的时候都非得写那么一大串异常处理的代码吗？例如这样：\n```swift\nlet ns: [Double]\ndo {\n    try ns = xs.mymapThrow(divideTenBy)\n    ns\n} catch {\n    \n}\n\nlet ns2: [Double]\ndo {\n    try ns2 = xs.mymapThrow(squareOf)\n} catch {\n    \n}\n```\n按 Swift 类型安全的写法，在有异常抛出的地方就一定需要使用 try 语法。我相信在平时我们传入的闭包函数没有异常的情况一定远远多于有异常的情况，难道我们非得为了代码的安全性就必须牺牲掉方便性吗？显然，Swift比我们想象的要更聪明。于是本文章的主角`rethrows`登场了。\n我们重新写个`map`函数：\n```swift\nfunc _map<T>(@noescape transform: (Generator.Element) throws -> T) rethrows -> [T] {\n        var ts = [T]()\n        for e in self {\n            ts.append(try transform(e))\n        }\n        return ts\n    }\n```\n再来看一下结果：\n\n![屏幕快照 2016-03-01 上午10.28.18.png](http://upload-images.jianshu.io/upload_images/1351863-c837b571719e6495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这一下就没问题了。当传入的闭包函数没有异常时我们也不用去捕获异常，有异常时我们就去处理异常。所以`rethrows`关键字的意义就在于：\n>这个函数如果抛出异常，仅可能是因为传递给它的闭包的调用导致了异常。如果闭包的调用没有导致异常，编译器就知道这个函数不会抛出异常。那么我们也就不用去处理异常了。\n\n哈哈，一个`map`函数就有这么多的学问，看来我还得花更多的精力去学习Swift了。\n\n","slug":"Swift中的rethrows","published":1,"updated":"2017-03-22T05:08:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zijx000d1u0ot1e9fw94","content":"<p>我最近在学习Swift函数式编程时，越来越觉得Swift是一门强大的语言。在 Swift 的世界中，函数不再是二等公民。是的，Swift 引入了大量函数式编程的特性，使得我们能够把函数当作一等公民来对待。在Swift中，适当引入函数式编程的思想和方法，常常会有奇效。<br><a id=\"more\"></a><br>然而，当我想去深入了解时，发现这里水好深，还有好多自己不知道的东西。<br>废话不多说，我们先从<code>map</code>函数说起吧。Swift中<code>map</code>是这么声明的：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(<span class=\"keyword\">Self</span>.Generator.Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>]</span><br></pre></td></tr></table></figure></p>\n<p>这里<code>@noescape</code>是什么东西？<code>rethrows</code>又是什么东西？查了资料才知道原来是这么回事儿：<br><code>@noescape</code>，这是一个从 Swift 1.2 引入的关键字，它是专门用于修饰函数闭包这种参数类型的，当出现这个参数时，它表示该闭包不会跳出这个函数调用的生命期：即函数调用完之后，这个闭包的生命期也结束了。以下是苹果的文档原文：</p>\n<blockquote>\n<p>A new @noescape attribute may be used on closure parameters to functions. This indicates that the parameter is only ever called (or passed as an @noescape parameter in a call), which means that it cannot outlive the lifetime of the call. This enables some minor performance optimizations, but more importantly disables the self. requirement in closure arguments.</p>\n</blockquote>\n<p>如果想了解更多关于<code>@noescape</code>，可以看看这篇文章：<a href=\"http://nshint.io/blog/2015/10/23/noescape-attribute/\" target=\"_blank\" rel=\"noopener\">http://nshint.io/blog/2015/10/23/noescape-attribute/</a></p>\n<p>那<code>rethrows</code>又是怎么一回事儿呢？下面我们就通过写一个我们自己的<code>map</code>来看一看<code>rethrows</code>是个什么鬼。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mymap</span>&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(Generator.Element)</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ts = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            ts.append(transform(e))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CalculationError</span>: <span class=\"title\">ErrorType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">DivideByZero</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">squareOf</span><span class=\"params\">(x: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;<span class=\"keyword\">return</span> x*x&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">divideTenBy</span><span class=\"params\">(x: Int)</span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> x != <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CalculationError</span>.<span class=\"type\">DivideByZero</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10.0</span> / <span class=\"type\">Double</span>(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面我们来调用一下<code>mymap</code>函数：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-2bc93aaf0c7719b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-03-01 上午9.54.43.png\"><br>可以看到当我们传人的闭包有异常抛出时，编译器就报错了。根据报错信息我们重写了个<code>map</code>函数:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mymapThrow</span>&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(Generator.Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ts = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            ts.append(<span class=\"keyword\">try</span> transform(e))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>来调用一下<code>mymapThrow</code>函数：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-eb9c916287489d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-03-01 上午10.09.11.png\"><br>编译器又报错了，我们让新的<code>map</code>函数能抛出异常，然后在调用<code>mymapThrow</code>函数的地方处理异常。但是这会带来一个问题，例如<code>x2</code>这里我们传入的闭包并没有异常抛出啊，难道我们在每次调用的时候都非得写那么一大串异常处理的代码吗？例如这样：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ns: [<span class=\"type\">Double</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> ns = xs.mymapThrow(divideTenBy)</span><br><span class=\"line\">    ns</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ns2: [<span class=\"type\">Double</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> ns2 = xs.mymapThrow(squareOf)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>按 Swift 类型安全的写法，在有异常抛出的地方就一定需要使用 try 语法。我相信在平时我们传入的闭包函数没有异常的情况一定远远多于有异常的情况，难道我们非得为了代码的安全性就必须牺牲掉方便性吗？显然，Swift比我们想象的要更聪明。于是本文章的主角<code>rethrows</code>登场了。<br>我们重新写个<code>map</code>函数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _map&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(Generator.Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ts = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            ts.append(<span class=\"keyword\">try</span> transform(e))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看一下结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-c837b571719e6495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-03-01 上午10.28.18.png\"><br>这一下就没问题了。当传入的闭包函数没有异常时我们也不用去捕获异常，有异常时我们就去处理异常。所以<code>rethrows</code>关键字的意义就在于：</p>\n<blockquote>\n<p>这个函数如果抛出异常，仅可能是因为传递给它的闭包的调用导致了异常。如果闭包的调用没有导致异常，编译器就知道这个函数不会抛出异常。那么我们也就不用去处理异常了。</p>\n</blockquote>\n<p>哈哈，一个<code>map</code>函数就有这么多的学问，看来我还得花更多的精力去学习Swift了。</p>\n","site":{"data":{}},"thumbnailImageUrl":"http://d.image.i4.cn/i4web/image/ueditor/php/upload/image/20140723/1406108151591224.jpg","excerpt":"<p>我最近在学习Swift函数式编程时，越来越觉得Swift是一门强大的语言。在 Swift 的世界中，函数不再是二等公民。是的，Swift 引入了大量函数式编程的特性，使得我们能够把函数当作一等公民来对待。在Swift中，适当引入函数式编程的思想和方法，常常会有奇效。<br>","more":"<br>然而，当我想去深入了解时，发现这里水好深，还有好多自己不知道的东西。<br>废话不多说，我们先从<code>map</code>函数说起吧。Swift中<code>map</code>是这么声明的：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(<span class=\"keyword\">Self</span>.Generator.Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>]</span><br></pre></td></tr></table></figure></p>\n<p>这里<code>@noescape</code>是什么东西？<code>rethrows</code>又是什么东西？查了资料才知道原来是这么回事儿：<br><code>@noescape</code>，这是一个从 Swift 1.2 引入的关键字，它是专门用于修饰函数闭包这种参数类型的，当出现这个参数时，它表示该闭包不会跳出这个函数调用的生命期：即函数调用完之后，这个闭包的生命期也结束了。以下是苹果的文档原文：</p>\n<blockquote>\n<p>A new @noescape attribute may be used on closure parameters to functions. This indicates that the parameter is only ever called (or passed as an @noescape parameter in a call), which means that it cannot outlive the lifetime of the call. This enables some minor performance optimizations, but more importantly disables the self. requirement in closure arguments.</p>\n</blockquote>\n<p>如果想了解更多关于<code>@noescape</code>，可以看看这篇文章：<a href=\"http://nshint.io/blog/2015/10/23/noescape-attribute/\" target=\"_blank\" rel=\"noopener\">http://nshint.io/blog/2015/10/23/noescape-attribute/</a></p>\n<p>那<code>rethrows</code>又是怎么一回事儿呢？下面我们就通过写一个我们自己的<code>map</code>来看一看<code>rethrows</code>是个什么鬼。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mymap</span>&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(Generator.Element)</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ts = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            ts.append(transform(e))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CalculationError</span>: <span class=\"title\">ErrorType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">DivideByZero</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">squareOf</span><span class=\"params\">(x: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;<span class=\"keyword\">return</span> x*x&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">divideTenBy</span><span class=\"params\">(x: Int)</span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> x != <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CalculationError</span>.<span class=\"type\">DivideByZero</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10.0</span> / <span class=\"type\">Double</span>(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面我们来调用一下<code>mymap</code>函数：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-2bc93aaf0c7719b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-03-01 上午9.54.43.png\"><br>可以看到当我们传人的闭包有异常抛出时，编译器就报错了。根据报错信息我们重写了个<code>map</code>函数:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mymapThrow</span>&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(Generator.Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ts = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            ts.append(<span class=\"keyword\">try</span> transform(e))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>来调用一下<code>mymapThrow</code>函数：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-eb9c916287489d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-03-01 上午10.09.11.png\"><br>编译器又报错了，我们让新的<code>map</code>函数能抛出异常，然后在调用<code>mymapThrow</code>函数的地方处理异常。但是这会带来一个问题，例如<code>x2</code>这里我们传入的闭包并没有异常抛出啊，难道我们在每次调用的时候都非得写那么一大串异常处理的代码吗？例如这样：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ns: [<span class=\"type\">Double</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> ns = xs.mymapThrow(divideTenBy)</span><br><span class=\"line\">    ns</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ns2: [<span class=\"type\">Double</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> ns2 = xs.mymapThrow(squareOf)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>按 Swift 类型安全的写法，在有异常抛出的地方就一定需要使用 try 语法。我相信在平时我们传入的闭包函数没有异常的情况一定远远多于有异常的情况，难道我们非得为了代码的安全性就必须牺牲掉方便性吗？显然，Swift比我们想象的要更聪明。于是本文章的主角<code>rethrows</code>登场了。<br>我们重新写个<code>map</code>函数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _map&lt;T&gt;<span class=\"params\">(@noescape transform: <span class=\"params\">(Generator.Element)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">T</span>) <span class=\"keyword\">rethrows</span> -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ts = [<span class=\"type\">T</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            ts.append(<span class=\"keyword\">try</span> transform(e))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>再来看一下结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-c837b571719e6495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-03-01 上午10.28.18.png\"><br>这一下就没问题了。当传入的闭包函数没有异常时我们也不用去捕获异常，有异常时我们就去处理异常。所以<code>rethrows</code>关键字的意义就在于：</p>\n<blockquote>\n<p>这个函数如果抛出异常，仅可能是因为传递给它的闭包的调用导致了异常。如果闭包的调用没有导致异常，编译器就知道这个函数不会抛出异常。那么我们也就不用去处理异常了。</p>\n</blockquote>\n<p>哈哈，一个<code>map</code>函数就有这么多的学问，看来我还得花更多的精力去学习Swift了。</p>"},{"title":"iOS 应用启动流程分析-Dyld","date":"2017-10-11T02:04:03.000Z","_content":"\niOS 应用程序启动过程可以以 `main` 函数为界，这里我们先不用管 `main() `函数调用后的过程，主要来分析一下 `mian()` 函数调用之前的dyld阶段。\n\n我们可以先写个简单的程序来看看系统在调用 `main()` 之前，调用了哪些函数。\n\n<!--more-->\n\n![](01.png)\n\n这里给 `load` 方法添加了一个断点。从调用栈可以看到最先调用的是 `__dyld_start` 函数。我们可以从 [dyld 源码](https://github.com/opensource-apple/dyld) dyldStartup.s 中找到 `__dyld_start` 的实现。此函数由汇编实现，兼容各种平台架构，此处主要以arm64 架构下的汇编代码为例：\n\n```asm6502\n#if __arm64__\n\t.data\n\t.align 3\n__dso_static: \n\t.quad   ___dso_handle\n\n\t.text\n\t.align 2\n\t.globl __dyld_start\n__dyld_start:\n\tmov \tx28, sp\n\tand     sp, x28, #~15\t\t// force 16-byte alignment of stack\n\tmov\tx0, #0\n\tmov\tx1, #0\n\tstp\tx1, x0, [sp, #-16]!\t// make aligned terminating frame\n\tmov\tfp, sp\t\t\t// set up fp to point to terminating frame\n\tsub\tsp, sp, #16             // make room for local variables\n\tldr     x0, [x28]\t\t// get app's mh into x0\n \tldr     x1, [x28, #8]           // get argc into x1 (kernel passes 32-bit int argc as 64-bits on stack to keep alignment)\n\tadd     x2, x28, #16\t\t// get argv into x2\n\tadrp\tx4,___dso_handle@page\n\tadd \tx4,x4,___dso_handle@pageoff // get dyld's mh in to x4\n\tadrp\tx3,__dso_static@page\n\tldr \tx3,[x3,__dso_static@pageoff] // get unslid start of dyld\n\tsub \tx3,x4,x3\t\t// x3 now has slide of dyld\n\tmov\tx5,sp                   // x5 has &startGlue\n\t\n\t// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &startGlue)\n\tbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm\n\tmov\tx16,x0                  // save entry point address in x16\n\tldr     x1, [sp]\n\tcmp\tx1, #0\n\tb.ne\tLnew\n\n\t// LC_UNIXTHREAD way, clean up stack and jump to result\n\tadd\tsp, x28, #8\t\t// restore unaligned stack pointer without app mh\n\tbr\tx16\t\t\t// jump to the program's entry point\n\n\t// LC_MAIN case, set up stack for call to main()\nLnew:\tmov\tlr, x1\t\t    // simulate return address into _start in libdyld.dylib\n\tldr     x0, [x28, #8] \t    // main param1 = argc\n\tadd     x1, x28, #16\t    // main param2 = argv\n\tadd\tx2, x1, x0, lsl #3  \n\tadd\tx2, x2, #8\t    // main param3 = &env[0]\n\tmov\tx3, x2\nLapple:\tldr\tx4, [x3]\n\tadd\tx3, x3, #8\n\tcmp\tx4, #0\n\tb.ne\tLapple\t\t    // main param4 = apple\n\tbr\tx16\n\n#endif // __arm64__\n```\n\n这里主要关注一下 `bl` 指令：\n\n```asm6502\n// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &startGlue)\nbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm\n```\n\n从注释了解到，其实就是调用 `dyldbootstrap::start()` 函数。在 dyldInitialization.cpp 中可以找到 `start` 函数的实现：\n\n```c\n//\n//  This is code to bootstrap dyld.  This work in normally done for a program by dyld and crt.\n//  In dyld we have to do this manually.\n//\nuintptr_t start(const struct macho_header* appsMachHeader, int argc, const char* argv[], \n\t\t\t\tintptr_t slide, const struct macho_header* dyldsMachHeader,\n\t\t\t\tuintptr_t* startGlue)\n{\n\t// if kernel had to slide dyld, we need to fix up load sensitive locations\n\t// we have to do this before using any global variables\n\tif ( slide != 0 ) {\n\t\trebaseDyld(dyldsMachHeader, slide);\n\t}\n\n\t// allow dyld to use mach messaging\n\tmach_init();\n\n\t// kernel sets up env pointer to be just past end of agv array\n\tconst char** envp = &argv[argc+1];\n\t\n\t// kernel sets up apple pointer to be just past end of envp array\n\tconst char** apple = envp;\n\twhile(*apple != NULL) { ++apple; }\n\t++apple;\n\n\t// set up random value for stack canary\n\t__guard_setup(apple);\n\n#if DYLD_INITIALIZER_SUPPORT\n\t// run all C++ initializers inside dyld\n\trunDyldInitializers(dyldsMachHeader, slide, argc, argv, envp, apple);\n#endif\n\n\t// now that we are done bootstrapping dyld, call dyld's main\n\tuintptr_t appsSlide = slideOfMainExecutable(appsMachHeader);\n\treturn dyld::_main(appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);\n}\n\n```\n\n`start` 函数中做了很多 dyld 初始化相关的工作，包括：\n\n* rebaseDyld() dyld 重定位\n* mach_init() mach消息初始化\n* __guard_setup() 栈溢出保护\n\n初始化工作完成后，此函数调用到了 `dyld::_main`，再将返回值传递给 `__dyld_start` 去调用真正的 `main()` 函数。\n\n我们可以在 dyld.cpp 中找到` _main` 的实现， 代码比较长，就不贴代码了，不过我们可以看看 `_main` 函数的注释:\n\n> Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which sets up some registers and call this function.\n> \n> Returns address of main() in target program which __dyld_start jumps to\n\n这个是说，内核加载 dyld，并跳转到 __dyld_start 函数，它主要设置一些寄存器，并且调用了 `_main`函数。这里刚好跟上面分析的过程相吻合。\n\n`dyld::_mina()` 是应用程序启动的关机函数，主要做了以下一些事情：\n\n1. 设置运行环境\n2. 实例化主程序 \n3. 加载共享缓存\n4. 加载插入的动态库\n5. 链接主程序\n6. 链接插入的动态库\n7. 执行弱符合绑定\n8. 执行初始化方法\n9. 查找入口并返回\n\n##### 设置运行环境\n\n这一步主要是设置运行参数、环境变量等。代码在开始的时候，将入参`mainExecutableMH` 赋值给了`sMainExecutableMachHeader`，这是一个`macho_header` 结构体，表示的是当前主程序的 Mach-O 头部信息，加载器依据 Mach-O 头部信息就可以解析整个 Mach-O 文件信息。接着调用 `setContext()` 设置上下文信息，包括一些回调函数、参数、标志信息等。如 `loadLibrary()` 函数实际调用的是 `libraryLocator()`，负责加载动态库。代码片断如下\n\n```c\nstatic void setContext(const macho_header* mainExecutableMH, int argc, const char* argv[], const char* envp[], const char* apple[])\n{\n    gLinkContext.loadLibrary\t\t\t= &libraryLocator;\n    gLinkContext.terminationRecorder\t= &terminationRecorder;\n    ...\n}\n```\n\n##### 实例化主程序\n```c\n// instantiate ImageLoader for main executable\nsMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);\n```\n\n这一步将主程序的 Mach-O 加载进内存，并实例化一个 ImageLoader。`instantiateFromLoadedImage()` 首先调用 `isCompatibleMachO()` 检测Mach-O 头部的magic、cputype、cpusubtype 等相关属性，判断 Mach-O 文件的兼容性，如果兼容性满足，则调用`ImageLoaderMachO::instantiateMainExecutable()` 实例化主程序的ImageLoader，代码如下：\n\n```c\n// The kernel maps in main executable before dyld gets control.  We need to \n// make an ImageLoader* for the already mapped in main executable.\nstatic ImageLoader* instantiateFromLoadedImage(const macho_header* mh, uintptr_t slide, const char* path)\n{\n\t// try mach-o loader\n\tif ( isCompatibleMachO((const uint8_t*)mh, path) ) {\n\t\tImageLoader* image = ImageLoaderMachO::instantiateMainExecutable(mh, slide, path, gLinkContext);\n\t\taddImage(image);\n\t\treturn image;\n\t}\n\t\n\tthrow \"main executable not a known format\";\n}\n```\n\n`ImageLoaderMachO::instantiateMainExecutable()` 函数里面首先会调用`sniffLoadCommands()` 函数来获取一些数据，包括：\n\n* **compressed**：若Mach-O存在LC_DYLD_INFO和LC_DYLD_INFO_ONLY加载命令，则说明是压缩类型的Mach-O\n* **segCount**：根据 LC_SEGMENT_COMMAND 加载命令来统计段数量。\n* **libCount**：根据 LC_LOAD_DYLIB、LC_LOAD_WEAK_DYLIB、LC_REEXPORT_DYLIB、LC_LOAD_UPWARD_DYLIB 这几个加载命令来统计库的数量，库的数量不能超过4095个。\n* **codeSigCmd**：通过解析LC_CODE_SIGNATURE来获取代码签名加载命令。\n* **encryptCmd**：通过LC_ENCRYPTION_INFO和LC_ENCRYPTION_INFO_64来获取段的加密信息。\n\nImageLoader 是抽象类，其子类负责把 Mach-O 文件实例化为 image，当`sniffLoadCommands()` 解析完以后，根据 `compressed` 的值来决定调用哪个子类进行实例化，代码如下：\n\n```c\nif ( compressed ) \n    return ImageLoaderMachOCompressed::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);\n\telse\n#if SUPPORT_CLASSIC_MACHO\n    return ImageLoaderMachOClassic::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);\n#else\n```\n\n`instantiateMainExecutable()` 执行完后，会调用 `addImage()` 函数将 image 加入到 `sAllImages` 全局镜像列表中。并将image映射到申请的内存中， 其代码如下：\n\n```c\nstatic void addImage(ImageLoader* image)\n{\n\t// add to master list\n    allImagesLock();\n        sAllImages.push_back(image);\n    allImagesUnlock();\n\t\n\t// update mapped ranges\n\tuintptr_t lastSegStart = 0;\n\tuintptr_t lastSegEnd = 0;\n\tfor(unsigned int i=0, e=image->segmentCount(); i < e; ++i) {\n\t\tif ( image->segUnaccessible(i) ) \n\t\t\tcontinue;\n\t\tuintptr_t start = image->segActualLoadAddress(i);\n\t\tuintptr_t end = image->segActualEndAddress(i);\n\t\tif ( start == lastSegEnd ) {\n\t\t\t// two segments are contiguous, just record combined segments\n\t\t\tlastSegEnd = end;\n\t\t}\n\t\telse {\n\t\t\t// non-contiguous segments, record last (if any)\n\t\t\tif ( lastSegEnd != 0 )\n\t\t\t\taddMappedRange(image, lastSegStart, lastSegEnd);\n\t\t\tlastSegStart = start;\n\t\t\tlastSegEnd = end;\n\t\t}\t\t\n\t}\n\tif ( lastSegEnd != 0 )\n\t\taddMappedRange(image, lastSegStart, lastSegEnd);\n\n\t\n\tif ( sEnv.DYLD_PRINT_LIBRARIES || (sEnv.DYLD_PRINT_LIBRARIES_POST_LAUNCH && (sMainExecutable!=NULL) && sMainExecutable->isLinked()) ) {\n\t\tdyld::log(\"dyld: loaded: %s\\n\", image->getPath());\n\t}\n\t\n}\n```\n\n##### 加载共享缓存\n\n```c\n// load shared cache\ncheckSharedRegionDisable();\n#if DYLD_SHARED_CACHE_SUPPORT\nif ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion )\n\tmapSharedCache();\n#endif\n```\n\n这一步先调用 `checkSharedRegionDisable()` 检查共享缓存是否禁用。该函数的iOS实现部分仅有一句注释，从注释我们可以推断iOS必须开启共享缓存才能正常工作。接下来调用 `mapSharedCache()` 来加载共享缓存。\n\n##### 加载插入的动态库\n\n```c\n// load any inserted libraries\nif ( sEnv.DYLD_INSERT_LIBRARIES != NULL ) {\n    for (const char* const* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != NULL; ++lib) \n        loadInsertedDylib(*lib);\n}\n```\n\n这一步是加载环境变量DYLD_INSERT_LIBRARIES中配置的动态库，先判断环境变量DYLD_INSERT_LIBRARIES中是否存在要加载的动态库，如果存在则调用 `loadInsertedDylib()` 依次加载。\n\n`loadInsertedDylib()` 内部设置了一个LoadContext 后，调用了 `load()` 函数。该函数内部调用的一系列的 loadPhase*。\n\n```c\n// try all path permutations and check against existing loaded images\nImageLoader* image = loadPhase0(path, orgPath, context, NULL);\n```\n\n大致会按照下图的顺序搜索动态库，并调用不同的函数来继续处理。\n\n![](02.png)\n\n当内部调用到 `loadPhase5load()` 函数的时候，会先在共享缓存中搜索，如果存在则调用 `ImageLoaderMachO::instantiateFromCache()`  来实例化ImageLoader，否则通过 `loadPhase5open()` 打开文件并读取数据到内存后，再调用 `loadPhase6()` ，通过 `ImageLoaderMachO::instantiateFromFile()`  来实例化 ImageLoader，最后调用 `checkandAddImage()` 验证镜像并将其加入到全局镜像列表中。\n\n\n##### 链接主程序\n\n```c\n// link main executable\ngLinkContext.linkingMainExecutable = true;\nlink(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, true, ImageLoader::RPathChain(NULL, NULL));\n```\n\n这一步调用 `link()` 函数将实例化后的主程序进行动态修正，让二进制变为可正常执行的状态。`link()` 函数内部调用了`ImageLoader::link()` 函数，从源代码可以看到，这一步主要做了以下几个事情：\n\n* `recursiveLoadLibraries()` 加载所有依赖的库到内存。\n* `recursiveUpdateDepth()` 递归刷新依赖库的层级。\n* `recursiveRebase()` 由于ASLR的存在，必须递归对主程序以及依赖库进行重定位操作。\n* `recursiveBind()`  把主程序二进制和依赖进来的动态库全部执行符号表绑定。\n* `weakBind()` 如果链接的不是主程序二进制的话，会在此时执行弱符号绑定，主程序二进制则在link()完后再执行弱符号绑定。\n* `context.registerDOFs(dofs)` 注册DOF（DTrace Object Format）。\n\n##### 链接插入的动态库\n\n```c\n// link any inserted libraries\n// do this after linking main executable so that any dylibs pulled in by inserted \n// dylibs (e.g. libSystem) will not be in front of dylibs the program uses\nif ( sInsertedDylibCount > 0 ) {\n    for(unsigned int i=0; i < sInsertedDylibCount; ++i) {\n        ImageLoader* image = sAllImages[i+1];\n        link(image, sEnv.DYLD_BIND_AT_LAUNCH, true, ImageLoader::RPathChain(NULL, NULL));\n        image->setNeverUnloadRecursive();\n    }\n    // only INSERTED libraries can interpose\n    // register interposing info after all inserted libraries are bound so chaining works\n    for(unsigned int i=0; i < sInsertedDylibCount; ++i) {\n        ImageLoader* image = sAllImages[i+1];\n        image->registerInterposing();\n    }\n}\n```\n\n这一步与链接主程序一样，将前面调用 `addImage()` 函数保存在 `sAllImages` 中的动态库列表循环取出并调用 `link()` 进行链接，需要注意的是，`sAllImages` 中保存的第一项是主程序的镜像，所以要从 i+1的位置开始，取到的才是动态库的 ImageLoader。\n\n接下来循环调用每个镜像的 `registerInterposing()` 函数，该函数会遍历Mach-O 的 LC_SEGMENT_COMMAND 加载命令，读取__DATA, __interpose，并将读取到的信息保存到 `fgInterposingTuples` 中。\n\n##### 执行弱符合绑定\n\n```c\n// <rdar://problem/12186933> do weak binding only after all inserted images linked\nsMainExecutable->weakBind(gLinkContext);\n```\n\n`weakBind()` 首先通过 `getCoalescedImages()` 合并所有动态库的弱符号到一个列表里，然后调用 `initializeCoalIterator()` 对需要绑定的弱符号进行排序，接着调用 `incrementCoalIterator()` 读取dyld_info_command 结构的 `weak_bind_off` 和 `weak_bind_size` 字段，确定弱符号的数据偏移与大小，最终进行弱符号绑定。\n\n##### 执行初始化方法\n\n```c\n#if SUPPORT_OLD_CRT_INITIALIZATION\n    // Old way is to run initializers via a callback from crt1.o\n    if ( ! gRunInitializersOldWay ) \n        initializeMainExecutable(); \n#else\n    // run all initializers\n    initializeMainExecutable(); \n#endif\n```\n\n这一步由 `initializeMainExecutable()` 完成。dyld 会优先初始化动态库，然后初始化主程序。该函数首先执行 `runInitializers()`，内部再依次调用 `processInitializers()`、`recursiveInitialization()`。在 `processInitializers()` 之后会发送 `dyld_image_state_initialized` 通知。\n\n在 `recursiveInitialization()` 的实现中有这么一行代码：\n\n```c\n// let objc know we are about to initialize this image\ncontext.notifySingle(dyld_image_state_dependents_initialized, this);\n```\n\n注释告诉我们，这个函数主要目的是让 objc 知道 image 即将被初始化。之后执行初始化操作：\n\n```c\n// initialize this image\nthis->doInitialization(context);\n```\n\n在 `doInitialization()` 中首先调用了 `doImageInit()` ，然后调用 `doModInitFunctions()` 。\n\n`doImageInit` 执行镜像的初始化函数，也就是 LC_ROUTINES_COMMAND中记录的函数，然后再执行 `doModInitFunctions` 来解析并执行_DATA_ 中__mod_init_func 这个 section 中保存的函数。_mod_init_funcs 中保存的是全局C++对象的构造函数以及所有带 `__attribute__((constructor)` 的C函数。\n\n可以简单的写几行代码验证一下：\n\n```\n__attribute__((constructor))\nvoid init_test() {\n    printf(\"init_test called\");\n}\n\nstatic TestClass t;\n```\n\n代码编译后可以使用 [MachOView](https://sourceforge.net/projects/machoview/)来查看 Mach-O 中的内容。\n\n![](03.png)\n\n可以看到 _mod_init_funcs 这个 section 中刚好有两个数据。\n\n继续回到 `doInitialization()` 函数，在其实现中我们可以找到最终调用的方法：\n\n```c\nInitializer func = (Initializer)(((struct macho_routines_command*)cmd)->init_address + fSlide);\nif ( context.verboseInit )\n\tdyld::log(\"dyld: calling -init function 0x%p in %s\\n\", func, this->getPath());\nfunc(context.argc, context.argv, context.envp, context.apple, &context.programVars);\n```\n\n`Initializer`  是一个指向初始化方法的函数指针，这里的初始化方法就是上面 __mod_init_func 这个 section 中保存的函数。\n\n我们可以通过添加 DYLD_PRINT_INITIALIZERS 环境变量在打印程序中依赖库的 `initializer` 方法：\n\n![](04.png)\n\n从打印中可以看到最先调用 libSystem.B.dylib 的 initializer :\n\n```\n**dyld: calling initializer function 0x7fff780ee94c in /usr/lib/libSystem.B.dylib**\n```\n\n可以从[这里](https://opensource.apple.com/source/Libsystem/Libsystem-169.3/init.c.auto.html)找到 libSystem 的 initializer 的完整实现。这里截取了部分代码：\n\n```c\n_libkernel_init(libkernel_funcs);\n\nbootstrap_init();\nmach_init();\npthread_init();\n__libc_init(vars, libSystem_atfork_prepare, libSystem_atfork_parent, libSystem_atfork_child, apple);\n__keymgr_initializer();\n_dyld_initializer();\nlibdispatch_init();\n```\n\n这里我们只要关注一下 `libdispatch_init()` 函数。因为 `libdispatch_init()`  函数最终调用了 runtime 的初始化方法 `_objc_init`。我们可以打个符号断点来验证一下：\n\n![](05.png)\n\n这里可以看到 `_objc_init` 调用的顺序，先 `libSystem_initializer` 调用 `libdispatch_init` 再到 `_objc_init` 初始化 runtime。\n\n这样从[这里](https://opensource.apple.com/source/libdispatch/libdispatch-913.60.2/)找到 `libdispatch_init()` 函数的实现。其中有这么几个函数调用： \n\n```c\n_dispatch_hw_config_init();\n_dispatch_time_init();\n_dispatch_vtable_init();\n_os_object_init();\n_voucher_init();\n_dispatch_introspection_init();\n```\n\n我们可以在 `_os_object_init()` 函数实现中发现确实调用了 `_objc_init()`：\n\n```c\nvoid\n_os_object_init(void)\n{\n    _objc_init();\n    ...\n}\n```\n\n这个时候 runtime 被初始化了。\n\n##### 查找入口点并返回\n\n这一步调用主程序的 `getEntryFromLC_MAIN()`，从加载命令读取 LC_MAIN入口，如果没有 LC_MAIN 就调用 `getEntryFromLC_UNIXTHREAD()` 读取LC_UNIXTHREAD，找到后就跳到入口点指定的地址并返回。\n至此，整个dyld的加载过程就完成了。\n\n\n","source":"_posts/iOS-应用启动流程分析-dyld.md","raw":"---\ntitle: iOS 应用启动流程分析-dyld\ndate: 2017-10-11 10:04:03\ntags: 原理 dyld\ncategories: iOS\n---\n\niOS 应用程序启动过程可以以 `main` 函数为界，这里我们先不用管 `main() `函数调用后的过程，主要来分析一下 `mian()` 函数调用之前的dyld阶段。\n\n我们可以先写个简单的程序来看看系统在调用 `main()` 之前，调用了哪些函数。\n\n<!--more-->\n\n![](01.png)\n\n这里给 `load` 方法添加了一个断点。从调用栈可以看到最先调用的是 `__dyld_start` 函数。我们可以从 [dyld 源码](https://github.com/opensource-apple/dyld) dyldStartup.s 中找到 `__dyld_start` 的实现。此函数由汇编实现，兼容各种平台架构，此处主要以arm64 架构下的汇编代码为例：\n\n```asm6502\n#if __arm64__\n\t.data\n\t.align 3\n__dso_static: \n\t.quad   ___dso_handle\n\n\t.text\n\t.align 2\n\t.globl __dyld_start\n__dyld_start:\n\tmov \tx28, sp\n\tand     sp, x28, #~15\t\t// force 16-byte alignment of stack\n\tmov\tx0, #0\n\tmov\tx1, #0\n\tstp\tx1, x0, [sp, #-16]!\t// make aligned terminating frame\n\tmov\tfp, sp\t\t\t// set up fp to point to terminating frame\n\tsub\tsp, sp, #16             // make room for local variables\n\tldr     x0, [x28]\t\t// get app's mh into x0\n \tldr     x1, [x28, #8]           // get argc into x1 (kernel passes 32-bit int argc as 64-bits on stack to keep alignment)\n\tadd     x2, x28, #16\t\t// get argv into x2\n\tadrp\tx4,___dso_handle@page\n\tadd \tx4,x4,___dso_handle@pageoff // get dyld's mh in to x4\n\tadrp\tx3,__dso_static@page\n\tldr \tx3,[x3,__dso_static@pageoff] // get unslid start of dyld\n\tsub \tx3,x4,x3\t\t// x3 now has slide of dyld\n\tmov\tx5,sp                   // x5 has &startGlue\n\t\n\t// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &startGlue)\n\tbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm\n\tmov\tx16,x0                  // save entry point address in x16\n\tldr     x1, [sp]\n\tcmp\tx1, #0\n\tb.ne\tLnew\n\n\t// LC_UNIXTHREAD way, clean up stack and jump to result\n\tadd\tsp, x28, #8\t\t// restore unaligned stack pointer without app mh\n\tbr\tx16\t\t\t// jump to the program's entry point\n\n\t// LC_MAIN case, set up stack for call to main()\nLnew:\tmov\tlr, x1\t\t    // simulate return address into _start in libdyld.dylib\n\tldr     x0, [x28, #8] \t    // main param1 = argc\n\tadd     x1, x28, #16\t    // main param2 = argv\n\tadd\tx2, x1, x0, lsl #3  \n\tadd\tx2, x2, #8\t    // main param3 = &env[0]\n\tmov\tx3, x2\nLapple:\tldr\tx4, [x3]\n\tadd\tx3, x3, #8\n\tcmp\tx4, #0\n\tb.ne\tLapple\t\t    // main param4 = apple\n\tbr\tx16\n\n#endif // __arm64__\n```\n\n这里主要关注一下 `bl` 指令：\n\n```asm6502\n// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &startGlue)\nbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm\n```\n\n从注释了解到，其实就是调用 `dyldbootstrap::start()` 函数。在 dyldInitialization.cpp 中可以找到 `start` 函数的实现：\n\n```c\n//\n//  This is code to bootstrap dyld.  This work in normally done for a program by dyld and crt.\n//  In dyld we have to do this manually.\n//\nuintptr_t start(const struct macho_header* appsMachHeader, int argc, const char* argv[], \n\t\t\t\tintptr_t slide, const struct macho_header* dyldsMachHeader,\n\t\t\t\tuintptr_t* startGlue)\n{\n\t// if kernel had to slide dyld, we need to fix up load sensitive locations\n\t// we have to do this before using any global variables\n\tif ( slide != 0 ) {\n\t\trebaseDyld(dyldsMachHeader, slide);\n\t}\n\n\t// allow dyld to use mach messaging\n\tmach_init();\n\n\t// kernel sets up env pointer to be just past end of agv array\n\tconst char** envp = &argv[argc+1];\n\t\n\t// kernel sets up apple pointer to be just past end of envp array\n\tconst char** apple = envp;\n\twhile(*apple != NULL) { ++apple; }\n\t++apple;\n\n\t// set up random value for stack canary\n\t__guard_setup(apple);\n\n#if DYLD_INITIALIZER_SUPPORT\n\t// run all C++ initializers inside dyld\n\trunDyldInitializers(dyldsMachHeader, slide, argc, argv, envp, apple);\n#endif\n\n\t// now that we are done bootstrapping dyld, call dyld's main\n\tuintptr_t appsSlide = slideOfMainExecutable(appsMachHeader);\n\treturn dyld::_main(appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);\n}\n\n```\n\n`start` 函数中做了很多 dyld 初始化相关的工作，包括：\n\n* rebaseDyld() dyld 重定位\n* mach_init() mach消息初始化\n* __guard_setup() 栈溢出保护\n\n初始化工作完成后，此函数调用到了 `dyld::_main`，再将返回值传递给 `__dyld_start` 去调用真正的 `main()` 函数。\n\n我们可以在 dyld.cpp 中找到` _main` 的实现， 代码比较长，就不贴代码了，不过我们可以看看 `_main` 函数的注释:\n\n> Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which sets up some registers and call this function.\n> \n> Returns address of main() in target program which __dyld_start jumps to\n\n这个是说，内核加载 dyld，并跳转到 __dyld_start 函数，它主要设置一些寄存器，并且调用了 `_main`函数。这里刚好跟上面分析的过程相吻合。\n\n`dyld::_mina()` 是应用程序启动的关机函数，主要做了以下一些事情：\n\n1. 设置运行环境\n2. 实例化主程序 \n3. 加载共享缓存\n4. 加载插入的动态库\n5. 链接主程序\n6. 链接插入的动态库\n7. 执行弱符合绑定\n8. 执行初始化方法\n9. 查找入口并返回\n\n##### 设置运行环境\n\n这一步主要是设置运行参数、环境变量等。代码在开始的时候，将入参`mainExecutableMH` 赋值给了`sMainExecutableMachHeader`，这是一个`macho_header` 结构体，表示的是当前主程序的 Mach-O 头部信息，加载器依据 Mach-O 头部信息就可以解析整个 Mach-O 文件信息。接着调用 `setContext()` 设置上下文信息，包括一些回调函数、参数、标志信息等。如 `loadLibrary()` 函数实际调用的是 `libraryLocator()`，负责加载动态库。代码片断如下\n\n```c\nstatic void setContext(const macho_header* mainExecutableMH, int argc, const char* argv[], const char* envp[], const char* apple[])\n{\n    gLinkContext.loadLibrary\t\t\t= &libraryLocator;\n    gLinkContext.terminationRecorder\t= &terminationRecorder;\n    ...\n}\n```\n\n##### 实例化主程序\n```c\n// instantiate ImageLoader for main executable\nsMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);\n```\n\n这一步将主程序的 Mach-O 加载进内存，并实例化一个 ImageLoader。`instantiateFromLoadedImage()` 首先调用 `isCompatibleMachO()` 检测Mach-O 头部的magic、cputype、cpusubtype 等相关属性，判断 Mach-O 文件的兼容性，如果兼容性满足，则调用`ImageLoaderMachO::instantiateMainExecutable()` 实例化主程序的ImageLoader，代码如下：\n\n```c\n// The kernel maps in main executable before dyld gets control.  We need to \n// make an ImageLoader* for the already mapped in main executable.\nstatic ImageLoader* instantiateFromLoadedImage(const macho_header* mh, uintptr_t slide, const char* path)\n{\n\t// try mach-o loader\n\tif ( isCompatibleMachO((const uint8_t*)mh, path) ) {\n\t\tImageLoader* image = ImageLoaderMachO::instantiateMainExecutable(mh, slide, path, gLinkContext);\n\t\taddImage(image);\n\t\treturn image;\n\t}\n\t\n\tthrow \"main executable not a known format\";\n}\n```\n\n`ImageLoaderMachO::instantiateMainExecutable()` 函数里面首先会调用`sniffLoadCommands()` 函数来获取一些数据，包括：\n\n* **compressed**：若Mach-O存在LC_DYLD_INFO和LC_DYLD_INFO_ONLY加载命令，则说明是压缩类型的Mach-O\n* **segCount**：根据 LC_SEGMENT_COMMAND 加载命令来统计段数量。\n* **libCount**：根据 LC_LOAD_DYLIB、LC_LOAD_WEAK_DYLIB、LC_REEXPORT_DYLIB、LC_LOAD_UPWARD_DYLIB 这几个加载命令来统计库的数量，库的数量不能超过4095个。\n* **codeSigCmd**：通过解析LC_CODE_SIGNATURE来获取代码签名加载命令。\n* **encryptCmd**：通过LC_ENCRYPTION_INFO和LC_ENCRYPTION_INFO_64来获取段的加密信息。\n\nImageLoader 是抽象类，其子类负责把 Mach-O 文件实例化为 image，当`sniffLoadCommands()` 解析完以后，根据 `compressed` 的值来决定调用哪个子类进行实例化，代码如下：\n\n```c\nif ( compressed ) \n    return ImageLoaderMachOCompressed::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);\n\telse\n#if SUPPORT_CLASSIC_MACHO\n    return ImageLoaderMachOClassic::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);\n#else\n```\n\n`instantiateMainExecutable()` 执行完后，会调用 `addImage()` 函数将 image 加入到 `sAllImages` 全局镜像列表中。并将image映射到申请的内存中， 其代码如下：\n\n```c\nstatic void addImage(ImageLoader* image)\n{\n\t// add to master list\n    allImagesLock();\n        sAllImages.push_back(image);\n    allImagesUnlock();\n\t\n\t// update mapped ranges\n\tuintptr_t lastSegStart = 0;\n\tuintptr_t lastSegEnd = 0;\n\tfor(unsigned int i=0, e=image->segmentCount(); i < e; ++i) {\n\t\tif ( image->segUnaccessible(i) ) \n\t\t\tcontinue;\n\t\tuintptr_t start = image->segActualLoadAddress(i);\n\t\tuintptr_t end = image->segActualEndAddress(i);\n\t\tif ( start == lastSegEnd ) {\n\t\t\t// two segments are contiguous, just record combined segments\n\t\t\tlastSegEnd = end;\n\t\t}\n\t\telse {\n\t\t\t// non-contiguous segments, record last (if any)\n\t\t\tif ( lastSegEnd != 0 )\n\t\t\t\taddMappedRange(image, lastSegStart, lastSegEnd);\n\t\t\tlastSegStart = start;\n\t\t\tlastSegEnd = end;\n\t\t}\t\t\n\t}\n\tif ( lastSegEnd != 0 )\n\t\taddMappedRange(image, lastSegStart, lastSegEnd);\n\n\t\n\tif ( sEnv.DYLD_PRINT_LIBRARIES || (sEnv.DYLD_PRINT_LIBRARIES_POST_LAUNCH && (sMainExecutable!=NULL) && sMainExecutable->isLinked()) ) {\n\t\tdyld::log(\"dyld: loaded: %s\\n\", image->getPath());\n\t}\n\t\n}\n```\n\n##### 加载共享缓存\n\n```c\n// load shared cache\ncheckSharedRegionDisable();\n#if DYLD_SHARED_CACHE_SUPPORT\nif ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion )\n\tmapSharedCache();\n#endif\n```\n\n这一步先调用 `checkSharedRegionDisable()` 检查共享缓存是否禁用。该函数的iOS实现部分仅有一句注释，从注释我们可以推断iOS必须开启共享缓存才能正常工作。接下来调用 `mapSharedCache()` 来加载共享缓存。\n\n##### 加载插入的动态库\n\n```c\n// load any inserted libraries\nif ( sEnv.DYLD_INSERT_LIBRARIES != NULL ) {\n    for (const char* const* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != NULL; ++lib) \n        loadInsertedDylib(*lib);\n}\n```\n\n这一步是加载环境变量DYLD_INSERT_LIBRARIES中配置的动态库，先判断环境变量DYLD_INSERT_LIBRARIES中是否存在要加载的动态库，如果存在则调用 `loadInsertedDylib()` 依次加载。\n\n`loadInsertedDylib()` 内部设置了一个LoadContext 后，调用了 `load()` 函数。该函数内部调用的一系列的 loadPhase*。\n\n```c\n// try all path permutations and check against existing loaded images\nImageLoader* image = loadPhase0(path, orgPath, context, NULL);\n```\n\n大致会按照下图的顺序搜索动态库，并调用不同的函数来继续处理。\n\n![](02.png)\n\n当内部调用到 `loadPhase5load()` 函数的时候，会先在共享缓存中搜索，如果存在则调用 `ImageLoaderMachO::instantiateFromCache()`  来实例化ImageLoader，否则通过 `loadPhase5open()` 打开文件并读取数据到内存后，再调用 `loadPhase6()` ，通过 `ImageLoaderMachO::instantiateFromFile()`  来实例化 ImageLoader，最后调用 `checkandAddImage()` 验证镜像并将其加入到全局镜像列表中。\n\n\n##### 链接主程序\n\n```c\n// link main executable\ngLinkContext.linkingMainExecutable = true;\nlink(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, true, ImageLoader::RPathChain(NULL, NULL));\n```\n\n这一步调用 `link()` 函数将实例化后的主程序进行动态修正，让二进制变为可正常执行的状态。`link()` 函数内部调用了`ImageLoader::link()` 函数，从源代码可以看到，这一步主要做了以下几个事情：\n\n* `recursiveLoadLibraries()` 加载所有依赖的库到内存。\n* `recursiveUpdateDepth()` 递归刷新依赖库的层级。\n* `recursiveRebase()` 由于ASLR的存在，必须递归对主程序以及依赖库进行重定位操作。\n* `recursiveBind()`  把主程序二进制和依赖进来的动态库全部执行符号表绑定。\n* `weakBind()` 如果链接的不是主程序二进制的话，会在此时执行弱符号绑定，主程序二进制则在link()完后再执行弱符号绑定。\n* `context.registerDOFs(dofs)` 注册DOF（DTrace Object Format）。\n\n##### 链接插入的动态库\n\n```c\n// link any inserted libraries\n// do this after linking main executable so that any dylibs pulled in by inserted \n// dylibs (e.g. libSystem) will not be in front of dylibs the program uses\nif ( sInsertedDylibCount > 0 ) {\n    for(unsigned int i=0; i < sInsertedDylibCount; ++i) {\n        ImageLoader* image = sAllImages[i+1];\n        link(image, sEnv.DYLD_BIND_AT_LAUNCH, true, ImageLoader::RPathChain(NULL, NULL));\n        image->setNeverUnloadRecursive();\n    }\n    // only INSERTED libraries can interpose\n    // register interposing info after all inserted libraries are bound so chaining works\n    for(unsigned int i=0; i < sInsertedDylibCount; ++i) {\n        ImageLoader* image = sAllImages[i+1];\n        image->registerInterposing();\n    }\n}\n```\n\n这一步与链接主程序一样，将前面调用 `addImage()` 函数保存在 `sAllImages` 中的动态库列表循环取出并调用 `link()` 进行链接，需要注意的是，`sAllImages` 中保存的第一项是主程序的镜像，所以要从 i+1的位置开始，取到的才是动态库的 ImageLoader。\n\n接下来循环调用每个镜像的 `registerInterposing()` 函数，该函数会遍历Mach-O 的 LC_SEGMENT_COMMAND 加载命令，读取__DATA, __interpose，并将读取到的信息保存到 `fgInterposingTuples` 中。\n\n##### 执行弱符合绑定\n\n```c\n// <rdar://problem/12186933> do weak binding only after all inserted images linked\nsMainExecutable->weakBind(gLinkContext);\n```\n\n`weakBind()` 首先通过 `getCoalescedImages()` 合并所有动态库的弱符号到一个列表里，然后调用 `initializeCoalIterator()` 对需要绑定的弱符号进行排序，接着调用 `incrementCoalIterator()` 读取dyld_info_command 结构的 `weak_bind_off` 和 `weak_bind_size` 字段，确定弱符号的数据偏移与大小，最终进行弱符号绑定。\n\n##### 执行初始化方法\n\n```c\n#if SUPPORT_OLD_CRT_INITIALIZATION\n    // Old way is to run initializers via a callback from crt1.o\n    if ( ! gRunInitializersOldWay ) \n        initializeMainExecutable(); \n#else\n    // run all initializers\n    initializeMainExecutable(); \n#endif\n```\n\n这一步由 `initializeMainExecutable()` 完成。dyld 会优先初始化动态库，然后初始化主程序。该函数首先执行 `runInitializers()`，内部再依次调用 `processInitializers()`、`recursiveInitialization()`。在 `processInitializers()` 之后会发送 `dyld_image_state_initialized` 通知。\n\n在 `recursiveInitialization()` 的实现中有这么一行代码：\n\n```c\n// let objc know we are about to initialize this image\ncontext.notifySingle(dyld_image_state_dependents_initialized, this);\n```\n\n注释告诉我们，这个函数主要目的是让 objc 知道 image 即将被初始化。之后执行初始化操作：\n\n```c\n// initialize this image\nthis->doInitialization(context);\n```\n\n在 `doInitialization()` 中首先调用了 `doImageInit()` ，然后调用 `doModInitFunctions()` 。\n\n`doImageInit` 执行镜像的初始化函数，也就是 LC_ROUTINES_COMMAND中记录的函数，然后再执行 `doModInitFunctions` 来解析并执行_DATA_ 中__mod_init_func 这个 section 中保存的函数。_mod_init_funcs 中保存的是全局C++对象的构造函数以及所有带 `__attribute__((constructor)` 的C函数。\n\n可以简单的写几行代码验证一下：\n\n```\n__attribute__((constructor))\nvoid init_test() {\n    printf(\"init_test called\");\n}\n\nstatic TestClass t;\n```\n\n代码编译后可以使用 [MachOView](https://sourceforge.net/projects/machoview/)来查看 Mach-O 中的内容。\n\n![](03.png)\n\n可以看到 _mod_init_funcs 这个 section 中刚好有两个数据。\n\n继续回到 `doInitialization()` 函数，在其实现中我们可以找到最终调用的方法：\n\n```c\nInitializer func = (Initializer)(((struct macho_routines_command*)cmd)->init_address + fSlide);\nif ( context.verboseInit )\n\tdyld::log(\"dyld: calling -init function 0x%p in %s\\n\", func, this->getPath());\nfunc(context.argc, context.argv, context.envp, context.apple, &context.programVars);\n```\n\n`Initializer`  是一个指向初始化方法的函数指针，这里的初始化方法就是上面 __mod_init_func 这个 section 中保存的函数。\n\n我们可以通过添加 DYLD_PRINT_INITIALIZERS 环境变量在打印程序中依赖库的 `initializer` 方法：\n\n![](04.png)\n\n从打印中可以看到最先调用 libSystem.B.dylib 的 initializer :\n\n```\n**dyld: calling initializer function 0x7fff780ee94c in /usr/lib/libSystem.B.dylib**\n```\n\n可以从[这里](https://opensource.apple.com/source/Libsystem/Libsystem-169.3/init.c.auto.html)找到 libSystem 的 initializer 的完整实现。这里截取了部分代码：\n\n```c\n_libkernel_init(libkernel_funcs);\n\nbootstrap_init();\nmach_init();\npthread_init();\n__libc_init(vars, libSystem_atfork_prepare, libSystem_atfork_parent, libSystem_atfork_child, apple);\n__keymgr_initializer();\n_dyld_initializer();\nlibdispatch_init();\n```\n\n这里我们只要关注一下 `libdispatch_init()` 函数。因为 `libdispatch_init()`  函数最终调用了 runtime 的初始化方法 `_objc_init`。我们可以打个符号断点来验证一下：\n\n![](05.png)\n\n这里可以看到 `_objc_init` 调用的顺序，先 `libSystem_initializer` 调用 `libdispatch_init` 再到 `_objc_init` 初始化 runtime。\n\n这样从[这里](https://opensource.apple.com/source/libdispatch/libdispatch-913.60.2/)找到 `libdispatch_init()` 函数的实现。其中有这么几个函数调用： \n\n```c\n_dispatch_hw_config_init();\n_dispatch_time_init();\n_dispatch_vtable_init();\n_os_object_init();\n_voucher_init();\n_dispatch_introspection_init();\n```\n\n我们可以在 `_os_object_init()` 函数实现中发现确实调用了 `_objc_init()`：\n\n```c\nvoid\n_os_object_init(void)\n{\n    _objc_init();\n    ...\n}\n```\n\n这个时候 runtime 被初始化了。\n\n##### 查找入口点并返回\n\n这一步调用主程序的 `getEntryFromLC_MAIN()`，从加载命令读取 LC_MAIN入口，如果没有 LC_MAIN 就调用 `getEntryFromLC_UNIXTHREAD()` 读取LC_UNIXTHREAD，找到后就跳到入口点指定的地址并返回。\n至此，整个dyld的加载过程就完成了。\n\n\n","slug":"iOS-应用启动流程分析-dyld","published":1,"updated":"2019-02-15T01:59:13.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zik0000e1u0ocn89rbp4","content":"<p>iOS 应用程序启动过程可以以 <code>main</code> 函数为界，这里我们先不用管 <code>main()</code>函数调用后的过程，主要来分析一下 <code>mian()</code> 函数调用之前的dyld阶段。</p>\n<p>我们可以先写个简单的程序来看看系统在调用 <code>main()</code> 之前，调用了哪些函数。</p>\n<a id=\"more\"></a>\n<p><img src=\"01.png\" alt=\"\"></p>\n<p>这里给 <code>load</code> 方法添加了一个断点。从调用栈可以看到最先调用的是 <code>__dyld_start</code> 函数。我们可以从 <a href=\"https://github.com/opensource-apple/dyld\" target=\"_blank\" rel=\"noopener\">dyld 源码</a> dyldStartup.s 中找到 <code>__dyld_start</code> 的实现。此函数由汇编实现，兼容各种平台架构，此处主要以arm64 架构下的汇编代码为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if __arm64__</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">\t.align 3</span><br><span class=\"line\">__dso_static: </span><br><span class=\"line\">\t.quad   ___dso_handle</span><br><span class=\"line\"></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">\t.globl __dyld_start</span><br><span class=\"line\">__dyld_start:</span><br><span class=\"line\">\tmov \tx28, sp</span><br><span class=\"line\">\tand     sp, x28, #~15\t\t// force 16-byte alignment of stack</span><br><span class=\"line\">\tmov\tx0, #0</span><br><span class=\"line\">\tmov\tx1, #0</span><br><span class=\"line\">\tstp\tx1, x0, [sp, #-16]!\t// make aligned terminating frame</span><br><span class=\"line\">\tmov\tfp, sp\t\t\t// set up fp to point to terminating frame</span><br><span class=\"line\">\tsub\tsp, sp, #16             // make room for local variables</span><br><span class=\"line\">\tldr     x0, [x28]\t\t// get app&apos;s mh into x0</span><br><span class=\"line\"> \tldr     x1, [x28, #8]           // get argc into x1 (kernel passes 32-bit int argc as 64-bits on stack to keep alignment)</span><br><span class=\"line\">\tadd     x2, x28, #16\t\t// get argv into x2</span><br><span class=\"line\">\tadrp\tx4,___dso_handle@page</span><br><span class=\"line\">\tadd \tx4,x4,___dso_handle@pageoff // get dyld&apos;s mh in to x4</span><br><span class=\"line\">\tadrp\tx3,__dso_static@page</span><br><span class=\"line\">\tldr \tx3,[x3,__dso_static@pageoff] // get unslid start of dyld</span><br><span class=\"line\">\tsub \tx3,x4,x3\t\t// x3 now has slide of dyld</span><br><span class=\"line\">\tmov\tx5,sp                   // x5 has &amp;startGlue</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &amp;startGlue)</span><br><span class=\"line\">\tbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm</span><br><span class=\"line\">\tmov\tx16,x0                  // save entry point address in x16</span><br><span class=\"line\">\tldr     x1, [sp]</span><br><span class=\"line\">\tcmp\tx1, #0</span><br><span class=\"line\">\tb.ne\tLnew</span><br><span class=\"line\"></span><br><span class=\"line\">\t// LC_UNIXTHREAD way, clean up stack and jump to result</span><br><span class=\"line\">\tadd\tsp, x28, #8\t\t// restore unaligned stack pointer without app mh</span><br><span class=\"line\">\tbr\tx16\t\t\t// jump to the program&apos;s entry point</span><br><span class=\"line\"></span><br><span class=\"line\">\t// LC_MAIN case, set up stack for call to main()</span><br><span class=\"line\">Lnew:\tmov\tlr, x1\t\t    // simulate return address into _start in libdyld.dylib</span><br><span class=\"line\">\tldr     x0, [x28, #8] \t    // main param1 = argc</span><br><span class=\"line\">\tadd     x1, x28, #16\t    // main param2 = argv</span><br><span class=\"line\">\tadd\tx2, x1, x0, lsl #3  </span><br><span class=\"line\">\tadd\tx2, x2, #8\t    // main param3 = &amp;env[0]</span><br><span class=\"line\">\tmov\tx3, x2</span><br><span class=\"line\">Lapple:\tldr\tx4, [x3]</span><br><span class=\"line\">\tadd\tx3, x3, #8</span><br><span class=\"line\">\tcmp\tx4, #0</span><br><span class=\"line\">\tb.ne\tLapple\t\t    // main param4 = apple</span><br><span class=\"line\">\tbr\tx16</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // __arm64__</span><br></pre></td></tr></table></figure>\n<p>这里主要关注一下 <code>bl</code> 指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &amp;startGlue)</span><br><span class=\"line\">bl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm</span><br></pre></td></tr></table></figure>\n<p>从注释了解到，其实就是调用 <code>dyldbootstrap::start()</code> 函数。在 dyldInitialization.cpp 中可以找到 <code>start</code> 函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  This is code to bootstrap dyld.  This work in normally done for a program by dyld and crt.</span></span><br><span class=\"line\"><span class=\"comment\">//  In dyld we have to do this manually.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">uintptr_t</span> start(<span class=\"keyword\">const</span> struct macho_header* appsMachHeader, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[], </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">intptr_t</span> slide, <span class=\"keyword\">const</span> struct macho_header* dyldsMachHeader,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">uintptr_t</span>* startGlue)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class=\"line\">\t<span class=\"comment\">// we have to do this before using any global variables</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( slide != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\trebaseDyld(dyldsMachHeader, slide);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// allow dyld to use mach messaging</span></span><br><span class=\"line\">\tmach_init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// kernel sets up env pointer to be just past end of agv array</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** envp = &amp;argv[argc+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// kernel sets up apple pointer to be just past end of envp array</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** apple = envp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*apple != <span class=\"literal\">NULL</span>) &#123; ++apple; &#125;</span><br><span class=\"line\">\t++apple;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// set up random value for stack canary</span></span><br><span class=\"line\">\t__guard_setup(apple);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> DYLD_INITIALIZER_SUPPORT</span></span><br><span class=\"line\">\t<span class=\"comment\">// run all C++ initializers inside dyld</span></span><br><span class=\"line\">\trunDyldInitializers(dyldsMachHeader, slide, argc, argv, envp, apple);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// now that we are done bootstrapping dyld, call dyld's main</span></span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> appsSlide = slideOfMainExecutable(appsMachHeader);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dyld::_main(appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>start</code> 函数中做了很多 dyld 初始化相关的工作，包括：</p>\n<ul>\n<li>rebaseDyld() dyld 重定位</li>\n<li>mach_init() mach消息初始化</li>\n<li>__guard_setup() 栈溢出保护</li>\n</ul>\n<p>初始化工作完成后，此函数调用到了 <code>dyld::_main</code>，再将返回值传递给 <code>__dyld_start</code> 去调用真正的 <code>main()</code> 函数。</p>\n<p>我们可以在 dyld.cpp 中找到<code>_main</code> 的实现， 代码比较长，就不贴代码了，不过我们可以看看 <code>_main</code> 函数的注释:</p>\n<blockquote>\n<p>Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which sets up some registers and call this function.</p>\n<p>Returns address of main() in target program which __dyld_start jumps to</p>\n</blockquote>\n<p>这个是说，内核加载 dyld，并跳转到 __dyld_start 函数，它主要设置一些寄存器，并且调用了 <code>_main</code>函数。这里刚好跟上面分析的过程相吻合。</p>\n<p><code>dyld::_mina()</code> 是应用程序启动的关机函数，主要做了以下一些事情：</p>\n<ol>\n<li>设置运行环境</li>\n<li>实例化主程序 </li>\n<li>加载共享缓存</li>\n<li>加载插入的动态库</li>\n<li>链接主程序</li>\n<li>链接插入的动态库</li>\n<li>执行弱符合绑定</li>\n<li>执行初始化方法</li>\n<li>查找入口并返回</li>\n</ol>\n<h5 id=\"设置运行环境\"><a href=\"#设置运行环境\" class=\"headerlink\" title=\"设置运行环境\"></a>设置运行环境</h5><p>这一步主要是设置运行参数、环境变量等。代码在开始的时候，将入参<code>mainExecutableMH</code> 赋值给了<code>sMainExecutableMachHeader</code>，这是一个<code>macho_header</code> 结构体，表示的是当前主程序的 Mach-O 头部信息，加载器依据 Mach-O 头部信息就可以解析整个 Mach-O 文件信息。接着调用 <code>setContext()</code> 设置上下文信息，包括一些回调函数、参数、标志信息等。如 <code>loadLibrary()</code> 函数实际调用的是 <code>libraryLocator()</code>，负责加载动态库。代码片断如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setContext</span><span class=\"params\">(<span class=\"keyword\">const</span> macho_header* mainExecutableMH, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* envp[], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* apple[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    gLinkContext.loadLibrary\t\t\t= &amp;libraryLocator;</span><br><span class=\"line\">    gLinkContext.terminationRecorder\t= &amp;terminationRecorder;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"实例化主程序\"><a href=\"#实例化主程序\" class=\"headerlink\" title=\"实例化主程序\"></a>实例化主程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instantiate ImageLoader for main executable</span></span><br><span class=\"line\">sMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);</span><br></pre></td></tr></table></figure>\n<p>这一步将主程序的 Mach-O 加载进内存，并实例化一个 ImageLoader。<code>instantiateFromLoadedImage()</code> 首先调用 <code>isCompatibleMachO()</code> 检测Mach-O 头部的magic、cputype、cpusubtype 等相关属性，判断 Mach-O 文件的兼容性，如果兼容性满足，则调用<code>ImageLoaderMachO::instantiateMainExecutable()</code> 实例化主程序的ImageLoader，代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The kernel maps in main executable before dyld gets control.  We need to </span></span><br><span class=\"line\"><span class=\"comment\">// make an ImageLoader* for the already mapped in main executable.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ImageLoader* <span class=\"title\">instantiateFromLoadedImage</span><span class=\"params\">(<span class=\"keyword\">const</span> macho_header* mh, <span class=\"keyword\">uintptr_t</span> slide, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// try mach-o loader</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( isCompatibleMachO((<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)mh, path) ) &#123;</span><br><span class=\"line\">\t\tImageLoader* image = ImageLoaderMachO::instantiateMainExecutable(mh, slide, path, gLinkContext);</span><br><span class=\"line\">\t\taddImage(image);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> image;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"string\">\"main executable not a known format\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ImageLoaderMachO::instantiateMainExecutable()</code> 函数里面首先会调用<code>sniffLoadCommands()</code> 函数来获取一些数据，包括：</p>\n<ul>\n<li><strong>compressed</strong>：若Mach-O存在LC_DYLD_INFO和LC_DYLD_INFO_ONLY加载命令，则说明是压缩类型的Mach-O</li>\n<li><strong>segCount</strong>：根据 LC_SEGMENT_COMMAND 加载命令来统计段数量。</li>\n<li><strong>libCount</strong>：根据 LC_LOAD_DYLIB、LC_LOAD_WEAK_DYLIB、LC_REEXPORT_DYLIB、LC_LOAD_UPWARD_DYLIB 这几个加载命令来统计库的数量，库的数量不能超过4095个。</li>\n<li><strong>codeSigCmd</strong>：通过解析LC_CODE_SIGNATURE来获取代码签名加载命令。</li>\n<li><strong>encryptCmd</strong>：通过LC_ENCRYPTION_INFO和LC_ENCRYPTION_INFO_64来获取段的加密信息。</li>\n</ul>\n<p>ImageLoader 是抽象类，其子类负责把 Mach-O 文件实例化为 image，当<code>sniffLoadCommands()</code> 解析完以后，根据 <code>compressed</code> 的值来决定调用哪个子类进行实例化，代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( compressed ) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ImageLoaderMachOCompressed::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">#<span class=\"keyword\">if</span> SUPPORT_CLASSIC_MACHO</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ImageLoaderMachOClassic::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br></pre></td></tr></table></figure>\n<p><code>instantiateMainExecutable()</code> 执行完后，会调用 <code>addImage()</code> 函数将 image 加入到 <code>sAllImages</code> 全局镜像列表中。并将image映射到申请的内存中， 其代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addImage</span><span class=\"params\">(ImageLoader* image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// add to master list</span></span><br><span class=\"line\">    allImagesLock();</span><br><span class=\"line\">        sAllImages.push_back(image);</span><br><span class=\"line\">    allImagesUnlock();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// update mapped ranges</span></span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> lastSegStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> lastSegEnd = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, e=image-&gt;segmentCount(); i &lt; e; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( image-&gt;segUnaccessible(i) ) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">uintptr_t</span> start = image-&gt;segActualLoadAddress(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">uintptr_t</span> end = image-&gt;segActualEndAddress(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( start == lastSegEnd ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// two segments are contiguous, just record combined segments</span></span><br><span class=\"line\">\t\t\tlastSegEnd = end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// non-contiguous segments, record last (if any)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( lastSegEnd != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t\taddMappedRange(image, lastSegStart, lastSegEnd);</span><br><span class=\"line\">\t\t\tlastSegStart = start;</span><br><span class=\"line\">\t\t\tlastSegEnd = end;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( lastSegEnd != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\taddMappedRange(image, lastSegStart, lastSegEnd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sEnv.DYLD_PRINT_LIBRARIES || (sEnv.DYLD_PRINT_LIBRARIES_POST_LAUNCH &amp;&amp; (sMainExecutable!=<span class=\"literal\">NULL</span>) &amp;&amp; sMainExecutable-&gt;isLinked()) ) &#123;</span><br><span class=\"line\">\t\tdyld::<span class=\"built_in\">log</span>(<span class=\"string\">\"dyld: loaded: %s\\n\"</span>, image-&gt;getPath());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"加载共享缓存\"><a href=\"#加载共享缓存\" class=\"headerlink\" title=\"加载共享缓存\"></a>加载共享缓存</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load shared cache</span></span><br><span class=\"line\">checkSharedRegionDisable();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> DYLD_SHARED_CACHE_SUPPORT</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion )</span><br><span class=\"line\">\tmapSharedCache();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这一步先调用 <code>checkSharedRegionDisable()</code> 检查共享缓存是否禁用。该函数的iOS实现部分仅有一句注释，从注释我们可以推断iOS必须开启共享缓存才能正常工作。接下来调用 <code>mapSharedCache()</code> 来加载共享缓存。</p>\n<h5 id=\"加载插入的动态库\"><a href=\"#加载插入的动态库\" class=\"headerlink\" title=\"加载插入的动态库\"></a>加载插入的动态库</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load any inserted libraries</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( sEnv.DYLD_INSERT_LIBRARIES != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span>* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != <span class=\"literal\">NULL</span>; ++lib) </span><br><span class=\"line\">        loadInsertedDylib(*lib);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一步是加载环境变量DYLD_INSERT_LIBRARIES中配置的动态库，先判断环境变量DYLD_INSERT_LIBRARIES中是否存在要加载的动态库，如果存在则调用 <code>loadInsertedDylib()</code> 依次加载。</p>\n<p><code>loadInsertedDylib()</code> 内部设置了一个LoadContext 后，调用了 <code>load()</code> 函数。该函数内部调用的一系列的 loadPhase*。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// try all path permutations and check against existing loaded images</span></span><br><span class=\"line\">ImageLoader* image = loadPhase0(path, orgPath, context, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>大致会按照下图的顺序搜索动态库，并调用不同的函数来继续处理。</p>\n<p><img src=\"02.png\" alt=\"\"></p>\n<p>当内部调用到 <code>loadPhase5load()</code> 函数的时候，会先在共享缓存中搜索，如果存在则调用 <code>ImageLoaderMachO::instantiateFromCache()</code>  来实例化ImageLoader，否则通过 <code>loadPhase5open()</code> 打开文件并读取数据到内存后，再调用 <code>loadPhase6()</code> ，通过 <code>ImageLoaderMachO::instantiateFromFile()</code>  来实例化 ImageLoader，最后调用 <code>checkandAddImage()</code> 验证镜像并将其加入到全局镜像列表中。</p>\n<h5 id=\"链接主程序\"><a href=\"#链接主程序\" class=\"headerlink\" title=\"链接主程序\"></a>链接主程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// link main executable</span></span><br><span class=\"line\">gLinkContext.linkingMainExecutable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">link(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, <span class=\"literal\">true</span>, ImageLoader::RPathChain(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>));</span><br></pre></td></tr></table></figure>\n<p>这一步调用 <code>link()</code> 函数将实例化后的主程序进行动态修正，让二进制变为可正常执行的状态。<code>link()</code> 函数内部调用了<code>ImageLoader::link()</code> 函数，从源代码可以看到，这一步主要做了以下几个事情：</p>\n<ul>\n<li><code>recursiveLoadLibraries()</code> 加载所有依赖的库到内存。</li>\n<li><code>recursiveUpdateDepth()</code> 递归刷新依赖库的层级。</li>\n<li><code>recursiveRebase()</code> 由于ASLR的存在，必须递归对主程序以及依赖库进行重定位操作。</li>\n<li><code>recursiveBind()</code>  把主程序二进制和依赖进来的动态库全部执行符号表绑定。</li>\n<li><code>weakBind()</code> 如果链接的不是主程序二进制的话，会在此时执行弱符号绑定，主程序二进制则在link()完后再执行弱符号绑定。</li>\n<li><code>context.registerDOFs(dofs)</code> 注册DOF（DTrace Object Format）。</li>\n</ul>\n<h5 id=\"链接插入的动态库\"><a href=\"#链接插入的动态库\" class=\"headerlink\" title=\"链接插入的动态库\"></a>链接插入的动态库</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// link any inserted libraries</span></span><br><span class=\"line\"><span class=\"comment\">// do this after linking main executable so that any dylibs pulled in by inserted </span></span><br><span class=\"line\"><span class=\"comment\">// dylibs (e.g. libSystem) will not be in front of dylibs the program uses</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( sInsertedDylibCount &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class=\"line\">        ImageLoader* image = sAllImages[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        link(image, sEnv.DYLD_BIND_AT_LAUNCH, <span class=\"literal\">true</span>, ImageLoader::RPathChain(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        image-&gt;setNeverUnloadRecursive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// only INSERTED libraries can interpose</span></span><br><span class=\"line\">    <span class=\"comment\">// register interposing info after all inserted libraries are bound so chaining works</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class=\"line\">        ImageLoader* image = sAllImages[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        image-&gt;registerInterposing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一步与链接主程序一样，将前面调用 <code>addImage()</code> 函数保存在 <code>sAllImages</code> 中的动态库列表循环取出并调用 <code>link()</code> 进行链接，需要注意的是，<code>sAllImages</code> 中保存的第一项是主程序的镜像，所以要从 i+1的位置开始，取到的才是动态库的 ImageLoader。</p>\n<p>接下来循环调用每个镜像的 <code>registerInterposing()</code> 函数，该函数会遍历Mach-O 的 LC_SEGMENT_COMMAND 加载命令，读取<strong>DATA, </strong>interpose，并将读取到的信息保存到 <code>fgInterposingTuples</code> 中。</p>\n<h5 id=\"执行弱符合绑定\"><a href=\"#执行弱符合绑定\" class=\"headerlink\" title=\"执行弱符合绑定\"></a>执行弱符合绑定</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;rdar://problem/12186933&gt; do weak binding only after all inserted images linked</span></span><br><span class=\"line\">sMainExecutable-&gt;weakBind(gLinkContext);</span><br></pre></td></tr></table></figure>\n<p><code>weakBind()</code> 首先通过 <code>getCoalescedImages()</code> 合并所有动态库的弱符号到一个列表里，然后调用 <code>initializeCoalIterator()</code> 对需要绑定的弱符号进行排序，接着调用 <code>incrementCoalIterator()</code> 读取dyld_info_command 结构的 <code>weak_bind_off</code> 和 <code>weak_bind_size</code> 字段，确定弱符号的数据偏移与大小，最终进行弱符号绑定。</p>\n<h5 id=\"执行初始化方法\"><a href=\"#执行初始化方法\" class=\"headerlink\" title=\"执行初始化方法\"></a>执行初始化方法</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> SUPPORT_OLD_CRT_INITIALIZATION</span></span><br><span class=\"line\">    <span class=\"comment\">// Old way is to run initializers via a callback from crt1.o</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! gRunInitializersOldWay ) </span><br><span class=\"line\">        initializeMainExecutable(); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">// run all initializers</span></span><br><span class=\"line\">    initializeMainExecutable(); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这一步由 <code>initializeMainExecutable()</code> 完成。dyld 会优先初始化动态库，然后初始化主程序。该函数首先执行 <code>runInitializers()</code>，内部再依次调用 <code>processInitializers()</code>、<code>recursiveInitialization()</code>。在 <code>processInitializers()</code> 之后会发送 <code>dyld_image_state_initialized</code> 通知。</p>\n<p>在 <code>recursiveInitialization()</code> 的实现中有这么一行代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// let objc know we are about to initialize this image</span></span><br><span class=\"line\">context.notifySingle(dyld_image_state_dependents_initialized, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>注释告诉我们，这个函数主要目的是让 objc 知道 image 即将被初始化。之后执行初始化操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// initialize this image</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;doInitialization(context);</span><br></pre></td></tr></table></figure>\n<p>在 <code>doInitialization()</code> 中首先调用了 <code>doImageInit()</code> ，然后调用 <code>doModInitFunctions()</code> 。</p>\n<p><code>doImageInit</code> 执行镜像的初始化函数，也就是 LC_ROUTINES_COMMAND中记录的函数，然后再执行 <code>doModInitFunctions</code> 来解析并执行<em>DATA</em> 中<strong>mod_init_func 这个 section 中保存的函数。_mod_init_funcs 中保存的是全局C++对象的构造函数以及所有带 `</strong>attribute__((constructor)` 的C函数。</p>\n<p>可以简单的写几行代码验证一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute__((constructor))</span><br><span class=\"line\">void init_test() &#123;</span><br><span class=\"line\">    printf(&quot;init_test called&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static TestClass t;</span><br></pre></td></tr></table></figure>\n<p>代码编译后可以使用 <a href=\"https://sourceforge.net/projects/machoview/\" target=\"_blank\" rel=\"noopener\">MachOView</a>来查看 Mach-O 中的内容。</p>\n<p><img src=\"03.png\" alt=\"\"></p>\n<p>可以看到 _mod_init_funcs 这个 section 中刚好有两个数据。</p>\n<p>继续回到 <code>doInitialization()</code> 函数，在其实现中我们可以找到最终调用的方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Initializer func = (Initializer)(((struct macho_routines_command*)cmd)-&gt;init_address + fSlide);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( context.verboseInit )</span><br><span class=\"line\">\tdyld::<span class=\"built_in\">log</span>(<span class=\"string\">\"dyld: calling -init function 0x%p in %s\\n\"</span>, func, <span class=\"keyword\">this</span>-&gt;getPath());</span><br><span class=\"line\">func(context.argc, context.argv, context.envp, context.apple, &amp;context.programVars);</span><br></pre></td></tr></table></figure>\n<p><code>Initializer</code>  是一个指向初始化方法的函数指针，这里的初始化方法就是上面 __mod_init_func 这个 section 中保存的函数。</p>\n<p>我们可以通过添加 DYLD_PRINT_INITIALIZERS 环境变量在打印程序中依赖库的 <code>initializer</code> 方法：</p>\n<p><img src=\"04.png\" alt=\"\"></p>\n<p>从打印中可以看到最先调用 libSystem.B.dylib 的 initializer :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dyld: calling initializer function 0x7fff780ee94c in /usr/lib/libSystem.B.dylib**</span><br></pre></td></tr></table></figure>\n<p>可以从<a href=\"https://opensource.apple.com/source/Libsystem/Libsystem-169.3/init.c.auto.html\" target=\"_blank\" rel=\"noopener\">这里</a>找到 libSystem 的 initializer 的完整实现。这里截取了部分代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_libkernel_init(libkernel_funcs);</span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap_init();</span><br><span class=\"line\">mach_init();</span><br><span class=\"line\">pthread_init();</span><br><span class=\"line\">__libc_init(vars, libSystem_atfork_prepare, libSystem_atfork_parent, libSystem_atfork_child, apple);</span><br><span class=\"line\">__keymgr_initializer();</span><br><span class=\"line\">_dyld_initializer();</span><br><span class=\"line\">libdispatch_init();</span><br></pre></td></tr></table></figure>\n<p>这里我们只要关注一下 <code>libdispatch_init()</code> 函数。因为 <code>libdispatch_init()</code>  函数最终调用了 runtime 的初始化方法 <code>_objc_init</code>。我们可以打个符号断点来验证一下：</p>\n<p><img src=\"05.png\" alt=\"\"></p>\n<p>这里可以看到 <code>_objc_init</code> 调用的顺序，先 <code>libSystem_initializer</code> 调用 <code>libdispatch_init</code> 再到 <code>_objc_init</code> 初始化 runtime。</p>\n<p>这样从<a href=\"https://opensource.apple.com/source/libdispatch/libdispatch-913.60.2/\" target=\"_blank\" rel=\"noopener\">这里</a>找到 <code>libdispatch_init()</code> 函数的实现。其中有这么几个函数调用： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_dispatch_hw_config_init();</span><br><span class=\"line\">_dispatch_time_init();</span><br><span class=\"line\">_dispatch_vtable_init();</span><br><span class=\"line\">_os_object_init();</span><br><span class=\"line\">_voucher_init();</span><br><span class=\"line\">_dispatch_introspection_init();</span><br></pre></td></tr></table></figure>\n<p>我们可以在 <code>_os_object_init()</code> 函数实现中发现确实调用了 <code>_objc_init()</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">_os_object_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _objc_init();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候 runtime 被初始化了。</p>\n<h5 id=\"查找入口点并返回\"><a href=\"#查找入口点并返回\" class=\"headerlink\" title=\"查找入口点并返回\"></a>查找入口点并返回</h5><p>这一步调用主程序的 <code>getEntryFromLC_MAIN()</code>，从加载命令读取 LC_MAIN入口，如果没有 LC_MAIN 就调用 <code>getEntryFromLC_UNIXTHREAD()</code> 读取LC_UNIXTHREAD，找到后就跳到入口点指定的地址并返回。<br>至此，整个dyld的加载过程就完成了。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>iOS 应用程序启动过程可以以 <code>main</code> 函数为界，这里我们先不用管 <code>main()</code>函数调用后的过程，主要来分析一下 <code>mian()</code> 函数调用之前的dyld阶段。</p>\n<p>我们可以先写个简单的程序来看看系统在调用 <code>main()</code> 之前，调用了哪些函数。</p>","more":"<p><img src=\"01.png\" alt=\"\"></p>\n<p>这里给 <code>load</code> 方法添加了一个断点。从调用栈可以看到最先调用的是 <code>__dyld_start</code> 函数。我们可以从 <a href=\"https://github.com/opensource-apple/dyld\" target=\"_blank\" rel=\"noopener\">dyld 源码</a> dyldStartup.s 中找到 <code>__dyld_start</code> 的实现。此函数由汇编实现，兼容各种平台架构，此处主要以arm64 架构下的汇编代码为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if __arm64__</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">\t.align 3</span><br><span class=\"line\">__dso_static: </span><br><span class=\"line\">\t.quad   ___dso_handle</span><br><span class=\"line\"></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">\t.globl __dyld_start</span><br><span class=\"line\">__dyld_start:</span><br><span class=\"line\">\tmov \tx28, sp</span><br><span class=\"line\">\tand     sp, x28, #~15\t\t// force 16-byte alignment of stack</span><br><span class=\"line\">\tmov\tx0, #0</span><br><span class=\"line\">\tmov\tx1, #0</span><br><span class=\"line\">\tstp\tx1, x0, [sp, #-16]!\t// make aligned terminating frame</span><br><span class=\"line\">\tmov\tfp, sp\t\t\t// set up fp to point to terminating frame</span><br><span class=\"line\">\tsub\tsp, sp, #16             // make room for local variables</span><br><span class=\"line\">\tldr     x0, [x28]\t\t// get app&apos;s mh into x0</span><br><span class=\"line\"> \tldr     x1, [x28, #8]           // get argc into x1 (kernel passes 32-bit int argc as 64-bits on stack to keep alignment)</span><br><span class=\"line\">\tadd     x2, x28, #16\t\t// get argv into x2</span><br><span class=\"line\">\tadrp\tx4,___dso_handle@page</span><br><span class=\"line\">\tadd \tx4,x4,___dso_handle@pageoff // get dyld&apos;s mh in to x4</span><br><span class=\"line\">\tadrp\tx3,__dso_static@page</span><br><span class=\"line\">\tldr \tx3,[x3,__dso_static@pageoff] // get unslid start of dyld</span><br><span class=\"line\">\tsub \tx3,x4,x3\t\t// x3 now has slide of dyld</span><br><span class=\"line\">\tmov\tx5,sp                   // x5 has &amp;startGlue</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &amp;startGlue)</span><br><span class=\"line\">\tbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm</span><br><span class=\"line\">\tmov\tx16,x0                  // save entry point address in x16</span><br><span class=\"line\">\tldr     x1, [sp]</span><br><span class=\"line\">\tcmp\tx1, #0</span><br><span class=\"line\">\tb.ne\tLnew</span><br><span class=\"line\"></span><br><span class=\"line\">\t// LC_UNIXTHREAD way, clean up stack and jump to result</span><br><span class=\"line\">\tadd\tsp, x28, #8\t\t// restore unaligned stack pointer without app mh</span><br><span class=\"line\">\tbr\tx16\t\t\t// jump to the program&apos;s entry point</span><br><span class=\"line\"></span><br><span class=\"line\">\t// LC_MAIN case, set up stack for call to main()</span><br><span class=\"line\">Lnew:\tmov\tlr, x1\t\t    // simulate return address into _start in libdyld.dylib</span><br><span class=\"line\">\tldr     x0, [x28, #8] \t    // main param1 = argc</span><br><span class=\"line\">\tadd     x1, x28, #16\t    // main param2 = argv</span><br><span class=\"line\">\tadd\tx2, x1, x0, lsl #3  </span><br><span class=\"line\">\tadd\tx2, x2, #8\t    // main param3 = &amp;env[0]</span><br><span class=\"line\">\tmov\tx3, x2</span><br><span class=\"line\">Lapple:\tldr\tx4, [x3]</span><br><span class=\"line\">\tadd\tx3, x3, #8</span><br><span class=\"line\">\tcmp\tx4, #0</span><br><span class=\"line\">\tb.ne\tLapple\t\t    // main param4 = apple</span><br><span class=\"line\">\tbr\tx16</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // __arm64__</span><br></pre></td></tr></table></figure>\n<p>这里主要关注一下 <code>bl</code> 指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// call dyldbootstrap::start(app_mh, argc, argv, slide, dyld_mh, &amp;startGlue)</span><br><span class=\"line\">bl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKclS2_Pm</span><br></pre></td></tr></table></figure>\n<p>从注释了解到，其实就是调用 <code>dyldbootstrap::start()</code> 函数。在 dyldInitialization.cpp 中可以找到 <code>start</code> 函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  This is code to bootstrap dyld.  This work in normally done for a program by dyld and crt.</span></span><br><span class=\"line\"><span class=\"comment\">//  In dyld we have to do this manually.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">uintptr_t</span> start(<span class=\"keyword\">const</span> struct macho_header* appsMachHeader, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[], </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">intptr_t</span> slide, <span class=\"keyword\">const</span> struct macho_header* dyldsMachHeader,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">uintptr_t</span>* startGlue)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class=\"line\">\t<span class=\"comment\">// we have to do this before using any global variables</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( slide != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\trebaseDyld(dyldsMachHeader, slide);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// allow dyld to use mach messaging</span></span><br><span class=\"line\">\tmach_init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// kernel sets up env pointer to be just past end of agv array</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** envp = &amp;argv[argc+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// kernel sets up apple pointer to be just past end of envp array</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** apple = envp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*apple != <span class=\"literal\">NULL</span>) &#123; ++apple; &#125;</span><br><span class=\"line\">\t++apple;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// set up random value for stack canary</span></span><br><span class=\"line\">\t__guard_setup(apple);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> DYLD_INITIALIZER_SUPPORT</span></span><br><span class=\"line\">\t<span class=\"comment\">// run all C++ initializers inside dyld</span></span><br><span class=\"line\">\trunDyldInitializers(dyldsMachHeader, slide, argc, argv, envp, apple);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// now that we are done bootstrapping dyld, call dyld's main</span></span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> appsSlide = slideOfMainExecutable(appsMachHeader);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dyld::_main(appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>start</code> 函数中做了很多 dyld 初始化相关的工作，包括：</p>\n<ul>\n<li>rebaseDyld() dyld 重定位</li>\n<li>mach_init() mach消息初始化</li>\n<li>__guard_setup() 栈溢出保护</li>\n</ul>\n<p>初始化工作完成后，此函数调用到了 <code>dyld::_main</code>，再将返回值传递给 <code>__dyld_start</code> 去调用真正的 <code>main()</code> 函数。</p>\n<p>我们可以在 dyld.cpp 中找到<code>_main</code> 的实现， 代码比较长，就不贴代码了，不过我们可以看看 <code>_main</code> 函数的注释:</p>\n<blockquote>\n<p>Entry point for dyld.  The kernel loads dyld and jumps to __dyld_start which sets up some registers and call this function.</p>\n<p>Returns address of main() in target program which __dyld_start jumps to</p>\n</blockquote>\n<p>这个是说，内核加载 dyld，并跳转到 __dyld_start 函数，它主要设置一些寄存器，并且调用了 <code>_main</code>函数。这里刚好跟上面分析的过程相吻合。</p>\n<p><code>dyld::_mina()</code> 是应用程序启动的关机函数，主要做了以下一些事情：</p>\n<ol>\n<li>设置运行环境</li>\n<li>实例化主程序 </li>\n<li>加载共享缓存</li>\n<li>加载插入的动态库</li>\n<li>链接主程序</li>\n<li>链接插入的动态库</li>\n<li>执行弱符合绑定</li>\n<li>执行初始化方法</li>\n<li>查找入口并返回</li>\n</ol>\n<h5 id=\"设置运行环境\"><a href=\"#设置运行环境\" class=\"headerlink\" title=\"设置运行环境\"></a>设置运行环境</h5><p>这一步主要是设置运行参数、环境变量等。代码在开始的时候，将入参<code>mainExecutableMH</code> 赋值给了<code>sMainExecutableMachHeader</code>，这是一个<code>macho_header</code> 结构体，表示的是当前主程序的 Mach-O 头部信息，加载器依据 Mach-O 头部信息就可以解析整个 Mach-O 文件信息。接着调用 <code>setContext()</code> 设置上下文信息，包括一些回调函数、参数、标志信息等。如 <code>loadLibrary()</code> 函数实际调用的是 <code>libraryLocator()</code>，负责加载动态库。代码片断如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setContext</span><span class=\"params\">(<span class=\"keyword\">const</span> macho_header* mainExecutableMH, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* envp[], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* apple[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    gLinkContext.loadLibrary\t\t\t= &amp;libraryLocator;</span><br><span class=\"line\">    gLinkContext.terminationRecorder\t= &amp;terminationRecorder;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"实例化主程序\"><a href=\"#实例化主程序\" class=\"headerlink\" title=\"实例化主程序\"></a>实例化主程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instantiate ImageLoader for main executable</span></span><br><span class=\"line\">sMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);</span><br></pre></td></tr></table></figure>\n<p>这一步将主程序的 Mach-O 加载进内存，并实例化一个 ImageLoader。<code>instantiateFromLoadedImage()</code> 首先调用 <code>isCompatibleMachO()</code> 检测Mach-O 头部的magic、cputype、cpusubtype 等相关属性，判断 Mach-O 文件的兼容性，如果兼容性满足，则调用<code>ImageLoaderMachO::instantiateMainExecutable()</code> 实例化主程序的ImageLoader，代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The kernel maps in main executable before dyld gets control.  We need to </span></span><br><span class=\"line\"><span class=\"comment\">// make an ImageLoader* for the already mapped in main executable.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ImageLoader* <span class=\"title\">instantiateFromLoadedImage</span><span class=\"params\">(<span class=\"keyword\">const</span> macho_header* mh, <span class=\"keyword\">uintptr_t</span> slide, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// try mach-o loader</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( isCompatibleMachO((<span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span>*)mh, path) ) &#123;</span><br><span class=\"line\">\t\tImageLoader* image = ImageLoaderMachO::instantiateMainExecutable(mh, slide, path, gLinkContext);</span><br><span class=\"line\">\t\taddImage(image);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> image;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"string\">\"main executable not a known format\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ImageLoaderMachO::instantiateMainExecutable()</code> 函数里面首先会调用<code>sniffLoadCommands()</code> 函数来获取一些数据，包括：</p>\n<ul>\n<li><strong>compressed</strong>：若Mach-O存在LC_DYLD_INFO和LC_DYLD_INFO_ONLY加载命令，则说明是压缩类型的Mach-O</li>\n<li><strong>segCount</strong>：根据 LC_SEGMENT_COMMAND 加载命令来统计段数量。</li>\n<li><strong>libCount</strong>：根据 LC_LOAD_DYLIB、LC_LOAD_WEAK_DYLIB、LC_REEXPORT_DYLIB、LC_LOAD_UPWARD_DYLIB 这几个加载命令来统计库的数量，库的数量不能超过4095个。</li>\n<li><strong>codeSigCmd</strong>：通过解析LC_CODE_SIGNATURE来获取代码签名加载命令。</li>\n<li><strong>encryptCmd</strong>：通过LC_ENCRYPTION_INFO和LC_ENCRYPTION_INFO_64来获取段的加密信息。</li>\n</ul>\n<p>ImageLoader 是抽象类，其子类负责把 Mach-O 文件实例化为 image，当<code>sniffLoadCommands()</code> 解析完以后，根据 <code>compressed</code> 的值来决定调用哪个子类进行实例化，代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( compressed ) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ImageLoaderMachOCompressed::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">#<span class=\"keyword\">if</span> SUPPORT_CLASSIC_MACHO</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ImageLoaderMachOClassic::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br></pre></td></tr></table></figure>\n<p><code>instantiateMainExecutable()</code> 执行完后，会调用 <code>addImage()</code> 函数将 image 加入到 <code>sAllImages</code> 全局镜像列表中。并将image映射到申请的内存中， 其代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addImage</span><span class=\"params\">(ImageLoader* image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// add to master list</span></span><br><span class=\"line\">    allImagesLock();</span><br><span class=\"line\">        sAllImages.push_back(image);</span><br><span class=\"line\">    allImagesUnlock();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// update mapped ranges</span></span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> lastSegStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> lastSegEnd = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, e=image-&gt;segmentCount(); i &lt; e; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( image-&gt;segUnaccessible(i) ) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">uintptr_t</span> start = image-&gt;segActualLoadAddress(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">uintptr_t</span> end = image-&gt;segActualEndAddress(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( start == lastSegEnd ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// two segments are contiguous, just record combined segments</span></span><br><span class=\"line\">\t\t\tlastSegEnd = end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// non-contiguous segments, record last (if any)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( lastSegEnd != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t\taddMappedRange(image, lastSegStart, lastSegEnd);</span><br><span class=\"line\">\t\t\tlastSegStart = start;</span><br><span class=\"line\">\t\t\tlastSegEnd = end;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( lastSegEnd != <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\taddMappedRange(image, lastSegStart, lastSegEnd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sEnv.DYLD_PRINT_LIBRARIES || (sEnv.DYLD_PRINT_LIBRARIES_POST_LAUNCH &amp;&amp; (sMainExecutable!=<span class=\"literal\">NULL</span>) &amp;&amp; sMainExecutable-&gt;isLinked()) ) &#123;</span><br><span class=\"line\">\t\tdyld::<span class=\"built_in\">log</span>(<span class=\"string\">\"dyld: loaded: %s\\n\"</span>, image-&gt;getPath());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"加载共享缓存\"><a href=\"#加载共享缓存\" class=\"headerlink\" title=\"加载共享缓存\"></a>加载共享缓存</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load shared cache</span></span><br><span class=\"line\">checkSharedRegionDisable();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> DYLD_SHARED_CACHE_SUPPORT</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion )</span><br><span class=\"line\">\tmapSharedCache();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这一步先调用 <code>checkSharedRegionDisable()</code> 检查共享缓存是否禁用。该函数的iOS实现部分仅有一句注释，从注释我们可以推断iOS必须开启共享缓存才能正常工作。接下来调用 <code>mapSharedCache()</code> 来加载共享缓存。</p>\n<h5 id=\"加载插入的动态库\"><a href=\"#加载插入的动态库\" class=\"headerlink\" title=\"加载插入的动态库\"></a>加载插入的动态库</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load any inserted libraries</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( sEnv.DYLD_INSERT_LIBRARIES != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span>* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != <span class=\"literal\">NULL</span>; ++lib) </span><br><span class=\"line\">        loadInsertedDylib(*lib);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一步是加载环境变量DYLD_INSERT_LIBRARIES中配置的动态库，先判断环境变量DYLD_INSERT_LIBRARIES中是否存在要加载的动态库，如果存在则调用 <code>loadInsertedDylib()</code> 依次加载。</p>\n<p><code>loadInsertedDylib()</code> 内部设置了一个LoadContext 后，调用了 <code>load()</code> 函数。该函数内部调用的一系列的 loadPhase*。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// try all path permutations and check against existing loaded images</span></span><br><span class=\"line\">ImageLoader* image = loadPhase0(path, orgPath, context, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>大致会按照下图的顺序搜索动态库，并调用不同的函数来继续处理。</p>\n<p><img src=\"02.png\" alt=\"\"></p>\n<p>当内部调用到 <code>loadPhase5load()</code> 函数的时候，会先在共享缓存中搜索，如果存在则调用 <code>ImageLoaderMachO::instantiateFromCache()</code>  来实例化ImageLoader，否则通过 <code>loadPhase5open()</code> 打开文件并读取数据到内存后，再调用 <code>loadPhase6()</code> ，通过 <code>ImageLoaderMachO::instantiateFromFile()</code>  来实例化 ImageLoader，最后调用 <code>checkandAddImage()</code> 验证镜像并将其加入到全局镜像列表中。</p>\n<h5 id=\"链接主程序\"><a href=\"#链接主程序\" class=\"headerlink\" title=\"链接主程序\"></a>链接主程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// link main executable</span></span><br><span class=\"line\">gLinkContext.linkingMainExecutable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">link(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, <span class=\"literal\">true</span>, ImageLoader::RPathChain(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>));</span><br></pre></td></tr></table></figure>\n<p>这一步调用 <code>link()</code> 函数将实例化后的主程序进行动态修正，让二进制变为可正常执行的状态。<code>link()</code> 函数内部调用了<code>ImageLoader::link()</code> 函数，从源代码可以看到，这一步主要做了以下几个事情：</p>\n<ul>\n<li><code>recursiveLoadLibraries()</code> 加载所有依赖的库到内存。</li>\n<li><code>recursiveUpdateDepth()</code> 递归刷新依赖库的层级。</li>\n<li><code>recursiveRebase()</code> 由于ASLR的存在，必须递归对主程序以及依赖库进行重定位操作。</li>\n<li><code>recursiveBind()</code>  把主程序二进制和依赖进来的动态库全部执行符号表绑定。</li>\n<li><code>weakBind()</code> 如果链接的不是主程序二进制的话，会在此时执行弱符号绑定，主程序二进制则在link()完后再执行弱符号绑定。</li>\n<li><code>context.registerDOFs(dofs)</code> 注册DOF（DTrace Object Format）。</li>\n</ul>\n<h5 id=\"链接插入的动态库\"><a href=\"#链接插入的动态库\" class=\"headerlink\" title=\"链接插入的动态库\"></a>链接插入的动态库</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// link any inserted libraries</span></span><br><span class=\"line\"><span class=\"comment\">// do this after linking main executable so that any dylibs pulled in by inserted </span></span><br><span class=\"line\"><span class=\"comment\">// dylibs (e.g. libSystem) will not be in front of dylibs the program uses</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( sInsertedDylibCount &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class=\"line\">        ImageLoader* image = sAllImages[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        link(image, sEnv.DYLD_BIND_AT_LAUNCH, <span class=\"literal\">true</span>, ImageLoader::RPathChain(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>));</span><br><span class=\"line\">        image-&gt;setNeverUnloadRecursive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// only INSERTED libraries can interpose</span></span><br><span class=\"line\">    <span class=\"comment\">// register interposing info after all inserted libraries are bound so chaining works</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class=\"line\">        ImageLoader* image = sAllImages[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        image-&gt;registerInterposing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一步与链接主程序一样，将前面调用 <code>addImage()</code> 函数保存在 <code>sAllImages</code> 中的动态库列表循环取出并调用 <code>link()</code> 进行链接，需要注意的是，<code>sAllImages</code> 中保存的第一项是主程序的镜像，所以要从 i+1的位置开始，取到的才是动态库的 ImageLoader。</p>\n<p>接下来循环调用每个镜像的 <code>registerInterposing()</code> 函数，该函数会遍历Mach-O 的 LC_SEGMENT_COMMAND 加载命令，读取<strong>DATA, </strong>interpose，并将读取到的信息保存到 <code>fgInterposingTuples</code> 中。</p>\n<h5 id=\"执行弱符合绑定\"><a href=\"#执行弱符合绑定\" class=\"headerlink\" title=\"执行弱符合绑定\"></a>执行弱符合绑定</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;rdar://problem/12186933&gt; do weak binding only after all inserted images linked</span></span><br><span class=\"line\">sMainExecutable-&gt;weakBind(gLinkContext);</span><br></pre></td></tr></table></figure>\n<p><code>weakBind()</code> 首先通过 <code>getCoalescedImages()</code> 合并所有动态库的弱符号到一个列表里，然后调用 <code>initializeCoalIterator()</code> 对需要绑定的弱符号进行排序，接着调用 <code>incrementCoalIterator()</code> 读取dyld_info_command 结构的 <code>weak_bind_off</code> 和 <code>weak_bind_size</code> 字段，确定弱符号的数据偏移与大小，最终进行弱符号绑定。</p>\n<h5 id=\"执行初始化方法\"><a href=\"#执行初始化方法\" class=\"headerlink\" title=\"执行初始化方法\"></a>执行初始化方法</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> SUPPORT_OLD_CRT_INITIALIZATION</span></span><br><span class=\"line\">    <span class=\"comment\">// Old way is to run initializers via a callback from crt1.o</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! gRunInitializersOldWay ) </span><br><span class=\"line\">        initializeMainExecutable(); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">// run all initializers</span></span><br><span class=\"line\">    initializeMainExecutable(); </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这一步由 <code>initializeMainExecutable()</code> 完成。dyld 会优先初始化动态库，然后初始化主程序。该函数首先执行 <code>runInitializers()</code>，内部再依次调用 <code>processInitializers()</code>、<code>recursiveInitialization()</code>。在 <code>processInitializers()</code> 之后会发送 <code>dyld_image_state_initialized</code> 通知。</p>\n<p>在 <code>recursiveInitialization()</code> 的实现中有这么一行代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// let objc know we are about to initialize this image</span></span><br><span class=\"line\">context.notifySingle(dyld_image_state_dependents_initialized, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>注释告诉我们，这个函数主要目的是让 objc 知道 image 即将被初始化。之后执行初始化操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// initialize this image</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;doInitialization(context);</span><br></pre></td></tr></table></figure>\n<p>在 <code>doInitialization()</code> 中首先调用了 <code>doImageInit()</code> ，然后调用 <code>doModInitFunctions()</code> 。</p>\n<p><code>doImageInit</code> 执行镜像的初始化函数，也就是 LC_ROUTINES_COMMAND中记录的函数，然后再执行 <code>doModInitFunctions</code> 来解析并执行<em>DATA</em> 中<strong>mod_init_func 这个 section 中保存的函数。_mod_init_funcs 中保存的是全局C++对象的构造函数以及所有带 `</strong>attribute__((constructor)` 的C函数。</p>\n<p>可以简单的写几行代码验证一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute__((constructor))</span><br><span class=\"line\">void init_test() &#123;</span><br><span class=\"line\">    printf(&quot;init_test called&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static TestClass t;</span><br></pre></td></tr></table></figure>\n<p>代码编译后可以使用 <a href=\"https://sourceforge.net/projects/machoview/\" target=\"_blank\" rel=\"noopener\">MachOView</a>来查看 Mach-O 中的内容。</p>\n<p><img src=\"03.png\" alt=\"\"></p>\n<p>可以看到 _mod_init_funcs 这个 section 中刚好有两个数据。</p>\n<p>继续回到 <code>doInitialization()</code> 函数，在其实现中我们可以找到最终调用的方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Initializer func = (Initializer)(((struct macho_routines_command*)cmd)-&gt;init_address + fSlide);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( context.verboseInit )</span><br><span class=\"line\">\tdyld::<span class=\"built_in\">log</span>(<span class=\"string\">\"dyld: calling -init function 0x%p in %s\\n\"</span>, func, <span class=\"keyword\">this</span>-&gt;getPath());</span><br><span class=\"line\">func(context.argc, context.argv, context.envp, context.apple, &amp;context.programVars);</span><br></pre></td></tr></table></figure>\n<p><code>Initializer</code>  是一个指向初始化方法的函数指针，这里的初始化方法就是上面 __mod_init_func 这个 section 中保存的函数。</p>\n<p>我们可以通过添加 DYLD_PRINT_INITIALIZERS 环境变量在打印程序中依赖库的 <code>initializer</code> 方法：</p>\n<p><img src=\"04.png\" alt=\"\"></p>\n<p>从打印中可以看到最先调用 libSystem.B.dylib 的 initializer :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**dyld: calling initializer function 0x7fff780ee94c in /usr/lib/libSystem.B.dylib**</span><br></pre></td></tr></table></figure>\n<p>可以从<a href=\"https://opensource.apple.com/source/Libsystem/Libsystem-169.3/init.c.auto.html\" target=\"_blank\" rel=\"noopener\">这里</a>找到 libSystem 的 initializer 的完整实现。这里截取了部分代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_libkernel_init(libkernel_funcs);</span><br><span class=\"line\"></span><br><span class=\"line\">bootstrap_init();</span><br><span class=\"line\">mach_init();</span><br><span class=\"line\">pthread_init();</span><br><span class=\"line\">__libc_init(vars, libSystem_atfork_prepare, libSystem_atfork_parent, libSystem_atfork_child, apple);</span><br><span class=\"line\">__keymgr_initializer();</span><br><span class=\"line\">_dyld_initializer();</span><br><span class=\"line\">libdispatch_init();</span><br></pre></td></tr></table></figure>\n<p>这里我们只要关注一下 <code>libdispatch_init()</code> 函数。因为 <code>libdispatch_init()</code>  函数最终调用了 runtime 的初始化方法 <code>_objc_init</code>。我们可以打个符号断点来验证一下：</p>\n<p><img src=\"05.png\" alt=\"\"></p>\n<p>这里可以看到 <code>_objc_init</code> 调用的顺序，先 <code>libSystem_initializer</code> 调用 <code>libdispatch_init</code> 再到 <code>_objc_init</code> 初始化 runtime。</p>\n<p>这样从<a href=\"https://opensource.apple.com/source/libdispatch/libdispatch-913.60.2/\" target=\"_blank\" rel=\"noopener\">这里</a>找到 <code>libdispatch_init()</code> 函数的实现。其中有这么几个函数调用： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_dispatch_hw_config_init();</span><br><span class=\"line\">_dispatch_time_init();</span><br><span class=\"line\">_dispatch_vtable_init();</span><br><span class=\"line\">_os_object_init();</span><br><span class=\"line\">_voucher_init();</span><br><span class=\"line\">_dispatch_introspection_init();</span><br></pre></td></tr></table></figure>\n<p>我们可以在 <code>_os_object_init()</code> 函数实现中发现确实调用了 <code>_objc_init()</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">_os_object_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _objc_init();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候 runtime 被初始化了。</p>\n<h5 id=\"查找入口点并返回\"><a href=\"#查找入口点并返回\" class=\"headerlink\" title=\"查找入口点并返回\"></a>查找入口点并返回</h5><p>这一步调用主程序的 <code>getEntryFromLC_MAIN()</code>，从加载命令读取 LC_MAIN入口，如果没有 LC_MAIN 就调用 <code>getEntryFromLC_UNIXTHREAD()</code> 读取LC_UNIXTHREAD，找到后就跳到入口点指定的地址并返回。<br>至此，整个dyld的加载过程就完成了。</p>"},{"title":"iOS渲染原理","date":"2015-10-02T04:15:06.000Z","_content":"在说清楚iOS中的界面是如何被绘制并显示在屏幕上之前，有必要了解一下iOS中的 `UIView` 和 `CALayer`。\n在iOS当中，所有的视图都从一个叫做 `UIVIew` 的基类派生而来，`UIView` 可以处理触摸事件，可以支持基于Core Graphics绘图，可以做仿射变换（例如旋转或者缩放），或者简单的类似于滑动或者渐变的动画。\n\n<!--more-->\n\n## CALayer\nCALayer类在概念上和UIView类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容（像图片，文本或者背景色），管理子图层的位置。它们有一些方法和属性用来做动画和变换。和UIView最大的不同是CALayer不处理用户的交互。\nCALayer并不清楚具体的响应链（iOS通过视图层级关系用来传送触摸事件的机制），于是它并不能够响应事件，即使它提供了一些方法来判断是否一个触点在图层的范围之内。\n\n每一个UIview都有一个CALayer实例的图层属性，也就是所谓的backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。\n实际上这些背后关联的图层才是真正用来在屏幕上显示和做动画，UIView仅仅是对它的一个封装，提供了一些iOS类似于处理触摸的具体功能，以及Core Animation底层方法的高级接口。\n\n一个 Layer 的 frame 是由它的 `anchorPoint`, `position`, `bounds` 和 `transform` 共同决定的，而一个 View 的 `frame` 只是简单的返回 Layer的 `frame`，同样 View 的 `center` 和 `bounds` 也是返回 Layer 的一些属性。\n\n## UIView的显示过程\n动画和屏幕上组合的图层实际上被一个单独的进程管理，而不是你的应用程序。这个进程就是所谓的渲染服务。在iOS5和之前的版本是 `SpringBoard` 进程（同时管理着iOS的主屏）。在iOS6之后的版本中叫做`BackBoard`。\n\n当显示view或者运行一段动画时候，这个过程会被四个分离的阶段被打破：\n\n* 布局 - 这是准备你的视图/图层的层级关系，以及设置图层属性（位置，背景色，边框等等）的阶段。\n* 显示 - 这是图层的寄宿图片被绘制的阶段。绘制有可能涉及你的-drawRect:和-drawLayer:inContext:方法的调用路径。\n* 准备 - 这是Core Animation准备发送动画数据到渲染服务的阶段。这同时也是Core Animation将要执行一些别的事务例如解码动画过程中将要显示的图片的时间点。\n* 提交 - 这是最后的阶段，Core Animation打包所有图层和动画属性，然后通过IPC（内部处理通信）发送到渲染服务进行显示。\n\n但是这些仅仅阶段仅仅发生在你的应用程序之内，在动画在屏幕上显示之前仍然有更多的工作。一旦打包的图层和动画到达渲染服务进程，他们会被反序列化来形成另一个叫做渲染树的图层树。使用这个树状结构，渲染服务对动画的每一帧做出如下工作：\n\n* 对所有的图层属性计算中间值，设置OpenGL几何形状（纹理化的三角形）来执行渲染\n* 在屏幕上渲染可见的三角形\n\n所以一共有六个阶段；最后两个阶段在动画过程中不停地重复。前五个阶段都在软件层面处理（通过CPU），只有最后一个被GPU执行。而且，你真正只能控制前两个阶段：布局和显示。Core Animation框架在内部处理剩下的事务。\n\n## 界面的绘制和渲染\nUIView是如何显示到屏幕上的?\n\n这件事要从RunLoop开始，RunLoop是一个60fps的回调，也就是说每16.7ms绘制一次屏幕，也就是我们需要在这个时间内完成view的缓冲区创建，view内容的绘制这些是CPU的工作；然后把缓冲区交给GPU渲染，这里包括了多个View的拼接(Compositing),纹理的渲染(Texture)等等，最后Display到屏幕上。但是如果你在16.7ms内做的事情太多，导致CPU，GPU无法在指定时间内完成指定的工作，那么就会出现卡顿现象，也就是丢帧。\n60fps是Apple给出的最佳帧率，但是实际中我们如果能保证帧率可以稳定到30fps就能保证不会有卡顿的现象，60fps更多用在游戏上。所以如果你的应用能够保证33.4ms绘制一次屏幕，基本上就不会卡了。\n\n总的来说，UIView从Draw到Render的过程有如下几步：\n\n* 每一个UIView都有一个layer，每一个layer都有个content，这个content指向的是一块缓存，叫做backing store。\n* UIView的绘制和渲染是两个过程，当UIView被绘制时，CPU执行drawRect，通过context将数据写入backing store。\n* 当backing store写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上。\n\n其实说到底CPU就是做绘制的操作把内容放到缓存里，GPU负责从缓存里读取数据然后渲染到屏幕上。\n\n下图就是从CPU到GPU的过程：\n\n![](http://cc.cocimg.com/api/uploads/20160928/1475056442197233.jpeg)\n\n通常来说，计算机系统中 CPU、GPU、显示器是以上面这种方式协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号如下图所示，逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222134916051.jpg?726x258_120)\n\n在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。由于垂直同步的机制，如果在一个 VSync 时间内，CPU 或者 GPU 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就是界面卡顿的原因。从上图中可以看到，CPU 和 GPU 不论哪个阻碍了显示流程，都会造成掉帧现象。所以开发时，也需要分别对 CPU 和 GPU 压力进行评估和优化。\n\n### 离屏渲染(Offscreen Rendering And Mask)\n![](http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222133323050.png?601x321_13)\n\nUIKit是iOS中用来管理用户图形交互的框架，但是UIKit本身构建在Core Animation框架（Core Animation其实是一个令人误解的命名。你可能认为它只是用来做动画的，但实际上它是从一个叫做Layer Kit这么一个不怎么和动画有关的名字演变而来，所以做动画这只是Core Animation特性的冰山一角）之上，Core Animation分成了两部分OpenGL ES和Core Graphics，OpenGL ES是直接调用底层的GPU进行渲染；Core Graphics是一个基于CPU的绘制引擎；\n\n在OpenGL中，GPU屏幕渲染有以下两种方式：\n\n1. On-Screen Rendering，意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。\n2. Off-Screen Rendering，意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。 \n\n如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：**CPU渲染**。如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内同步地完成，渲染得到的bitmap最后再交由GPU用于显示。\n\n离屏渲染的代价主要包括两方面内容：\n\n* 创建新的缓冲区\n* 上下文的切换，离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。\n\n为什么需要离屏渲染？\n\n目的在于当使用圆角，阴影，遮罩的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，即当主屏的还没有绘制好的时候，所以就需要屏幕外渲染，最后当主屏已经绘制完成的时候，再将离屏的内容转移至主屏上。\n\n离屏渲染的触发方式：\n\n* `shouldRasterize`（光栅化）\n* `masks`（遮罩）\n* `shadows`（阴影）\n* `edge antialiasing`（抗锯齿）\n* `group opacity`（不透明）\n\n上述的一些属性设置都会产生离屏渲染的问题，大大降低GPU的渲染性能。\n\n\n\n\n\n","source":"_posts/iOS渲染原理.md","raw":"---\ntitle: iOS渲染原理\ndate: 2015-10-2 12:15:06\ntags: iOS\ncategory: iOS\n---\n在说清楚iOS中的界面是如何被绘制并显示在屏幕上之前，有必要了解一下iOS中的 `UIView` 和 `CALayer`。\n在iOS当中，所有的视图都从一个叫做 `UIVIew` 的基类派生而来，`UIView` 可以处理触摸事件，可以支持基于Core Graphics绘图，可以做仿射变换（例如旋转或者缩放），或者简单的类似于滑动或者渐变的动画。\n\n<!--more-->\n\n## CALayer\nCALayer类在概念上和UIView类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容（像图片，文本或者背景色），管理子图层的位置。它们有一些方法和属性用来做动画和变换。和UIView最大的不同是CALayer不处理用户的交互。\nCALayer并不清楚具体的响应链（iOS通过视图层级关系用来传送触摸事件的机制），于是它并不能够响应事件，即使它提供了一些方法来判断是否一个触点在图层的范围之内。\n\n每一个UIview都有一个CALayer实例的图层属性，也就是所谓的backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。\n实际上这些背后关联的图层才是真正用来在屏幕上显示和做动画，UIView仅仅是对它的一个封装，提供了一些iOS类似于处理触摸的具体功能，以及Core Animation底层方法的高级接口。\n\n一个 Layer 的 frame 是由它的 `anchorPoint`, `position`, `bounds` 和 `transform` 共同决定的，而一个 View 的 `frame` 只是简单的返回 Layer的 `frame`，同样 View 的 `center` 和 `bounds` 也是返回 Layer 的一些属性。\n\n## UIView的显示过程\n动画和屏幕上组合的图层实际上被一个单独的进程管理，而不是你的应用程序。这个进程就是所谓的渲染服务。在iOS5和之前的版本是 `SpringBoard` 进程（同时管理着iOS的主屏）。在iOS6之后的版本中叫做`BackBoard`。\n\n当显示view或者运行一段动画时候，这个过程会被四个分离的阶段被打破：\n\n* 布局 - 这是准备你的视图/图层的层级关系，以及设置图层属性（位置，背景色，边框等等）的阶段。\n* 显示 - 这是图层的寄宿图片被绘制的阶段。绘制有可能涉及你的-drawRect:和-drawLayer:inContext:方法的调用路径。\n* 准备 - 这是Core Animation准备发送动画数据到渲染服务的阶段。这同时也是Core Animation将要执行一些别的事务例如解码动画过程中将要显示的图片的时间点。\n* 提交 - 这是最后的阶段，Core Animation打包所有图层和动画属性，然后通过IPC（内部处理通信）发送到渲染服务进行显示。\n\n但是这些仅仅阶段仅仅发生在你的应用程序之内，在动画在屏幕上显示之前仍然有更多的工作。一旦打包的图层和动画到达渲染服务进程，他们会被反序列化来形成另一个叫做渲染树的图层树。使用这个树状结构，渲染服务对动画的每一帧做出如下工作：\n\n* 对所有的图层属性计算中间值，设置OpenGL几何形状（纹理化的三角形）来执行渲染\n* 在屏幕上渲染可见的三角形\n\n所以一共有六个阶段；最后两个阶段在动画过程中不停地重复。前五个阶段都在软件层面处理（通过CPU），只有最后一个被GPU执行。而且，你真正只能控制前两个阶段：布局和显示。Core Animation框架在内部处理剩下的事务。\n\n## 界面的绘制和渲染\nUIView是如何显示到屏幕上的?\n\n这件事要从RunLoop开始，RunLoop是一个60fps的回调，也就是说每16.7ms绘制一次屏幕，也就是我们需要在这个时间内完成view的缓冲区创建，view内容的绘制这些是CPU的工作；然后把缓冲区交给GPU渲染，这里包括了多个View的拼接(Compositing),纹理的渲染(Texture)等等，最后Display到屏幕上。但是如果你在16.7ms内做的事情太多，导致CPU，GPU无法在指定时间内完成指定的工作，那么就会出现卡顿现象，也就是丢帧。\n60fps是Apple给出的最佳帧率，但是实际中我们如果能保证帧率可以稳定到30fps就能保证不会有卡顿的现象，60fps更多用在游戏上。所以如果你的应用能够保证33.4ms绘制一次屏幕，基本上就不会卡了。\n\n总的来说，UIView从Draw到Render的过程有如下几步：\n\n* 每一个UIView都有一个layer，每一个layer都有个content，这个content指向的是一块缓存，叫做backing store。\n* UIView的绘制和渲染是两个过程，当UIView被绘制时，CPU执行drawRect，通过context将数据写入backing store。\n* 当backing store写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上。\n\n其实说到底CPU就是做绘制的操作把内容放到缓存里，GPU负责从缓存里读取数据然后渲染到屏幕上。\n\n下图就是从CPU到GPU的过程：\n\n![](http://cc.cocimg.com/api/uploads/20160928/1475056442197233.jpeg)\n\n通常来说，计算机系统中 CPU、GPU、显示器是以上面这种方式协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号如下图所示，逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222134916051.jpg?726x258_120)\n\n在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。由于垂直同步的机制，如果在一个 VSync 时间内，CPU 或者 GPU 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就是界面卡顿的原因。从上图中可以看到，CPU 和 GPU 不论哪个阻碍了显示流程，都会造成掉帧现象。所以开发时，也需要分别对 CPU 和 GPU 压力进行评估和优化。\n\n### 离屏渲染(Offscreen Rendering And Mask)\n![](http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222133323050.png?601x321_13)\n\nUIKit是iOS中用来管理用户图形交互的框架，但是UIKit本身构建在Core Animation框架（Core Animation其实是一个令人误解的命名。你可能认为它只是用来做动画的，但实际上它是从一个叫做Layer Kit这么一个不怎么和动画有关的名字演变而来，所以做动画这只是Core Animation特性的冰山一角）之上，Core Animation分成了两部分OpenGL ES和Core Graphics，OpenGL ES是直接调用底层的GPU进行渲染；Core Graphics是一个基于CPU的绘制引擎；\n\n在OpenGL中，GPU屏幕渲染有以下两种方式：\n\n1. On-Screen Rendering，意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。\n2. Off-Screen Rendering，意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。 \n\n如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：**CPU渲染**。如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内同步地完成，渲染得到的bitmap最后再交由GPU用于显示。\n\n离屏渲染的代价主要包括两方面内容：\n\n* 创建新的缓冲区\n* 上下文的切换，离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。\n\n为什么需要离屏渲染？\n\n目的在于当使用圆角，阴影，遮罩的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，即当主屏的还没有绘制好的时候，所以就需要屏幕外渲染，最后当主屏已经绘制完成的时候，再将离屏的内容转移至主屏上。\n\n离屏渲染的触发方式：\n\n* `shouldRasterize`（光栅化）\n* `masks`（遮罩）\n* `shadows`（阴影）\n* `edge antialiasing`（抗锯齿）\n* `group opacity`（不透明）\n\n上述的一些属性设置都会产生离屏渲染的问题，大大降低GPU的渲染性能。\n\n\n\n\n\n","slug":"iOS渲染原理","published":1,"updated":"2017-02-24T03:35:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zik5000j1u0ommwrdmhk","content":"<p>在说清楚iOS中的界面是如何被绘制并显示在屏幕上之前，有必要了解一下iOS中的 <code>UIView</code> 和 <code>CALayer</code>。<br>在iOS当中，所有的视图都从一个叫做 <code>UIVIew</code> 的基类派生而来，<code>UIView</code> 可以处理触摸事件，可以支持基于Core Graphics绘图，可以做仿射变换（例如旋转或者缩放），或者简单的类似于滑动或者渐变的动画。</p>\n<a id=\"more\"></a>\n<h2 id=\"CALayer\"><a href=\"#CALayer\" class=\"headerlink\" title=\"CALayer\"></a>CALayer</h2><p>CALayer类在概念上和UIView类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容（像图片，文本或者背景色），管理子图层的位置。它们有一些方法和属性用来做动画和变换。和UIView最大的不同是CALayer不处理用户的交互。<br>CALayer并不清楚具体的响应链（iOS通过视图层级关系用来传送触摸事件的机制），于是它并不能够响应事件，即使它提供了一些方法来判断是否一个触点在图层的范围之内。</p>\n<p>每一个UIview都有一个CALayer实例的图层属性，也就是所谓的backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。<br>实际上这些背后关联的图层才是真正用来在屏幕上显示和做动画，UIView仅仅是对它的一个封装，提供了一些iOS类似于处理触摸的具体功能，以及Core Animation底层方法的高级接口。</p>\n<p>一个 Layer 的 frame 是由它的 <code>anchorPoint</code>, <code>position</code>, <code>bounds</code> 和 <code>transform</code> 共同决定的，而一个 View 的 <code>frame</code> 只是简单的返回 Layer的 <code>frame</code>，同样 View 的 <code>center</code> 和 <code>bounds</code> 也是返回 Layer 的一些属性。</p>\n<h2 id=\"UIView的显示过程\"><a href=\"#UIView的显示过程\" class=\"headerlink\" title=\"UIView的显示过程\"></a>UIView的显示过程</h2><p>动画和屏幕上组合的图层实际上被一个单独的进程管理，而不是你的应用程序。这个进程就是所谓的渲染服务。在iOS5和之前的版本是 <code>SpringBoard</code> 进程（同时管理着iOS的主屏）。在iOS6之后的版本中叫做<code>BackBoard</code>。</p>\n<p>当显示view或者运行一段动画时候，这个过程会被四个分离的阶段被打破：</p>\n<ul>\n<li>布局 - 这是准备你的视图/图层的层级关系，以及设置图层属性（位置，背景色，边框等等）的阶段。</li>\n<li>显示 - 这是图层的寄宿图片被绘制的阶段。绘制有可能涉及你的-drawRect:和-drawLayer:inContext:方法的调用路径。</li>\n<li>准备 - 这是Core Animation准备发送动画数据到渲染服务的阶段。这同时也是Core Animation将要执行一些别的事务例如解码动画过程中将要显示的图片的时间点。</li>\n<li>提交 - 这是最后的阶段，Core Animation打包所有图层和动画属性，然后通过IPC（内部处理通信）发送到渲染服务进行显示。</li>\n</ul>\n<p>但是这些仅仅阶段仅仅发生在你的应用程序之内，在动画在屏幕上显示之前仍然有更多的工作。一旦打包的图层和动画到达渲染服务进程，他们会被反序列化来形成另一个叫做渲染树的图层树。使用这个树状结构，渲染服务对动画的每一帧做出如下工作：</p>\n<ul>\n<li>对所有的图层属性计算中间值，设置OpenGL几何形状（纹理化的三角形）来执行渲染</li>\n<li>在屏幕上渲染可见的三角形</li>\n</ul>\n<p>所以一共有六个阶段；最后两个阶段在动画过程中不停地重复。前五个阶段都在软件层面处理（通过CPU），只有最后一个被GPU执行。而且，你真正只能控制前两个阶段：布局和显示。Core Animation框架在内部处理剩下的事务。</p>\n<h2 id=\"界面的绘制和渲染\"><a href=\"#界面的绘制和渲染\" class=\"headerlink\" title=\"界面的绘制和渲染\"></a>界面的绘制和渲染</h2><p>UIView是如何显示到屏幕上的?</p>\n<p>这件事要从RunLoop开始，RunLoop是一个60fps的回调，也就是说每16.7ms绘制一次屏幕，也就是我们需要在这个时间内完成view的缓冲区创建，view内容的绘制这些是CPU的工作；然后把缓冲区交给GPU渲染，这里包括了多个View的拼接(Compositing),纹理的渲染(Texture)等等，最后Display到屏幕上。但是如果你在16.7ms内做的事情太多，导致CPU，GPU无法在指定时间内完成指定的工作，那么就会出现卡顿现象，也就是丢帧。<br>60fps是Apple给出的最佳帧率，但是实际中我们如果能保证帧率可以稳定到30fps就能保证不会有卡顿的现象，60fps更多用在游戏上。所以如果你的应用能够保证33.4ms绘制一次屏幕，基本上就不会卡了。</p>\n<p>总的来说，UIView从Draw到Render的过程有如下几步：</p>\n<ul>\n<li>每一个UIView都有一个layer，每一个layer都有个content，这个content指向的是一块缓存，叫做backing store。</li>\n<li>UIView的绘制和渲染是两个过程，当UIView被绘制时，CPU执行drawRect，通过context将数据写入backing store。</li>\n<li>当backing store写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上。</li>\n</ul>\n<p>其实说到底CPU就是做绘制的操作把内容放到缓存里，GPU负责从缓存里读取数据然后渲染到屏幕上。</p>\n<p>下图就是从CPU到GPU的过程：</p>\n<p><img src=\"http://cc.cocimg.com/api/uploads/20160928/1475056442197233.jpeg\" alt=\"\"></p>\n<p>通常来说，计算机系统中 CPU、GPU、显示器是以上面这种方式协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号如下图所示，逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222134916051.jpg?726x258_120\" alt=\"\"></p>\n<p>在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。由于垂直同步的机制，如果在一个 VSync 时间内，CPU 或者 GPU 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就是界面卡顿的原因。从上图中可以看到，CPU 和 GPU 不论哪个阻碍了显示流程，都会造成掉帧现象。所以开发时，也需要分别对 CPU 和 GPU 压力进行评估和优化。</p>\n<h3 id=\"离屏渲染-Offscreen-Rendering-And-Mask\"><a href=\"#离屏渲染-Offscreen-Rendering-And-Mask\" class=\"headerlink\" title=\"离屏渲染(Offscreen Rendering And Mask)\"></a>离屏渲染(Offscreen Rendering And Mask)</h3><p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222133323050.png?601x321_13\" alt=\"\"></p>\n<p>UIKit是iOS中用来管理用户图形交互的框架，但是UIKit本身构建在Core Animation框架（Core Animation其实是一个令人误解的命名。你可能认为它只是用来做动画的，但实际上它是从一个叫做Layer Kit这么一个不怎么和动画有关的名字演变而来，所以做动画这只是Core Animation特性的冰山一角）之上，Core Animation分成了两部分OpenGL ES和Core Graphics，OpenGL ES是直接调用底层的GPU进行渲染；Core Graphics是一个基于CPU的绘制引擎；</p>\n<p>在OpenGL中，GPU屏幕渲染有以下两种方式：</p>\n<ol>\n<li>On-Screen Rendering，意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</li>\n<li>Off-Screen Rendering，意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。 </li>\n</ol>\n<p>如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：<strong>CPU渲染</strong>。如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内同步地完成，渲染得到的bitmap最后再交由GPU用于显示。</p>\n<p>离屏渲染的代价主要包括两方面内容：</p>\n<ul>\n<li>创建新的缓冲区</li>\n<li>上下文的切换，离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。</li>\n</ul>\n<p>为什么需要离屏渲染？</p>\n<p>目的在于当使用圆角，阴影，遮罩的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，即当主屏的还没有绘制好的时候，所以就需要屏幕外渲染，最后当主屏已经绘制完成的时候，再将离屏的内容转移至主屏上。</p>\n<p>离屏渲染的触发方式：</p>\n<ul>\n<li><code>shouldRasterize</code>（光栅化）</li>\n<li><code>masks</code>（遮罩）</li>\n<li><code>shadows</code>（阴影）</li>\n<li><code>edge antialiasing</code>（抗锯齿）</li>\n<li><code>group opacity</code>（不透明）</li>\n</ul>\n<p>上述的一些属性设置都会产生离屏渲染的问题，大大降低GPU的渲染性能。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>在说清楚iOS中的界面是如何被绘制并显示在屏幕上之前，有必要了解一下iOS中的 <code>UIView</code> 和 <code>CALayer</code>。<br>在iOS当中，所有的视图都从一个叫做 <code>UIVIew</code> 的基类派生而来，<code>UIView</code> 可以处理触摸事件，可以支持基于Core Graphics绘图，可以做仿射变换（例如旋转或者缩放），或者简单的类似于滑动或者渐变的动画。</p>","more":"<h2 id=\"CALayer\"><a href=\"#CALayer\" class=\"headerlink\" title=\"CALayer\"></a>CALayer</h2><p>CALayer类在概念上和UIView类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容（像图片，文本或者背景色），管理子图层的位置。它们有一些方法和属性用来做动画和变换。和UIView最大的不同是CALayer不处理用户的交互。<br>CALayer并不清楚具体的响应链（iOS通过视图层级关系用来传送触摸事件的机制），于是它并不能够响应事件，即使它提供了一些方法来判断是否一个触点在图层的范围之内。</p>\n<p>每一个UIview都有一个CALayer实例的图层属性，也就是所谓的backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。<br>实际上这些背后关联的图层才是真正用来在屏幕上显示和做动画，UIView仅仅是对它的一个封装，提供了一些iOS类似于处理触摸的具体功能，以及Core Animation底层方法的高级接口。</p>\n<p>一个 Layer 的 frame 是由它的 <code>anchorPoint</code>, <code>position</code>, <code>bounds</code> 和 <code>transform</code> 共同决定的，而一个 View 的 <code>frame</code> 只是简单的返回 Layer的 <code>frame</code>，同样 View 的 <code>center</code> 和 <code>bounds</code> 也是返回 Layer 的一些属性。</p>\n<h2 id=\"UIView的显示过程\"><a href=\"#UIView的显示过程\" class=\"headerlink\" title=\"UIView的显示过程\"></a>UIView的显示过程</h2><p>动画和屏幕上组合的图层实际上被一个单独的进程管理，而不是你的应用程序。这个进程就是所谓的渲染服务。在iOS5和之前的版本是 <code>SpringBoard</code> 进程（同时管理着iOS的主屏）。在iOS6之后的版本中叫做<code>BackBoard</code>。</p>\n<p>当显示view或者运行一段动画时候，这个过程会被四个分离的阶段被打破：</p>\n<ul>\n<li>布局 - 这是准备你的视图/图层的层级关系，以及设置图层属性（位置，背景色，边框等等）的阶段。</li>\n<li>显示 - 这是图层的寄宿图片被绘制的阶段。绘制有可能涉及你的-drawRect:和-drawLayer:inContext:方法的调用路径。</li>\n<li>准备 - 这是Core Animation准备发送动画数据到渲染服务的阶段。这同时也是Core Animation将要执行一些别的事务例如解码动画过程中将要显示的图片的时间点。</li>\n<li>提交 - 这是最后的阶段，Core Animation打包所有图层和动画属性，然后通过IPC（内部处理通信）发送到渲染服务进行显示。</li>\n</ul>\n<p>但是这些仅仅阶段仅仅发生在你的应用程序之内，在动画在屏幕上显示之前仍然有更多的工作。一旦打包的图层和动画到达渲染服务进程，他们会被反序列化来形成另一个叫做渲染树的图层树。使用这个树状结构，渲染服务对动画的每一帧做出如下工作：</p>\n<ul>\n<li>对所有的图层属性计算中间值，设置OpenGL几何形状（纹理化的三角形）来执行渲染</li>\n<li>在屏幕上渲染可见的三角形</li>\n</ul>\n<p>所以一共有六个阶段；最后两个阶段在动画过程中不停地重复。前五个阶段都在软件层面处理（通过CPU），只有最后一个被GPU执行。而且，你真正只能控制前两个阶段：布局和显示。Core Animation框架在内部处理剩下的事务。</p>\n<h2 id=\"界面的绘制和渲染\"><a href=\"#界面的绘制和渲染\" class=\"headerlink\" title=\"界面的绘制和渲染\"></a>界面的绘制和渲染</h2><p>UIView是如何显示到屏幕上的?</p>\n<p>这件事要从RunLoop开始，RunLoop是一个60fps的回调，也就是说每16.7ms绘制一次屏幕，也就是我们需要在这个时间内完成view的缓冲区创建，view内容的绘制这些是CPU的工作；然后把缓冲区交给GPU渲染，这里包括了多个View的拼接(Compositing),纹理的渲染(Texture)等等，最后Display到屏幕上。但是如果你在16.7ms内做的事情太多，导致CPU，GPU无法在指定时间内完成指定的工作，那么就会出现卡顿现象，也就是丢帧。<br>60fps是Apple给出的最佳帧率，但是实际中我们如果能保证帧率可以稳定到30fps就能保证不会有卡顿的现象，60fps更多用在游戏上。所以如果你的应用能够保证33.4ms绘制一次屏幕，基本上就不会卡了。</p>\n<p>总的来说，UIView从Draw到Render的过程有如下几步：</p>\n<ul>\n<li>每一个UIView都有一个layer，每一个layer都有个content，这个content指向的是一块缓存，叫做backing store。</li>\n<li>UIView的绘制和渲染是两个过程，当UIView被绘制时，CPU执行drawRect，通过context将数据写入backing store。</li>\n<li>当backing store写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上。</li>\n</ul>\n<p>其实说到底CPU就是做绘制的操作把内容放到缓存里，GPU负责从缓存里读取数据然后渲染到屏幕上。</p>\n<p>下图就是从CPU到GPU的过程：</p>\n<p><img src=\"http://cc.cocimg.com/api/uploads/20160928/1475056442197233.jpeg\" alt=\"\"></p>\n<p>通常来说，计算机系统中 CPU、GPU、显示器是以上面这种方式协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号如下图所示，逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222134916051.jpg?726x258_120\" alt=\"\"></p>\n<p>在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。由于垂直同步的机制，如果在一个 VSync 时间内，CPU 或者 GPU 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就是界面卡顿的原因。从上图中可以看到，CPU 和 GPU 不论哪个阻碍了显示流程，都会造成掉帧现象。所以开发时，也需要分别对 CPU 和 GPU 压力进行评估和优化。</p>\n<h3 id=\"离屏渲染-Offscreen-Rendering-And-Mask\"><a href=\"#离屏渲染-Offscreen-Rendering-And-Mask\" class=\"headerlink\" title=\"离屏渲染(Offscreen Rendering And Mask)\"></a>离屏渲染(Offscreen Rendering And Mask)</h3><p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170222/13/18436043320170222133323050.png?601x321_13\" alt=\"\"></p>\n<p>UIKit是iOS中用来管理用户图形交互的框架，但是UIKit本身构建在Core Animation框架（Core Animation其实是一个令人误解的命名。你可能认为它只是用来做动画的，但实际上它是从一个叫做Layer Kit这么一个不怎么和动画有关的名字演变而来，所以做动画这只是Core Animation特性的冰山一角）之上，Core Animation分成了两部分OpenGL ES和Core Graphics，OpenGL ES是直接调用底层的GPU进行渲染；Core Graphics是一个基于CPU的绘制引擎；</p>\n<p>在OpenGL中，GPU屏幕渲染有以下两种方式：</p>\n<ol>\n<li>On-Screen Rendering，意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</li>\n<li>Off-Screen Rendering，意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。 </li>\n</ol>\n<p>如果将不在GPU的当前屏幕缓冲区中进行的渲染都称为离屏渲染，那么就还有另一种特殊的“离屏渲染”方式：<strong>CPU渲染</strong>。如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内同步地完成，渲染得到的bitmap最后再交由GPU用于显示。</p>\n<p>离屏渲染的代价主要包括两方面内容：</p>\n<ul>\n<li>创建新的缓冲区</li>\n<li>上下文的切换，离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。</li>\n</ul>\n<p>为什么需要离屏渲染？</p>\n<p>目的在于当使用圆角，阴影，遮罩的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，即当主屏的还没有绘制好的时候，所以就需要屏幕外渲染，最后当主屏已经绘制完成的时候，再将离屏的内容转移至主屏上。</p>\n<p>离屏渲染的触发方式：</p>\n<ul>\n<li><code>shouldRasterize</code>（光栅化）</li>\n<li><code>masks</code>（遮罩）</li>\n<li><code>shadows</code>（阴影）</li>\n<li><code>edge antialiasing</code>（抗锯齿）</li>\n<li><code>group opacity</code>（不透明）</li>\n</ul>\n<p>上述的一些属性设置都会产生离屏渲染的问题，大大降低GPU的渲染性能。</p>"},{"title":"iOS核心动画: Core Animation","date":"2015-09-23T01:12:42.000Z","coverImage":"cover.jpg","thumbnailImage":"1843604332017022316310707.png","thumbnailImagePosition":"bottom","_content":"我们写的应用程序往往都不是静态的，因为它们需要适应用户的需求以及为执行各种任务而改变状态。一个好的动画清晰地向我们解释了，这些状态变化时界面正在发生什么。在了解了动画背后的基本原理后，你会发现原来实现一个动画并不那么困难。\n\n<!--more-->\n\n## 起步\n在开始写第一个动画之前，有必要了解一下 Core Animation 。\n\n从字面上来理解，大部分人会以为它是只是用来做动画的，但实际上它是从一个叫做 Layer Kit 这么一个不怎么和动画有关的名字演变而来，所以做动画这只是 Core Animation 特性的冰山一角。[Apple 官网](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html)是这么解释 Core Animation 的：\n>Core Animation is a graphics rendering and animation infrastructure available on both iOS and OS X that you use to animate the views and other visual elements of your app.\n\n核心动画是一iOS和Mac OS平台上负责图形渲染和动画的基础框架。它并不是绘图系统本身，它是一个基础设施，用于在硬件中合成和操纵应用程序的内容。这个基础设施的核心是图层对象(CALayer)，你可以使用它来管理和操纵你的内容。\n\n它的职责就是尽可能快地组合屏幕上不同的可视内容，这个内容是被分解成独立的图层，存储在一个叫做图层树的体系之中。于是这个树形成了UIKit以及在iOS应用程序当中你所能在屏幕上看见的一切的基础。\n\nCore Animation位于AppKit和UIKit下，并且与Cocoa和Cocoa Touch的视图工作流紧密集成。\n\n![](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Art/ca_architecture_2x.png)\n\n使用 Core Animation 做动画，我们只需要设置一些简单的动画参数(例如起点和终点)然后告诉它开始动画即可，其他的工作Core Animation 都会为我们搞定。而所有这些动画产生作用的地方就是 CALayer 。\n\n使用 Core Animation 创建的大部分动画都涉及修改Layer的属性。 像视图一样，图层对象也具有bounds，position，opacity等属性，对于大多数这些属性，更改属性的值将会创建一个隐式动画，从而使图层从旧值动画到新值。在我们需要对动画行为进行更多控制的情况下，可以显式地为这些属性设置动画。不过有一点需要说明的是，当把动画添加到一个 layer 时，是不直接修改它的属性的。\n\nCore Animation 维护了三个平行layer层次结构：model layer tree（模型层树）、presentation layer tree（表示层树）和 rendering tree（渲染树）。模型层树反映了我们能直接看到的 layers 的状态，表示层树则是动画正在表现的值的近似。\n\n所以当我们在 view 上增加一个渐出动画。如果在动画中的任意时刻，查看 layer 的 opacity 值，你是得不到与屏幕内容对应的透明度的。你应该查看 presentation layer 的 opacity 值以获得正确的结果。\n\n通过使用 `[CALayer presentationLayer]` 和 `[CALayer modelLayer]`，你可以在两个 layer 之间轻松切换。\n\n\n## 开始动画吧\n### 基础动画（CABasicAnimation）\n![](car.gif)\n\n像上图中通过修改坐标值来进行动画是比较常见和简单的。使用 CABasicAnimation，我们可以如下实现这个动画：\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\n```\n在这里，我使用`animationWithKeyPath:`来创建 `CABasicAnimation` 对象，这说明动画会改变 layer 的x-position，这是 Core Animation 一个非常方便的特性，完整的 keyPath 列表可以看[这里](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html)\n\n然而，当我们运行该代码时，我们会发现当汽车在完成动画后马上回到了初始位置。这是因为在默认情况下，动画不会在超出其持续时间后还修改 presentation layer。实际上，在结束时它会被彻底移除。一旦动画被移除，presentation layer 将回到 model layer 的值，并且因为我们从未修改该 layer 的 position 属性，所以我们的汽车将重新出现在它开始的地方。\n\n我们有两种方法来解决这个问题：\n\n第一种方法是直接在 model layer 上更新属性。这是个人比较推荐的的做法。\n一旦动画完成并且从 layer 中移除，presentation layer 将回到 model layer 设置的值，而这个值恰好与动画最后一个步骤相匹配。\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\n  \nself.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);\n```\n第二张方式是通过设置动画的 `fillMode` 属性为 `kCAFillModeForward` 以留在最终状态，并设置 `removedOnCompletion` 为 `NO` 以防止它被自动移除：\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\ncarAnimation.fillMode = kCAFillModeForwards;\ncarAnimation.removedOnCompletion = NO;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\n```\n\n如果将已完成的动画保持在 layer 上时，会造成额外的开销，因为渲染器会去进行额外的绘画工作。\n\n实际上我们创建的动画对象在被添加到 layer 时立刻就复制了一份。这个特性在多个 view 中重用动画时这非常有用。比方说我们想要第二辆汽车在第一辆汽车启动不久后也开始启动：\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\nself.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);\n  \ncarAnimation.beginTime = CACurrentMediaTime() + 1.5;\n[self.carLayer2 addAnimation:carAnimation forKey:@\"carAnimation\"];\nself.carLayer2.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);\n```\n正是由于 `addAnimation:`时，`carAnimation` 被复制了，所以当我们设置动画的 `beginTime` 为未来1.5时，并没用影响到 `carLayer`，只有 `carLayer2` 受到了影响。\n\n### 关键帧动画（CAKeyframeAnimation）\n通常情况下，我们使用 `CABasicAnimation` 就可以创建一些简单的动画，例如上面例子中的小汽车的移动。现在我们可以使用 `CAKeyframeAnimation` 来实现更复杂的动画。\n\n关键帧（keyframe）使我们能够定义动画中任意的一个点，然后让 Core Animation 填充所谓的中间帧。\n\n![](18436043320170223145213034.gif)\n\n使用 `CAKeyframeAnimation`来制作上面的动画非常简单：\n```\nCAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@\"transform.scale\"];\nanimation.values = @[ @1, @1.2, @0.8, @1.2, @1];\nanimation.keyTimes = @[ @0, @(1/6.0), @(3/6.0), @(5/6.0), @1];\nanimation.duration = 1;\nanimation.repeatCount = HUGE_VALF;\n[self.heartLayer addAnimation:animation forKey:@\"heart\"];\n```\n`values` 数组定义了关键帧的位置。\n设置 `keyTimes` 属性让我们能够指定关键帧动画发生的时间。它们被指定为关键帧动画总持续时间的一个分数。\n\n#### 在关键帧动画中使用路径\n向上面那样将动画一些关键帧存储到 `values`数组中，在实现一个路径复杂的动画时，并不是一个好的选择，CAKeyframeAnimation 为我们提供了更加便利的 `path` 属性作为代替。\n\n先让我们来实现一个外星飞船绕着地球做圆周运动的动画：\n![](18436043320170223160215019.gif)\n\n```\nCAKeyframeAnimation * animation = [CAKeyframeAnimation animationWithKeyPath:@\"position\"];\n  \nUIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:self.view.center radius:150 startAngle:0 endAngle:M_PI*2 clockwise:1];\nanimation.path = path.CGPath;\nanimation.duration = 5;\nanimation.repeatCount = HUGE_VALF;\nanimation.rotationMode = kCAAnimationRotateAuto;\n\n[self.spaceshipLayer addAnimation:animation forKey:@\"path\"];\n```\n这里我使用 `UIBezierPath` 创建一个圆形的 CGPath 作为我们的关键帧动画的 path。然后动画就会按我们的预期那样运行了。这里有一个比较重要的属性: `rotationMode`。设置 `rotationMode` 属性为 `kCAAnimationRotateAuto` 确保飞船沿着路径旋转。如果我们不设置该属 那动画会是什么样的呢。\n\n![](18436043320170223160237065.gif)\n\n这样就看出了差别吧。飞船旋转的动作系统自动帮我们做好了，当然我们可以使用 `CAAnimationGroup` 自己去实现。\n\n### 动画组（CAAnimationGroup）\n\n对于某些复杂的效果，可能需要同时为多个属性进行动画，这时就可以使用 `CAAnimationGroup` 来组合多个动画了。\n\n\n","source":"_posts/iOS核心动画-Core-Animation.md","raw":"---\ntitle: 'iOS核心动画: Core Animation'\ndate: 2015-09-23 09:12:42\ntags: iOS Animations\ncategory: iOS\ncoverImage: cover.jpg\nthumbnailImage: 1843604332017022316310707.png\nthumbnailImagePosition: bottom\n---\n我们写的应用程序往往都不是静态的，因为它们需要适应用户的需求以及为执行各种任务而改变状态。一个好的动画清晰地向我们解释了，这些状态变化时界面正在发生什么。在了解了动画背后的基本原理后，你会发现原来实现一个动画并不那么困难。\n\n<!--more-->\n\n## 起步\n在开始写第一个动画之前，有必要了解一下 Core Animation 。\n\n从字面上来理解，大部分人会以为它是只是用来做动画的，但实际上它是从一个叫做 Layer Kit 这么一个不怎么和动画有关的名字演变而来，所以做动画这只是 Core Animation 特性的冰山一角。[Apple 官网](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html)是这么解释 Core Animation 的：\n>Core Animation is a graphics rendering and animation infrastructure available on both iOS and OS X that you use to animate the views and other visual elements of your app.\n\n核心动画是一iOS和Mac OS平台上负责图形渲染和动画的基础框架。它并不是绘图系统本身，它是一个基础设施，用于在硬件中合成和操纵应用程序的内容。这个基础设施的核心是图层对象(CALayer)，你可以使用它来管理和操纵你的内容。\n\n它的职责就是尽可能快地组合屏幕上不同的可视内容，这个内容是被分解成独立的图层，存储在一个叫做图层树的体系之中。于是这个树形成了UIKit以及在iOS应用程序当中你所能在屏幕上看见的一切的基础。\n\nCore Animation位于AppKit和UIKit下，并且与Cocoa和Cocoa Touch的视图工作流紧密集成。\n\n![](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Art/ca_architecture_2x.png)\n\n使用 Core Animation 做动画，我们只需要设置一些简单的动画参数(例如起点和终点)然后告诉它开始动画即可，其他的工作Core Animation 都会为我们搞定。而所有这些动画产生作用的地方就是 CALayer 。\n\n使用 Core Animation 创建的大部分动画都涉及修改Layer的属性。 像视图一样，图层对象也具有bounds，position，opacity等属性，对于大多数这些属性，更改属性的值将会创建一个隐式动画，从而使图层从旧值动画到新值。在我们需要对动画行为进行更多控制的情况下，可以显式地为这些属性设置动画。不过有一点需要说明的是，当把动画添加到一个 layer 时，是不直接修改它的属性的。\n\nCore Animation 维护了三个平行layer层次结构：model layer tree（模型层树）、presentation layer tree（表示层树）和 rendering tree（渲染树）。模型层树反映了我们能直接看到的 layers 的状态，表示层树则是动画正在表现的值的近似。\n\n所以当我们在 view 上增加一个渐出动画。如果在动画中的任意时刻，查看 layer 的 opacity 值，你是得不到与屏幕内容对应的透明度的。你应该查看 presentation layer 的 opacity 值以获得正确的结果。\n\n通过使用 `[CALayer presentationLayer]` 和 `[CALayer modelLayer]`，你可以在两个 layer 之间轻松切换。\n\n\n## 开始动画吧\n### 基础动画（CABasicAnimation）\n![](car.gif)\n\n像上图中通过修改坐标值来进行动画是比较常见和简单的。使用 CABasicAnimation，我们可以如下实现这个动画：\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\n```\n在这里，我使用`animationWithKeyPath:`来创建 `CABasicAnimation` 对象，这说明动画会改变 layer 的x-position，这是 Core Animation 一个非常方便的特性，完整的 keyPath 列表可以看[这里](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html)\n\n然而，当我们运行该代码时，我们会发现当汽车在完成动画后马上回到了初始位置。这是因为在默认情况下，动画不会在超出其持续时间后还修改 presentation layer。实际上，在结束时它会被彻底移除。一旦动画被移除，presentation layer 将回到 model layer 的值，并且因为我们从未修改该 layer 的 position 属性，所以我们的汽车将重新出现在它开始的地方。\n\n我们有两种方法来解决这个问题：\n\n第一种方法是直接在 model layer 上更新属性。这是个人比较推荐的的做法。\n一旦动画完成并且从 layer 中移除，presentation layer 将回到 model layer 设置的值，而这个值恰好与动画最后一个步骤相匹配。\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\n  \nself.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);\n```\n第二张方式是通过设置动画的 `fillMode` 属性为 `kCAFillModeForward` 以留在最终状态，并设置 `removedOnCompletion` 为 `NO` 以防止它被自动移除：\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\ncarAnimation.fillMode = kCAFillModeForwards;\ncarAnimation.removedOnCompletion = NO;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\n```\n\n如果将已完成的动画保持在 layer 上时，会造成额外的开销，因为渲染器会去进行额外的绘画工作。\n\n实际上我们创建的动画对象在被添加到 layer 时立刻就复制了一份。这个特性在多个 view 中重用动画时这非常有用。比方说我们想要第二辆汽车在第一辆汽车启动不久后也开始启动：\n```\nCABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@\"position.x\"];\ncarAnimation.fromValue = @65;\ncarAnimation.toValue = @(self.view.frame.size.width);\ncarAnimation.duration = 4;\n[self.carLayer addAnimation:carAnimation forKey:@\"carAnimation\"];\nself.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);\n  \ncarAnimation.beginTime = CACurrentMediaTime() + 1.5;\n[self.carLayer2 addAnimation:carAnimation forKey:@\"carAnimation\"];\nself.carLayer2.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);\n```\n正是由于 `addAnimation:`时，`carAnimation` 被复制了，所以当我们设置动画的 `beginTime` 为未来1.5时，并没用影响到 `carLayer`，只有 `carLayer2` 受到了影响。\n\n### 关键帧动画（CAKeyframeAnimation）\n通常情况下，我们使用 `CABasicAnimation` 就可以创建一些简单的动画，例如上面例子中的小汽车的移动。现在我们可以使用 `CAKeyframeAnimation` 来实现更复杂的动画。\n\n关键帧（keyframe）使我们能够定义动画中任意的一个点，然后让 Core Animation 填充所谓的中间帧。\n\n![](18436043320170223145213034.gif)\n\n使用 `CAKeyframeAnimation`来制作上面的动画非常简单：\n```\nCAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@\"transform.scale\"];\nanimation.values = @[ @1, @1.2, @0.8, @1.2, @1];\nanimation.keyTimes = @[ @0, @(1/6.0), @(3/6.0), @(5/6.0), @1];\nanimation.duration = 1;\nanimation.repeatCount = HUGE_VALF;\n[self.heartLayer addAnimation:animation forKey:@\"heart\"];\n```\n`values` 数组定义了关键帧的位置。\n设置 `keyTimes` 属性让我们能够指定关键帧动画发生的时间。它们被指定为关键帧动画总持续时间的一个分数。\n\n#### 在关键帧动画中使用路径\n向上面那样将动画一些关键帧存储到 `values`数组中，在实现一个路径复杂的动画时，并不是一个好的选择，CAKeyframeAnimation 为我们提供了更加便利的 `path` 属性作为代替。\n\n先让我们来实现一个外星飞船绕着地球做圆周运动的动画：\n![](18436043320170223160215019.gif)\n\n```\nCAKeyframeAnimation * animation = [CAKeyframeAnimation animationWithKeyPath:@\"position\"];\n  \nUIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:self.view.center radius:150 startAngle:0 endAngle:M_PI*2 clockwise:1];\nanimation.path = path.CGPath;\nanimation.duration = 5;\nanimation.repeatCount = HUGE_VALF;\nanimation.rotationMode = kCAAnimationRotateAuto;\n\n[self.spaceshipLayer addAnimation:animation forKey:@\"path\"];\n```\n这里我使用 `UIBezierPath` 创建一个圆形的 CGPath 作为我们的关键帧动画的 path。然后动画就会按我们的预期那样运行了。这里有一个比较重要的属性: `rotationMode`。设置 `rotationMode` 属性为 `kCAAnimationRotateAuto` 确保飞船沿着路径旋转。如果我们不设置该属 那动画会是什么样的呢。\n\n![](18436043320170223160237065.gif)\n\n这样就看出了差别吧。飞船旋转的动作系统自动帮我们做好了，当然我们可以使用 `CAAnimationGroup` 自己去实现。\n\n### 动画组（CAAnimationGroup）\n\n对于某些复杂的效果，可能需要同时为多个属性进行动画，这时就可以使用 `CAAnimationGroup` 来组合多个动画了。\n\n\n","slug":"iOS核心动画-Core-Animation","published":1,"updated":"2018-05-26T03:06:42.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zik8000l1u0o05ace6or","content":"<p>我们写的应用程序往往都不是静态的，因为它们需要适应用户的需求以及为执行各种任务而改变状态。一个好的动画清晰地向我们解释了，这些状态变化时界面正在发生什么。在了解了动画背后的基本原理后，你会发现原来实现一个动画并不那么困难。</p>\n<a id=\"more\"></a>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>在开始写第一个动画之前，有必要了解一下 Core Animation 。</p>\n<p>从字面上来理解，大部分人会以为它是只是用来做动画的，但实际上它是从一个叫做 Layer Kit 这么一个不怎么和动画有关的名字演变而来，所以做动画这只是 Core Animation 特性的冰山一角。<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html\" target=\"_blank\" rel=\"noopener\">Apple 官网</a>是这么解释 Core Animation 的：</p>\n<blockquote>\n<p>Core Animation is a graphics rendering and animation infrastructure available on both iOS and OS X that you use to animate the views and other visual elements of your app.</p>\n</blockquote>\n<p>核心动画是一iOS和Mac OS平台上负责图形渲染和动画的基础框架。它并不是绘图系统本身，它是一个基础设施，用于在硬件中合成和操纵应用程序的内容。这个基础设施的核心是图层对象(CALayer)，你可以使用它来管理和操纵你的内容。</p>\n<p>它的职责就是尽可能快地组合屏幕上不同的可视内容，这个内容是被分解成独立的图层，存储在一个叫做图层树的体系之中。于是这个树形成了UIKit以及在iOS应用程序当中你所能在屏幕上看见的一切的基础。</p>\n<p>Core Animation位于AppKit和UIKit下，并且与Cocoa和Cocoa Touch的视图工作流紧密集成。</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Art/ca_architecture_2x.png\" alt=\"\"></p>\n<p>使用 Core Animation 做动画，我们只需要设置一些简单的动画参数(例如起点和终点)然后告诉它开始动画即可，其他的工作Core Animation 都会为我们搞定。而所有这些动画产生作用的地方就是 CALayer 。</p>\n<p>使用 Core Animation 创建的大部分动画都涉及修改Layer的属性。 像视图一样，图层对象也具有bounds，position，opacity等属性，对于大多数这些属性，更改属性的值将会创建一个隐式动画，从而使图层从旧值动画到新值。在我们需要对动画行为进行更多控制的情况下，可以显式地为这些属性设置动画。不过有一点需要说明的是，当把动画添加到一个 layer 时，是不直接修改它的属性的。</p>\n<p>Core Animation 维护了三个平行layer层次结构：model layer tree（模型层树）、presentation layer tree（表示层树）和 rendering tree（渲染树）。模型层树反映了我们能直接看到的 layers 的状态，表示层树则是动画正在表现的值的近似。</p>\n<p>所以当我们在 view 上增加一个渐出动画。如果在动画中的任意时刻，查看 layer 的 opacity 值，你是得不到与屏幕内容对应的透明度的。你应该查看 presentation layer 的 opacity 值以获得正确的结果。</p>\n<p>通过使用 <code>[CALayer presentationLayer]</code> 和 <code>[CALayer modelLayer]</code>，你可以在两个 layer 之间轻松切换。</p>\n<h2 id=\"开始动画吧\"><a href=\"#开始动画吧\" class=\"headerlink\" title=\"开始动画吧\"></a>开始动画吧</h2><h3 id=\"基础动画（CABasicAnimation）\"><a href=\"#基础动画（CABasicAnimation）\" class=\"headerlink\" title=\"基础动画（CABasicAnimation）\"></a>基础动画（CABasicAnimation）</h3><p><img src=\"car.gif\" alt=\"\"></p>\n<p>像上图中通过修改坐标值来进行动画是比较常见和简单的。使用 CABasicAnimation，我们可以如下实现这个动画：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>在这里，我使用<code>animationWithKeyPath:</code>来创建 <code>CABasicAnimation</code> 对象，这说明动画会改变 layer 的x-position，这是 Core Animation 一个非常方便的特性，完整的 keyPath 列表可以看<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>然而，当我们运行该代码时，我们会发现当汽车在完成动画后马上回到了初始位置。这是因为在默认情况下，动画不会在超出其持续时间后还修改 presentation layer。实际上，在结束时它会被彻底移除。一旦动画被移除，presentation layer 将回到 model layer 的值，并且因为我们从未修改该 layer 的 position 属性，所以我们的汽车将重新出现在它开始的地方。</p>\n<p>我们有两种方法来解决这个问题：</p>\n<p>第一种方法是直接在 model layer 上更新属性。这是个人比较推荐的的做法。<br>一旦动画完成并且从 layer 中移除，presentation layer 将回到 model layer 设置的值，而这个值恰好与动画最后一个步骤相匹配。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br><span class=\"line\">  </span><br><span class=\"line\">self.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);</span><br></pre></td></tr></table></figure></p>\n<p>第二张方式是通过设置动画的 <code>fillMode</code> 属性为 <code>kCAFillModeForward</code> 以留在最终状态，并设置 <code>removedOnCompletion</code> 为 <code>NO</code> 以防止它被自动移除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">carAnimation.fillMode = kCAFillModeForwards;</span><br><span class=\"line\">carAnimation.removedOnCompletion = NO;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>如果将已完成的动画保持在 layer 上时，会造成额外的开销，因为渲染器会去进行额外的绘画工作。</p>\n<p>实际上我们创建的动画对象在被添加到 layer 时立刻就复制了一份。这个特性在多个 view 中重用动画时这非常有用。比方说我们想要第二辆汽车在第一辆汽车启动不久后也开始启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br><span class=\"line\">self.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);</span><br><span class=\"line\">  </span><br><span class=\"line\">carAnimation.beginTime = CACurrentMediaTime() + 1.5;</span><br><span class=\"line\">[self.carLayer2 addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br><span class=\"line\">self.carLayer2.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);</span><br></pre></td></tr></table></figure></p>\n<p>正是由于 <code>addAnimation:</code>时，<code>carAnimation</code> 被复制了，所以当我们设置动画的 <code>beginTime</code> 为未来1.5时，并没用影响到 <code>carLayer</code>，只有 <code>carLayer2</code> 受到了影响。</p>\n<h3 id=\"关键帧动画（CAKeyframeAnimation）\"><a href=\"#关键帧动画（CAKeyframeAnimation）\" class=\"headerlink\" title=\"关键帧动画（CAKeyframeAnimation）\"></a>关键帧动画（CAKeyframeAnimation）</h3><p>通常情况下，我们使用 <code>CABasicAnimation</code> 就可以创建一些简单的动画，例如上面例子中的小汽车的移动。现在我们可以使用 <code>CAKeyframeAnimation</code> 来实现更复杂的动画。</p>\n<p>关键帧（keyframe）使我们能够定义动画中任意的一个点，然后让 Core Animation 填充所谓的中间帧。</p>\n<p><img src=\"18436043320170223145213034.gif\" alt=\"\"></p>\n<p>使用 <code>CAKeyframeAnimation</code>来制作上面的动画非常简单：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.scale&quot;];</span><br><span class=\"line\">animation.values = @[ @1, @1.2, @0.8, @1.2, @1];</span><br><span class=\"line\">animation.keyTimes = @[ @0, @(1/6.0), @(3/6.0), @(5/6.0), @1];</span><br><span class=\"line\">animation.duration = 1;</span><br><span class=\"line\">animation.repeatCount = HUGE_VALF;</span><br><span class=\"line\">[self.heartLayer addAnimation:animation forKey:@&quot;heart&quot;];</span><br></pre></td></tr></table></figure></p>\n<p><code>values</code> 数组定义了关键帧的位置。<br>设置 <code>keyTimes</code> 属性让我们能够指定关键帧动画发生的时间。它们被指定为关键帧动画总持续时间的一个分数。</p>\n<h4 id=\"在关键帧动画中使用路径\"><a href=\"#在关键帧动画中使用路径\" class=\"headerlink\" title=\"在关键帧动画中使用路径\"></a>在关键帧动画中使用路径</h4><p>向上面那样将动画一些关键帧存储到 <code>values</code>数组中，在实现一个路径复杂的动画时，并不是一个好的选择，CAKeyframeAnimation 为我们提供了更加便利的 <code>path</code> 属性作为代替。</p>\n<p>先让我们来实现一个外星飞船绕着地球做圆周运动的动画：<br><img src=\"18436043320170223160215019.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAKeyframeAnimation * animation = [CAKeyframeAnimation animationWithKeyPath:@&quot;position&quot;];</span><br><span class=\"line\">  </span><br><span class=\"line\">UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:self.view.center radius:150 startAngle:0 endAngle:M_PI*2 clockwise:1];</span><br><span class=\"line\">animation.path = path.CGPath;</span><br><span class=\"line\">animation.duration = 5;</span><br><span class=\"line\">animation.repeatCount = HUGE_VALF;</span><br><span class=\"line\">animation.rotationMode = kCAAnimationRotateAuto;</span><br><span class=\"line\"></span><br><span class=\"line\">[self.spaceshipLayer addAnimation:animation forKey:@&quot;path&quot;];</span><br></pre></td></tr></table></figure>\n<p>这里我使用 <code>UIBezierPath</code> 创建一个圆形的 CGPath 作为我们的关键帧动画的 path。然后动画就会按我们的预期那样运行了。这里有一个比较重要的属性: <code>rotationMode</code>。设置 <code>rotationMode</code> 属性为 <code>kCAAnimationRotateAuto</code> 确保飞船沿着路径旋转。如果我们不设置该属 那动画会是什么样的呢。</p>\n<p><img src=\"18436043320170223160237065.gif\" alt=\"\"></p>\n<p>这样就看出了差别吧。飞船旋转的动作系统自动帮我们做好了，当然我们可以使用 <code>CAAnimationGroup</code> 自己去实现。</p>\n<h3 id=\"动画组（CAAnimationGroup）\"><a href=\"#动画组（CAAnimationGroup）\" class=\"headerlink\" title=\"动画组（CAAnimationGroup）\"></a>动画组（CAAnimationGroup）</h3><p>对于某些复杂的效果，可能需要同时为多个属性进行动画，这时就可以使用 <code>CAAnimationGroup</code> 来组合多个动画了。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zik8000l1u0o05ace6or/1843604332017022316310707.png","excerpt":"<p>我们写的应用程序往往都不是静态的，因为它们需要适应用户的需求以及为执行各种任务而改变状态。一个好的动画清晰地向我们解释了，这些状态变化时界面正在发生什么。在了解了动画背后的基本原理后，你会发现原来实现一个动画并不那么困难。</p>","more":"<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>在开始写第一个动画之前，有必要了解一下 Core Animation 。</p>\n<p>从字面上来理解，大部分人会以为它是只是用来做动画的，但实际上它是从一个叫做 Layer Kit 这么一个不怎么和动画有关的名字演变而来，所以做动画这只是 Core Animation 特性的冰山一角。<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html\" target=\"_blank\" rel=\"noopener\">Apple 官网</a>是这么解释 Core Animation 的：</p>\n<blockquote>\n<p>Core Animation is a graphics rendering and animation infrastructure available on both iOS and OS X that you use to animate the views and other visual elements of your app.</p>\n</blockquote>\n<p>核心动画是一iOS和Mac OS平台上负责图形渲染和动画的基础框架。它并不是绘图系统本身，它是一个基础设施，用于在硬件中合成和操纵应用程序的内容。这个基础设施的核心是图层对象(CALayer)，你可以使用它来管理和操纵你的内容。</p>\n<p>它的职责就是尽可能快地组合屏幕上不同的可视内容，这个内容是被分解成独立的图层，存储在一个叫做图层树的体系之中。于是这个树形成了UIKit以及在iOS应用程序当中你所能在屏幕上看见的一切的基础。</p>\n<p>Core Animation位于AppKit和UIKit下，并且与Cocoa和Cocoa Touch的视图工作流紧密集成。</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Art/ca_architecture_2x.png\" alt=\"\"></p>\n<p>使用 Core Animation 做动画，我们只需要设置一些简单的动画参数(例如起点和终点)然后告诉它开始动画即可，其他的工作Core Animation 都会为我们搞定。而所有这些动画产生作用的地方就是 CALayer 。</p>\n<p>使用 Core Animation 创建的大部分动画都涉及修改Layer的属性。 像视图一样，图层对象也具有bounds，position，opacity等属性，对于大多数这些属性，更改属性的值将会创建一个隐式动画，从而使图层从旧值动画到新值。在我们需要对动画行为进行更多控制的情况下，可以显式地为这些属性设置动画。不过有一点需要说明的是，当把动画添加到一个 layer 时，是不直接修改它的属性的。</p>\n<p>Core Animation 维护了三个平行layer层次结构：model layer tree（模型层树）、presentation layer tree（表示层树）和 rendering tree（渲染树）。模型层树反映了我们能直接看到的 layers 的状态，表示层树则是动画正在表现的值的近似。</p>\n<p>所以当我们在 view 上增加一个渐出动画。如果在动画中的任意时刻，查看 layer 的 opacity 值，你是得不到与屏幕内容对应的透明度的。你应该查看 presentation layer 的 opacity 值以获得正确的结果。</p>\n<p>通过使用 <code>[CALayer presentationLayer]</code> 和 <code>[CALayer modelLayer]</code>，你可以在两个 layer 之间轻松切换。</p>\n<h2 id=\"开始动画吧\"><a href=\"#开始动画吧\" class=\"headerlink\" title=\"开始动画吧\"></a>开始动画吧</h2><h3 id=\"基础动画（CABasicAnimation）\"><a href=\"#基础动画（CABasicAnimation）\" class=\"headerlink\" title=\"基础动画（CABasicAnimation）\"></a>基础动画（CABasicAnimation）</h3><p><img src=\"car.gif\" alt=\"\"></p>\n<p>像上图中通过修改坐标值来进行动画是比较常见和简单的。使用 CABasicAnimation，我们可以如下实现这个动画：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>在这里，我使用<code>animationWithKeyPath:</code>来创建 <code>CABasicAnimation</code> 对象，这说明动画会改变 layer 的x-position，这是 Core Animation 一个非常方便的特性，完整的 keyPath 列表可以看<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>然而，当我们运行该代码时，我们会发现当汽车在完成动画后马上回到了初始位置。这是因为在默认情况下，动画不会在超出其持续时间后还修改 presentation layer。实际上，在结束时它会被彻底移除。一旦动画被移除，presentation layer 将回到 model layer 的值，并且因为我们从未修改该 layer 的 position 属性，所以我们的汽车将重新出现在它开始的地方。</p>\n<p>我们有两种方法来解决这个问题：</p>\n<p>第一种方法是直接在 model layer 上更新属性。这是个人比较推荐的的做法。<br>一旦动画完成并且从 layer 中移除，presentation layer 将回到 model layer 设置的值，而这个值恰好与动画最后一个步骤相匹配。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br><span class=\"line\">  </span><br><span class=\"line\">self.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);</span><br></pre></td></tr></table></figure></p>\n<p>第二张方式是通过设置动画的 <code>fillMode</code> 属性为 <code>kCAFillModeForward</code> 以留在最终状态，并设置 <code>removedOnCompletion</code> 为 <code>NO</code> 以防止它被自动移除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">carAnimation.fillMode = kCAFillModeForwards;</span><br><span class=\"line\">carAnimation.removedOnCompletion = NO;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>如果将已完成的动画保持在 layer 上时，会造成额外的开销，因为渲染器会去进行额外的绘画工作。</p>\n<p>实际上我们创建的动画对象在被添加到 layer 时立刻就复制了一份。这个特性在多个 view 中重用动画时这非常有用。比方说我们想要第二辆汽车在第一辆汽车启动不久后也开始启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CABasicAnimation *carAnimation = [CABasicAnimation animationWithKeyPath:@&quot;position.x&quot;];</span><br><span class=\"line\">carAnimation.fromValue = @65;</span><br><span class=\"line\">carAnimation.toValue = @(self.view.frame.size.width);</span><br><span class=\"line\">carAnimation.duration = 4;</span><br><span class=\"line\">[self.carLayer addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br><span class=\"line\">self.carLayer.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);</span><br><span class=\"line\">  </span><br><span class=\"line\">carAnimation.beginTime = CACurrentMediaTime() + 1.5;</span><br><span class=\"line\">[self.carLayer2 addAnimation:carAnimation forKey:@&quot;carAnimation&quot;];</span><br><span class=\"line\">self.carLayer2.position = CGPointMake(self.view.frame.size.width+58, CGRectGetMaxY(self.view.bounds) - 78);</span><br></pre></td></tr></table></figure></p>\n<p>正是由于 <code>addAnimation:</code>时，<code>carAnimation</code> 被复制了，所以当我们设置动画的 <code>beginTime</code> 为未来1.5时，并没用影响到 <code>carLayer</code>，只有 <code>carLayer2</code> 受到了影响。</p>\n<h3 id=\"关键帧动画（CAKeyframeAnimation）\"><a href=\"#关键帧动画（CAKeyframeAnimation）\" class=\"headerlink\" title=\"关键帧动画（CAKeyframeAnimation）\"></a>关键帧动画（CAKeyframeAnimation）</h3><p>通常情况下，我们使用 <code>CABasicAnimation</code> 就可以创建一些简单的动画，例如上面例子中的小汽车的移动。现在我们可以使用 <code>CAKeyframeAnimation</code> 来实现更复杂的动画。</p>\n<p>关键帧（keyframe）使我们能够定义动画中任意的一个点，然后让 Core Animation 填充所谓的中间帧。</p>\n<p><img src=\"18436043320170223145213034.gif\" alt=\"\"></p>\n<p>使用 <code>CAKeyframeAnimation</code>来制作上面的动画非常简单：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.scale&quot;];</span><br><span class=\"line\">animation.values = @[ @1, @1.2, @0.8, @1.2, @1];</span><br><span class=\"line\">animation.keyTimes = @[ @0, @(1/6.0), @(3/6.0), @(5/6.0), @1];</span><br><span class=\"line\">animation.duration = 1;</span><br><span class=\"line\">animation.repeatCount = HUGE_VALF;</span><br><span class=\"line\">[self.heartLayer addAnimation:animation forKey:@&quot;heart&quot;];</span><br></pre></td></tr></table></figure></p>\n<p><code>values</code> 数组定义了关键帧的位置。<br>设置 <code>keyTimes</code> 属性让我们能够指定关键帧动画发生的时间。它们被指定为关键帧动画总持续时间的一个分数。</p>\n<h4 id=\"在关键帧动画中使用路径\"><a href=\"#在关键帧动画中使用路径\" class=\"headerlink\" title=\"在关键帧动画中使用路径\"></a>在关键帧动画中使用路径</h4><p>向上面那样将动画一些关键帧存储到 <code>values</code>数组中，在实现一个路径复杂的动画时，并不是一个好的选择，CAKeyframeAnimation 为我们提供了更加便利的 <code>path</code> 属性作为代替。</p>\n<p>先让我们来实现一个外星飞船绕着地球做圆周运动的动画：<br><img src=\"18436043320170223160215019.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAKeyframeAnimation * animation = [CAKeyframeAnimation animationWithKeyPath:@&quot;position&quot;];</span><br><span class=\"line\">  </span><br><span class=\"line\">UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:self.view.center radius:150 startAngle:0 endAngle:M_PI*2 clockwise:1];</span><br><span class=\"line\">animation.path = path.CGPath;</span><br><span class=\"line\">animation.duration = 5;</span><br><span class=\"line\">animation.repeatCount = HUGE_VALF;</span><br><span class=\"line\">animation.rotationMode = kCAAnimationRotateAuto;</span><br><span class=\"line\"></span><br><span class=\"line\">[self.spaceshipLayer addAnimation:animation forKey:@&quot;path&quot;];</span><br></pre></td></tr></table></figure>\n<p>这里我使用 <code>UIBezierPath</code> 创建一个圆形的 CGPath 作为我们的关键帧动画的 path。然后动画就会按我们的预期那样运行了。这里有一个比较重要的属性: <code>rotationMode</code>。设置 <code>rotationMode</code> 属性为 <code>kCAAnimationRotateAuto</code> 确保飞船沿着路径旋转。如果我们不设置该属 那动画会是什么样的呢。</p>\n<p><img src=\"18436043320170223160237065.gif\" alt=\"\"></p>\n<p>这样就看出了差别吧。飞船旋转的动作系统自动帮我们做好了，当然我们可以使用 <code>CAAnimationGroup</code> 自己去实现。</p>\n<h3 id=\"动画组（CAAnimationGroup）\"><a href=\"#动画组（CAAnimationGroup）\" class=\"headerlink\" title=\"动画组（CAAnimationGroup）\"></a>动画组（CAAnimationGroup）</h3><p>对于某些复杂的效果，可能需要同时为多个属性进行动画，这时就可以使用 <code>CAAnimationGroup</code> 来组合多个动画了。</p>"},{"title":"Xcodebuild的使用","date":"2017-01-25T10:00:00.000Z","coverImage":"cover.jpg","thumbnailImage":"thumbnail.jpg","thumbnailImagePosition":"right","_content":"\n**xcodebuild** 用于构建 Xcode 项目中包含的一个或多个**target** ，或者构建一个包含在 Xcode 工作区或 Xcode 项目的 **scheme**\n\n<!--more-->\n\n```\nxcodebuild [-project projectname] [-target targetname ...] \n           [-configuration \tconfigurationname]\n           [-sdk [sdkfullpath | sdkname]] [buildaction ...] \n           [setting=value ...] [-userdefault=value ...]\n           \nxcodebuild [-project projectname] -scheme schemename \n           [-destination destinationspecifier]\n           [-destination-timeout value] [-configuration configurationname]\n           [-sdk [sdkfullpath | sdkname]] [buildaction ...] \n           [setting=value ...] [-userdefault=value ...]\n           \nxcodebuild -workspace workspacename -scheme schemename \n           [-destination destinationspecifier]\n           [-destination-timeout value] [-configuration configurationname]\n           [-sdk [sdkfullpath | sdkname]] [buildaction ...] \n           [setting=value ...] [-userdefault=value ...]\n           \nxcodebuild -version [-sdk [sdkfullpath | sdkname]] [infoitem]\nxcodebuild -showsdks\nxcodebuild -list [-project projectname | -workspace workspacename]\n\nxcodebuild -exportArchive -exportFormat format \n           -archivePath xcarchivepath \n           -exportPath destinationpath \n           [-exportProvisioningProfile profilename] \n           [-exportSigningIdentity identityname] \n           [-exportInstallerIdentity identityname]\n```\n\n\n\n#### 使用\n\n要构建一个Xcode项目，请从包含项目的目录运行 **xcodebuild**（即包含 projectname.xcodeproj 的目录）。如果你在这目录中有多个项目，需要使用 **-project** 来指明应该构建哪个项目。默认情况下， **xcodebuild** 会使用默认的构建配置构建项目中列出的第一个 target。 target 的顺序是项目的一个属性，对于项目的所有用户都是一样的。\n\n要构建 Xcode 工作区，你必须同时传递 **-workspace** 和 **-scheme** 选项来定义构建。**scheme** 的参数将控制构建哪些 target 以及它们是如何构建的。不过你仍然可以将其他选项传递给 **xcodebuild** 来覆盖该 scheme 的一些参数。\n\n还有几个参数可以显示有关已安装的Xcode版本或本地目录中项目或工作区的信息，但不启动构建。包括 **-version**, **-showsdks** 和 **-usage**。\n\n\n#### 选项(options)\n* **-project** projectname\n\t构建由 projectname 指定的项目。如果在同一个目录下有多个项目文件，该选项是必需的。\n\t\n* **-target** targetname\n\t构建由 targetname 指定的目标。\n* **-alltargets**\n\t构建指定项目中的所有目标\n* **-workspace** workspacename\n\t构建由workspacename指定的工作空间。\n* **-scheme** schemename\n\t构建由 schemename 指定的方案。如果构建一个 workspace ，则为必需。\n* **-destination** destinationspecifier\n\t使用由 destinationpecifier 描述的目标设备。默认为与选定scheme兼容的 destination。\n* **-destination-timeout** timeout\n\t在搜索目标设备时使用的超时时间。默认值是30秒。\n* **-configuration** configurationname\n\t在构建每个 target 时使用由 configurationname 指定的构建配置。\n* **-arch** architecture\n\t构建每个 target 时使用的 architecture。\n* **-sdk** [<sdkfullpath> | <sdkname>]\n\t使用适合于该 SDK 的构建工具，针对指定的 SDK 构建 Xcode 项目或工作区。参数可以是 SDK 的绝对路径，也可以是 SDK 的名称。\n* **-showsdks**\n\t列出 Xcode 中所有可用的 SDK，包括适合与 `-sdk` 一起使用的规范名称。不会启动构建。\n* **-list**\n\t列出项目中的所有 target 和配置，或工作区中的 scheme。不会启动构建。\n* **-derivedDataPath** path\n\t在执行构建操作时覆盖用于 derived data 的文件夹。\n* **-resultBundlePath** path\n\t将包绑定到指定的路径，并在其中的方案上执行构建操作。\n* **-exportArchive**\n\t指定应导出归档。 需要`-exportFormat`，`-archivePath`和`-exportPath`。 不能与构建操作一起使用。\n* **-exportFormat** format\n\t指定归档应该导出到的格式。有效的格式是IPA（iOS），PKG（Mac）和APP。 如果未指定xcodebuild 将尝试自动检测格式为IPA或PKG。\n* **-archivePath** xcarchivepath\n\t指定归档操作生成的归档的路径，或者指定归档在`-exportArchive`时被导出。\n* **-exportPath** destinationpath\n\t指定导出产品的目的路径，包括导出文件的名称。\n* **-exportProvisioningProfile** profilename\n\t指定导出归档时使用的 provisioning profile 文件。\n* **-exportSigningIdentity** identityname\n\t指定导出归档时使用的应用程序签名标识。如果可能的话，这可以从`-exportProvisioningProfile`中推断出来。\n* **-exportInstallerIdentity** identityname\n\t指定导出归档时使用的安装程序签名标识。、也可以从`-exportSigningIdentity`或`-exportProvisioningProfile`中推断出来。\n* **-exportWithOriginalSigningIdentity**\n\t指定在导出文件时使用的用于创建归档的签名标识。\n\n##### buildaction ...\n指定要在 target 上执行的构建操作（或多个操作）:\n\naction| 描述\n----- | --------\nbuild | 在构建根目录（SYMROOT）中构建目标。这是默认的构建操作。\nanalyze|从构建根目录（SYMROOT）构建和分析target或scheme。需要指定一个scheme。\narchive|从构建根目录（SYMROOT）归档一个scheme。需要指定一个scheme。\ntest | 从构建根目录（SYMROOT）测试一个scheme。这需要指定一个scheme和一个目的地。\ninstallsrc|将项目源复制到源根目录（SRCROOT）。\ninstall | 构建target并将其安装到 DSTROOT 中的目标安装目录中。\nclean | 从构建根目录（SYMROOT）中删除构建产品和中间文件。\n\n##### Destinations\n**-destination**选项采用描述设备（或多个设备）作为目的地的目标说明符作为其参数。目标说明符是由一组逗号分隔的键值对组成的单个参数。 可以多次指定**-destination**选项，以使**xcodebuild**在多个目标上执行指定的操作。\n\n目标说明符可能包含平台密钥以指定其中一个受支持的目标平台。 应根据您选择的设备的平台提供附加的键\n\n某些设备可能需要一些时间才能查找。 **-destination-timeout** 选项可用于指定在设备被认为不可用之前等待的时间。默认为30秒。\n\n目前，xcodebuild支持这些平台：\n```\nOS X             本地 Mac，在Xcode界面中称为My Mac，支持以下内容: \n                 arch 要使用的体系结构，x86_64（默认）或者i386。\n                 \niOS              iOS 设备，支持以下内容：\n                 name 使用的设备的名称\n                 id   在Xcode Organizer中“设备”选项卡中的设备的标识符。\n                 \niOS Simulator    iOS 模拟器，支持以下内容: \n                 name 在 Xcode 的界面中提供的模拟器的全名。\n                 OS   要模拟的iOS版本（如6._）或最新字符串（默认值），以指示该版本Xcode   \n                 支持的最新iOS版本。\n```\ne.g.\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' build\n```\n\n\n##### 导出归档\n**-exportArchive** 选项指定 **xcodebuild** 应该导出由 **-archivePath** 指定的归档并转换为 **-exportFormat** 指定的格式。导出的产品将放置在由 **-exportPath** 指定的路径中。 导出归档时重新签名是可选的。 配置文件(Provisioning Profile)可以由 **-exportProvisioningProfile** 指定。在某些情况下，应该在导出期间使用的应用程序签名标识可以从配置文件中确定。对于不可能的情况（包括在导出产品中没有嵌入配置文件的情况），可以使用 **-exportSigningIdentity** 指定应用程序签名标识。将 Mac 归档文件导出为 PKG 时，可以使用安装程序签名标识对导出的包进行签名。 这可以从应用程序签名标识中推断出来（例如，如果为应用程序签名标识指定了“Developer ID Application”，则将自动推断“Developer ID Installer”），也可以使用**-exportInstallerIdentity**明确指定它。\n\n\n#### 例子\n```shell\n$ xcodebuild clean install\n```\n清理构建目录; 然后在 **xcodebuild** 启动的目录中构建并安装 Xcode 项目中的第一个target。\n\n-----\n\n```shell\n$ xcodebuild -target MyTarget OBJROOT=/Build/MyProj/Obj.root SYMROOT=/Build/MyProj/Sym.root\n```\n在 **xcodebuild** 开始的目录中的 Xcode 项目中构建 MyTarget，将中间文件放入`/Build/MyProj/Obj.root`目录中，并将构建的产品放入`/Build/MyProj/Sym.root`目录中。\n\n-----\n\n```shell\n$ xcodebuild -sdk macosx10.6\n```\n在 Mac OS X 10.6 SDK 中启动 **xcodebuild** 的目录中生成 Xcode 项目。可以使用**-showsdks**选项查看所有可用SDK的名称。\n\n-----\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme\n```\n在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。\n\n-------\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme archive\n```\n在 Xcode 工作区 MyWorkspace.xcworkspace 中归档方案 MyScheme。\n\n---------\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' test\n```\n在 Xcode 工作区 MyWorkspace.xcworkspace 中使用Xcode中描述为'platform=OS X,arch=x86_64'的目标测试 MyScheme 中的方案。\n\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=iOS Simulator,name=iPhone' -destination 'platform=iOS,name=My iPad' test\n```\n-------\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination generic/platform=iOS build\n```\n使用通用 iOS 设备在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。\n\n------\n\n```shell\n$ xcodebuild -exportArchive -exportFormat IPA -archivePath MyMobileApp.xcarchive -exportPath MyMobileApp.ipa -exportProvisioningProfile 'MyMobileApp Distribution Profile'\n```\n使用 \"MyMobileApp Distribution Profile\" 配置文件将归档 MyMobileApp.xcarchive 作为 IPA 文件导出到MyMobileApp.ipa目录中。\n\n------\n\n```shell\n$ xcodebuild -exportArchive -exportFormat APP -archivePath MyMacApp.xcarchive -exportPath MyMacApp.pkg -exportSigningIdentity 'Developer ID Application: My Team'\n```\n使用 \"Developer ID Installer：My Team\" 签名将 MyMacApp.xcarchive 作为 PKG 文件导出到MyMacApp.pkg目录中。\n\n\n","source":"_posts/xcodebuild的使用.md","raw":"---\ntitle: xcodebuild的使用\ndate: 2017-01-25 18:00:00\ntags: Xcode\ncoverImage: cover.jpg\nthumbnailImage: thumbnail.jpg\nthumbnailImagePosition: right\n---\n\n**xcodebuild** 用于构建 Xcode 项目中包含的一个或多个**target** ，或者构建一个包含在 Xcode 工作区或 Xcode 项目的 **scheme**\n\n<!--more-->\n\n```\nxcodebuild [-project projectname] [-target targetname ...] \n           [-configuration \tconfigurationname]\n           [-sdk [sdkfullpath | sdkname]] [buildaction ...] \n           [setting=value ...] [-userdefault=value ...]\n           \nxcodebuild [-project projectname] -scheme schemename \n           [-destination destinationspecifier]\n           [-destination-timeout value] [-configuration configurationname]\n           [-sdk [sdkfullpath | sdkname]] [buildaction ...] \n           [setting=value ...] [-userdefault=value ...]\n           \nxcodebuild -workspace workspacename -scheme schemename \n           [-destination destinationspecifier]\n           [-destination-timeout value] [-configuration configurationname]\n           [-sdk [sdkfullpath | sdkname]] [buildaction ...] \n           [setting=value ...] [-userdefault=value ...]\n           \nxcodebuild -version [-sdk [sdkfullpath | sdkname]] [infoitem]\nxcodebuild -showsdks\nxcodebuild -list [-project projectname | -workspace workspacename]\n\nxcodebuild -exportArchive -exportFormat format \n           -archivePath xcarchivepath \n           -exportPath destinationpath \n           [-exportProvisioningProfile profilename] \n           [-exportSigningIdentity identityname] \n           [-exportInstallerIdentity identityname]\n```\n\n\n\n#### 使用\n\n要构建一个Xcode项目，请从包含项目的目录运行 **xcodebuild**（即包含 projectname.xcodeproj 的目录）。如果你在这目录中有多个项目，需要使用 **-project** 来指明应该构建哪个项目。默认情况下， **xcodebuild** 会使用默认的构建配置构建项目中列出的第一个 target。 target 的顺序是项目的一个属性，对于项目的所有用户都是一样的。\n\n要构建 Xcode 工作区，你必须同时传递 **-workspace** 和 **-scheme** 选项来定义构建。**scheme** 的参数将控制构建哪些 target 以及它们是如何构建的。不过你仍然可以将其他选项传递给 **xcodebuild** 来覆盖该 scheme 的一些参数。\n\n还有几个参数可以显示有关已安装的Xcode版本或本地目录中项目或工作区的信息，但不启动构建。包括 **-version**, **-showsdks** 和 **-usage**。\n\n\n#### 选项(options)\n* **-project** projectname\n\t构建由 projectname 指定的项目。如果在同一个目录下有多个项目文件，该选项是必需的。\n\t\n* **-target** targetname\n\t构建由 targetname 指定的目标。\n* **-alltargets**\n\t构建指定项目中的所有目标\n* **-workspace** workspacename\n\t构建由workspacename指定的工作空间。\n* **-scheme** schemename\n\t构建由 schemename 指定的方案。如果构建一个 workspace ，则为必需。\n* **-destination** destinationspecifier\n\t使用由 destinationpecifier 描述的目标设备。默认为与选定scheme兼容的 destination。\n* **-destination-timeout** timeout\n\t在搜索目标设备时使用的超时时间。默认值是30秒。\n* **-configuration** configurationname\n\t在构建每个 target 时使用由 configurationname 指定的构建配置。\n* **-arch** architecture\n\t构建每个 target 时使用的 architecture。\n* **-sdk** [<sdkfullpath> | <sdkname>]\n\t使用适合于该 SDK 的构建工具，针对指定的 SDK 构建 Xcode 项目或工作区。参数可以是 SDK 的绝对路径，也可以是 SDK 的名称。\n* **-showsdks**\n\t列出 Xcode 中所有可用的 SDK，包括适合与 `-sdk` 一起使用的规范名称。不会启动构建。\n* **-list**\n\t列出项目中的所有 target 和配置，或工作区中的 scheme。不会启动构建。\n* **-derivedDataPath** path\n\t在执行构建操作时覆盖用于 derived data 的文件夹。\n* **-resultBundlePath** path\n\t将包绑定到指定的路径，并在其中的方案上执行构建操作。\n* **-exportArchive**\n\t指定应导出归档。 需要`-exportFormat`，`-archivePath`和`-exportPath`。 不能与构建操作一起使用。\n* **-exportFormat** format\n\t指定归档应该导出到的格式。有效的格式是IPA（iOS），PKG（Mac）和APP。 如果未指定xcodebuild 将尝试自动检测格式为IPA或PKG。\n* **-archivePath** xcarchivepath\n\t指定归档操作生成的归档的路径，或者指定归档在`-exportArchive`时被导出。\n* **-exportPath** destinationpath\n\t指定导出产品的目的路径，包括导出文件的名称。\n* **-exportProvisioningProfile** profilename\n\t指定导出归档时使用的 provisioning profile 文件。\n* **-exportSigningIdentity** identityname\n\t指定导出归档时使用的应用程序签名标识。如果可能的话，这可以从`-exportProvisioningProfile`中推断出来。\n* **-exportInstallerIdentity** identityname\n\t指定导出归档时使用的安装程序签名标识。、也可以从`-exportSigningIdentity`或`-exportProvisioningProfile`中推断出来。\n* **-exportWithOriginalSigningIdentity**\n\t指定在导出文件时使用的用于创建归档的签名标识。\n\n##### buildaction ...\n指定要在 target 上执行的构建操作（或多个操作）:\n\naction| 描述\n----- | --------\nbuild | 在构建根目录（SYMROOT）中构建目标。这是默认的构建操作。\nanalyze|从构建根目录（SYMROOT）构建和分析target或scheme。需要指定一个scheme。\narchive|从构建根目录（SYMROOT）归档一个scheme。需要指定一个scheme。\ntest | 从构建根目录（SYMROOT）测试一个scheme。这需要指定一个scheme和一个目的地。\ninstallsrc|将项目源复制到源根目录（SRCROOT）。\ninstall | 构建target并将其安装到 DSTROOT 中的目标安装目录中。\nclean | 从构建根目录（SYMROOT）中删除构建产品和中间文件。\n\n##### Destinations\n**-destination**选项采用描述设备（或多个设备）作为目的地的目标说明符作为其参数。目标说明符是由一组逗号分隔的键值对组成的单个参数。 可以多次指定**-destination**选项，以使**xcodebuild**在多个目标上执行指定的操作。\n\n目标说明符可能包含平台密钥以指定其中一个受支持的目标平台。 应根据您选择的设备的平台提供附加的键\n\n某些设备可能需要一些时间才能查找。 **-destination-timeout** 选项可用于指定在设备被认为不可用之前等待的时间。默认为30秒。\n\n目前，xcodebuild支持这些平台：\n```\nOS X             本地 Mac，在Xcode界面中称为My Mac，支持以下内容: \n                 arch 要使用的体系结构，x86_64（默认）或者i386。\n                 \niOS              iOS 设备，支持以下内容：\n                 name 使用的设备的名称\n                 id   在Xcode Organizer中“设备”选项卡中的设备的标识符。\n                 \niOS Simulator    iOS 模拟器，支持以下内容: \n                 name 在 Xcode 的界面中提供的模拟器的全名。\n                 OS   要模拟的iOS版本（如6._）或最新字符串（默认值），以指示该版本Xcode   \n                 支持的最新iOS版本。\n```\ne.g.\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' build\n```\n\n\n##### 导出归档\n**-exportArchive** 选项指定 **xcodebuild** 应该导出由 **-archivePath** 指定的归档并转换为 **-exportFormat** 指定的格式。导出的产品将放置在由 **-exportPath** 指定的路径中。 导出归档时重新签名是可选的。 配置文件(Provisioning Profile)可以由 **-exportProvisioningProfile** 指定。在某些情况下，应该在导出期间使用的应用程序签名标识可以从配置文件中确定。对于不可能的情况（包括在导出产品中没有嵌入配置文件的情况），可以使用 **-exportSigningIdentity** 指定应用程序签名标识。将 Mac 归档文件导出为 PKG 时，可以使用安装程序签名标识对导出的包进行签名。 这可以从应用程序签名标识中推断出来（例如，如果为应用程序签名标识指定了“Developer ID Application”，则将自动推断“Developer ID Installer”），也可以使用**-exportInstallerIdentity**明确指定它。\n\n\n#### 例子\n```shell\n$ xcodebuild clean install\n```\n清理构建目录; 然后在 **xcodebuild** 启动的目录中构建并安装 Xcode 项目中的第一个target。\n\n-----\n\n```shell\n$ xcodebuild -target MyTarget OBJROOT=/Build/MyProj/Obj.root SYMROOT=/Build/MyProj/Sym.root\n```\n在 **xcodebuild** 开始的目录中的 Xcode 项目中构建 MyTarget，将中间文件放入`/Build/MyProj/Obj.root`目录中，并将构建的产品放入`/Build/MyProj/Sym.root`目录中。\n\n-----\n\n```shell\n$ xcodebuild -sdk macosx10.6\n```\n在 Mac OS X 10.6 SDK 中启动 **xcodebuild** 的目录中生成 Xcode 项目。可以使用**-showsdks**选项查看所有可用SDK的名称。\n\n-----\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme\n```\n在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。\n\n-------\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme archive\n```\n在 Xcode 工作区 MyWorkspace.xcworkspace 中归档方案 MyScheme。\n\n---------\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' test\n```\n在 Xcode 工作区 MyWorkspace.xcworkspace 中使用Xcode中描述为'platform=OS X,arch=x86_64'的目标测试 MyScheme 中的方案。\n\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=iOS Simulator,name=iPhone' -destination 'platform=iOS,name=My iPad' test\n```\n-------\n\n```shell\n$ xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination generic/platform=iOS build\n```\n使用通用 iOS 设备在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。\n\n------\n\n```shell\n$ xcodebuild -exportArchive -exportFormat IPA -archivePath MyMobileApp.xcarchive -exportPath MyMobileApp.ipa -exportProvisioningProfile 'MyMobileApp Distribution Profile'\n```\n使用 \"MyMobileApp Distribution Profile\" 配置文件将归档 MyMobileApp.xcarchive 作为 IPA 文件导出到MyMobileApp.ipa目录中。\n\n------\n\n```shell\n$ xcodebuild -exportArchive -exportFormat APP -archivePath MyMacApp.xcarchive -exportPath MyMacApp.pkg -exportSigningIdentity 'Developer ID Application: My Team'\n```\n使用 \"Developer ID Installer：My Team\" 签名将 MyMacApp.xcarchive 作为 PKG 文件导出到MyMacApp.pkg目录中。\n\n\n","slug":"xcodebuild的使用","published":1,"updated":"2019-02-15T01:59:26.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikb000q1u0o8w8ot82w","content":"<p><strong>xcodebuild</strong> 用于构建 Xcode 项目中包含的一个或多个<strong>target</strong> ，或者构建一个包含在 Xcode 工作区或 Xcode 项目的 <strong>scheme</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild [-project projectname] [-target targetname ...] </span><br><span class=\"line\">           [-configuration \tconfigurationname]</span><br><span class=\"line\">           [-sdk [sdkfullpath | sdkname]] [buildaction ...] </span><br><span class=\"line\">           [setting=value ...] [-userdefault=value ...]</span><br><span class=\"line\">           </span><br><span class=\"line\">xcodebuild [-project projectname] -scheme schemename </span><br><span class=\"line\">           [-destination destinationspecifier]</span><br><span class=\"line\">           [-destination-timeout value] [-configuration configurationname]</span><br><span class=\"line\">           [-sdk [sdkfullpath | sdkname]] [buildaction ...] </span><br><span class=\"line\">           [setting=value ...] [-userdefault=value ...]</span><br><span class=\"line\">           </span><br><span class=\"line\">xcodebuild -workspace workspacename -scheme schemename </span><br><span class=\"line\">           [-destination destinationspecifier]</span><br><span class=\"line\">           [-destination-timeout value] [-configuration configurationname]</span><br><span class=\"line\">           [-sdk [sdkfullpath | sdkname]] [buildaction ...] </span><br><span class=\"line\">           [setting=value ...] [-userdefault=value ...]</span><br><span class=\"line\">           </span><br><span class=\"line\">xcodebuild -version [-sdk [sdkfullpath | sdkname]] [infoitem]</span><br><span class=\"line\">xcodebuild -showsdks</span><br><span class=\"line\">xcodebuild -list [-project projectname | -workspace workspacename]</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -exportArchive -exportFormat format </span><br><span class=\"line\">           -archivePath xcarchivepath </span><br><span class=\"line\">           -exportPath destinationpath </span><br><span class=\"line\">           [-exportProvisioningProfile profilename] </span><br><span class=\"line\">           [-exportSigningIdentity identityname] </span><br><span class=\"line\">           [-exportInstallerIdentity identityname]</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>要构建一个Xcode项目，请从包含项目的目录运行 <strong>xcodebuild</strong>（即包含 projectname.xcodeproj 的目录）。如果你在这目录中有多个项目，需要使用 <strong>-project</strong> 来指明应该构建哪个项目。默认情况下， <strong>xcodebuild</strong> 会使用默认的构建配置构建项目中列出的第一个 target。 target 的顺序是项目的一个属性，对于项目的所有用户都是一样的。</p>\n<p>要构建 Xcode 工作区，你必须同时传递 <strong>-workspace</strong> 和 <strong>-scheme</strong> 选项来定义构建。<strong>scheme</strong> 的参数将控制构建哪些 target 以及它们是如何构建的。不过你仍然可以将其他选项传递给 <strong>xcodebuild</strong> 来覆盖该 scheme 的一些参数。</p>\n<p>还有几个参数可以显示有关已安装的Xcode版本或本地目录中项目或工作区的信息，但不启动构建。包括 <strong>-version</strong>, <strong>-showsdks</strong> 和 <strong>-usage</strong>。</p>\n<h4 id=\"选项-options\"><a href=\"#选项-options\" class=\"headerlink\" title=\"选项(options)\"></a>选项(options)</h4><ul>\n<li><p><strong>-project</strong> projectname<br>  构建由 projectname 指定的项目。如果在同一个目录下有多个项目文件，该选项是必需的。</p>\n</li>\n<li><p><strong>-target</strong> targetname<br>  构建由 targetname 指定的目标。</p>\n</li>\n<li><strong>-alltargets</strong><br>  构建指定项目中的所有目标</li>\n<li><strong>-workspace</strong> workspacename<br>  构建由workspacename指定的工作空间。</li>\n<li><strong>-scheme</strong> schemename<br>  构建由 schemename 指定的方案。如果构建一个 workspace ，则为必需。</li>\n<li><strong>-destination</strong> destinationspecifier<br>  使用由 destinationpecifier 描述的目标设备。默认为与选定scheme兼容的 destination。</li>\n<li><strong>-destination-timeout</strong> timeout<br>  在搜索目标设备时使用的超时时间。默认值是30秒。</li>\n<li><strong>-configuration</strong> configurationname<br>  在构建每个 target 时使用由 configurationname 指定的构建配置。</li>\n<li><strong>-arch</strong> architecture<br>  构建每个 target 时使用的 architecture。</li>\n<li><strong>-sdk</strong> [<sdkfullpath> | <sdkname>]<br>  使用适合于该 SDK 的构建工具，针对指定的 SDK 构建 Xcode 项目或工作区。参数可以是 SDK 的绝对路径，也可以是 SDK 的名称。</sdkname></sdkfullpath></li>\n<li><strong>-showsdks</strong><br>  列出 Xcode 中所有可用的 SDK，包括适合与 <code>-sdk</code> 一起使用的规范名称。不会启动构建。</li>\n<li><strong>-list</strong><br>  列出项目中的所有 target 和配置，或工作区中的 scheme。不会启动构建。</li>\n<li><strong>-derivedDataPath</strong> path<br>  在执行构建操作时覆盖用于 derived data 的文件夹。</li>\n<li><strong>-resultBundlePath</strong> path<br>  将包绑定到指定的路径，并在其中的方案上执行构建操作。</li>\n<li><strong>-exportArchive</strong><br>  指定应导出归档。 需要<code>-exportFormat</code>，<code>-archivePath</code>和<code>-exportPath</code>。 不能与构建操作一起使用。</li>\n<li><strong>-exportFormat</strong> format<br>  指定归档应该导出到的格式。有效的格式是IPA（iOS），PKG（Mac）和APP。 如果未指定xcodebuild 将尝试自动检测格式为IPA或PKG。</li>\n<li><strong>-archivePath</strong> xcarchivepath<br>  指定归档操作生成的归档的路径，或者指定归档在<code>-exportArchive</code>时被导出。</li>\n<li><strong>-exportPath</strong> destinationpath<br>  指定导出产品的目的路径，包括导出文件的名称。</li>\n<li><strong>-exportProvisioningProfile</strong> profilename<br>  指定导出归档时使用的 provisioning profile 文件。</li>\n<li><strong>-exportSigningIdentity</strong> identityname<br>  指定导出归档时使用的应用程序签名标识。如果可能的话，这可以从<code>-exportProvisioningProfile</code>中推断出来。</li>\n<li><strong>-exportInstallerIdentity</strong> identityname<br>  指定导出归档时使用的安装程序签名标识。、也可以从<code>-exportSigningIdentity</code>或<code>-exportProvisioningProfile</code>中推断出来。</li>\n<li><strong>-exportWithOriginalSigningIdentity</strong><br>  指定在导出文件时使用的用于创建归档的签名标识。</li>\n</ul>\n<h5 id=\"buildaction-…\"><a href=\"#buildaction-…\" class=\"headerlink\" title=\"buildaction …\"></a>buildaction …</h5><p>指定要在 target 上执行的构建操作（或多个操作）:</p>\n<table>\n<thead>\n<tr>\n<th>action</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>build</td>\n<td>在构建根目录（SYMROOT）中构建目标。这是默认的构建操作。</td>\n</tr>\n<tr>\n<td>analyze</td>\n<td>从构建根目录（SYMROOT）构建和分析target或scheme。需要指定一个scheme。</td>\n</tr>\n<tr>\n<td>archive</td>\n<td>从构建根目录（SYMROOT）归档一个scheme。需要指定一个scheme。</td>\n</tr>\n<tr>\n<td>test</td>\n<td>从构建根目录（SYMROOT）测试一个scheme。这需要指定一个scheme和一个目的地。</td>\n</tr>\n<tr>\n<td>installsrc</td>\n<td>将项目源复制到源根目录（SRCROOT）。</td>\n</tr>\n<tr>\n<td>install</td>\n<td>构建target并将其安装到 DSTROOT 中的目标安装目录中。</td>\n</tr>\n<tr>\n<td>clean</td>\n<td>从构建根目录（SYMROOT）中删除构建产品和中间文件。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Destinations\"><a href=\"#Destinations\" class=\"headerlink\" title=\"Destinations\"></a>Destinations</h5><p><strong>-destination</strong>选项采用描述设备（或多个设备）作为目的地的目标说明符作为其参数。目标说明符是由一组逗号分隔的键值对组成的单个参数。 可以多次指定<strong>-destination</strong>选项，以使<strong>xcodebuild</strong>在多个目标上执行指定的操作。</p>\n<p>目标说明符可能包含平台密钥以指定其中一个受支持的目标平台。 应根据您选择的设备的平台提供附加的键</p>\n<p>某些设备可能需要一些时间才能查找。 <strong>-destination-timeout</strong> 选项可用于指定在设备被认为不可用之前等待的时间。默认为30秒。</p>\n<p>目前，xcodebuild支持这些平台：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OS X             本地 Mac，在Xcode界面中称为My Mac，支持以下内容: </span><br><span class=\"line\">                 arch 要使用的体系结构，x86_64（默认）或者i386。</span><br><span class=\"line\">                 </span><br><span class=\"line\">iOS              iOS 设备，支持以下内容：</span><br><span class=\"line\">                 name 使用的设备的名称</span><br><span class=\"line\">                 id   在Xcode Organizer中“设备”选项卡中的设备的标识符。</span><br><span class=\"line\">                 </span><br><span class=\"line\">iOS Simulator    iOS 模拟器，支持以下内容: </span><br><span class=\"line\">                 name 在 Xcode 的界面中提供的模拟器的全名。</span><br><span class=\"line\">                 OS   要模拟的iOS版本（如6._）或最新字符串（默认值），以指示该版本Xcode   </span><br><span class=\"line\">                 支持的最新iOS版本。</span><br></pre></td></tr></table></figure></p>\n<p>e.g.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' build</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"导出归档\"><a href=\"#导出归档\" class=\"headerlink\" title=\"导出归档\"></a>导出归档</h5><p><strong>-exportArchive</strong> 选项指定 <strong>xcodebuild</strong> 应该导出由 <strong>-archivePath</strong> 指定的归档并转换为 <strong>-exportFormat</strong> 指定的格式。导出的产品将放置在由 <strong>-exportPath</strong> 指定的路径中。 导出归档时重新签名是可选的。 配置文件(Provisioning Profile)可以由 <strong>-exportProvisioningProfile</strong> 指定。在某些情况下，应该在导出期间使用的应用程序签名标识可以从配置文件中确定。对于不可能的情况（包括在导出产品中没有嵌入配置文件的情况），可以使用 <strong>-exportSigningIdentity</strong> 指定应用程序签名标识。将 Mac 归档文件导出为 PKG 时，可以使用安装程序签名标识对导出的包进行签名。 这可以从应用程序签名标识中推断出来（例如，如果为应用程序签名标识指定了“Developer ID Application”，则将自动推断“Developer ID Installer”），也可以使用<strong>-exportInstallerIdentity</strong>明确指定它。</p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild clean install</span><br></pre></td></tr></table></figure>\n<p>清理构建目录; 然后在 <strong>xcodebuild</strong> 启动的目录中构建并安装 Xcode 项目中的第一个target。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -target MyTarget OBJROOT=/Build/MyProj/Obj.root SYMROOT=/Build/MyProj/Sym.root</span><br></pre></td></tr></table></figure>\n<p>在 <strong>xcodebuild</strong> 开始的目录中的 Xcode 项目中构建 MyTarget，将中间文件放入<code>/Build/MyProj/Obj.root</code>目录中，并将构建的产品放入<code>/Build/MyProj/Sym.root</code>目录中。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -sdk macosx10.6</span><br></pre></td></tr></table></figure>\n<p>在 Mac OS X 10.6 SDK 中启动 <strong>xcodebuild</strong> 的目录中生成 Xcode 项目。可以使用<strong>-showsdks</strong>选项查看所有可用SDK的名称。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme</span><br></pre></td></tr></table></figure>\n<p>在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme archive</span><br></pre></td></tr></table></figure>\n<p>在 Xcode 工作区 MyWorkspace.xcworkspace 中归档方案 MyScheme。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' test</span><br></pre></td></tr></table></figure>\n<p>在 Xcode 工作区 MyWorkspace.xcworkspace 中使用Xcode中描述为’platform=OS X,arch=x86_64’的目标测试 MyScheme 中的方案。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=iOS Simulator,name=iPhone' -destination 'platform=iOS,name=My iPad' test</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination generic/platform=iOS build</span><br></pre></td></tr></table></figure>\n<p>使用通用 iOS 设备在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -exportArchive -exportFormat IPA -archivePath MyMobileApp.xcarchive -exportPath MyMobileApp.ipa -exportProvisioningProfile 'MyMobileApp Distribution Profile'</span><br></pre></td></tr></table></figure>\n<p>使用 “MyMobileApp Distribution Profile” 配置文件将归档 MyMobileApp.xcarchive 作为 IPA 文件导出到MyMobileApp.ipa目录中。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -exportArchive -exportFormat APP -archivePath MyMacApp.xcarchive -exportPath MyMacApp.pkg -exportSigningIdentity 'Developer ID Application: My Team'</span><br></pre></td></tr></table></figure>\n<p>使用 “Developer ID Installer：My Team” 签名将 MyMacApp.xcarchive 作为 PKG 文件导出到MyMacApp.pkg目录中。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikb000q1u0o8w8ot82w/thumbnail.jpg","excerpt":"<p><strong>xcodebuild</strong> 用于构建 Xcode 项目中包含的一个或多个<strong>target</strong> ，或者构建一个包含在 Xcode 工作区或 Xcode 项目的 <strong>scheme</strong></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild [-project projectname] [-target targetname ...] </span><br><span class=\"line\">           [-configuration \tconfigurationname]</span><br><span class=\"line\">           [-sdk [sdkfullpath | sdkname]] [buildaction ...] </span><br><span class=\"line\">           [setting=value ...] [-userdefault=value ...]</span><br><span class=\"line\">           </span><br><span class=\"line\">xcodebuild [-project projectname] -scheme schemename </span><br><span class=\"line\">           [-destination destinationspecifier]</span><br><span class=\"line\">           [-destination-timeout value] [-configuration configurationname]</span><br><span class=\"line\">           [-sdk [sdkfullpath | sdkname]] [buildaction ...] </span><br><span class=\"line\">           [setting=value ...] [-userdefault=value ...]</span><br><span class=\"line\">           </span><br><span class=\"line\">xcodebuild -workspace workspacename -scheme schemename </span><br><span class=\"line\">           [-destination destinationspecifier]</span><br><span class=\"line\">           [-destination-timeout value] [-configuration configurationname]</span><br><span class=\"line\">           [-sdk [sdkfullpath | sdkname]] [buildaction ...] </span><br><span class=\"line\">           [setting=value ...] [-userdefault=value ...]</span><br><span class=\"line\">           </span><br><span class=\"line\">xcodebuild -version [-sdk [sdkfullpath | sdkname]] [infoitem]</span><br><span class=\"line\">xcodebuild -showsdks</span><br><span class=\"line\">xcodebuild -list [-project projectname | -workspace workspacename]</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -exportArchive -exportFormat format </span><br><span class=\"line\">           -archivePath xcarchivepath </span><br><span class=\"line\">           -exportPath destinationpath </span><br><span class=\"line\">           [-exportProvisioningProfile profilename] </span><br><span class=\"line\">           [-exportSigningIdentity identityname] </span><br><span class=\"line\">           [-exportInstallerIdentity identityname]</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>要构建一个Xcode项目，请从包含项目的目录运行 <strong>xcodebuild</strong>（即包含 projectname.xcodeproj 的目录）。如果你在这目录中有多个项目，需要使用 <strong>-project</strong> 来指明应该构建哪个项目。默认情况下， <strong>xcodebuild</strong> 会使用默认的构建配置构建项目中列出的第一个 target。 target 的顺序是项目的一个属性，对于项目的所有用户都是一样的。</p>\n<p>要构建 Xcode 工作区，你必须同时传递 <strong>-workspace</strong> 和 <strong>-scheme</strong> 选项来定义构建。<strong>scheme</strong> 的参数将控制构建哪些 target 以及它们是如何构建的。不过你仍然可以将其他选项传递给 <strong>xcodebuild</strong> 来覆盖该 scheme 的一些参数。</p>\n<p>还有几个参数可以显示有关已安装的Xcode版本或本地目录中项目或工作区的信息，但不启动构建。包括 <strong>-version</strong>, <strong>-showsdks</strong> 和 <strong>-usage</strong>。</p>\n<h4 id=\"选项-options\"><a href=\"#选项-options\" class=\"headerlink\" title=\"选项(options)\"></a>选项(options)</h4><ul>\n<li><p><strong>-project</strong> projectname<br>  构建由 projectname 指定的项目。如果在同一个目录下有多个项目文件，该选项是必需的。</p>\n</li>\n<li><p><strong>-target</strong> targetname<br>  构建由 targetname 指定的目标。</p>\n</li>\n<li><strong>-alltargets</strong><br>  构建指定项目中的所有目标</li>\n<li><strong>-workspace</strong> workspacename<br>  构建由workspacename指定的工作空间。</li>\n<li><strong>-scheme</strong> schemename<br>  构建由 schemename 指定的方案。如果构建一个 workspace ，则为必需。</li>\n<li><strong>-destination</strong> destinationspecifier<br>  使用由 destinationpecifier 描述的目标设备。默认为与选定scheme兼容的 destination。</li>\n<li><strong>-destination-timeout</strong> timeout<br>  在搜索目标设备时使用的超时时间。默认值是30秒。</li>\n<li><strong>-configuration</strong> configurationname<br>  在构建每个 target 时使用由 configurationname 指定的构建配置。</li>\n<li><strong>-arch</strong> architecture<br>  构建每个 target 时使用的 architecture。</li>\n<li><strong>-sdk</strong> [<sdkfullpath> | <sdkname>]<br>  使用适合于该 SDK 的构建工具，针对指定的 SDK 构建 Xcode 项目或工作区。参数可以是 SDK 的绝对路径，也可以是 SDK 的名称。</sdkname></sdkfullpath></li>\n<li><strong>-showsdks</strong><br>  列出 Xcode 中所有可用的 SDK，包括适合与 <code>-sdk</code> 一起使用的规范名称。不会启动构建。</li>\n<li><strong>-list</strong><br>  列出项目中的所有 target 和配置，或工作区中的 scheme。不会启动构建。</li>\n<li><strong>-derivedDataPath</strong> path<br>  在执行构建操作时覆盖用于 derived data 的文件夹。</li>\n<li><strong>-resultBundlePath</strong> path<br>  将包绑定到指定的路径，并在其中的方案上执行构建操作。</li>\n<li><strong>-exportArchive</strong><br>  指定应导出归档。 需要<code>-exportFormat</code>，<code>-archivePath</code>和<code>-exportPath</code>。 不能与构建操作一起使用。</li>\n<li><strong>-exportFormat</strong> format<br>  指定归档应该导出到的格式。有效的格式是IPA（iOS），PKG（Mac）和APP。 如果未指定xcodebuild 将尝试自动检测格式为IPA或PKG。</li>\n<li><strong>-archivePath</strong> xcarchivepath<br>  指定归档操作生成的归档的路径，或者指定归档在<code>-exportArchive</code>时被导出。</li>\n<li><strong>-exportPath</strong> destinationpath<br>  指定导出产品的目的路径，包括导出文件的名称。</li>\n<li><strong>-exportProvisioningProfile</strong> profilename<br>  指定导出归档时使用的 provisioning profile 文件。</li>\n<li><strong>-exportSigningIdentity</strong> identityname<br>  指定导出归档时使用的应用程序签名标识。如果可能的话，这可以从<code>-exportProvisioningProfile</code>中推断出来。</li>\n<li><strong>-exportInstallerIdentity</strong> identityname<br>  指定导出归档时使用的安装程序签名标识。、也可以从<code>-exportSigningIdentity</code>或<code>-exportProvisioningProfile</code>中推断出来。</li>\n<li><strong>-exportWithOriginalSigningIdentity</strong><br>  指定在导出文件时使用的用于创建归档的签名标识。</li>\n</ul>\n<h5 id=\"buildaction-…\"><a href=\"#buildaction-…\" class=\"headerlink\" title=\"buildaction …\"></a>buildaction …</h5><p>指定要在 target 上执行的构建操作（或多个操作）:</p>\n<table>\n<thead>\n<tr>\n<th>action</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>build</td>\n<td>在构建根目录（SYMROOT）中构建目标。这是默认的构建操作。</td>\n</tr>\n<tr>\n<td>analyze</td>\n<td>从构建根目录（SYMROOT）构建和分析target或scheme。需要指定一个scheme。</td>\n</tr>\n<tr>\n<td>archive</td>\n<td>从构建根目录（SYMROOT）归档一个scheme。需要指定一个scheme。</td>\n</tr>\n<tr>\n<td>test</td>\n<td>从构建根目录（SYMROOT）测试一个scheme。这需要指定一个scheme和一个目的地。</td>\n</tr>\n<tr>\n<td>installsrc</td>\n<td>将项目源复制到源根目录（SRCROOT）。</td>\n</tr>\n<tr>\n<td>install</td>\n<td>构建target并将其安装到 DSTROOT 中的目标安装目录中。</td>\n</tr>\n<tr>\n<td>clean</td>\n<td>从构建根目录（SYMROOT）中删除构建产品和中间文件。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Destinations\"><a href=\"#Destinations\" class=\"headerlink\" title=\"Destinations\"></a>Destinations</h5><p><strong>-destination</strong>选项采用描述设备（或多个设备）作为目的地的目标说明符作为其参数。目标说明符是由一组逗号分隔的键值对组成的单个参数。 可以多次指定<strong>-destination</strong>选项，以使<strong>xcodebuild</strong>在多个目标上执行指定的操作。</p>\n<p>目标说明符可能包含平台密钥以指定其中一个受支持的目标平台。 应根据您选择的设备的平台提供附加的键</p>\n<p>某些设备可能需要一些时间才能查找。 <strong>-destination-timeout</strong> 选项可用于指定在设备被认为不可用之前等待的时间。默认为30秒。</p>\n<p>目前，xcodebuild支持这些平台：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OS X             本地 Mac，在Xcode界面中称为My Mac，支持以下内容: </span><br><span class=\"line\">                 arch 要使用的体系结构，x86_64（默认）或者i386。</span><br><span class=\"line\">                 </span><br><span class=\"line\">iOS              iOS 设备，支持以下内容：</span><br><span class=\"line\">                 name 使用的设备的名称</span><br><span class=\"line\">                 id   在Xcode Organizer中“设备”选项卡中的设备的标识符。</span><br><span class=\"line\">                 </span><br><span class=\"line\">iOS Simulator    iOS 模拟器，支持以下内容: </span><br><span class=\"line\">                 name 在 Xcode 的界面中提供的模拟器的全名。</span><br><span class=\"line\">                 OS   要模拟的iOS版本（如6._）或最新字符串（默认值），以指示该版本Xcode   </span><br><span class=\"line\">                 支持的最新iOS版本。</span><br></pre></td></tr></table></figure></p>\n<p>e.g.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' build</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"导出归档\"><a href=\"#导出归档\" class=\"headerlink\" title=\"导出归档\"></a>导出归档</h5><p><strong>-exportArchive</strong> 选项指定 <strong>xcodebuild</strong> 应该导出由 <strong>-archivePath</strong> 指定的归档并转换为 <strong>-exportFormat</strong> 指定的格式。导出的产品将放置在由 <strong>-exportPath</strong> 指定的路径中。 导出归档时重新签名是可选的。 配置文件(Provisioning Profile)可以由 <strong>-exportProvisioningProfile</strong> 指定。在某些情况下，应该在导出期间使用的应用程序签名标识可以从配置文件中确定。对于不可能的情况（包括在导出产品中没有嵌入配置文件的情况），可以使用 <strong>-exportSigningIdentity</strong> 指定应用程序签名标识。将 Mac 归档文件导出为 PKG 时，可以使用安装程序签名标识对导出的包进行签名。 这可以从应用程序签名标识中推断出来（例如，如果为应用程序签名标识指定了“Developer ID Application”，则将自动推断“Developer ID Installer”），也可以使用<strong>-exportInstallerIdentity</strong>明确指定它。</p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild clean install</span><br></pre></td></tr></table></figure>\n<p>清理构建目录; 然后在 <strong>xcodebuild</strong> 启动的目录中构建并安装 Xcode 项目中的第一个target。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -target MyTarget OBJROOT=/Build/MyProj/Obj.root SYMROOT=/Build/MyProj/Sym.root</span><br></pre></td></tr></table></figure>\n<p>在 <strong>xcodebuild</strong> 开始的目录中的 Xcode 项目中构建 MyTarget，将中间文件放入<code>/Build/MyProj/Obj.root</code>目录中，并将构建的产品放入<code>/Build/MyProj/Sym.root</code>目录中。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -sdk macosx10.6</span><br></pre></td></tr></table></figure>\n<p>在 Mac OS X 10.6 SDK 中启动 <strong>xcodebuild</strong> 的目录中生成 Xcode 项目。可以使用<strong>-showsdks</strong>选项查看所有可用SDK的名称。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme</span><br></pre></td></tr></table></figure>\n<p>在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme archive</span><br></pre></td></tr></table></figure>\n<p>在 Xcode 工作区 MyWorkspace.xcworkspace 中归档方案 MyScheme。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=OS X,arch=x86_64' test</span><br></pre></td></tr></table></figure>\n<p>在 Xcode 工作区 MyWorkspace.xcworkspace 中使用Xcode中描述为’platform=OS X,arch=x86_64’的目标测试 MyScheme 中的方案。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=iOS Simulator,name=iPhone' -destination 'platform=iOS,name=My iPad' test</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination generic/platform=iOS build</span><br></pre></td></tr></table></figure>\n<p>使用通用 iOS 设备在 Xcode 工作区 MyWorkspace.xcworkspace 中构建方案 MyScheme。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -exportArchive -exportFormat IPA -archivePath MyMobileApp.xcarchive -exportPath MyMobileApp.ipa -exportProvisioningProfile 'MyMobileApp Distribution Profile'</span><br></pre></td></tr></table></figure>\n<p>使用 “MyMobileApp Distribution Profile” 配置文件将归档 MyMobileApp.xcarchive 作为 IPA 文件导出到MyMobileApp.ipa目录中。</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> xcodebuild -exportArchive -exportFormat APP -archivePath MyMacApp.xcarchive -exportPath MyMacApp.pkg -exportSigningIdentity 'Developer ID Application: My Team'</span><br></pre></td></tr></table></figure>\n<p>使用 “Developer ID Installer：My Team” 签名将 MyMacApp.xcarchive 作为 PKG 文件导出到MyMacApp.pkg目录中。</p>"},{"title":"开发你的第一个 Mac 应用","date":"2018-05-28T10:56:36.000Z","thumbnailImage":"thumbnail.png","coverImage":"cover.png","coverMeta":"out","_content":"\n\n\n以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。\n\n<!--excerpt-->\n\n> 由于云存储过期了，导致图片都无法显示了。\n\n以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。很多同学可能会觉得开发 Mac 应用是不是很挺难，不管你以前有没有 Mac 应用的开发经验，只有你按照下面的步骤来，你很快就能开发一款 Mac 应用了。\n\n\n\n今天要做的不是普通的窗口应用，而是 Status Bar 应用。什么是 Status Bar 应用？就像下图中的就是 Status Bar 应用。这是不是比做一个窗口应用有趣多了。现在就开始吧。 \n\n\n\n![](http://othizsxsl.bkt.clouddn.com/macapp00.png)\n\n\n\n# Let`s beging\n\n\n\n首先打开你的 xCode 创建一个新工程，记住要选择 macOS，创建一个 Cocoa App。\n\n\n\n![](http://othizsxsl.bkt.clouddn.com/macapp01.png)\n\n直接点击下一步。给你的工程取一个牛B哄哄的名字。有一点需要注意的是，Use Storyboards 和 Create Document-Based Application 单选框都不要选。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp02.png)\n\n语言就选择你最熟悉的语言就可以了，我这里选的是 Swift。如果你还没开始使用 Swift，那么我强烈建议你最好开始使用 Swift 来开发你的新应用。\n\n选好你要将工程存放的位置，点击 Create 就完成了工程的创建了。\n\n工程创建完后，你会发现有一个 MainMenu.xib 文件。打开它，这就是你的应用默认的样子了。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp03.png)\n\n你可以把 Objects 下面的 Main Menu 删掉，因为我们这个 App 中根本就用不到它，后面我们会添加自己的 Menu。\n\n先暂时放下这个 xib 文件，让我们开始实现 Status Bar App吧。\n\n\n\n# Status Item\n\n打开 AppleDelegate.swift 文件，让我们开始编写 Mac App 的第一行代码吧。在你的 AppleDelegate 类中创建一个 NSStatusItem：\n\n```swift\nlazy var statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)\n```\n\n 然后在 `applicationDidFinishLaunching  `  添加以下代码：\n\n```swift\nfunc applicationDidFinishLaunching(_ aNotification: Notification) {\n    let image = NSImage(named: NSImage.Name(\"Icon_32x32\"))\n    statusItem.highlightMode = true\n    statusItem.image = image\n}\n```\n\n你需要把 `NSImage(named: NSImage.Name(\"Icon_32x32\"))` 中的图片名换成你自己的图片，并且别忘了把图片导入到项目中。现在你可以运行你的项目了。你会发现系统菜单栏中确实出现了刚刚你添加的 StatusItem，不过同时也出现了一个窗口，并且 Dock 栏中也显示了应用图标。这在我们的 Status Bar 应用中是不应该出现的。现在就先解决这两个问题。\n\n要让我们的应用在运行时不要出现窗口很简单，你只需要打开 MainMenu.xib 文件，然后选中 Window，在右边的辅助编辑器中将 Visible At Launch 的单选框的勾选去掉就可以了。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp04.png)\n\n\n\n要让我们的应用图标从 Dock 栏中去掉，你只需要在 Info.plist 文件中添加一行 `Application is agent (UIElement)`，并将其设置为 YES 即可。再次运行你会发现不会再出现窗口了，应用图标也从Dock 栏中去掉了。是不是很赞呢。\n\n现在点击菜单栏中的图标，没有任何功能，现在是时候给我们的应用添加一些功能了，就像上面图片中那个样子。\n\n\n\n# 添加 Menu\n\n\n\n再次打开 MainMenu.xib 文件，在右侧辅助编辑器的下面搜索 menu，然后将一个 Menu 拖动到 xib 中，它会自动出现在 Objects 下。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp05.png)\n\n默认情况下，Menu 中有三个 Menu Item，你可以将一个 Menu Item 拖到 Menu 中来添加更多的 Menu Item，当然，你也可以选中某一个，然后点击 `Delete` 键将其删掉。\n\n这是我的菜单最终的样子:\n\n![](http://othizsxsl.bkt.clouddn.com/macapp06.png)\n\n鼠标双击一个菜单栏左侧位置，你就可以给菜单栏添加标题了，双击一个菜单栏右侧位置，然后在键盘中键入你想输入的键，作为菜单栏功能的快捷键。\n\n为了让菜单更好看，我在第二个菜单栏与第一个菜单栏和第三个菜单栏中间插入了一个分割线，要插入分割线很简单，只要将一个 Separator Menu Item 拖到你的 Menu 中就可以了。\n\n我给第一个菜单栏添加了一个可以显示图片的视图。要想实现这个也很简单。你可以在右侧下面的 Object library 中将一个 Custom View 拖到 xib 中。然后在里面添加一个 Image View，并给 Image View 设置一个图片。就像下图这样:\n\n![](http://othizsxsl.bkt.clouddn.com/macapp07.png)\n\n现在选中第一个菜单栏 (Item 1)，按住 `control` 键，拖动鼠标，在弹出框中选择 view，就像下图中的样子。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp08.png)\n\n我们创建了自己的菜单，现在只需要将菜单与 Status Item 联系起来。这个步骤同样很简单。将你的 Menu 创建一个 Outlet ，拖到 AppDelegate 中：\n\n```swift\n @IBOutlet weak var menu: NSMenu!\n```\n\n然后在 `applicationDidFinishLaunching ` 中添加下面一行代码:\n\n```swift\n func applicationDidFinishLaunching(_ aNotification: Notification) {\n     ...\n     \n     statusItem.menu = menu\n }\n```\n\n运行你的应用，点击系统菜单栏中你的应用的图标，果然出现了刚刚在 xib 中创建的 Menu。现在你的 Status Bar 应用终于有模有样了。接着我们可以先实现菜单中的 Quit 功能。\n\n在你的 xib 中选中 Quit 这个菜单栏，按住 `control` 键，拖动鼠标，在你的 AppDelegate 中创建一个 Action，然后在你的方法中添加如下代码：\n\n```swift\n @IBAction func quit(_ sender: NSMenuItem) {\n     NSApp.terminate(nil)\n }\n```\n\n你可以运行你的应用看看 Quit 是不是可以起效，不出意外，点击 Quit，你的应用就能退出了，同时快捷键也可以让你的应用退出了。\n\n下图中就是应用最终的样子:\n\n![](http://othizsxsl.bkt.clouddn.com/macapp00.png)\n\n\n\n# 总结\n\n通过上面简单的几个步骤，我们很快就实现了自己的第一个 Status Bar 应用。为了让新手也能上手，所以文章写的比较啰嗦，如果你已经有过 iOS 的开发经验，那么你可以跳着看，完成这个简单的  Status Bar 应用可能都不会花费你5分钟时间。\n\n最后总结一下创建我们的 Status Bar 应用的几个关键步骤：\n\n* 创建并设置 Status Item\n* 隐藏系统提供的默认窗口\n* 从 Dock 栏中隐藏应用图标\n* 给 Status Item 添加 Menu\n* 实现 Menu Item 的功能（退出功能）\n\n后面我会教你如何实现点击菜单栏弹出一个新的窗口。就像我们的应用中，点击 Preferences，会弹出一个偏好设置的窗口。你不用担心这会很难，这比你想象的要简单的多。\n\n","source":"_posts/从零开始开发一个-Status-Bar-App.md","raw":"---\ntitle: 开发你的第一个 Mac 应用\ndate: 2018-05-28 18:56:36\ntags: \n  - Cocoa\n  - Swift \ncategories: Cocoa Programing\nthumbnailImage: thumbnail.png\ncoverImage: cover.png\ncoverMeta: out\n---\n\n\n\n以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。\n\n<!--excerpt-->\n\n> 由于云存储过期了，导致图片都无法显示了。\n\n以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。很多同学可能会觉得开发 Mac 应用是不是很挺难，不管你以前有没有 Mac 应用的开发经验，只有你按照下面的步骤来，你很快就能开发一款 Mac 应用了。\n\n\n\n今天要做的不是普通的窗口应用，而是 Status Bar 应用。什么是 Status Bar 应用？就像下图中的就是 Status Bar 应用。这是不是比做一个窗口应用有趣多了。现在就开始吧。 \n\n\n\n![](http://othizsxsl.bkt.clouddn.com/macapp00.png)\n\n\n\n# Let`s beging\n\n\n\n首先打开你的 xCode 创建一个新工程，记住要选择 macOS，创建一个 Cocoa App。\n\n\n\n![](http://othizsxsl.bkt.clouddn.com/macapp01.png)\n\n直接点击下一步。给你的工程取一个牛B哄哄的名字。有一点需要注意的是，Use Storyboards 和 Create Document-Based Application 单选框都不要选。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp02.png)\n\n语言就选择你最熟悉的语言就可以了，我这里选的是 Swift。如果你还没开始使用 Swift，那么我强烈建议你最好开始使用 Swift 来开发你的新应用。\n\n选好你要将工程存放的位置，点击 Create 就完成了工程的创建了。\n\n工程创建完后，你会发现有一个 MainMenu.xib 文件。打开它，这就是你的应用默认的样子了。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp03.png)\n\n你可以把 Objects 下面的 Main Menu 删掉，因为我们这个 App 中根本就用不到它，后面我们会添加自己的 Menu。\n\n先暂时放下这个 xib 文件，让我们开始实现 Status Bar App吧。\n\n\n\n# Status Item\n\n打开 AppleDelegate.swift 文件，让我们开始编写 Mac App 的第一行代码吧。在你的 AppleDelegate 类中创建一个 NSStatusItem：\n\n```swift\nlazy var statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)\n```\n\n 然后在 `applicationDidFinishLaunching  `  添加以下代码：\n\n```swift\nfunc applicationDidFinishLaunching(_ aNotification: Notification) {\n    let image = NSImage(named: NSImage.Name(\"Icon_32x32\"))\n    statusItem.highlightMode = true\n    statusItem.image = image\n}\n```\n\n你需要把 `NSImage(named: NSImage.Name(\"Icon_32x32\"))` 中的图片名换成你自己的图片，并且别忘了把图片导入到项目中。现在你可以运行你的项目了。你会发现系统菜单栏中确实出现了刚刚你添加的 StatusItem，不过同时也出现了一个窗口，并且 Dock 栏中也显示了应用图标。这在我们的 Status Bar 应用中是不应该出现的。现在就先解决这两个问题。\n\n要让我们的应用在运行时不要出现窗口很简单，你只需要打开 MainMenu.xib 文件，然后选中 Window，在右边的辅助编辑器中将 Visible At Launch 的单选框的勾选去掉就可以了。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp04.png)\n\n\n\n要让我们的应用图标从 Dock 栏中去掉，你只需要在 Info.plist 文件中添加一行 `Application is agent (UIElement)`，并将其设置为 YES 即可。再次运行你会发现不会再出现窗口了，应用图标也从Dock 栏中去掉了。是不是很赞呢。\n\n现在点击菜单栏中的图标，没有任何功能，现在是时候给我们的应用添加一些功能了，就像上面图片中那个样子。\n\n\n\n# 添加 Menu\n\n\n\n再次打开 MainMenu.xib 文件，在右侧辅助编辑器的下面搜索 menu，然后将一个 Menu 拖动到 xib 中，它会自动出现在 Objects 下。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp05.png)\n\n默认情况下，Menu 中有三个 Menu Item，你可以将一个 Menu Item 拖到 Menu 中来添加更多的 Menu Item，当然，你也可以选中某一个，然后点击 `Delete` 键将其删掉。\n\n这是我的菜单最终的样子:\n\n![](http://othizsxsl.bkt.clouddn.com/macapp06.png)\n\n鼠标双击一个菜单栏左侧位置，你就可以给菜单栏添加标题了，双击一个菜单栏右侧位置，然后在键盘中键入你想输入的键，作为菜单栏功能的快捷键。\n\n为了让菜单更好看，我在第二个菜单栏与第一个菜单栏和第三个菜单栏中间插入了一个分割线，要插入分割线很简单，只要将一个 Separator Menu Item 拖到你的 Menu 中就可以了。\n\n我给第一个菜单栏添加了一个可以显示图片的视图。要想实现这个也很简单。你可以在右侧下面的 Object library 中将一个 Custom View 拖到 xib 中。然后在里面添加一个 Image View，并给 Image View 设置一个图片。就像下图这样:\n\n![](http://othizsxsl.bkt.clouddn.com/macapp07.png)\n\n现在选中第一个菜单栏 (Item 1)，按住 `control` 键，拖动鼠标，在弹出框中选择 view，就像下图中的样子。\n\n![](http://othizsxsl.bkt.clouddn.com/macapp08.png)\n\n我们创建了自己的菜单，现在只需要将菜单与 Status Item 联系起来。这个步骤同样很简单。将你的 Menu 创建一个 Outlet ，拖到 AppDelegate 中：\n\n```swift\n @IBOutlet weak var menu: NSMenu!\n```\n\n然后在 `applicationDidFinishLaunching ` 中添加下面一行代码:\n\n```swift\n func applicationDidFinishLaunching(_ aNotification: Notification) {\n     ...\n     \n     statusItem.menu = menu\n }\n```\n\n运行你的应用，点击系统菜单栏中你的应用的图标，果然出现了刚刚在 xib 中创建的 Menu。现在你的 Status Bar 应用终于有模有样了。接着我们可以先实现菜单中的 Quit 功能。\n\n在你的 xib 中选中 Quit 这个菜单栏，按住 `control` 键，拖动鼠标，在你的 AppDelegate 中创建一个 Action，然后在你的方法中添加如下代码：\n\n```swift\n @IBAction func quit(_ sender: NSMenuItem) {\n     NSApp.terminate(nil)\n }\n```\n\n你可以运行你的应用看看 Quit 是不是可以起效，不出意外，点击 Quit，你的应用就能退出了，同时快捷键也可以让你的应用退出了。\n\n下图中就是应用最终的样子:\n\n![](http://othizsxsl.bkt.clouddn.com/macapp00.png)\n\n\n\n# 总结\n\n通过上面简单的几个步骤，我们很快就实现了自己的第一个 Status Bar 应用。为了让新手也能上手，所以文章写的比较啰嗦，如果你已经有过 iOS 的开发经验，那么你可以跳着看，完成这个简单的  Status Bar 应用可能都不会花费你5分钟时间。\n\n最后总结一下创建我们的 Status Bar 应用的几个关键步骤：\n\n* 创建并设置 Status Item\n* 隐藏系统提供的默认窗口\n* 从 Dock 栏中隐藏应用图标\n* 给 Status Item 添加 Menu\n* 实现 Menu Item 的功能（退出功能）\n\n后面我会教你如何实现点击菜单栏弹出一个新的窗口。就像我们的应用中，点击 Preferences，会弹出一个偏好设置的窗口。你不用担心这会很难，这比你想象的要简单的多。\n\n","slug":"从零开始开发一个-Status-Bar-App","published":1,"updated":"2019-02-15T02:19:24.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikc000t1u0o9puoolt1","content":"<!--excerpt-->\n<blockquote>\n<p>由于云存储过期了，导致图片都无法显示了。</p>\n</blockquote>\n<p>以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。很多同学可能会觉得开发 Mac 应用是不是很挺难，不管你以前有没有 Mac 应用的开发经验，只有你按照下面的步骤来，你很快就能开发一款 Mac 应用了。</p>\n<p>今天要做的不是普通的窗口应用，而是 Status Bar 应用。什么是 Status Bar 应用？就像下图中的就是 Status Bar 应用。这是不是比做一个窗口应用有趣多了。现在就开始吧。 </p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp00.png\" alt=\"\"></p>\n<h1 id=\"Let-s-beging\"><a href=\"#Let-s-beging\" class=\"headerlink\" title=\"Let`s beging\"></a>Let`s beging</h1><p>首先打开你的 xCode 创建一个新工程，记住要选择 macOS，创建一个 Cocoa App。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp01.png\" alt=\"\"></p>\n<p>直接点击下一步。给你的工程取一个牛B哄哄的名字。有一点需要注意的是，Use Storyboards 和 Create Document-Based Application 单选框都不要选。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp02.png\" alt=\"\"></p>\n<p>语言就选择你最熟悉的语言就可以了，我这里选的是 Swift。如果你还没开始使用 Swift，那么我强烈建议你最好开始使用 Swift 来开发你的新应用。</p>\n<p>选好你要将工程存放的位置，点击 Create 就完成了工程的创建了。</p>\n<p>工程创建完后，你会发现有一个 MainMenu.xib 文件。打开它，这就是你的应用默认的样子了。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp03.png\" alt=\"\"></p>\n<p>你可以把 Objects 下面的 Main Menu 删掉，因为我们这个 App 中根本就用不到它，后面我们会添加自己的 Menu。</p>\n<p>先暂时放下这个 xib 文件，让我们开始实现 Status Bar App吧。</p>\n<h1 id=\"Status-Item\"><a href=\"#Status-Item\" class=\"headerlink\" title=\"Status Item\"></a>Status Item</h1><p>打开 AppleDelegate.swift 文件，让我们开始编写 Mac App 的第一行代码吧。在你的 AppleDelegate 类中创建一个 NSStatusItem：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> statusItem = <span class=\"type\">NSStatusBar</span>.system.statusItem(withLength: <span class=\"type\">NSStatusItem</span>.variableLength)</span><br></pre></td></tr></table></figure>\n<p> 然后在 <code>applicationDidFinishLaunching</code>  添加以下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">applicationDidFinishLaunching</span><span class=\"params\">(<span class=\"number\">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> image = <span class=\"type\">NSImage</span>(named: <span class=\"type\">NSImage</span>.<span class=\"type\">Name</span>(<span class=\"string\">\"Icon_32x32\"</span>))</span><br><span class=\"line\">    statusItem.highlightMode = <span class=\"literal\">true</span></span><br><span class=\"line\">    statusItem.image = image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你需要把 <code>NSImage(named: NSImage.Name(&quot;Icon_32x32&quot;))</code> 中的图片名换成你自己的图片，并且别忘了把图片导入到项目中。现在你可以运行你的项目了。你会发现系统菜单栏中确实出现了刚刚你添加的 StatusItem，不过同时也出现了一个窗口，并且 Dock 栏中也显示了应用图标。这在我们的 Status Bar 应用中是不应该出现的。现在就先解决这两个问题。</p>\n<p>要让我们的应用在运行时不要出现窗口很简单，你只需要打开 MainMenu.xib 文件，然后选中 Window，在右边的辅助编辑器中将 Visible At Launch 的单选框的勾选去掉就可以了。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp04.png\" alt=\"\"></p>\n<p>要让我们的应用图标从 Dock 栏中去掉，你只需要在 Info.plist 文件中添加一行 <code>Application is agent (UIElement)</code>，并将其设置为 YES 即可。再次运行你会发现不会再出现窗口了，应用图标也从Dock 栏中去掉了。是不是很赞呢。</p>\n<p>现在点击菜单栏中的图标，没有任何功能，现在是时候给我们的应用添加一些功能了，就像上面图片中那个样子。</p>\n<h1 id=\"添加-Menu\"><a href=\"#添加-Menu\" class=\"headerlink\" title=\"添加 Menu\"></a>添加 Menu</h1><p>再次打开 MainMenu.xib 文件，在右侧辅助编辑器的下面搜索 menu，然后将一个 Menu 拖动到 xib 中，它会自动出现在 Objects 下。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp05.png\" alt=\"\"></p>\n<p>默认情况下，Menu 中有三个 Menu Item，你可以将一个 Menu Item 拖到 Menu 中来添加更多的 Menu Item，当然，你也可以选中某一个，然后点击 <code>Delete</code> 键将其删掉。</p>\n<p>这是我的菜单最终的样子:</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp06.png\" alt=\"\"></p>\n<p>鼠标双击一个菜单栏左侧位置，你就可以给菜单栏添加标题了，双击一个菜单栏右侧位置，然后在键盘中键入你想输入的键，作为菜单栏功能的快捷键。</p>\n<p>为了让菜单更好看，我在第二个菜单栏与第一个菜单栏和第三个菜单栏中间插入了一个分割线，要插入分割线很简单，只要将一个 Separator Menu Item 拖到你的 Menu 中就可以了。</p>\n<p>我给第一个菜单栏添加了一个可以显示图片的视图。要想实现这个也很简单。你可以在右侧下面的 Object library 中将一个 Custom View 拖到 xib 中。然后在里面添加一个 Image View，并给 Image View 设置一个图片。就像下图这样:</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp07.png\" alt=\"\"></p>\n<p>现在选中第一个菜单栏 (Item 1)，按住 <code>control</code> 键，拖动鼠标，在弹出框中选择 view，就像下图中的样子。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp08.png\" alt=\"\"></p>\n<p>我们创建了自己的菜单，现在只需要将菜单与 Status Item 联系起来。这个步骤同样很简单。将你的 Menu 创建一个 Outlet ，拖到 AppDelegate 中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> menu: <span class=\"type\">NSMenu</span>!</span><br></pre></td></tr></table></figure>\n<p>然后在 <code>applicationDidFinishLaunching</code> 中添加下面一行代码:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">applicationDidFinishLaunching</span><span class=\"params\">(<span class=\"number\">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    statusItem.menu = menu</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行你的应用，点击系统菜单栏中你的应用的图标，果然出现了刚刚在 xib 中创建的 Menu。现在你的 Status Bar 应用终于有模有样了。接着我们可以先实现菜单中的 Quit 功能。</p>\n<p>在你的 xib 中选中 Quit 这个菜单栏，按住 <code>control</code> 键，拖动鼠标，在你的 AppDelegate 中创建一个 Action，然后在你的方法中添加如下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">quit</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSMenuItem)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"type\">NSApp</span>.terminate(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以运行你的应用看看 Quit 是不是可以起效，不出意外，点击 Quit，你的应用就能退出了，同时快捷键也可以让你的应用退出了。</p>\n<p>下图中就是应用最终的样子:</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp00.png\" alt=\"\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过上面简单的几个步骤，我们很快就实现了自己的第一个 Status Bar 应用。为了让新手也能上手，所以文章写的比较啰嗦，如果你已经有过 iOS 的开发经验，那么你可以跳着看，完成这个简单的  Status Bar 应用可能都不会花费你5分钟时间。</p>\n<p>最后总结一下创建我们的 Status Bar 应用的几个关键步骤：</p>\n<ul>\n<li>创建并设置 Status Item</li>\n<li>隐藏系统提供的默认窗口</li>\n<li>从 Dock 栏中隐藏应用图标</li>\n<li>给 Status Item 添加 Menu</li>\n<li>实现 Menu Item 的功能（退出功能）</li>\n</ul>\n<p>后面我会教你如何实现点击菜单栏弹出一个新的窗口。就像我们的应用中，点击 Preferences，会弹出一个偏好设置的窗口。你不用担心这会很难，这比你想象的要简单的多。</p>","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikc000t1u0o9puoolt1/thumbnail.png","excerpt":"<p>以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。</p>","more":"<p>以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。</p>\n<!--excerpt-->\n<blockquote>\n<p>由于云存储过期了，导致图片都无法显示了。</p>\n</blockquote>\n<p>以前我们都是开发 iOS 应用，今天让我们来做点不一样的，来开始开发 Mac OS  应用。很多同学可能会觉得开发 Mac 应用是不是很挺难，不管你以前有没有 Mac 应用的开发经验，只有你按照下面的步骤来，你很快就能开发一款 Mac 应用了。</p>\n<p>今天要做的不是普通的窗口应用，而是 Status Bar 应用。什么是 Status Bar 应用？就像下图中的就是 Status Bar 应用。这是不是比做一个窗口应用有趣多了。现在就开始吧。 </p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp00.png\" alt=\"\"></p>\n<h1 id=\"Let-s-beging\"><a href=\"#Let-s-beging\" class=\"headerlink\" title=\"Let`s beging\"></a>Let`s beging</h1><p>首先打开你的 xCode 创建一个新工程，记住要选择 macOS，创建一个 Cocoa App。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp01.png\" alt=\"\"></p>\n<p>直接点击下一步。给你的工程取一个牛B哄哄的名字。有一点需要注意的是，Use Storyboards 和 Create Document-Based Application 单选框都不要选。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp02.png\" alt=\"\"></p>\n<p>语言就选择你最熟悉的语言就可以了，我这里选的是 Swift。如果你还没开始使用 Swift，那么我强烈建议你最好开始使用 Swift 来开发你的新应用。</p>\n<p>选好你要将工程存放的位置，点击 Create 就完成了工程的创建了。</p>\n<p>工程创建完后，你会发现有一个 MainMenu.xib 文件。打开它，这就是你的应用默认的样子了。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp03.png\" alt=\"\"></p>\n<p>你可以把 Objects 下面的 Main Menu 删掉，因为我们这个 App 中根本就用不到它，后面我们会添加自己的 Menu。</p>\n<p>先暂时放下这个 xib 文件，让我们开始实现 Status Bar App吧。</p>\n<h1 id=\"Status-Item\"><a href=\"#Status-Item\" class=\"headerlink\" title=\"Status Item\"></a>Status Item</h1><p>打开 AppleDelegate.swift 文件，让我们开始编写 Mac App 的第一行代码吧。在你的 AppleDelegate 类中创建一个 NSStatusItem：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> statusItem = <span class=\"type\">NSStatusBar</span>.system.statusItem(withLength: <span class=\"type\">NSStatusItem</span>.variableLength)</span><br></pre></td></tr></table></figure>\n<p> 然后在 <code>applicationDidFinishLaunching</code>  添加以下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">applicationDidFinishLaunching</span><span class=\"params\">(<span class=\"number\">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> image = <span class=\"type\">NSImage</span>(named: <span class=\"type\">NSImage</span>.<span class=\"type\">Name</span>(<span class=\"string\">\"Icon_32x32\"</span>))</span><br><span class=\"line\">    statusItem.highlightMode = <span class=\"literal\">true</span></span><br><span class=\"line\">    statusItem.image = image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你需要把 <code>NSImage(named: NSImage.Name(&quot;Icon_32x32&quot;))</code> 中的图片名换成你自己的图片，并且别忘了把图片导入到项目中。现在你可以运行你的项目了。你会发现系统菜单栏中确实出现了刚刚你添加的 StatusItem，不过同时也出现了一个窗口，并且 Dock 栏中也显示了应用图标。这在我们的 Status Bar 应用中是不应该出现的。现在就先解决这两个问题。</p>\n<p>要让我们的应用在运行时不要出现窗口很简单，你只需要打开 MainMenu.xib 文件，然后选中 Window，在右边的辅助编辑器中将 Visible At Launch 的单选框的勾选去掉就可以了。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp04.png\" alt=\"\"></p>\n<p>要让我们的应用图标从 Dock 栏中去掉，你只需要在 Info.plist 文件中添加一行 <code>Application is agent (UIElement)</code>，并将其设置为 YES 即可。再次运行你会发现不会再出现窗口了，应用图标也从Dock 栏中去掉了。是不是很赞呢。</p>\n<p>现在点击菜单栏中的图标，没有任何功能，现在是时候给我们的应用添加一些功能了，就像上面图片中那个样子。</p>\n<h1 id=\"添加-Menu\"><a href=\"#添加-Menu\" class=\"headerlink\" title=\"添加 Menu\"></a>添加 Menu</h1><p>再次打开 MainMenu.xib 文件，在右侧辅助编辑器的下面搜索 menu，然后将一个 Menu 拖动到 xib 中，它会自动出现在 Objects 下。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp05.png\" alt=\"\"></p>\n<p>默认情况下，Menu 中有三个 Menu Item，你可以将一个 Menu Item 拖到 Menu 中来添加更多的 Menu Item，当然，你也可以选中某一个，然后点击 <code>Delete</code> 键将其删掉。</p>\n<p>这是我的菜单最终的样子:</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp06.png\" alt=\"\"></p>\n<p>鼠标双击一个菜单栏左侧位置，你就可以给菜单栏添加标题了，双击一个菜单栏右侧位置，然后在键盘中键入你想输入的键，作为菜单栏功能的快捷键。</p>\n<p>为了让菜单更好看，我在第二个菜单栏与第一个菜单栏和第三个菜单栏中间插入了一个分割线，要插入分割线很简单，只要将一个 Separator Menu Item 拖到你的 Menu 中就可以了。</p>\n<p>我给第一个菜单栏添加了一个可以显示图片的视图。要想实现这个也很简单。你可以在右侧下面的 Object library 中将一个 Custom View 拖到 xib 中。然后在里面添加一个 Image View，并给 Image View 设置一个图片。就像下图这样:</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp07.png\" alt=\"\"></p>\n<p>现在选中第一个菜单栏 (Item 1)，按住 <code>control</code> 键，拖动鼠标，在弹出框中选择 view，就像下图中的样子。</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp08.png\" alt=\"\"></p>\n<p>我们创建了自己的菜单，现在只需要将菜单与 Status Item 联系起来。这个步骤同样很简单。将你的 Menu 创建一个 Outlet ，拖到 AppDelegate 中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> menu: <span class=\"type\">NSMenu</span>!</span><br></pre></td></tr></table></figure>\n<p>然后在 <code>applicationDidFinishLaunching</code> 中添加下面一行代码:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">applicationDidFinishLaunching</span><span class=\"params\">(<span class=\"number\">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    statusItem.menu = menu</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行你的应用，点击系统菜单栏中你的应用的图标，果然出现了刚刚在 xib 中创建的 Menu。现在你的 Status Bar 应用终于有模有样了。接着我们可以先实现菜单中的 Quit 功能。</p>\n<p>在你的 xib 中选中 Quit 这个菜单栏，按住 <code>control</code> 键，拖动鼠标，在你的 AppDelegate 中创建一个 Action，然后在你的方法中添加如下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">quit</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSMenuItem)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"type\">NSApp</span>.terminate(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以运行你的应用看看 Quit 是不是可以起效，不出意外，点击 Quit，你的应用就能退出了，同时快捷键也可以让你的应用退出了。</p>\n<p>下图中就是应用最终的样子:</p>\n<p><img src=\"http://othizsxsl.bkt.clouddn.com/macapp00.png\" alt=\"\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过上面简单的几个步骤，我们很快就实现了自己的第一个 Status Bar 应用。为了让新手也能上手，所以文章写的比较啰嗦，如果你已经有过 iOS 的开发经验，那么你可以跳着看，完成这个简单的  Status Bar 应用可能都不会花费你5分钟时间。</p>\n<p>最后总结一下创建我们的 Status Bar 应用的几个关键步骤：</p>\n<ul>\n<li>创建并设置 Status Item</li>\n<li>隐藏系统提供的默认窗口</li>\n<li>从 Dock 栏中隐藏应用图标</li>\n<li>给 Status Item 添加 Menu</li>\n<li>实现 Menu Item 的功能（退出功能）</li>\n</ul>\n<p>后面我会教你如何实现点击菜单栏弹出一个新的窗口。就像我们的应用中，点击 Preferences，会弹出一个偏好设置的窗口。你不用担心这会很难，这比你想象的要简单的多。</p>\n"},{"title":"使用一个UIImageView实现轮播控件","date":"2016-09-24T11:03:22.000Z","keywords":["iOS","swift","UIImageView"],"_content":"在做iOS开发中，图片轮播是一个比较频繁的需求了。网上也有很多比较好的实现，有使用2个、3个`UIImageView`的，也有使用`UICollectionView`的。这里我要讲的是如何用一个`UIImageView`实现一个图片轮播控件，当然加载网络图片是必须的。闲话少说，直接进入正题：\n<!--more-->\n![](http://upload-images.jianshu.io/upload_images/1351863-f3b399cb6f10893e.gif?imageMogr2/auto-orient/strip)\n\n## 构建UI\n在轮播控件中只需要一个`UIImageView`和一个`UIPageControl`即可：\n\n```swift\nlazy var imageView: UIImageView = {\n    let imageV = UIImageView()\n    imageV.userInteractionEnabled = true\n    imageV.translatesAutoresizingMaskIntoConstraints = false\n    return imageV\n}()\n \nlazy var pageControl: UIPageControl = {\n    let pageC = UIPageControl()\n    pageC.currentPage = 0\n    pageC.translatesAutoresizingMaskIntoConstraints = false\n    return pageC\n}()\n```\n添加好约束即可。然后需要给图片添加一个左划和右划手势，以及一个点击的手势\n\n```swift\nprivate func addGesture() {\n    let left = UISwipeGestureRecognizer(target: self, action: #selector(self.swipGesterHandelr(_:)))\n    left.direction = .Left\n    self.imageView.addGestureRecognizer(left)        \n    let right = UISwipeGestureRecognizer(target: self, action: #selector(self.swipGesterHandelr(_:)))\n    right.direction = .Right\n    self.imageView.addGestureRecognizer(right)\n        \n    let tap = UITapGestureRecognizer(target: self, action: #selector(self.tapGesterHandelr(_:)))\n    self.imageView.addGestureRecognizer(tap)\n}\n```\n## 创建并启动定时器\n既然是轮播，那么就必须得有一个定时器吧，当你使用定时器的时候，就一定要注意定时器的销毁。当进入界面时就要启动定时器，当离开界面时就要销毁定时器。我以前使用过别人写的轮播控件，当我已经离开界面进入下一个界面时，定时器竟然还在运行，这样是不对的。其实实现起来很简单：\n\n```swift\npublic override func willMoveToWindow(newWindow: UIWindow?) {\n    super.willMoveToWindow(newWindow)\n        \n    guard let _ = newWindow else {\n        stopTimer()\n            return\n    }\n    refreshTimer()\n}\n\nprivate func stopTimer() {\n   timer?.invalidate()\n   timer = nil\n}\n\nprivate func refreshTimer() {\n    if timer == nil && autoScrollEnable {\n        timer = NSTimer.scheduledTimerWithTimeInterval(timeInterval, target: self, selector: #selector(self.timeAction), userInfo: nil, repeats: true)\n    }\n}\n```\n## 自动轮播的实现\n其实这里才是重点的好吧，一个`UIImageView`要实现轮播效果是很简单的，只需要使用系统的`CATransition`就可以了，来，上代码：\n\n```swift\n@objc private func timeAction() {\n    scrollWithDirection(.Left)\n}\n\nprivate func scrollWithDirection(direction: ScrollDirection) {\n    switch direction {\n    case .Left:\n        index += 1\n        if index > imageCounts - 1 {\n            index = 0\n        }\n    case .Right:\n        index -= 1\n        if index < 0 {\n            index = imageCounts - 1\n        }\n    }\n    \n    if images.count > 0 {\n        self.imageView.image = images[index]\n    }\n    else {\n        if let url = NSURL(string: imageURLStringGroup[index]) {\n            self.imageView.hu_setImageWithURL(url, placeholderImage: placeholderImage)\n        }\n    }\n    \n    addScrollAnimationWithDirection(direction)\n}\n\nprivate func addScrollAnimationWithDirection(direction: ScrollDirection) {\n    let animation = CATransition()\n    animation.duration = 0.4\n    animation.type = kCATransitionPush\n    \n    switch direction {\n    case .Left:\n        animation.subtype = kCATransitionFromRight\n    case .Right:\n        animation.subtype = kCATransitionFromLeft\n    }\n    \n    self.imageView.layer.addAnimation(animation, forKey:\"scroll\")\n    self.pageControl.currentPage = index\n}\n```\n代码非常简单，所以就不一一解释了。现在我们已经构建好了UI，创建并启动了定时器（而且能成功销毁），并成功添加了手势，这样这个图片轮播控件就可以正常工作了。但是在我们成功给轮播图设置图片后，我们得做些其他的工作：\n\n```swift\npublic var images: [UIImage] = [] {\n    willSet {\n        imageCounts = newValue.count\n        imageView.image = newValue.first\n        pageControl.numberOfPages = newValue.count\n    }\n}\n    \npublic var imageURLStringGroup: [String] = [] {\n    willSet {\n        imageCounts = newValue.count\n            \n        guard let url = NSURL(string: newValue.first!) else {\n            return\n        }\n        imageView .hu_setImageWithURL(url, placeholderImage: placeholderImage)\n        pageControl.numberOfPages = newValue.count\n    }\n}\n```\n现在就可以使用了：\n\n```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n        \n    let images = [\"a.jpg\", \"b.jpg\",\"c.jpg\",\"d.jpg\",].flatMap {\n        return UIImage(named: $0)\n    }\n        \n    let cycleView = HUScrollCycleView(frame: CGRectMake(0, 64, self.view.frame.size.width, 200))\n    self.view.addSubview(cycleView)\n    cycleView.delegate = self\n    cycleView.images = images\n    cycleView.currentPageIndicatorTintColor = UIColor.redColor()\n//  cycleView.placeholderImage = UIImage(named:\"a.jpg\")\n//  cycleView.imageURLStringGroup = [\"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/85964915563838.jpg\",\n//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/20274054563730.jpg\",\n//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/40912708563719.jpg\",\n//                                         \"http://1.7feel.cc/yungou/statics/uploads/touimg/20160718/img193.jpg\"];\n    }\n```\n最后附上[GitHub](https://github.com/hujewelz/HUScrollCycle)地址。[**HUScrollCycle**](https://github.com/hujewelz/HUScrollCycle)中的网络图片下载并没有使用其他第三方库，这里我使用的是以前用`Objective-C`写的`HUWebImageDownloader`，它在我维护的一个图片浏览器第三方库[HUPhotoBrowser](https://github.com/hujewelz/HUPhotoBrowser)中使用的，它支持网络图片和本地相册图片的浏览和多选，有兴趣的童鞋可以[点这里](https://github.com/hujewelz/HUPhotoBrowser)。\n所以你完全可以放心使用**HUScrollCycle**而不用担心对你项目产生影响。你只要按照上面的链接中的方法正确的导入`HUScrollCycle-Bridging-Header.h`就可以正常使用了。\n\n","source":"_posts/使用一个UIImageView实现轮播控件.md","raw":"---\ntitle: 使用一个UIImageView实现轮播控件\ndate: 2016-09-24 19:03:22\ntags: Swift\ncategory: Swift\nkeywords:\n- iOS\n- swift\n- UIImageView\n---\n在做iOS开发中，图片轮播是一个比较频繁的需求了。网上也有很多比较好的实现，有使用2个、3个`UIImageView`的，也有使用`UICollectionView`的。这里我要讲的是如何用一个`UIImageView`实现一个图片轮播控件，当然加载网络图片是必须的。闲话少说，直接进入正题：\n<!--more-->\n![](http://upload-images.jianshu.io/upload_images/1351863-f3b399cb6f10893e.gif?imageMogr2/auto-orient/strip)\n\n## 构建UI\n在轮播控件中只需要一个`UIImageView`和一个`UIPageControl`即可：\n\n```swift\nlazy var imageView: UIImageView = {\n    let imageV = UIImageView()\n    imageV.userInteractionEnabled = true\n    imageV.translatesAutoresizingMaskIntoConstraints = false\n    return imageV\n}()\n \nlazy var pageControl: UIPageControl = {\n    let pageC = UIPageControl()\n    pageC.currentPage = 0\n    pageC.translatesAutoresizingMaskIntoConstraints = false\n    return pageC\n}()\n```\n添加好约束即可。然后需要给图片添加一个左划和右划手势，以及一个点击的手势\n\n```swift\nprivate func addGesture() {\n    let left = UISwipeGestureRecognizer(target: self, action: #selector(self.swipGesterHandelr(_:)))\n    left.direction = .Left\n    self.imageView.addGestureRecognizer(left)        \n    let right = UISwipeGestureRecognizer(target: self, action: #selector(self.swipGesterHandelr(_:)))\n    right.direction = .Right\n    self.imageView.addGestureRecognizer(right)\n        \n    let tap = UITapGestureRecognizer(target: self, action: #selector(self.tapGesterHandelr(_:)))\n    self.imageView.addGestureRecognizer(tap)\n}\n```\n## 创建并启动定时器\n既然是轮播，那么就必须得有一个定时器吧，当你使用定时器的时候，就一定要注意定时器的销毁。当进入界面时就要启动定时器，当离开界面时就要销毁定时器。我以前使用过别人写的轮播控件，当我已经离开界面进入下一个界面时，定时器竟然还在运行，这样是不对的。其实实现起来很简单：\n\n```swift\npublic override func willMoveToWindow(newWindow: UIWindow?) {\n    super.willMoveToWindow(newWindow)\n        \n    guard let _ = newWindow else {\n        stopTimer()\n            return\n    }\n    refreshTimer()\n}\n\nprivate func stopTimer() {\n   timer?.invalidate()\n   timer = nil\n}\n\nprivate func refreshTimer() {\n    if timer == nil && autoScrollEnable {\n        timer = NSTimer.scheduledTimerWithTimeInterval(timeInterval, target: self, selector: #selector(self.timeAction), userInfo: nil, repeats: true)\n    }\n}\n```\n## 自动轮播的实现\n其实这里才是重点的好吧，一个`UIImageView`要实现轮播效果是很简单的，只需要使用系统的`CATransition`就可以了，来，上代码：\n\n```swift\n@objc private func timeAction() {\n    scrollWithDirection(.Left)\n}\n\nprivate func scrollWithDirection(direction: ScrollDirection) {\n    switch direction {\n    case .Left:\n        index += 1\n        if index > imageCounts - 1 {\n            index = 0\n        }\n    case .Right:\n        index -= 1\n        if index < 0 {\n            index = imageCounts - 1\n        }\n    }\n    \n    if images.count > 0 {\n        self.imageView.image = images[index]\n    }\n    else {\n        if let url = NSURL(string: imageURLStringGroup[index]) {\n            self.imageView.hu_setImageWithURL(url, placeholderImage: placeholderImage)\n        }\n    }\n    \n    addScrollAnimationWithDirection(direction)\n}\n\nprivate func addScrollAnimationWithDirection(direction: ScrollDirection) {\n    let animation = CATransition()\n    animation.duration = 0.4\n    animation.type = kCATransitionPush\n    \n    switch direction {\n    case .Left:\n        animation.subtype = kCATransitionFromRight\n    case .Right:\n        animation.subtype = kCATransitionFromLeft\n    }\n    \n    self.imageView.layer.addAnimation(animation, forKey:\"scroll\")\n    self.pageControl.currentPage = index\n}\n```\n代码非常简单，所以就不一一解释了。现在我们已经构建好了UI，创建并启动了定时器（而且能成功销毁），并成功添加了手势，这样这个图片轮播控件就可以正常工作了。但是在我们成功给轮播图设置图片后，我们得做些其他的工作：\n\n```swift\npublic var images: [UIImage] = [] {\n    willSet {\n        imageCounts = newValue.count\n        imageView.image = newValue.first\n        pageControl.numberOfPages = newValue.count\n    }\n}\n    \npublic var imageURLStringGroup: [String] = [] {\n    willSet {\n        imageCounts = newValue.count\n            \n        guard let url = NSURL(string: newValue.first!) else {\n            return\n        }\n        imageView .hu_setImageWithURL(url, placeholderImage: placeholderImage)\n        pageControl.numberOfPages = newValue.count\n    }\n}\n```\n现在就可以使用了：\n\n```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n        \n    let images = [\"a.jpg\", \"b.jpg\",\"c.jpg\",\"d.jpg\",].flatMap {\n        return UIImage(named: $0)\n    }\n        \n    let cycleView = HUScrollCycleView(frame: CGRectMake(0, 64, self.view.frame.size.width, 200))\n    self.view.addSubview(cycleView)\n    cycleView.delegate = self\n    cycleView.images = images\n    cycleView.currentPageIndicatorTintColor = UIColor.redColor()\n//  cycleView.placeholderImage = UIImage(named:\"a.jpg\")\n//  cycleView.imageURLStringGroup = [\"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/85964915563838.jpg\",\n//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/20274054563730.jpg\",\n//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/40912708563719.jpg\",\n//                                         \"http://1.7feel.cc/yungou/statics/uploads/touimg/20160718/img193.jpg\"];\n    }\n```\n最后附上[GitHub](https://github.com/hujewelz/HUScrollCycle)地址。[**HUScrollCycle**](https://github.com/hujewelz/HUScrollCycle)中的网络图片下载并没有使用其他第三方库，这里我使用的是以前用`Objective-C`写的`HUWebImageDownloader`，它在我维护的一个图片浏览器第三方库[HUPhotoBrowser](https://github.com/hujewelz/HUPhotoBrowser)中使用的，它支持网络图片和本地相册图片的浏览和多选，有兴趣的童鞋可以[点这里](https://github.com/hujewelz/HUPhotoBrowser)。\n所以你完全可以放心使用**HUScrollCycle**而不用担心对你项目产生影响。你只要按照上面的链接中的方法正确的导入`HUScrollCycle-Bridging-Header.h`就可以正常使用了。\n\n","slug":"使用一个UIImageView实现轮播控件","published":1,"updated":"2017-03-01T05:16:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zike000x1u0ol1rqnox1","content":"<p>在做iOS开发中，图片轮播是一个比较频繁的需求了。网上也有很多比较好的实现，有使用2个、3个<code>UIImageView</code>的，也有使用<code>UICollectionView</code>的。这里我要讲的是如何用一个<code>UIImageView</code>实现一个图片轮播控件，当然加载网络图片是必须的。闲话少说，直接进入正题：<br><a id=\"more\"></a><br><img src=\"http://upload-images.jianshu.io/upload_images/1351863-f3b399cb6f10893e.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"构建UI\"><a href=\"#构建UI\" class=\"headerlink\" title=\"构建UI\"></a>构建UI</h2><p>在轮播控件中只需要一个<code>UIImageView</code>和一个<code>UIPageControl</code>即可：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageV = <span class=\"type\">UIImageView</span>()</span><br><span class=\"line\">    imageV.userInteractionEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">    imageV.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageV</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> pageControl: <span class=\"type\">UIPageControl</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pageC = <span class=\"type\">UIPageControl</span>()</span><br><span class=\"line\">    pageC.currentPage = <span class=\"number\">0</span></span><br><span class=\"line\">    pageC.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pageC</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>添加好约束即可。然后需要给图片添加一个左划和右划手势，以及一个点击的手势</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addGesture</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">left</span> = <span class=\"type\">UISwipeGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: #selector(<span class=\"keyword\">self</span>.swipGesterHandelr(<span class=\"number\">_</span>:)))</span><br><span class=\"line\">    <span class=\"keyword\">left</span>.direction = .<span class=\"type\">Left</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.addGestureRecognizer(<span class=\"keyword\">left</span>)        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">right</span> = <span class=\"type\">UISwipeGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: #selector(<span class=\"keyword\">self</span>.swipGesterHandelr(<span class=\"number\">_</span>:)))</span><br><span class=\"line\">    <span class=\"keyword\">right</span>.direction = .<span class=\"type\">Right</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.addGestureRecognizer(<span class=\"keyword\">right</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> tap = <span class=\"type\">UITapGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: #selector(<span class=\"keyword\">self</span>.tapGesterHandelr(<span class=\"number\">_</span>:)))</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.addGestureRecognizer(tap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建并启动定时器\"><a href=\"#创建并启动定时器\" class=\"headerlink\" title=\"创建并启动定时器\"></a>创建并启动定时器</h2><p>既然是轮播，那么就必须得有一个定时器吧，当你使用定时器的时候，就一定要注意定时器的销毁。当进入界面时就要启动定时器，当离开界面时就要销毁定时器。我以前使用过别人写的轮播控件，当我已经离开界面进入下一个界面时，定时器竟然还在运行，这样是不对的。其实实现起来很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">willMoveToWindow</span><span class=\"params\">(newWindow: UIWindow?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.willMoveToWindow(newWindow)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> <span class=\"number\">_</span> = newWindow <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        stopTimer()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    refreshTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stopTimer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   timer?.invalidate()</span><br><span class=\"line\">   timer = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">refreshTimer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> timer == <span class=\"literal\">nil</span> &amp;&amp; autoScrollEnable &#123;</span><br><span class=\"line\">        timer = <span class=\"type\">NSTimer</span>.scheduledTimerWithTimeInterval(timeInterval, target: <span class=\"keyword\">self</span>, selector: #selector(<span class=\"keyword\">self</span>.timeAction), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动轮播的实现\"><a href=\"#自动轮播的实现\" class=\"headerlink\" title=\"自动轮播的实现\"></a>自动轮播的实现</h2><p>其实这里才是重点的好吧，一个<code>UIImageView</code>要实现轮播效果是很简单的，只需要使用系统的<code>CATransition</code>就可以了，来，上代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeAction</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    scrollWithDirection(.<span class=\"type\">Left</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollWithDirection</span><span class=\"params\">(direction: ScrollDirection)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> direction &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Left</span>:</span><br><span class=\"line\">        index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &gt; imageCounts - <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            index = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Right</span>:</span><br><span class=\"line\">        index -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            index = imageCounts - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> images.<span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.imageView.image = images[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url = <span class=\"type\">NSURL</span>(string: imageURLStringGroup[index]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.imageView.hu_setImageWithURL(url, placeholderImage: placeholderImage)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    addScrollAnimationWithDirection(direction)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addScrollAnimationWithDirection</span><span class=\"params\">(direction: ScrollDirection)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> animation = <span class=\"type\">CATransition</span>()</span><br><span class=\"line\">    animation.duration = <span class=\"number\">0.4</span></span><br><span class=\"line\">    animation.type = kCATransitionPush</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> direction &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Left</span>:</span><br><span class=\"line\">        animation.subtype = kCATransitionFromRight</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Right</span>:</span><br><span class=\"line\">        animation.subtype = kCATransitionFromLeft</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.layer.addAnimation(animation, forKey:<span class=\"string\">\"scroll\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pageControl.currentPage = index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码非常简单，所以就不一一解释了。现在我们已经构建好了UI，创建并启动了定时器（而且能成功销毁），并成功添加了手势，这样这个图片轮播控件就可以正常工作了。但是在我们成功给轮播图设置图片后，我们得做些其他的工作：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] = [] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">        imageCounts = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">        imageView.image = newValue.first</span><br><span class=\"line\">        pageControl.numberOfPages = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> imageURLStringGroup: [<span class=\"type\">String</span>] = [] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">        imageCounts = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> url = <span class=\"type\">NSURL</span>(string: newValue.first!) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        imageView .hu_setImageWithURL(url, placeholderImage: placeholderImage)</span><br><span class=\"line\">        pageControl.numberOfPages = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> images = [<span class=\"string\">\"a.jpg\"</span>, <span class=\"string\">\"b.jpg\"</span>,<span class=\"string\">\"c.jpg\"</span>,<span class=\"string\">\"d.jpg\"</span>,].flatMap &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIImage</span>(named: $<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> cycleView = <span class=\"type\">HUScrollCycleView</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">64</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">200</span>))</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.addSubview(cycleView)</span><br><span class=\"line\">    cycleView.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">    cycleView.images = images</span><br><span class=\"line\">    cycleView.currentPageIndicatorTintColor = <span class=\"type\">UIColor</span>.redColor()</span><br><span class=\"line\"><span class=\"comment\">//  cycleView.placeholderImage = UIImage(named:\"a.jpg\")</span></span><br><span class=\"line\"><span class=\"comment\">//  cycleView.imageURLStringGroup = [\"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/85964915563838.jpg\",</span></span><br><span class=\"line\"><span class=\"comment\">//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/20274054563730.jpg\",</span></span><br><span class=\"line\"><span class=\"comment\">//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/40912708563719.jpg\",</span></span><br><span class=\"line\"><span class=\"comment\">//                                         \"http://1.7feel.cc/yungou/statics/uploads/touimg/20160718/img193.jpg\"];</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>最后附上<a href=\"https://github.com/hujewelz/HUScrollCycle\" target=\"_blank\" rel=\"noopener\">GitHub</a>地址。<a href=\"https://github.com/hujewelz/HUScrollCycle\" target=\"_blank\" rel=\"noopener\"><strong>HUScrollCycle</strong></a>中的网络图片下载并没有使用其他第三方库，这里我使用的是以前用<code>Objective-C</code>写的<code>HUWebImageDownloader</code>，它在我维护的一个图片浏览器第三方库<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\">HUPhotoBrowser</a>中使用的，它支持网络图片和本地相册图片的浏览和多选，有兴趣的童鞋可以<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\">点这里</a>。<br>所以你完全可以放心使用<strong>HUScrollCycle</strong>而不用担心对你项目产生影响。你只要按照上面的链接中的方法正确的导入<code>HUScrollCycle-Bridging-Header.h</code>就可以正常使用了。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>在做iOS开发中，图片轮播是一个比较频繁的需求了。网上也有很多比较好的实现，有使用2个、3个<code>UIImageView</code>的，也有使用<code>UICollectionView</code>的。这里我要讲的是如何用一个<code>UIImageView</code>实现一个图片轮播控件，当然加载网络图片是必须的。闲话少说，直接进入正题：<br>","more":"<br><img src=\"http://upload-images.jianshu.io/upload_images/1351863-f3b399cb6f10893e.gif?imageMogr2/auto-orient/strip\" alt=\"\"></p>\n<h2 id=\"构建UI\"><a href=\"#构建UI\" class=\"headerlink\" title=\"构建UI\"></a>构建UI</h2><p>在轮播控件中只需要一个<code>UIImageView</code>和一个<code>UIPageControl</code>即可：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageV = <span class=\"type\">UIImageView</span>()</span><br><span class=\"line\">    imageV.userInteractionEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">    imageV.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageV</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> pageControl: <span class=\"type\">UIPageControl</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pageC = <span class=\"type\">UIPageControl</span>()</span><br><span class=\"line\">    pageC.currentPage = <span class=\"number\">0</span></span><br><span class=\"line\">    pageC.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pageC</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>添加好约束即可。然后需要给图片添加一个左划和右划手势，以及一个点击的手势</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addGesture</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">left</span> = <span class=\"type\">UISwipeGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: #selector(<span class=\"keyword\">self</span>.swipGesterHandelr(<span class=\"number\">_</span>:)))</span><br><span class=\"line\">    <span class=\"keyword\">left</span>.direction = .<span class=\"type\">Left</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.addGestureRecognizer(<span class=\"keyword\">left</span>)        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">right</span> = <span class=\"type\">UISwipeGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: #selector(<span class=\"keyword\">self</span>.swipGesterHandelr(<span class=\"number\">_</span>:)))</span><br><span class=\"line\">    <span class=\"keyword\">right</span>.direction = .<span class=\"type\">Right</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.addGestureRecognizer(<span class=\"keyword\">right</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> tap = <span class=\"type\">UITapGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: #selector(<span class=\"keyword\">self</span>.tapGesterHandelr(<span class=\"number\">_</span>:)))</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.addGestureRecognizer(tap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建并启动定时器\"><a href=\"#创建并启动定时器\" class=\"headerlink\" title=\"创建并启动定时器\"></a>创建并启动定时器</h2><p>既然是轮播，那么就必须得有一个定时器吧，当你使用定时器的时候，就一定要注意定时器的销毁。当进入界面时就要启动定时器，当离开界面时就要销毁定时器。我以前使用过别人写的轮播控件，当我已经离开界面进入下一个界面时，定时器竟然还在运行，这样是不对的。其实实现起来很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">willMoveToWindow</span><span class=\"params\">(newWindow: UIWindow?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.willMoveToWindow(newWindow)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> <span class=\"number\">_</span> = newWindow <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        stopTimer()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    refreshTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stopTimer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   timer?.invalidate()</span><br><span class=\"line\">   timer = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">refreshTimer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> timer == <span class=\"literal\">nil</span> &amp;&amp; autoScrollEnable &#123;</span><br><span class=\"line\">        timer = <span class=\"type\">NSTimer</span>.scheduledTimerWithTimeInterval(timeInterval, target: <span class=\"keyword\">self</span>, selector: #selector(<span class=\"keyword\">self</span>.timeAction), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动轮播的实现\"><a href=\"#自动轮播的实现\" class=\"headerlink\" title=\"自动轮播的实现\"></a>自动轮播的实现</h2><p>其实这里才是重点的好吧，一个<code>UIImageView</code>要实现轮播效果是很简单的，只需要使用系统的<code>CATransition</code>就可以了，来，上代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeAction</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    scrollWithDirection(.<span class=\"type\">Left</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollWithDirection</span><span class=\"params\">(direction: ScrollDirection)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> direction &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Left</span>:</span><br><span class=\"line\">        index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &gt; imageCounts - <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            index = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Right</span>:</span><br><span class=\"line\">        index -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            index = imageCounts - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> images.<span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.imageView.image = images[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url = <span class=\"type\">NSURL</span>(string: imageURLStringGroup[index]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.imageView.hu_setImageWithURL(url, placeholderImage: placeholderImage)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    addScrollAnimationWithDirection(direction)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addScrollAnimationWithDirection</span><span class=\"params\">(direction: ScrollDirection)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> animation = <span class=\"type\">CATransition</span>()</span><br><span class=\"line\">    animation.duration = <span class=\"number\">0.4</span></span><br><span class=\"line\">    animation.type = kCATransitionPush</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> direction &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Left</span>:</span><br><span class=\"line\">        animation.subtype = kCATransitionFromRight</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Right</span>:</span><br><span class=\"line\">        animation.subtype = kCATransitionFromLeft</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.layer.addAnimation(animation, forKey:<span class=\"string\">\"scroll\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pageControl.currentPage = index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码非常简单，所以就不一一解释了。现在我们已经构建好了UI，创建并启动了定时器（而且能成功销毁），并成功添加了手势，这样这个图片轮播控件就可以正常工作了。但是在我们成功给轮播图设置图片后，我们得做些其他的工作：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] = [] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">        imageCounts = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">        imageView.image = newValue.first</span><br><span class=\"line\">        pageControl.numberOfPages = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> imageURLStringGroup: [<span class=\"type\">String</span>] = [] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">        imageCounts = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> url = <span class=\"type\">NSURL</span>(string: newValue.first!) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        imageView .hu_setImageWithURL(url, placeholderImage: placeholderImage)</span><br><span class=\"line\">        pageControl.numberOfPages = newValue.<span class=\"built_in\">count</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> images = [<span class=\"string\">\"a.jpg\"</span>, <span class=\"string\">\"b.jpg\"</span>,<span class=\"string\">\"c.jpg\"</span>,<span class=\"string\">\"d.jpg\"</span>,].flatMap &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIImage</span>(named: $<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> cycleView = <span class=\"type\">HUScrollCycleView</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">64</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">200</span>))</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.addSubview(cycleView)</span><br><span class=\"line\">    cycleView.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">    cycleView.images = images</span><br><span class=\"line\">    cycleView.currentPageIndicatorTintColor = <span class=\"type\">UIColor</span>.redColor()</span><br><span class=\"line\"><span class=\"comment\">//  cycleView.placeholderImage = UIImage(named:\"a.jpg\")</span></span><br><span class=\"line\"><span class=\"comment\">//  cycleView.imageURLStringGroup = [\"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/85964915563838.jpg\",</span></span><br><span class=\"line\"><span class=\"comment\">//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/20274054563730.jpg\",</span></span><br><span class=\"line\"><span class=\"comment\">//                                         \"http://1.7feel.cc/yungou/statics/uploads/banner/20160715/40912708563719.jpg\",</span></span><br><span class=\"line\"><span class=\"comment\">//                                         \"http://1.7feel.cc/yungou/statics/uploads/touimg/20160718/img193.jpg\"];</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>最后附上<a href=\"https://github.com/hujewelz/HUScrollCycle\" target=\"_blank\" rel=\"noopener\">GitHub</a>地址。<a href=\"https://github.com/hujewelz/HUScrollCycle\" target=\"_blank\" rel=\"noopener\"><strong>HUScrollCycle</strong></a>中的网络图片下载并没有使用其他第三方库，这里我使用的是以前用<code>Objective-C</code>写的<code>HUWebImageDownloader</code>，它在我维护的一个图片浏览器第三方库<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\">HUPhotoBrowser</a>中使用的，它支持网络图片和本地相册图片的浏览和多选，有兴趣的童鞋可以<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\">点这里</a>。<br>所以你完全可以放心使用<strong>HUScrollCycle</strong>而不用担心对你项目产生影响。你只要按照上面的链接中的方法正确的导入<code>HUScrollCycle-Bridging-Header.h</code>就可以正常使用了。</p>"},{"title":"使用Core Graphics绘制图形","date":"2015-09-12T06:41:51.000Z","thumbnailImage":"18436043320170222133323050.png","thumbnailImagePosition":"bottom","_content":"Core Graphic是iOS中一套基于C的框架，用于一切绘图操作，UIKit就是基于Core Graphic实现的，因此它可以实现比UIKit更底层的功能。\n\n<!--more-->\n\n![](18436043320170222133323050.png)\n\n根据苹果的描述，UIKit是我们最容易也是最常接触到的框架。绝大多数图形界面都由UIKit完成。但是UIKit依赖于Core Graphics框架，也是基于Core Graphics框架实现的。如果想要完成某些更底层的功能或者追求极致的性能，那么依然推荐使用Core Graphics完成。\n\n在使用Core Graphics进行绘图时，需要注意以下几点：\n\n1. Core Graphics其实是一套基于C的API框架，使用了Quartz作为绘图引擎。这也就意味着Core Graphics不是面向对象的。\n2. Core Graphics需要一个图形上下文（Context）。所谓的图形上下文（Context），说白了就是一张画布。这一点非常容易理解，Core Graphics提供了一系列绘图API，自然需要指定在哪里画图。因此很多API都需要一个上下文（Context）参数。\n3. Core Graphics的图形上下文（Context）是堆栈式的。只能在栈顶的上下文（画布）上画图。\n4. Core Graphics中有一些API，名称不同却有着相似的功能，新手只需要掌握一种，并能够看懂其他的即可。\n\n## Core Graphics的基本使用\n使用 Core Graphics 进行绘图可以总结为一下几个步骤：\n1. 获取上下文（画布）\n2. \t创建路径（自定义或者调用系统的API）并添加到上下文中。\n3. 进行绘图内容的设置（画笔颜色、粗细、填充区域颜色、阴影、连接点形状等）\n4. 开始绘图（CGContextDrawPath）\n5. 释放路径（CGPathRelease）\n\n为了使用Core Graphics来绘图，最简单的方法就是自定义一个类继承自UIView，并重写子类的drawRect方法。在这个方法中绘制图形。\n```\n- (void)drawRect:(CGRect)rect {\n  // 1. 获取图形上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 2. 创建路径\n  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;\n  CGContextAddArc(ctx, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);\n  \n  // 3. 设置绘制参数\n  CGContextSetLineWidth(ctx, 4);\n  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);\n  \n  // 4. 绘制路径\n  CGContextStrokePath(ctx);\n}\n```\n使用 `CGContextRef` 创建路径后将清空图形上下文，如果我们想保存路径来复用，可以使用Quartz提供的CGPath函数集合来创建可复用的路径对象。\n```\n// 1. 获取图形上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 2. 创建路径\n  CGMutablePathRef path = CGPathCreateMutable();\n  \n  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;\n  CGPathAddArc(path, NULL, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);\n  \n  //将路径添加到上下文\n  CGContextAddPath(ctx, path);\n  \n  // 3. 设置绘制参数\n  CGContextSetLineWidth(ctx, 4);\n  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);\n  \n  // 4. 绘制路径\n  CGContextStrokePath(ctx);\n  \n  // 5. 释放路径\n  CGPathRelease(path);\n```\n\n### 使用UIBezierPath\nUIBezierPath存在于UIKit中，是对路径绘制的封装，和CGContextRef类似，优点是更面向对象，我们可以像操作普通对象一样对其进行操作。\n```\n- (void)drawRect:(CGRect)rect {\n  CGFloat radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;\n  UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(self.frame.size.width/2, self.frame.size.height/2) radius:radius startAngle:0 endAngle:M_PI*2 clockwise:1];\n  path.lineWidth = 4;\n  [[UIColor blueColor] setStroke];\n  [path stroke];\n}\n```\n\n### 使用Core Graphics绘制图片\n\nCore Graphics 不仅可以绘制图形，还可以绘制图片\n```\n- (void)drawImage {\n  // 1.开启上下文\n  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);\n  \n  // 2.取得当前的上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 3.设置上下文\n  CGContextSetFillColorWithColor(ctx, [UIColor orangeColor].CGColor);\n  CGContextFillRect(ctx, self.dogImageView.bounds);\n  // 4.获取图片\n  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();\n  \n  // 5.关闭上下文\n  UIGraphicsEndImageContext();\n}\n```\n在开发中我们经常会有圆角图片的需求，我们也可以用`Core Graphics`来绘制圆角图片：\n\n![](18436043320170222164112080.png)\n\n```\n- (void)circleImage {\n  // 1.开启上下文\n  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);\n  \n  // 2.取得当前的上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 3.添加路径\n  CGFloat radius = self.dogImageView.frame.size.width / 2;\n  CGContextAddArc(ctx, self.dogImageView.bounds.size.width/2, self.dogImageView.bounds.size.height/2, radius, 0, M_PI*2, 1);\n  CGContextClip(ctx);\n  \n  // 4.绘制图片\n  [self.dogImageView.image drawInRect:self.dogImageView.bounds];\n  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();\n  \n  // 5.关闭上下文\n  UIGraphicsEndImageContext();\n}\n```\n\n\n\n","source":"_posts/使用Core-Graphics绘制图形.md","raw":"---\ntitle: 使用Core Graphics绘制图形\ndate: 2015-09-12 14:41:51\ntags: iOS\ncategory: iOS\nthumbnailImage: 18436043320170222133323050.png\nthumbnailImagePosition: bottom\n---\nCore Graphic是iOS中一套基于C的框架，用于一切绘图操作，UIKit就是基于Core Graphic实现的，因此它可以实现比UIKit更底层的功能。\n\n<!--more-->\n\n![](18436043320170222133323050.png)\n\n根据苹果的描述，UIKit是我们最容易也是最常接触到的框架。绝大多数图形界面都由UIKit完成。但是UIKit依赖于Core Graphics框架，也是基于Core Graphics框架实现的。如果想要完成某些更底层的功能或者追求极致的性能，那么依然推荐使用Core Graphics完成。\n\n在使用Core Graphics进行绘图时，需要注意以下几点：\n\n1. Core Graphics其实是一套基于C的API框架，使用了Quartz作为绘图引擎。这也就意味着Core Graphics不是面向对象的。\n2. Core Graphics需要一个图形上下文（Context）。所谓的图形上下文（Context），说白了就是一张画布。这一点非常容易理解，Core Graphics提供了一系列绘图API，自然需要指定在哪里画图。因此很多API都需要一个上下文（Context）参数。\n3. Core Graphics的图形上下文（Context）是堆栈式的。只能在栈顶的上下文（画布）上画图。\n4. Core Graphics中有一些API，名称不同却有着相似的功能，新手只需要掌握一种，并能够看懂其他的即可。\n\n## Core Graphics的基本使用\n使用 Core Graphics 进行绘图可以总结为一下几个步骤：\n1. 获取上下文（画布）\n2. \t创建路径（自定义或者调用系统的API）并添加到上下文中。\n3. 进行绘图内容的设置（画笔颜色、粗细、填充区域颜色、阴影、连接点形状等）\n4. 开始绘图（CGContextDrawPath）\n5. 释放路径（CGPathRelease）\n\n为了使用Core Graphics来绘图，最简单的方法就是自定义一个类继承自UIView，并重写子类的drawRect方法。在这个方法中绘制图形。\n```\n- (void)drawRect:(CGRect)rect {\n  // 1. 获取图形上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 2. 创建路径\n  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;\n  CGContextAddArc(ctx, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);\n  \n  // 3. 设置绘制参数\n  CGContextSetLineWidth(ctx, 4);\n  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);\n  \n  // 4. 绘制路径\n  CGContextStrokePath(ctx);\n}\n```\n使用 `CGContextRef` 创建路径后将清空图形上下文，如果我们想保存路径来复用，可以使用Quartz提供的CGPath函数集合来创建可复用的路径对象。\n```\n// 1. 获取图形上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 2. 创建路径\n  CGMutablePathRef path = CGPathCreateMutable();\n  \n  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;\n  CGPathAddArc(path, NULL, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);\n  \n  //将路径添加到上下文\n  CGContextAddPath(ctx, path);\n  \n  // 3. 设置绘制参数\n  CGContextSetLineWidth(ctx, 4);\n  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);\n  \n  // 4. 绘制路径\n  CGContextStrokePath(ctx);\n  \n  // 5. 释放路径\n  CGPathRelease(path);\n```\n\n### 使用UIBezierPath\nUIBezierPath存在于UIKit中，是对路径绘制的封装，和CGContextRef类似，优点是更面向对象，我们可以像操作普通对象一样对其进行操作。\n```\n- (void)drawRect:(CGRect)rect {\n  CGFloat radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;\n  UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(self.frame.size.width/2, self.frame.size.height/2) radius:radius startAngle:0 endAngle:M_PI*2 clockwise:1];\n  path.lineWidth = 4;\n  [[UIColor blueColor] setStroke];\n  [path stroke];\n}\n```\n\n### 使用Core Graphics绘制图片\n\nCore Graphics 不仅可以绘制图形，还可以绘制图片\n```\n- (void)drawImage {\n  // 1.开启上下文\n  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);\n  \n  // 2.取得当前的上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 3.设置上下文\n  CGContextSetFillColorWithColor(ctx, [UIColor orangeColor].CGColor);\n  CGContextFillRect(ctx, self.dogImageView.bounds);\n  // 4.获取图片\n  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();\n  \n  // 5.关闭上下文\n  UIGraphicsEndImageContext();\n}\n```\n在开发中我们经常会有圆角图片的需求，我们也可以用`Core Graphics`来绘制圆角图片：\n\n![](18436043320170222164112080.png)\n\n```\n- (void)circleImage {\n  // 1.开启上下文\n  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);\n  \n  // 2.取得当前的上下文\n  CGContextRef ctx = UIGraphicsGetCurrentContext();\n  \n  // 3.添加路径\n  CGFloat radius = self.dogImageView.frame.size.width / 2;\n  CGContextAddArc(ctx, self.dogImageView.bounds.size.width/2, self.dogImageView.bounds.size.height/2, radius, 0, M_PI*2, 1);\n  CGContextClip(ctx);\n  \n  // 4.绘制图片\n  [self.dogImageView.image drawInRect:self.dogImageView.bounds];\n  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();\n  \n  // 5.关闭上下文\n  UIGraphicsEndImageContext();\n}\n```\n\n\n\n","slug":"使用Core-Graphics绘制图形","published":1,"updated":"2018-05-26T03:01:22.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikf00101u0og54ejzgv","content":"<p>Core Graphic是iOS中一套基于C的框架，用于一切绘图操作，UIKit就是基于Core Graphic实现的，因此它可以实现比UIKit更底层的功能。</p>\n<a id=\"more\"></a>\n<p><img src=\"18436043320170222133323050.png\" alt=\"\"></p>\n<p>根据苹果的描述，UIKit是我们最容易也是最常接触到的框架。绝大多数图形界面都由UIKit完成。但是UIKit依赖于Core Graphics框架，也是基于Core Graphics框架实现的。如果想要完成某些更底层的功能或者追求极致的性能，那么依然推荐使用Core Graphics完成。</p>\n<p>在使用Core Graphics进行绘图时，需要注意以下几点：</p>\n<ol>\n<li>Core Graphics其实是一套基于C的API框架，使用了Quartz作为绘图引擎。这也就意味着Core Graphics不是面向对象的。</li>\n<li>Core Graphics需要一个图形上下文（Context）。所谓的图形上下文（Context），说白了就是一张画布。这一点非常容易理解，Core Graphics提供了一系列绘图API，自然需要指定在哪里画图。因此很多API都需要一个上下文（Context）参数。</li>\n<li>Core Graphics的图形上下文（Context）是堆栈式的。只能在栈顶的上下文（画布）上画图。</li>\n<li>Core Graphics中有一些API，名称不同却有着相似的功能，新手只需要掌握一种，并能够看懂其他的即可。</li>\n</ol>\n<h2 id=\"Core-Graphics的基本使用\"><a href=\"#Core-Graphics的基本使用\" class=\"headerlink\" title=\"Core Graphics的基本使用\"></a>Core Graphics的基本使用</h2><p>使用 Core Graphics 进行绘图可以总结为一下几个步骤：</p>\n<ol>\n<li>获取上下文（画布）</li>\n<li>创建路径（自定义或者调用系统的API）并添加到上下文中。</li>\n<li>进行绘图内容的设置（画笔颜色、粗细、填充区域颜色、阴影、连接点形状等）</li>\n<li>开始绘图（CGContextDrawPath）</li>\n<li>释放路径（CGPathRelease）</li>\n</ol>\n<p>为了使用Core Graphics来绘图，最简单的方法就是自定义一个类继承自UIView，并重写子类的drawRect方法。在这个方法中绘制图形。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawRect:(CGRect)rect &#123;</span><br><span class=\"line\">  // 1. 获取图形上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2. 创建路径</span><br><span class=\"line\">  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;</span><br><span class=\"line\">  CGContextAddArc(ctx, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3. 设置绘制参数</span><br><span class=\"line\">  CGContextSetLineWidth(ctx, 4);</span><br><span class=\"line\">  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 4. 绘制路径</span><br><span class=\"line\">  CGContextStrokePath(ctx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>CGContextRef</code> 创建路径后将清空图形上下文，如果我们想保存路径来复用，可以使用Quartz提供的CGPath函数集合来创建可复用的路径对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 获取图形上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2. 创建路径</span><br><span class=\"line\">  CGMutablePathRef path = CGPathCreateMutable();</span><br><span class=\"line\">  </span><br><span class=\"line\">  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;</span><br><span class=\"line\">  CGPathAddArc(path, NULL, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  //将路径添加到上下文</span><br><span class=\"line\">  CGContextAddPath(ctx, path);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3. 设置绘制参数</span><br><span class=\"line\">  CGContextSetLineWidth(ctx, 4);</span><br><span class=\"line\">  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 4. 绘制路径</span><br><span class=\"line\">  CGContextStrokePath(ctx);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5. 释放路径</span><br><span class=\"line\">  CGPathRelease(path);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用UIBezierPath\"><a href=\"#使用UIBezierPath\" class=\"headerlink\" title=\"使用UIBezierPath\"></a>使用UIBezierPath</h3><p>UIBezierPath存在于UIKit中，是对路径绘制的封装，和CGContextRef类似，优点是更面向对象，我们可以像操作普通对象一样对其进行操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawRect:(CGRect)rect &#123;</span><br><span class=\"line\">  CGFloat radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;</span><br><span class=\"line\">  UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(self.frame.size.width/2, self.frame.size.height/2) radius:radius startAngle:0 endAngle:M_PI*2 clockwise:1];</span><br><span class=\"line\">  path.lineWidth = 4;</span><br><span class=\"line\">  [[UIColor blueColor] setStroke];</span><br><span class=\"line\">  [path stroke];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用Core-Graphics绘制图片\"><a href=\"#使用Core-Graphics绘制图片\" class=\"headerlink\" title=\"使用Core Graphics绘制图片\"></a>使用Core Graphics绘制图片</h3><p>Core Graphics 不仅可以绘制图形，还可以绘制图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawImage &#123;</span><br><span class=\"line\">  // 1.开启上下文</span><br><span class=\"line\">  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2.取得当前的上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3.设置上下文</span><br><span class=\"line\">  CGContextSetFillColorWithColor(ctx, [UIColor orangeColor].CGColor);</span><br><span class=\"line\">  CGContextFillRect(ctx, self.dogImageView.bounds);</span><br><span class=\"line\">  // 4.获取图片</span><br><span class=\"line\">  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5.关闭上下文</span><br><span class=\"line\">  UIGraphicsEndImageContext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在开发中我们经常会有圆角图片的需求，我们也可以用<code>Core Graphics</code>来绘制圆角图片：</p>\n<p><img src=\"18436043320170222164112080.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)circleImage &#123;</span><br><span class=\"line\">  // 1.开启上下文</span><br><span class=\"line\">  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2.取得当前的上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3.添加路径</span><br><span class=\"line\">  CGFloat radius = self.dogImageView.frame.size.width / 2;</span><br><span class=\"line\">  CGContextAddArc(ctx, self.dogImageView.bounds.size.width/2, self.dogImageView.bounds.size.height/2, radius, 0, M_PI*2, 1);</span><br><span class=\"line\">  CGContextClip(ctx);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 4.绘制图片</span><br><span class=\"line\">  [self.dogImageView.image drawInRect:self.dogImageView.bounds];</span><br><span class=\"line\">  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5.关闭上下文</span><br><span class=\"line\">  UIGraphicsEndImageContext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikf00101u0og54ejzgv/18436043320170222133323050.png","excerpt":"<p>Core Graphic是iOS中一套基于C的框架，用于一切绘图操作，UIKit就是基于Core Graphic实现的，因此它可以实现比UIKit更底层的功能。</p>","more":"<p><img src=\"18436043320170222133323050.png\" alt=\"\"></p>\n<p>根据苹果的描述，UIKit是我们最容易也是最常接触到的框架。绝大多数图形界面都由UIKit完成。但是UIKit依赖于Core Graphics框架，也是基于Core Graphics框架实现的。如果想要完成某些更底层的功能或者追求极致的性能，那么依然推荐使用Core Graphics完成。</p>\n<p>在使用Core Graphics进行绘图时，需要注意以下几点：</p>\n<ol>\n<li>Core Graphics其实是一套基于C的API框架，使用了Quartz作为绘图引擎。这也就意味着Core Graphics不是面向对象的。</li>\n<li>Core Graphics需要一个图形上下文（Context）。所谓的图形上下文（Context），说白了就是一张画布。这一点非常容易理解，Core Graphics提供了一系列绘图API，自然需要指定在哪里画图。因此很多API都需要一个上下文（Context）参数。</li>\n<li>Core Graphics的图形上下文（Context）是堆栈式的。只能在栈顶的上下文（画布）上画图。</li>\n<li>Core Graphics中有一些API，名称不同却有着相似的功能，新手只需要掌握一种，并能够看懂其他的即可。</li>\n</ol>\n<h2 id=\"Core-Graphics的基本使用\"><a href=\"#Core-Graphics的基本使用\" class=\"headerlink\" title=\"Core Graphics的基本使用\"></a>Core Graphics的基本使用</h2><p>使用 Core Graphics 进行绘图可以总结为一下几个步骤：</p>\n<ol>\n<li>获取上下文（画布）</li>\n<li>创建路径（自定义或者调用系统的API）并添加到上下文中。</li>\n<li>进行绘图内容的设置（画笔颜色、粗细、填充区域颜色、阴影、连接点形状等）</li>\n<li>开始绘图（CGContextDrawPath）</li>\n<li>释放路径（CGPathRelease）</li>\n</ol>\n<p>为了使用Core Graphics来绘图，最简单的方法就是自定义一个类继承自UIView，并重写子类的drawRect方法。在这个方法中绘制图形。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawRect:(CGRect)rect &#123;</span><br><span class=\"line\">  // 1. 获取图形上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2. 创建路径</span><br><span class=\"line\">  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;</span><br><span class=\"line\">  CGContextAddArc(ctx, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3. 设置绘制参数</span><br><span class=\"line\">  CGContextSetLineWidth(ctx, 4);</span><br><span class=\"line\">  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 4. 绘制路径</span><br><span class=\"line\">  CGContextStrokePath(ctx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>CGContextRef</code> 创建路径后将清空图形上下文，如果我们想保存路径来复用，可以使用Quartz提供的CGPath函数集合来创建可复用的路径对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 获取图形上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2. 创建路径</span><br><span class=\"line\">  CGMutablePathRef path = CGPathCreateMutable();</span><br><span class=\"line\">  </span><br><span class=\"line\">  float radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;</span><br><span class=\"line\">  CGPathAddArc(path, NULL, self.frame.size.width/2, self.frame.size.height/2, radius, 0, M_PI*2, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  //将路径添加到上下文</span><br><span class=\"line\">  CGContextAddPath(ctx, path);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3. 设置绘制参数</span><br><span class=\"line\">  CGContextSetLineWidth(ctx, 4);</span><br><span class=\"line\">  CGContextSetRGBStrokeColor(ctx, 0, 0, 0, 1);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 4. 绘制路径</span><br><span class=\"line\">  CGContextStrokePath(ctx);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5. 释放路径</span><br><span class=\"line\">  CGPathRelease(path);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用UIBezierPath\"><a href=\"#使用UIBezierPath\" class=\"headerlink\" title=\"使用UIBezierPath\"></a>使用UIBezierPath</h3><p>UIBezierPath存在于UIKit中，是对路径绘制的封装，和CGContextRef类似，优点是更面向对象，我们可以像操作普通对象一样对其进行操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawRect:(CGRect)rect &#123;</span><br><span class=\"line\">  CGFloat radius = MIN(self.bounds.size.width, self.bounds.size.height) * 0.5 - 4;</span><br><span class=\"line\">  UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(self.frame.size.width/2, self.frame.size.height/2) radius:radius startAngle:0 endAngle:M_PI*2 clockwise:1];</span><br><span class=\"line\">  path.lineWidth = 4;</span><br><span class=\"line\">  [[UIColor blueColor] setStroke];</span><br><span class=\"line\">  [path stroke];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用Core-Graphics绘制图片\"><a href=\"#使用Core-Graphics绘制图片\" class=\"headerlink\" title=\"使用Core Graphics绘制图片\"></a>使用Core Graphics绘制图片</h3><p>Core Graphics 不仅可以绘制图形，还可以绘制图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)drawImage &#123;</span><br><span class=\"line\">  // 1.开启上下文</span><br><span class=\"line\">  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2.取得当前的上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3.设置上下文</span><br><span class=\"line\">  CGContextSetFillColorWithColor(ctx, [UIColor orangeColor].CGColor);</span><br><span class=\"line\">  CGContextFillRect(ctx, self.dogImageView.bounds);</span><br><span class=\"line\">  // 4.获取图片</span><br><span class=\"line\">  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5.关闭上下文</span><br><span class=\"line\">  UIGraphicsEndImageContext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在开发中我们经常会有圆角图片的需求，我们也可以用<code>Core Graphics</code>来绘制圆角图片：</p>\n<p><img src=\"18436043320170222164112080.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)circleImage &#123;</span><br><span class=\"line\">  // 1.开启上下文</span><br><span class=\"line\">  UIGraphicsBeginImageContextWithOptions(self.dogImageView.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 2.取得当前的上下文</span><br><span class=\"line\">  CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 3.添加路径</span><br><span class=\"line\">  CGFloat radius = self.dogImageView.frame.size.width / 2;</span><br><span class=\"line\">  CGContextAddArc(ctx, self.dogImageView.bounds.size.width/2, self.dogImageView.bounds.size.height/2, radius, 0, M_PI*2, 1);</span><br><span class=\"line\">  CGContextClip(ctx);</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 4.绘制图片</span><br><span class=\"line\">  [self.dogImageView.image drawInRect:self.dogImageView.bounds];</span><br><span class=\"line\">  self.dogImageView.image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 5.关闭上下文</span><br><span class=\"line\">  UIGraphicsEndImageContext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"入坑Webpack","date":"2017-02-06T01:46:20.000Z","thumbnailImage":"cover.png","coverImage":"cover.png","_content":"\n在开始学习`Webpack`之前，请先确保安装了[Node.js](https://nodejs.org/en/download/),建议安装最新版的Node.js。然后就可以使用npm安装Webpack了。你可以将Webpack安装到全局，不过我们通常会把它安装到项目依赖中。\n\n<!--more-->\n\n现在进入项目目录，并使用`npm init -y`初始化一个默认的package.json。打开终端，键入命令:\n```shell\n//全局安装\nnpm install webpack --g\n//安装到项目依赖中\nnpm install webpack --save-dev\n```\n安装好Webpack依赖后，新建一个webpack.config.js文件，用来配置webpack。不过在配置webpack之前，先安装`webpack-dev-server`:\n```shell\n//全局安装\nnpm install webpack-dev-server --g\n//安装到项目依赖中\nnpm install webpack-dev-server --save-dev\n```\n### webpack-dev-server\n它将在localhost:8080启动一个express静态资源web服务器，并且会以监听模式自动运行webpack，在浏览器打开[http://localhost:8080/](http://localhost:8080/)或[http://localhost:8080/webpack-dev-server/](http://localhost:8080/webpack-dev-server/)可以浏览项目中的页面和编译后的资源输出，并且通过一个socket.io服务实时监听它们的变化并自动刷新页面。\n在终端中执行\n```shell\nwebpack-dev-server --inline --hot\n```\n当我们修改了模块的内容后，`webpack-dev-server`会自动执行打包(打包后的结果会缓存到内存中，所以不能在本地文件中看到打包后的文件)。\n\n`inline`选项为整个页面添加了\"Live Reloading\"功能，而`hot`选项开启了\"Hot Module Reloading\"功能，这样就会尝试着重载发生变化的组件，而不是整个页面。这样就实现了修改文件，界面就会自动更新了。\n我们可以在`package.json`中输入以下内容：\n```json\n\"scripts\": {\n   \"dev\": \"webpack-dev-server --colors --hot --inline\",\n   \"build\": \"webpack --colors --watch\"\n},\n```\n这样我们只需要键入`npm run dev`命令就能执行上面的命令了。\n\n在这之前，先看看项目的结构以及一个简单的`webpack config`:\n```\n|——hello-webpack\n   |——src  # 项目源码\n      |——assets # 资源文件\n         |——img # 图片\n         |——css # 样式\n      |——component  # 页面组件\n      main.js  # 入口文件\n   |——static # 静态资源文件\n   index.html\n   package.json\n   webpack.config.js\n```\n**webpack config.js**：\n```js\nvar path = require('path');\nvar webpack = require('webpack')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '',\n    filename: '[name].js'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.json'],\n    alias: {\n      'src': path.resolve(__dirname, './src'),\n      'assets': path.resolve(__dirname, './src/assets'),\n      'components': path.resolve(__dirname, './src/components')\n    }\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js|jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: path.join('static', 'img/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n  ]\n}\n```\n## Webpack配置\n**webpack.config.js**为Webpack的默认配置，我们可以为开发环境和生产环境分别做不同的配置。下面一一介绍每个配置的作用。\n### entry\n`entry`是入口配置项，可以是`string`,`Array`或者一个`Object`:\n```js\nentry: {\n  app: './src/main.js'\n},\n```\n```js\nentry: './src/main.js'\n```\n如果页面有多个入口可以这样写:\n```js\nentry: ['./src/home.js', '.src/profile.js']\n//或\nentry: {\n  home: './src/home.js',\n  profile: './src/profile.js'\n}\n```\n### output\n`output`是输出配置。\n```js\noutput: {\n  path: path.resolve(__dirname, './dist'),\n  publicPath: '/',\n  filename: '[name].js',\n  chunkFilename: '[id].[hash].js'\n}\n```\n*path*是文件输出到本地的路径，*publicPath*是文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，一般用于生产模式，*filename*是打包后的入口文件名，*chunkFilename*是每个模块编译后的文件名，其中[hash]是用来唯一标识文件，主要用来防止缓存。\n##### path\n仅仅用来告诉Webpack在哪里存放结果文件,上面例子中，最终的打包文件会放到与当前脚本文件同级目录的dist目录下。即：\n```\nhello-webpack\n  +dist\n  -webpack.config.js\n```\n##### filename\n入口文件打包后的名称,`[name]`对应着入口文件的key值，例如：`app.js`,这对多入口文件是很有用的，应为入口文件可以有多个，但是filename只能有一个，所以对于上面的多入口，最后就是:`home.js`,'profile.js'，当然为了体现文件层级关系可以这么写:\n```\nfilename: 'js/[name].js'\n```\n最后的结果就是：\n```\n|——hello-webpack\n   |——dist\n   |——js\n       home.js\n       profile.js\n    webpack.config.js\n```\n#####  chunkFilename\n即非入口文件打包后的名称，未被列在entry中，却又需要被打包出来的文件命名配置。一般情况下是不需要这个配置的。比如我们在做异步加载模块时就需要用到了：\n```js\nVue.component('async-webpack-example', function (resolve) {\n  // 这个特殊的 require 语法告诉 webpack\n  // 自动将编译后的代码分割成不同的块，\n  // 这些块将通过 Ajax 请求自动下载。\n  require(['./my-async-component'], resolve)\n})\n```\n##### publicPath\n文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，在开发模式下建议使用相对路径，在生产模式中，如果你的资源文件放在别的服务器上，可以使用服务器的地址。当然你也可以不用配置`publicPath`，。\n在项目中我使用了`url-loader`加载图片，\n```js\n{\n    test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n    loader: 'url',\n    query: {\n      limit: 10000,\n      name: path.join('static', 'img/[name].[hash:7].[ext]') # 图片最终的输出路径\n    }\n}\n```\n在`main.js`中使用了图片\n```\nimport Girl from 'assets/img/girl.jpg'\n```\n那么最终浏览器访问的图片路径就是：\n```\nstatic/img/girl.7672e53.jpg \n```\n所以可以根据开发环境和生产环境配置不同的`publicPath`。\n在生产环境中，由于我的资源文件放在项目目录下，所以可以这样配置`output`:\n```js\noutput: {\n  path: path.resolve(__dirname, './dist'),\n  publicPath: './',\n  filename: 'js/[name].[chunkhash].js',\n  chunkFilename: `js/[id].[chunkhash].js`\n}\n```\n那么最终打包后的输出目录结构就是这样的:\n```\n|——dist\n   |——static\n      |——img\n         girl.7672e53.jpg\n      |——js\n         app.js\n    index.html\n```\n所以通过`static/img/girl.7672e53.jpg `可以访问到图片。在开发环境下，经过测试，将`publicPath`设置为'./'界面是无法加载出来的，所以在开发环境下可以不用设置。\n### loader\n```js\nmodule: {\n    loaders: [\n      {\n        test: /\\.js|jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: path.join('static', 'img/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  }\n```\n由于Webpack本身只能处理JavaScript 模块，如果要处理其他类型的文件，就需要使用loader 进行转换。Loader可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。不同的loader可以将各种类型的文件转换为浏览器能够接受的格式如JS，Stylesheets等等。\n\n下面一一对这些子参数进行说明：\n* `test`参数用来指示当前配置项针对哪些资源，当参数匹配时，就会使用相应的loader。\n* `exclude`参数用来剔除掉需要忽略的资源。\n* `include`参数用来表示本loader配置仅针对哪些目录/文件，从名称上就可以认为跟`exclude`作用相反。\n* `loader/loaders`参数，用来指示用哪个/哪些loader来处理目标资源，这俩表达的其实是一个意思，只是写法不一样，我个人喜欢将loader写成一行，多个loader间使用!分割，这种形式类似于管道的概念，例如`loader: 'css?!postcss!less'`，可以很明显地看出，目标资源先经less-loader处理过后将结果交给postcss-loader作进一步处理，然后最后再交给css-loader。\n\nloader本身也是可以配置的，传入不同的参数可以实现不同的功能。以[url-loader](https://github.com/webpack/url-loader)为例，我们配置url-loader使小于10000字节的图片使用DataURL，大于10000字节的图片使用URL，`name`属性配置输出图片的图片名称，例如：\n```js\nrequire('a.png') => static/a.3445645.png\n```\n不同的loader配置参数不一样，具体配置参数可以去官网查看。\n#### loader链\n多个loader可以链式调用，作用于同一种文件类型。工作链的调用顺序是*从右向左*，各个loader之间使用\"!\"分开。\n以处理css文件为例，我们需要[css-loader](https://github.com/webpack/css-loader)来处理css文件，然后使用[style-loader](https://github.com/webpack/style-loader)将css样式插入到html的`style`标签中。\n### plugin\n插件可以完成更多loader不能完成的功能。\n插件的使用一般是在webpack的配置信息plugins选项中指定。\nloader是在打包前或打包的过程中作用于单个文件。plugin通常在打包过程结束后，作用于包或者chunk级别。\n\n以下是一些常用的插件:\n\n1. [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin)\n\n  ExtractTextPlugin的作用是把各个chunk加载的css代码合并成一个css文件并在页面加载的时候以`<link>`的形式进行加载。\n  ```js\n  var ExtractTextPlugin = require('extract-text-webpack-plugin')\n  \n  module: {\n    loaders: [\n      {\n        test: /\\.css$/, \n        loader:ExtractTextPlugin.extract(\"style-loader\",\"css-loader\") }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(path.join('static', 'css/[name].[contenthash].css'))\n  ]\n  ```\n  >注意：如果想要把CSS放到HTML的style标签中，可以不使用extract-text-webpack-plugin，只要用css-loader和style-loader就可以了。\n2. [html-webpack-plugin](https://github.com/ampedandwired/html-webpack-plugin)\n  \n  html-webpack-plugin，是用来生产html的，其中filename是生产的文件路径和名称，template是使用的模板，inject是指将js放在body还是head里。为`true`会将js放到body里\n  ```js\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n  ```\n  这个插件是建议一定要安装的。\n3. uglifyJSPlugin\n\n    uglifyJSPlugin是将代码进行压缩的。\n    ```js\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    })\n    ```\n   ```\n4. CommonsChunkPlugin\n\n  CommonsChunkPlugin是将多个入口文件之间共享的块打包成一个独立的js文件。至此，你只需要在每个页面都加载这个公共代码的js文件，就可以既保持代码的完整性，又不会重复下载公共代码了。\n  ```js\n  new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      filename: '[name].[chunkhash].js',\n      minChunks: 4\n    })\n   ```\n  * `name`，给这个包含公共代码的chunk命个名（唯一标识）。\n  * `filename`，如何命名打包后生产的js文件。\n  * `minChunks`，公共代码的判断标准：某个js模块被多少个chunk加载了才算是公共代码。\n  * `chunks`，表示需要在哪些chunk（也可以理解为webpack配置中entry的每一项）里寻找公共代码进行打包。不设置此参数则默认提取范围为所有的chunk。\n\n### resolve\n```js\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.json'],\n    alias: {\n      'src': path.resolve(__dirname, './src'),\n      'assets': path.resolve(__dirname, './src/assets'),\n      'components': path.resolve(__dirname, './src/components')\n    }\n  }\n```\n`resolve.extensions`是对模块后缀名的简写，配置后，原本是`require('./components/app.jsx')` 可以简写为`require('./components/app')`。\n\n`resolve.alias`是别名，配置后，比如原本是`require('./src/components/nav.jsx') `可以简写为`require('components/nav.jsx')`。\n\n## Webpack中的hash与chunkhash\n### hash与chunkhash\n按照官方的定义`hash`就是webpack的每一次编译(compilation)所产生的hash值，`chunkhash`从字面上理解就是每一个`chunk`的hash值。那么什么时候会产生编译以及`chunk`又是什么东西？\n#### compilation\n`compilation`对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。以及在每次执行`webpack`命令时都会创建一个compilation。也就是说当创建了一个compilation，我们所有需要打包的文件(js,css,img,font等)都会产生相同的hash。\n\n如果在项目中我们使用hash作为编译输出文件的hash的话，像这样：\n```js\nentry: {\n    home: './src/home.js',\n    profile: './src/profile.js'\n},\noutput: {\n    path: './dist',\n    filename: 'js/[name].[hash].js'\n}\n```\n那么在编译后所有的文件名都会使用相同的hash值，这样带来的问题是，上面两个js文件任何一个改动都会影响另外文件的最终文件名。上线后，另外文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。\n\n那么如何避免这样的问题呢？\n\n答案就是使用`chunkhash`。\n按照上面所说，`chunkhash`是每一个`chunk`的hash值，`chunk`就是模块(webpack中一切皆模块)，`chunkhash`也就是根据模块内容计算出的hash值。所以某个文件的改动只会影响它本身的hash值，不会影响其他文件。\n所以可以将上面的filename改为：\n```js\n filename: 'js/[name].[chunkhash].js'\n```\n这样的话每个文件的hash值都不相同，上线后无改动的文件不会失去缓存。\n\n不过使用`chunkhash`也不能解决所有问题，比如打包`css`文件。\n### js与css共用相同chunkhash的解决方案\n前文提到了webpack的编译理念，webpack将style视为js的一部分，所以在计算`chunkhash`时，会把所有的js代码和style代码混合在一起计算。所以，不论是修改了js代码还是css代码，整个chunk的内容都改变了，计算所得的chunkhash自然就一样了。\n\n那么如何解决这种问题呢？\n#### contenthash\nwebpack默认将js/style文件统统编译到一个js文件中，可以借助[extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin)将style文件单独编译输出。所以我们可以这样配置:\n```js\nnew ExtractTextPlugin('./dist/css/[name].[contenthash].css')\n```\n`contenthash`代表的是文本文件内容的hash值，也就是只有style文件的hash值。这样编译输出的js和css文件将会有其独立的hash值。\n\n## 示例代码\n在看文章的同时，搭配[示例项目](https://github.com/hujewelz/hello-webpack)会更直观哦，赶紧动起手来，开始入坑Webpack吧:)。\n\n克隆后，请执行 `npm install`\n```shell\n//启动运行环境\nnpm run dev \n//执行打包\nnpm run build\n```\n\n\n\n  \n\n","source":"_posts/入坑Webpack.md","raw":"---\ntitle: 入坑Webpack\ndate: 2017-02-06 09:46:20\ntags: Webpack\ncategory: Web Dev\nthumbnailImage: cover.png\ncoverImage: cover.png\n---\n\n在开始学习`Webpack`之前，请先确保安装了[Node.js](https://nodejs.org/en/download/),建议安装最新版的Node.js。然后就可以使用npm安装Webpack了。你可以将Webpack安装到全局，不过我们通常会把它安装到项目依赖中。\n\n<!--more-->\n\n现在进入项目目录，并使用`npm init -y`初始化一个默认的package.json。打开终端，键入命令:\n```shell\n//全局安装\nnpm install webpack --g\n//安装到项目依赖中\nnpm install webpack --save-dev\n```\n安装好Webpack依赖后，新建一个webpack.config.js文件，用来配置webpack。不过在配置webpack之前，先安装`webpack-dev-server`:\n```shell\n//全局安装\nnpm install webpack-dev-server --g\n//安装到项目依赖中\nnpm install webpack-dev-server --save-dev\n```\n### webpack-dev-server\n它将在localhost:8080启动一个express静态资源web服务器，并且会以监听模式自动运行webpack，在浏览器打开[http://localhost:8080/](http://localhost:8080/)或[http://localhost:8080/webpack-dev-server/](http://localhost:8080/webpack-dev-server/)可以浏览项目中的页面和编译后的资源输出，并且通过一个socket.io服务实时监听它们的变化并自动刷新页面。\n在终端中执行\n```shell\nwebpack-dev-server --inline --hot\n```\n当我们修改了模块的内容后，`webpack-dev-server`会自动执行打包(打包后的结果会缓存到内存中，所以不能在本地文件中看到打包后的文件)。\n\n`inline`选项为整个页面添加了\"Live Reloading\"功能，而`hot`选项开启了\"Hot Module Reloading\"功能，这样就会尝试着重载发生变化的组件，而不是整个页面。这样就实现了修改文件，界面就会自动更新了。\n我们可以在`package.json`中输入以下内容：\n```json\n\"scripts\": {\n   \"dev\": \"webpack-dev-server --colors --hot --inline\",\n   \"build\": \"webpack --colors --watch\"\n},\n```\n这样我们只需要键入`npm run dev`命令就能执行上面的命令了。\n\n在这之前，先看看项目的结构以及一个简单的`webpack config`:\n```\n|——hello-webpack\n   |——src  # 项目源码\n      |——assets # 资源文件\n         |——img # 图片\n         |——css # 样式\n      |——component  # 页面组件\n      main.js  # 入口文件\n   |——static # 静态资源文件\n   index.html\n   package.json\n   webpack.config.js\n```\n**webpack config.js**：\n```js\nvar path = require('path');\nvar webpack = require('webpack')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '',\n    filename: '[name].js'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.json'],\n    alias: {\n      'src': path.resolve(__dirname, './src'),\n      'assets': path.resolve(__dirname, './src/assets'),\n      'components': path.resolve(__dirname, './src/components')\n    }\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js|jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: path.join('static', 'img/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n  ]\n}\n```\n## Webpack配置\n**webpack.config.js**为Webpack的默认配置，我们可以为开发环境和生产环境分别做不同的配置。下面一一介绍每个配置的作用。\n### entry\n`entry`是入口配置项，可以是`string`,`Array`或者一个`Object`:\n```js\nentry: {\n  app: './src/main.js'\n},\n```\n```js\nentry: './src/main.js'\n```\n如果页面有多个入口可以这样写:\n```js\nentry: ['./src/home.js', '.src/profile.js']\n//或\nentry: {\n  home: './src/home.js',\n  profile: './src/profile.js'\n}\n```\n### output\n`output`是输出配置。\n```js\noutput: {\n  path: path.resolve(__dirname, './dist'),\n  publicPath: '/',\n  filename: '[name].js',\n  chunkFilename: '[id].[hash].js'\n}\n```\n*path*是文件输出到本地的路径，*publicPath*是文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，一般用于生产模式，*filename*是打包后的入口文件名，*chunkFilename*是每个模块编译后的文件名，其中[hash]是用来唯一标识文件，主要用来防止缓存。\n##### path\n仅仅用来告诉Webpack在哪里存放结果文件,上面例子中，最终的打包文件会放到与当前脚本文件同级目录的dist目录下。即：\n```\nhello-webpack\n  +dist\n  -webpack.config.js\n```\n##### filename\n入口文件打包后的名称,`[name]`对应着入口文件的key值，例如：`app.js`,这对多入口文件是很有用的，应为入口文件可以有多个，但是filename只能有一个，所以对于上面的多入口，最后就是:`home.js`,'profile.js'，当然为了体现文件层级关系可以这么写:\n```\nfilename: 'js/[name].js'\n```\n最后的结果就是：\n```\n|——hello-webpack\n   |——dist\n   |——js\n       home.js\n       profile.js\n    webpack.config.js\n```\n#####  chunkFilename\n即非入口文件打包后的名称，未被列在entry中，却又需要被打包出来的文件命名配置。一般情况下是不需要这个配置的。比如我们在做异步加载模块时就需要用到了：\n```js\nVue.component('async-webpack-example', function (resolve) {\n  // 这个特殊的 require 语法告诉 webpack\n  // 自动将编译后的代码分割成不同的块，\n  // 这些块将通过 Ajax 请求自动下载。\n  require(['./my-async-component'], resolve)\n})\n```\n##### publicPath\n文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，在开发模式下建议使用相对路径，在生产模式中，如果你的资源文件放在别的服务器上，可以使用服务器的地址。当然你也可以不用配置`publicPath`，。\n在项目中我使用了`url-loader`加载图片，\n```js\n{\n    test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n    loader: 'url',\n    query: {\n      limit: 10000,\n      name: path.join('static', 'img/[name].[hash:7].[ext]') # 图片最终的输出路径\n    }\n}\n```\n在`main.js`中使用了图片\n```\nimport Girl from 'assets/img/girl.jpg'\n```\n那么最终浏览器访问的图片路径就是：\n```\nstatic/img/girl.7672e53.jpg \n```\n所以可以根据开发环境和生产环境配置不同的`publicPath`。\n在生产环境中，由于我的资源文件放在项目目录下，所以可以这样配置`output`:\n```js\noutput: {\n  path: path.resolve(__dirname, './dist'),\n  publicPath: './',\n  filename: 'js/[name].[chunkhash].js',\n  chunkFilename: `js/[id].[chunkhash].js`\n}\n```\n那么最终打包后的输出目录结构就是这样的:\n```\n|——dist\n   |——static\n      |——img\n         girl.7672e53.jpg\n      |——js\n         app.js\n    index.html\n```\n所以通过`static/img/girl.7672e53.jpg `可以访问到图片。在开发环境下，经过测试，将`publicPath`设置为'./'界面是无法加载出来的，所以在开发环境下可以不用设置。\n### loader\n```js\nmodule: {\n    loaders: [\n      {\n        test: /\\.js|jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: path.join('static', 'img/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  }\n```\n由于Webpack本身只能处理JavaScript 模块，如果要处理其他类型的文件，就需要使用loader 进行转换。Loader可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。不同的loader可以将各种类型的文件转换为浏览器能够接受的格式如JS，Stylesheets等等。\n\n下面一一对这些子参数进行说明：\n* `test`参数用来指示当前配置项针对哪些资源，当参数匹配时，就会使用相应的loader。\n* `exclude`参数用来剔除掉需要忽略的资源。\n* `include`参数用来表示本loader配置仅针对哪些目录/文件，从名称上就可以认为跟`exclude`作用相反。\n* `loader/loaders`参数，用来指示用哪个/哪些loader来处理目标资源，这俩表达的其实是一个意思，只是写法不一样，我个人喜欢将loader写成一行，多个loader间使用!分割，这种形式类似于管道的概念，例如`loader: 'css?!postcss!less'`，可以很明显地看出，目标资源先经less-loader处理过后将结果交给postcss-loader作进一步处理，然后最后再交给css-loader。\n\nloader本身也是可以配置的，传入不同的参数可以实现不同的功能。以[url-loader](https://github.com/webpack/url-loader)为例，我们配置url-loader使小于10000字节的图片使用DataURL，大于10000字节的图片使用URL，`name`属性配置输出图片的图片名称，例如：\n```js\nrequire('a.png') => static/a.3445645.png\n```\n不同的loader配置参数不一样，具体配置参数可以去官网查看。\n#### loader链\n多个loader可以链式调用，作用于同一种文件类型。工作链的调用顺序是*从右向左*，各个loader之间使用\"!\"分开。\n以处理css文件为例，我们需要[css-loader](https://github.com/webpack/css-loader)来处理css文件，然后使用[style-loader](https://github.com/webpack/style-loader)将css样式插入到html的`style`标签中。\n### plugin\n插件可以完成更多loader不能完成的功能。\n插件的使用一般是在webpack的配置信息plugins选项中指定。\nloader是在打包前或打包的过程中作用于单个文件。plugin通常在打包过程结束后，作用于包或者chunk级别。\n\n以下是一些常用的插件:\n\n1. [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin)\n\n  ExtractTextPlugin的作用是把各个chunk加载的css代码合并成一个css文件并在页面加载的时候以`<link>`的形式进行加载。\n  ```js\n  var ExtractTextPlugin = require('extract-text-webpack-plugin')\n  \n  module: {\n    loaders: [\n      {\n        test: /\\.css$/, \n        loader:ExtractTextPlugin.extract(\"style-loader\",\"css-loader\") }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(path.join('static', 'css/[name].[contenthash].css'))\n  ]\n  ```\n  >注意：如果想要把CSS放到HTML的style标签中，可以不使用extract-text-webpack-plugin，只要用css-loader和style-loader就可以了。\n2. [html-webpack-plugin](https://github.com/ampedandwired/html-webpack-plugin)\n  \n  html-webpack-plugin，是用来生产html的，其中filename是生产的文件路径和名称，template是使用的模板，inject是指将js放在body还是head里。为`true`会将js放到body里\n  ```js\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n  ```\n  这个插件是建议一定要安装的。\n3. uglifyJSPlugin\n\n    uglifyJSPlugin是将代码进行压缩的。\n    ```js\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    })\n    ```\n   ```\n4. CommonsChunkPlugin\n\n  CommonsChunkPlugin是将多个入口文件之间共享的块打包成一个独立的js文件。至此，你只需要在每个页面都加载这个公共代码的js文件，就可以既保持代码的完整性，又不会重复下载公共代码了。\n  ```js\n  new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      filename: '[name].[chunkhash].js',\n      minChunks: 4\n    })\n   ```\n  * `name`，给这个包含公共代码的chunk命个名（唯一标识）。\n  * `filename`，如何命名打包后生产的js文件。\n  * `minChunks`，公共代码的判断标准：某个js模块被多少个chunk加载了才算是公共代码。\n  * `chunks`，表示需要在哪些chunk（也可以理解为webpack配置中entry的每一项）里寻找公共代码进行打包。不设置此参数则默认提取范围为所有的chunk。\n\n### resolve\n```js\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.json'],\n    alias: {\n      'src': path.resolve(__dirname, './src'),\n      'assets': path.resolve(__dirname, './src/assets'),\n      'components': path.resolve(__dirname, './src/components')\n    }\n  }\n```\n`resolve.extensions`是对模块后缀名的简写，配置后，原本是`require('./components/app.jsx')` 可以简写为`require('./components/app')`。\n\n`resolve.alias`是别名，配置后，比如原本是`require('./src/components/nav.jsx') `可以简写为`require('components/nav.jsx')`。\n\n## Webpack中的hash与chunkhash\n### hash与chunkhash\n按照官方的定义`hash`就是webpack的每一次编译(compilation)所产生的hash值，`chunkhash`从字面上理解就是每一个`chunk`的hash值。那么什么时候会产生编译以及`chunk`又是什么东西？\n#### compilation\n`compilation`对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。以及在每次执行`webpack`命令时都会创建一个compilation。也就是说当创建了一个compilation，我们所有需要打包的文件(js,css,img,font等)都会产生相同的hash。\n\n如果在项目中我们使用hash作为编译输出文件的hash的话，像这样：\n```js\nentry: {\n    home: './src/home.js',\n    profile: './src/profile.js'\n},\noutput: {\n    path: './dist',\n    filename: 'js/[name].[hash].js'\n}\n```\n那么在编译后所有的文件名都会使用相同的hash值，这样带来的问题是，上面两个js文件任何一个改动都会影响另外文件的最终文件名。上线后，另外文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。\n\n那么如何避免这样的问题呢？\n\n答案就是使用`chunkhash`。\n按照上面所说，`chunkhash`是每一个`chunk`的hash值，`chunk`就是模块(webpack中一切皆模块)，`chunkhash`也就是根据模块内容计算出的hash值。所以某个文件的改动只会影响它本身的hash值，不会影响其他文件。\n所以可以将上面的filename改为：\n```js\n filename: 'js/[name].[chunkhash].js'\n```\n这样的话每个文件的hash值都不相同，上线后无改动的文件不会失去缓存。\n\n不过使用`chunkhash`也不能解决所有问题，比如打包`css`文件。\n### js与css共用相同chunkhash的解决方案\n前文提到了webpack的编译理念，webpack将style视为js的一部分，所以在计算`chunkhash`时，会把所有的js代码和style代码混合在一起计算。所以，不论是修改了js代码还是css代码，整个chunk的内容都改变了，计算所得的chunkhash自然就一样了。\n\n那么如何解决这种问题呢？\n#### contenthash\nwebpack默认将js/style文件统统编译到一个js文件中，可以借助[extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin)将style文件单独编译输出。所以我们可以这样配置:\n```js\nnew ExtractTextPlugin('./dist/css/[name].[contenthash].css')\n```\n`contenthash`代表的是文本文件内容的hash值，也就是只有style文件的hash值。这样编译输出的js和css文件将会有其独立的hash值。\n\n## 示例代码\n在看文章的同时，搭配[示例项目](https://github.com/hujewelz/hello-webpack)会更直观哦，赶紧动起手来，开始入坑Webpack吧:)。\n\n克隆后，请执行 `npm install`\n```shell\n//启动运行环境\nnpm run dev \n//执行打包\nnpm run build\n```\n\n\n\n  \n\n","slug":"入坑Webpack","published":1,"updated":"2018-05-26T10:46:50.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikh00151u0osn2d18b0","content":"<p>在开始学习<code>Webpack</code>之前，请先确保安装了<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.js</a>,建议安装最新版的Node.js。然后就可以使用npm安装Webpack了。你可以将Webpack安装到全局，不过我们通常会把它安装到项目依赖中。</p>\n<a id=\"more\"></a>\n<p>现在进入项目目录，并使用<code>npm init -y</code>初始化一个默认的package.json。打开终端，键入命令:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install webpack --g</span><br><span class=\"line\">//安装到项目依赖中</span><br><span class=\"line\">npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>安装好Webpack依赖后，新建一个webpack.config.js文件，用来配置webpack。不过在配置webpack之前，先安装<code>webpack-dev-server</code>:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install webpack-dev-server --g</span><br><span class=\"line\">//安装到项目依赖中</span><br><span class=\"line\">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p>它将在localhost:8080启动一个express静态资源web服务器，并且会以监听模式自动运行webpack，在浏览器打开<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a>或<a href=\"http://localhost:8080/webpack-dev-server/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/webpack-dev-server/</a>可以浏览项目中的页面和编译后的资源输出，并且通过一个socket.io服务实时监听它们的变化并自动刷新页面。<br>在终端中执行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server --inline --hot</span><br></pre></td></tr></table></figure></p>\n<p>当我们修改了模块的内容后，<code>webpack-dev-server</code>会自动执行打包(打包后的结果会缓存到内存中，所以不能在本地文件中看到打包后的文件)。</p>\n<p><code>inline</code>选项为整个页面添加了”Live Reloading”功能，而<code>hot</code>选项开启了”Hot Module Reloading”功能，这样就会尝试着重载发生变化的组件，而不是整个页面。这样就实现了修改文件，界面就会自动更新了。<br>我们可以在<code>package.json</code>中输入以下内容：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">   \"dev\": \"webpack-dev-server --colors --hot --inline\",</span><br><span class=\"line\">   \"build\": \"webpack --colors --watch\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>这样我们只需要键入<code>npm run dev</code>命令就能执行上面的命令了。</p>\n<p>在这之前，先看看项目的结构以及一个简单的<code>webpack config</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——hello-webpack</span><br><span class=\"line\">   |——src  # 项目源码</span><br><span class=\"line\">      |——assets # 资源文件</span><br><span class=\"line\">         |——img # 图片</span><br><span class=\"line\">         |——css # 样式</span><br><span class=\"line\">      |——component  # 页面组件</span><br><span class=\"line\">      main.js  # 入口文件</span><br><span class=\"line\">   |——static # 静态资源文件</span><br><span class=\"line\">   index.html</span><br><span class=\"line\">   package.json</span><br><span class=\"line\">   webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p><strong>webpack config.js</strong>：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">''</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'src'</span>: path.resolve(__dirname, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\">      <span class=\"string\">'assets'</span>: path.resolve(__dirname, <span class=\"string\">'./src/assets'</span>),</span><br><span class=\"line\">      <span class=\"string\">'components'</span>: path.resolve(__dirname, <span class=\"string\">'./src/components'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js|jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'style!css'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: path.join(<span class=\"string\">'static'</span>, <span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>webpack.config.js</strong>为Webpack的默认配置，我们可以为开发环境和生产环境分别做不同的配置。下面一一介绍每个配置的作用。</p>\n<h3 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h3><p><code>entry</code>是入口配置项，可以是<code>string</code>,<code>Array</code>或者一个<code>Object</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  app: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: <span class=\"string\">'./src/main.js'</span></span><br></pre></td></tr></table></figure>\n<p>如果页面有多个入口可以这样写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [<span class=\"string\">'./src/home.js'</span>, <span class=\"string\">'.src/profile.js'</span>]</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  home: <span class=\"string\">'./src/home.js'</span>,</span><br><span class=\"line\">  profile: <span class=\"string\">'./src/profile.js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h3><p><code>output</code>是输出配置。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">  publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">'[id].[hash].js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>path</em>是文件输出到本地的路径，<em>publicPath</em>是文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，一般用于生产模式，<em>filename</em>是打包后的入口文件名，<em>chunkFilename</em>是每个模块编译后的文件名，其中[hash]是用来唯一标识文件，主要用来防止缓存。</p>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><p>仅仅用来告诉Webpack在哪里存放结果文件,上面例子中，最终的打包文件会放到与当前脚本文件同级目录的dist目录下。即：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello-webpack</span><br><span class=\"line\">  +dist</span><br><span class=\"line\">  -webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"filename\"></a>filename</h5><p>入口文件打包后的名称,<code>[name]</code>对应着入口文件的key值，例如：<code>app.js</code>,这对多入口文件是很有用的，应为入口文件可以有多个，但是filename只能有一个，所以对于上面的多入口，最后就是:<code>home.js</code>,’profile.js’，当然为了体现文件层级关系可以这么写:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename: &apos;js/[name].js&apos;</span><br></pre></td></tr></table></figure></p>\n<p>最后的结果就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——hello-webpack</span><br><span class=\"line\">   |——dist</span><br><span class=\"line\">   |——js</span><br><span class=\"line\">       home.js</span><br><span class=\"line\">       profile.js</span><br><span class=\"line\">    webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"chunkFilename\"><a href=\"#chunkFilename\" class=\"headerlink\" title=\"chunkFilename\"></a>chunkFilename</h5><p>即非入口文件打包后的名称，未被列在entry中，却又需要被打包出来的文件命名配置。一般情况下是不需要这个配置的。比如我们在做异步加载模块时就需要用到了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这个特殊的 require 语法告诉 webpack</span></span><br><span class=\"line\">  <span class=\"comment\">// 自动将编译后的代码分割成不同的块，</span></span><br><span class=\"line\">  <span class=\"comment\">// 这些块将通过 Ajax 请求自动下载。</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h5><p>文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，在开发模式下建议使用相对路径，在生产模式中，如果你的资源文件放在别的服务器上，可以使用服务器的地址。当然你也可以不用配置<code>publicPath</code>，。<br>在项目中我使用了<code>url-loader</code>加载图片，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">      name: path.join('static', 'img/[name].[hash:7].[ext]') # 图片最终的输出路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>main.js</code>中使用了图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Girl from &apos;assets/img/girl.jpg&apos;</span><br></pre></td></tr></table></figure></p>\n<p>那么最终浏览器访问的图片路径就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static/img/girl.7672e53.jpg</span><br></pre></td></tr></table></figure></p>\n<p>所以可以根据开发环境和生产环境配置不同的<code>publicPath</code>。<br>在生产环境中，由于我的资源文件放在项目目录下，所以可以这样配置<code>output</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">  publicPath: <span class=\"string\">'./'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'js/[name].[chunkhash].js'</span>,</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">`js/[id].[chunkhash].js`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么最终打包后的输出目录结构就是这样的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——dist</span><br><span class=\"line\">   |——static</span><br><span class=\"line\">      |——img</span><br><span class=\"line\">         girl.7672e53.jpg</span><br><span class=\"line\">      |——js</span><br><span class=\"line\">         app.js</span><br><span class=\"line\">    index.html</span><br></pre></td></tr></table></figure></p>\n<p>所以通过<code>static/img/girl.7672e53.jpg</code>可以访问到图片。在开发环境下，经过测试，将<code>publicPath</code>设置为’./‘界面是无法加载出来的，所以在开发环境下可以不用设置。</p>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js|jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'style!css'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: path.join(<span class=\"string\">'static'</span>, <span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>由于Webpack本身只能处理JavaScript 模块，如果要处理其他类型的文件，就需要使用loader 进行转换。Loader可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。不同的loader可以将各种类型的文件转换为浏览器能够接受的格式如JS，Stylesheets等等。</p>\n<p>下面一一对这些子参数进行说明：</p>\n<ul>\n<li><code>test</code>参数用来指示当前配置项针对哪些资源，当参数匹配时，就会使用相应的loader。</li>\n<li><code>exclude</code>参数用来剔除掉需要忽略的资源。</li>\n<li><code>include</code>参数用来表示本loader配置仅针对哪些目录/文件，从名称上就可以认为跟<code>exclude</code>作用相反。</li>\n<li><code>loader/loaders</code>参数，用来指示用哪个/哪些loader来处理目标资源，这俩表达的其实是一个意思，只是写法不一样，我个人喜欢将loader写成一行，多个loader间使用!分割，这种形式类似于管道的概念，例如<code>loader: &#39;css?!postcss!less&#39;</code>，可以很明显地看出，目标资源先经less-loader处理过后将结果交给postcss-loader作进一步处理，然后最后再交给css-loader。</li>\n</ul>\n<p>loader本身也是可以配置的，传入不同的参数可以实现不同的功能。以<a href=\"https://github.com/webpack/url-loader\" target=\"_blank\" rel=\"noopener\">url-loader</a>为例，我们配置url-loader使小于10000字节的图片使用DataURL，大于10000字节的图片使用URL，<code>name</code>属性配置输出图片的图片名称，例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'a.png'</span>) =&gt; <span class=\"keyword\">static</span>/a<span class=\"number\">.3445645</span>.png</span><br></pre></td></tr></table></figure></p>\n<p>不同的loader配置参数不一样，具体配置参数可以去官网查看。</p>\n<h4 id=\"loader链\"><a href=\"#loader链\" class=\"headerlink\" title=\"loader链\"></a>loader链</h4><p>多个loader可以链式调用，作用于同一种文件类型。工作链的调用顺序是<em>从右向左</em>，各个loader之间使用”!”分开。<br>以处理css文件为例，我们需要<a href=\"https://github.com/webpack/css-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a>来处理css文件，然后使用<a href=\"https://github.com/webpack/style-loader\" target=\"_blank\" rel=\"noopener\">style-loader</a>将css样式插入到html的<code>style</code>标签中。</p>\n<h3 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h3><p>插件可以完成更多loader不能完成的功能。<br>插件的使用一般是在webpack的配置信息plugins选项中指定。<br>loader是在打包前或打包的过程中作用于单个文件。plugin通常在打包过程结束后，作用于包或者chunk级别。</p>\n<p>以下是一些常用的插件:</p>\n<ol>\n<li><p><a href=\"https://github.com/webpack/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin</a></p>\n<p>ExtractTextPlugin的作用是把各个chunk加载的css代码合并成一个css文件并在页面加载的时候以<code>&lt;link&gt;</code>的形式进行加载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  loaders: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">      loader:ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>,<span class=\"string\">\"css-loader\"</span>) &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ExtractTextPlugin(path.join(<span class=\"string\">'static'</span>, <span class=\"string\">'css/[name].[contenthash].css'</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果想要把CSS放到HTML的style标签中，可以不使用extract-text-webpack-plugin，只要用css-loader和style-loader就可以了。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/ampedandwired/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a></p>\n<p>html-webpack-plugin，是用来生产html的，其中filename是生产的文件路径和名称，template是使用的模板，inject是指将js放在body还是head里。为<code>true</code>会将js放到body里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">  inject: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>这个插件是建议一定要安装的。</p>\n</li>\n<li><p>uglifyJSPlugin</p>\n<p> uglifyJSPlugin是将代码进行压缩的。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">  compress: &#123;</span><br><span class=\"line\">    warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. CommonsChunkPlugin</span><br><span class=\"line\"></span><br><span class=\"line\">  CommonsChunkPlugin是将多个入口文件之间共享的块打包成一个独立的js文件。至此，你只需要在每个页面都加载这个公共代码的js文件，就可以既保持代码的完整性，又不会重复下载公共代码了。</span><br><span class=\"line\">  ```js</span><br><span class=\"line\">  new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;vendor&apos;,</span><br><span class=\"line\">      filename: &apos;[name].[chunkhash].js&apos;,</span><br><span class=\"line\">      minChunks: 4</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>name</code>，给这个包含公共代码的chunk命个名（唯一标识）。</li>\n<li><code>filename</code>，如何命名打包后生产的js文件。</li>\n<li><code>minChunks</code>，公共代码的判断标准：某个js模块被多少个chunk加载了才算是公共代码。</li>\n<li><code>chunks</code>，表示需要在哪些chunk（也可以理解为webpack配置中entry的每一项）里寻找公共代码进行打包。不设置此参数则默认提取范围为所有的chunk。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    <span class=\"string\">'src'</span>: path.resolve(__dirname, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\">    <span class=\"string\">'assets'</span>: path.resolve(__dirname, <span class=\"string\">'./src/assets'</span>),</span><br><span class=\"line\">    <span class=\"string\">'components'</span>: path.resolve(__dirname, <span class=\"string\">'./src/components'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>resolve.extensions</code>是对模块后缀名的简写，配置后，原本是<code>require(&#39;./components/app.jsx&#39;)</code> 可以简写为<code>require(&#39;./components/app&#39;)</code>。</p>\n<p><code>resolve.alias</code>是别名，配置后，比如原本是<code>require(&#39;./src/components/nav.jsx&#39;)</code>可以简写为<code>require(&#39;components/nav.jsx&#39;)</code>。</p>\n<h2 id=\"Webpack中的hash与chunkhash\"><a href=\"#Webpack中的hash与chunkhash\" class=\"headerlink\" title=\"Webpack中的hash与chunkhash\"></a>Webpack中的hash与chunkhash</h2><h3 id=\"hash与chunkhash\"><a href=\"#hash与chunkhash\" class=\"headerlink\" title=\"hash与chunkhash\"></a>hash与chunkhash</h3><p>按照官方的定义<code>hash</code>就是webpack的每一次编译(compilation)所产生的hash值，<code>chunkhash</code>从字面上理解就是每一个<code>chunk</code>的hash值。那么什么时候会产生编译以及<code>chunk</code>又是什么东西？</p>\n<h4 id=\"compilation\"><a href=\"#compilation\" class=\"headerlink\" title=\"compilation\"></a>compilation</h4><p><code>compilation</code>对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。以及在每次执行<code>webpack</code>命令时都会创建一个compilation。也就是说当创建了一个compilation，我们所有需要打包的文件(js,css,img,font等)都会产生相同的hash。</p>\n<p>如果在项目中我们使用hash作为编译输出文件的hash的话，像这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    home: <span class=\"string\">'./src/home.js'</span>,</span><br><span class=\"line\">    profile: <span class=\"string\">'./src/profile.js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'js/[name].[hash].js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在编译后所有的文件名都会使用相同的hash值，这样带来的问题是，上面两个js文件任何一个改动都会影响另外文件的最终文件名。上线后，另外文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。</p>\n<p>那么如何避免这样的问题呢？</p>\n<p>答案就是使用<code>chunkhash</code>。<br>按照上面所说，<code>chunkhash</code>是每一个<code>chunk</code>的hash值，<code>chunk</code>就是模块(webpack中一切皆模块)，<code>chunkhash</code>也就是根据模块内容计算出的hash值。所以某个文件的改动只会影响它本身的hash值，不会影响其他文件。<br>所以可以将上面的filename改为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename: <span class=\"string\">'js/[name].[chunkhash].js'</span></span><br></pre></td></tr></table></figure></p>\n<p>这样的话每个文件的hash值都不相同，上线后无改动的文件不会失去缓存。</p>\n<p>不过使用<code>chunkhash</code>也不能解决所有问题，比如打包<code>css</code>文件。</p>\n<h3 id=\"js与css共用相同chunkhash的解决方案\"><a href=\"#js与css共用相同chunkhash的解决方案\" class=\"headerlink\" title=\"js与css共用相同chunkhash的解决方案\"></a>js与css共用相同chunkhash的解决方案</h3><p>前文提到了webpack的编译理念，webpack将style视为js的一部分，所以在计算<code>chunkhash</code>时，会把所有的js代码和style代码混合在一起计算。所以，不论是修改了js代码还是css代码，整个chunk的内容都改变了，计算所得的chunkhash自然就一样了。</p>\n<p>那么如何解决这种问题呢？</p>\n<h4 id=\"contenthash\"><a href=\"#contenthash\" class=\"headerlink\" title=\"contenthash\"></a>contenthash</h4><p>webpack默认将js/style文件统统编译到一个js文件中，可以借助<a href=\"https://github.com/webpack/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin</a>将style文件单独编译输出。所以我们可以这样配置:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'./dist/css/[name].[contenthash].css'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>contenthash</code>代表的是文本文件内容的hash值，也就是只有style文件的hash值。这样编译输出的js和css文件将会有其独立的hash值。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>在看文章的同时，搭配<a href=\"https://github.com/hujewelz/hello-webpack\" target=\"_blank\" rel=\"noopener\">示例项目</a>会更直观哦，赶紧动起手来，开始入坑Webpack吧:)。</p>\n<p>克隆后，请执行 <code>npm install</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动运行环境</span><br><span class=\"line\">npm run dev </span><br><span class=\"line\">//执行打包</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikh00151u0osn2d18b0/cover.png","excerpt":"<p>在开始学习<code>Webpack</code>之前，请先确保安装了<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.js</a>,建议安装最新版的Node.js。然后就可以使用npm安装Webpack了。你可以将Webpack安装到全局，不过我们通常会把它安装到项目依赖中。</p>","more":"<p>现在进入项目目录，并使用<code>npm init -y</code>初始化一个默认的package.json。打开终端，键入命令:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install webpack --g</span><br><span class=\"line\">//安装到项目依赖中</span><br><span class=\"line\">npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>安装好Webpack依赖后，新建一个webpack.config.js文件，用来配置webpack。不过在配置webpack之前，先安装<code>webpack-dev-server</code>:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install webpack-dev-server --g</span><br><span class=\"line\">//安装到项目依赖中</span><br><span class=\"line\">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p>它将在localhost:8080启动一个express静态资源web服务器，并且会以监听模式自动运行webpack，在浏览器打开<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a>或<a href=\"http://localhost:8080/webpack-dev-server/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/webpack-dev-server/</a>可以浏览项目中的页面和编译后的资源输出，并且通过一个socket.io服务实时监听它们的变化并自动刷新页面。<br>在终端中执行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server --inline --hot</span><br></pre></td></tr></table></figure></p>\n<p>当我们修改了模块的内容后，<code>webpack-dev-server</code>会自动执行打包(打包后的结果会缓存到内存中，所以不能在本地文件中看到打包后的文件)。</p>\n<p><code>inline</code>选项为整个页面添加了”Live Reloading”功能，而<code>hot</code>选项开启了”Hot Module Reloading”功能，这样就会尝试着重载发生变化的组件，而不是整个页面。这样就实现了修改文件，界面就会自动更新了。<br>我们可以在<code>package.json</code>中输入以下内容：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">   \"dev\": \"webpack-dev-server --colors --hot --inline\",</span><br><span class=\"line\">   \"build\": \"webpack --colors --watch\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>这样我们只需要键入<code>npm run dev</code>命令就能执行上面的命令了。</p>\n<p>在这之前，先看看项目的结构以及一个简单的<code>webpack config</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——hello-webpack</span><br><span class=\"line\">   |——src  # 项目源码</span><br><span class=\"line\">      |——assets # 资源文件</span><br><span class=\"line\">         |——img # 图片</span><br><span class=\"line\">         |——css # 样式</span><br><span class=\"line\">      |——component  # 页面组件</span><br><span class=\"line\">      main.js  # 入口文件</span><br><span class=\"line\">   |——static # 静态资源文件</span><br><span class=\"line\">   index.html</span><br><span class=\"line\">   package.json</span><br><span class=\"line\">   webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<p><strong>webpack config.js</strong>：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">''</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'src'</span>: path.resolve(__dirname, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\">      <span class=\"string\">'assets'</span>: path.resolve(__dirname, <span class=\"string\">'./src/assets'</span>),</span><br><span class=\"line\">      <span class=\"string\">'components'</span>: path.resolve(__dirname, <span class=\"string\">'./src/components'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js|jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'style!css'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: path.join(<span class=\"string\">'static'</span>, <span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Webpack配置\"><a href=\"#Webpack配置\" class=\"headerlink\" title=\"Webpack配置\"></a>Webpack配置</h2><p><strong>webpack.config.js</strong>为Webpack的默认配置，我们可以为开发环境和生产环境分别做不同的配置。下面一一介绍每个配置的作用。</p>\n<h3 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h3><p><code>entry</code>是入口配置项，可以是<code>string</code>,<code>Array</code>或者一个<code>Object</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  app: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: <span class=\"string\">'./src/main.js'</span></span><br></pre></td></tr></table></figure>\n<p>如果页面有多个入口可以这样写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [<span class=\"string\">'./src/home.js'</span>, <span class=\"string\">'.src/profile.js'</span>]</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  home: <span class=\"string\">'./src/home.js'</span>,</span><br><span class=\"line\">  profile: <span class=\"string\">'./src/profile.js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h3><p><code>output</code>是输出配置。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">  publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">'[id].[hash].js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>path</em>是文件输出到本地的路径，<em>publicPath</em>是文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，一般用于生产模式，<em>filename</em>是打包后的入口文件名，<em>chunkFilename</em>是每个模块编译后的文件名，其中[hash]是用来唯一标识文件，主要用来防止缓存。</p>\n<h5 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h5><p>仅仅用来告诉Webpack在哪里存放结果文件,上面例子中，最终的打包文件会放到与当前脚本文件同级目录的dist目录下。即：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello-webpack</span><br><span class=\"line\">  +dist</span><br><span class=\"line\">  -webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"filename\"></a>filename</h5><p>入口文件打包后的名称,<code>[name]</code>对应着入口文件的key值，例如：<code>app.js</code>,这对多入口文件是很有用的，应为入口文件可以有多个，但是filename只能有一个，所以对于上面的多入口，最后就是:<code>home.js</code>,’profile.js’，当然为了体现文件层级关系可以这么写:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename: &apos;js/[name].js&apos;</span><br></pre></td></tr></table></figure></p>\n<p>最后的结果就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——hello-webpack</span><br><span class=\"line\">   |——dist</span><br><span class=\"line\">   |——js</span><br><span class=\"line\">       home.js</span><br><span class=\"line\">       profile.js</span><br><span class=\"line\">    webpack.config.js</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"chunkFilename\"><a href=\"#chunkFilename\" class=\"headerlink\" title=\"chunkFilename\"></a>chunkFilename</h5><p>即非入口文件打包后的名称，未被列在entry中，却又需要被打包出来的文件命名配置。一般情况下是不需要这个配置的。比如我们在做异步加载模块时就需要用到了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这个特殊的 require 语法告诉 webpack</span></span><br><span class=\"line\">  <span class=\"comment\">// 自动将编译后的代码分割成不同的块，</span></span><br><span class=\"line\">  <span class=\"comment\">// 这些块将通过 Ajax 请求自动下载。</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h5><p>文件的引用路径，可用来被一些Webpack插件用来处理CSS，HTML文件中的URL，在开发模式下建议使用相对路径，在生产模式中，如果你的资源文件放在别的服务器上，可以使用服务器的地址。当然你也可以不用配置<code>publicPath</code>，。<br>在项目中我使用了<code>url-loader</code>加载图片，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">      name: path.join('static', 'img/[name].[hash:7].[ext]') # 图片最终的输出路径</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>main.js</code>中使用了图片<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Girl from &apos;assets/img/girl.jpg&apos;</span><br></pre></td></tr></table></figure></p>\n<p>那么最终浏览器访问的图片路径就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static/img/girl.7672e53.jpg</span><br></pre></td></tr></table></figure></p>\n<p>所以可以根据开发环境和生产环境配置不同的<code>publicPath</code>。<br>在生产环境中，由于我的资源文件放在项目目录下，所以可以这样配置<code>output</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">  publicPath: <span class=\"string\">'./'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'js/[name].[chunkhash].js'</span>,</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">`js/[id].[chunkhash].js`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么最终打包后的输出目录结构就是这样的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|——dist</span><br><span class=\"line\">   |——static</span><br><span class=\"line\">      |——img</span><br><span class=\"line\">         girl.7672e53.jpg</span><br><span class=\"line\">      |——js</span><br><span class=\"line\">         app.js</span><br><span class=\"line\">    index.html</span><br></pre></td></tr></table></figure></p>\n<p>所以通过<code>static/img/girl.7672e53.jpg</code>可以访问到图片。在开发环境下，经过测试，将<code>publicPath</code>设置为’./‘界面是无法加载出来的，所以在开发环境下可以不用设置。</p>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js|jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'es2015'</span>, <span class=\"string\">'react'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'style!css'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url'</span>,</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: path.join(<span class=\"string\">'static'</span>, <span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>由于Webpack本身只能处理JavaScript 模块，如果要处理其他类型的文件，就需要使用loader 进行转换。Loader可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。不同的loader可以将各种类型的文件转换为浏览器能够接受的格式如JS，Stylesheets等等。</p>\n<p>下面一一对这些子参数进行说明：</p>\n<ul>\n<li><code>test</code>参数用来指示当前配置项针对哪些资源，当参数匹配时，就会使用相应的loader。</li>\n<li><code>exclude</code>参数用来剔除掉需要忽略的资源。</li>\n<li><code>include</code>参数用来表示本loader配置仅针对哪些目录/文件，从名称上就可以认为跟<code>exclude</code>作用相反。</li>\n<li><code>loader/loaders</code>参数，用来指示用哪个/哪些loader来处理目标资源，这俩表达的其实是一个意思，只是写法不一样，我个人喜欢将loader写成一行，多个loader间使用!分割，这种形式类似于管道的概念，例如<code>loader: &#39;css?!postcss!less&#39;</code>，可以很明显地看出，目标资源先经less-loader处理过后将结果交给postcss-loader作进一步处理，然后最后再交给css-loader。</li>\n</ul>\n<p>loader本身也是可以配置的，传入不同的参数可以实现不同的功能。以<a href=\"https://github.com/webpack/url-loader\" target=\"_blank\" rel=\"noopener\">url-loader</a>为例，我们配置url-loader使小于10000字节的图片使用DataURL，大于10000字节的图片使用URL，<code>name</code>属性配置输出图片的图片名称，例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'a.png'</span>) =&gt; <span class=\"keyword\">static</span>/a<span class=\"number\">.3445645</span>.png</span><br></pre></td></tr></table></figure></p>\n<p>不同的loader配置参数不一样，具体配置参数可以去官网查看。</p>\n<h4 id=\"loader链\"><a href=\"#loader链\" class=\"headerlink\" title=\"loader链\"></a>loader链</h4><p>多个loader可以链式调用，作用于同一种文件类型。工作链的调用顺序是<em>从右向左</em>，各个loader之间使用”!”分开。<br>以处理css文件为例，我们需要<a href=\"https://github.com/webpack/css-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a>来处理css文件，然后使用<a href=\"https://github.com/webpack/style-loader\" target=\"_blank\" rel=\"noopener\">style-loader</a>将css样式插入到html的<code>style</code>标签中。</p>\n<h3 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h3><p>插件可以完成更多loader不能完成的功能。<br>插件的使用一般是在webpack的配置信息plugins选项中指定。<br>loader是在打包前或打包的过程中作用于单个文件。plugin通常在打包过程结束后，作用于包或者chunk级别。</p>\n<p>以下是一些常用的插件:</p>\n<ol>\n<li><p><a href=\"https://github.com/webpack/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin</a></p>\n<p>ExtractTextPlugin的作用是把各个chunk加载的css代码合并成一个css文件并在页面加载的时候以<code>&lt;link&gt;</code>的形式进行加载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  loaders: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>, </span><br><span class=\"line\">      loader:ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>,<span class=\"string\">\"css-loader\"</span>) &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ExtractTextPlugin(path.join(<span class=\"string\">'static'</span>, <span class=\"string\">'css/[name].[contenthash].css'</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果想要把CSS放到HTML的style标签中，可以不使用extract-text-webpack-plugin，只要用css-loader和style-loader就可以了。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/ampedandwired/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a></p>\n<p>html-webpack-plugin，是用来生产html的，其中filename是生产的文件路径和名称，template是使用的模板，inject是指将js放在body还是head里。为<code>true</code>会将js放到body里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">  inject: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>这个插件是建议一定要安装的。</p>\n</li>\n<li><p>uglifyJSPlugin</p>\n<p> uglifyJSPlugin是将代码进行压缩的。</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">  compress: &#123;</span><br><span class=\"line\">    warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. CommonsChunkPlugin</span><br><span class=\"line\"></span><br><span class=\"line\">  CommonsChunkPlugin是将多个入口文件之间共享的块打包成一个独立的js文件。至此，你只需要在每个页面都加载这个公共代码的js文件，就可以既保持代码的完整性，又不会重复下载公共代码了。</span><br><span class=\"line\">  ```js</span><br><span class=\"line\">  new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: &apos;vendor&apos;,</span><br><span class=\"line\">      filename: &apos;[name].[chunkhash].js&apos;,</span><br><span class=\"line\">      minChunks: 4</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>name</code>，给这个包含公共代码的chunk命个名（唯一标识）。</li>\n<li><code>filename</code>，如何命名打包后生产的js文件。</li>\n<li><code>minChunks</code>，公共代码的判断标准：某个js模块被多少个chunk加载了才算是公共代码。</li>\n<li><code>chunks</code>，表示需要在哪些chunk（也可以理解为webpack配置中entry的每一项）里寻找公共代码进行打包。不设置此参数则默认提取范围为所有的chunk。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.json'</span>],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    <span class=\"string\">'src'</span>: path.resolve(__dirname, <span class=\"string\">'./src'</span>),</span><br><span class=\"line\">    <span class=\"string\">'assets'</span>: path.resolve(__dirname, <span class=\"string\">'./src/assets'</span>),</span><br><span class=\"line\">    <span class=\"string\">'components'</span>: path.resolve(__dirname, <span class=\"string\">'./src/components'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>resolve.extensions</code>是对模块后缀名的简写，配置后，原本是<code>require(&#39;./components/app.jsx&#39;)</code> 可以简写为<code>require(&#39;./components/app&#39;)</code>。</p>\n<p><code>resolve.alias</code>是别名，配置后，比如原本是<code>require(&#39;./src/components/nav.jsx&#39;)</code>可以简写为<code>require(&#39;components/nav.jsx&#39;)</code>。</p>\n<h2 id=\"Webpack中的hash与chunkhash\"><a href=\"#Webpack中的hash与chunkhash\" class=\"headerlink\" title=\"Webpack中的hash与chunkhash\"></a>Webpack中的hash与chunkhash</h2><h3 id=\"hash与chunkhash\"><a href=\"#hash与chunkhash\" class=\"headerlink\" title=\"hash与chunkhash\"></a>hash与chunkhash</h3><p>按照官方的定义<code>hash</code>就是webpack的每一次编译(compilation)所产生的hash值，<code>chunkhash</code>从字面上理解就是每一个<code>chunk</code>的hash值。那么什么时候会产生编译以及<code>chunk</code>又是什么东西？</p>\n<h4 id=\"compilation\"><a href=\"#compilation\" class=\"headerlink\" title=\"compilation\"></a>compilation</h4><p><code>compilation</code>对象代表某个版本的资源对应的编译进程。当使用Webpack的development中间件时，每次检测到项目文件有改动就会创建一个compilation，进而能够针对改动生产全新的编译文件。以及在每次执行<code>webpack</code>命令时都会创建一个compilation。也就是说当创建了一个compilation，我们所有需要打包的文件(js,css,img,font等)都会产生相同的hash。</p>\n<p>如果在项目中我们使用hash作为编译输出文件的hash的话，像这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    home: <span class=\"string\">'./src/home.js'</span>,</span><br><span class=\"line\">    profile: <span class=\"string\">'./src/profile.js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'js/[name].[hash].js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在编译后所有的文件名都会使用相同的hash值，这样带来的问题是，上面两个js文件任何一个改动都会影响另外文件的最终文件名。上线后，另外文件的浏览器缓存也全部失效。这肯定不是我们想要的结果。</p>\n<p>那么如何避免这样的问题呢？</p>\n<p>答案就是使用<code>chunkhash</code>。<br>按照上面所说，<code>chunkhash</code>是每一个<code>chunk</code>的hash值，<code>chunk</code>就是模块(webpack中一切皆模块)，<code>chunkhash</code>也就是根据模块内容计算出的hash值。所以某个文件的改动只会影响它本身的hash值，不会影响其他文件。<br>所以可以将上面的filename改为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename: <span class=\"string\">'js/[name].[chunkhash].js'</span></span><br></pre></td></tr></table></figure></p>\n<p>这样的话每个文件的hash值都不相同，上线后无改动的文件不会失去缓存。</p>\n<p>不过使用<code>chunkhash</code>也不能解决所有问题，比如打包<code>css</code>文件。</p>\n<h3 id=\"js与css共用相同chunkhash的解决方案\"><a href=\"#js与css共用相同chunkhash的解决方案\" class=\"headerlink\" title=\"js与css共用相同chunkhash的解决方案\"></a>js与css共用相同chunkhash的解决方案</h3><p>前文提到了webpack的编译理念，webpack将style视为js的一部分，所以在计算<code>chunkhash</code>时，会把所有的js代码和style代码混合在一起计算。所以，不论是修改了js代码还是css代码，整个chunk的内容都改变了，计算所得的chunkhash自然就一样了。</p>\n<p>那么如何解决这种问题呢？</p>\n<h4 id=\"contenthash\"><a href=\"#contenthash\" class=\"headerlink\" title=\"contenthash\"></a>contenthash</h4><p>webpack默认将js/style文件统统编译到一个js文件中，可以借助<a href=\"https://github.com/webpack/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">extract-text-webpack-plugin</a>将style文件单独编译输出。所以我们可以这样配置:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'./dist/css/[name].[contenthash].css'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>contenthash</code>代表的是文本文件内容的hash值，也就是只有style文件的hash值。这样编译输出的js和css文件将会有其独立的hash值。</p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p>在看文章的同时，搭配<a href=\"https://github.com/hujewelz/hello-webpack\" target=\"_blank\" rel=\"noopener\">示例项目</a>会更直观哦，赶紧动起手来，开始入坑Webpack吧:)。</p>\n<p>克隆后，请执行 <code>npm install</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动运行环境</span><br><span class=\"line\">npm run dev </span><br><span class=\"line\">//执行打包</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>"},{"title":"初识Core Data","date":"2015-09-27T06:40:29.000Z","_content":"Core Data 是一个强大的对象图形化管理和对象持久化的框架，这一框架在 iOS 和 OS X 系统中已经存在很多年了。<!-- more --> 2005年的四月份，Apple 发布了 OS X 10.4，正是在这个版本中 Core Data 框架发布了。Core Data 可以很方便地将 `OC` 对象存储到数据库中，也可以将数据库中的数据转化为 `OC` 对象，在这个过程中不需要我们手动编写任何 `SQL` 语句，Core Data 会帮我们完成。对于不喜欢 `SQL` 语句的同学来说，使用 Core Data 倒是个不错的选择。即使你不愿使用 `Core Data` ，作为一个合格的 iOS 开发者， 你也应该熟悉 Core Data。\n\n\n\n## 组成部分\n在 Core Data 中有几个比较重要的类：\n\n* **NSManagedObjectContext**\n    托管对象上下文，我们进行数据操作时，大多都是和它打交道。我们每一个托管对象都存在于一个 context 内。Core Data 支持多个 contexts，不过对于更高级的使用情况才用。\n* **NSManagedObjectModel**\n    托管对象模型，我们一般通过 `.xcdatamodeid`文件来加载一个托管对象模型，也可以通过代码创建。你可以把它理解为一个数据库。\n* **NSPersistentStoreCoordinator**\n    持久化存储协调器（persistent store coordinator），它将对象图管理部分和持久化部分捆绑在一起，当它们两者中的任何一部分需要和另一部分交流时，这便需要持久化存储协调器来调节了。\n* **NSPersistentStore**\n    持久化存储（persistent store），每个持久化存储协调器都有一个属于自己的持久化存储。它在文件系统中与 SQLite 数据库交互。为了支持更高级的设置，Core Data 可以将多个 stores 附属于同一个持久化存储协调器，并且除了存储 SQL 格式外，还有很多存储类型可供选择。\n* **NSManagedObject**\n    托管对象类（Entity），所有 Core Data 中的托管对象都必须继承该类，根据实体创建托管对象类文件。\n\n下图很清晰地表现了它们之间的关系：\n\n![](https://objccn.io/images/issues/issue-4/stack-complex.png)\n\n当所有的组件都捆绑到一起的时候，我们把它称作 Core Data 堆栈，这个堆栈有两个主要部分。一部分是关于对象图管理，这正是我们需要很好掌握的那一部分，并且知道怎么使用。第二部分是关于持久化，也就是数据如何存储到磁盘中。持久化存储协调器（persistent store coordinator）刚好位于堆栈中间。这样很好的将两部分实现了分离，我们就不用关心存储的实现细节。\n\n## 创建 Core Data 堆栈\n创建一个 Core Data 堆栈最方便快捷的方式是在我们创建项目时选择 `Use Core Data` 复选框，这样创建出来的工程系统会默认生成一些CoreData的代码以及一个.xcdatamodeld后缀的模型文件。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227154154030.png?687x133_130)\n\n不过我建议不要这么做，因为 Xcode 会把自动生成的部分代码放在AppDelegate中，我们应该把这部分代码单独抽离出去，放在专门的类或模块来管理 Core Data 相关的逻辑。\n\n### 构建模型文件\n使用 Core Data 的第一步是创建后缀为 `.xcdatamodeld`的模型文件，使用快捷键 Command + N，选择 Core Data -> Data Model -> Next，完成模型文件的创建。创建完成后，点击底部 `Add Entity` 按钮，来添加一个实体，命名为 `User`。\n\n添加 `User` 实体后，会发现一个实体对应着三部分内容：Attributes、Relationships、Fetched Properties，分别对应着属性、关联关系、获取操作。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227155859067.png?1138x620_130)\n\n点击 Attributes 下面的加号按钮可以给实体添加属性。\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227160223054.png?921x132_130)\n\n### 设置堆栈\n我们使用 `initWithConcurrencyType:` 为主队列创建一个 managed object context，在有些代码中，你可能见到 `[[NSManagedObjectContext alloc] init]`。不过最好使用 `initWithConcurrencyType: `初始化，以明确你是使用基于队列的并发模型。\n\n```objectivc-c\n- (NSManagedObjectContext *)managedObjectContext {\n  if (_managedObjectContext == nil) {\n    _managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];\n    _managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator;\n  }\n  return _managedObjectContext;\n}\n```\n在创建 managed object context 时我们给它设置了一个持久化存储协调器\n```\n- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {\n  if (_persistentStoreCoordinator == nil) {\n    NSURL *path = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@\"test.sqlite\"];\n    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.objectModel];\n    NSError *error = nil;\n    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:path options:nil error:&error]) {\n      NSLog(@\"error: %@\", error.localizedDescription);\n    }\n  }\n  return _persistentStoreCoordinator;\n}\n\n- (NSManagedObjectModel *)objectModel {\n  if (_objectModel == nil) {\n    NSURL *momdURL = [[NSBundle mainBundle] URLForResource:@\"coredata\" withExtension:@\"momd\"];\n    _objectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:momdURL];\n  }\n  return _objectModel;\n}\n```\n我们通过一个托管对象模型创建了一个持久化存储协调器，并使用 `addPersistentStoreWithType: configuration: URL: options: error:` 关联了数据库的部分，关联本地数据库后会返回一个 `NSPersistentStore` 对象，这个对象负责具体持久化存储的实现。可以多次调用该方法添加多个持久化存储对象。\n\n一个持久化存储协调器有四种可选的持久化存储方案，用得最多的是 SQLite 的方式。其中Binary和XML这两种方式，在进行数据操作时，需要将整个文件加载到内存中，这样对内存的消耗是很大的。\n\n* **NSSQLiteStoreType：**SQLite数据库\n* **NSXMLStoreType：**XML文件\n* **NSBinaryStoreType：**二进制文件\n* **NSInMemoryStoreType：**直接存储在内存中\n\n我在一个单独的类中，完成了以上所有操作，并添加了一个 `saveContext` 方法，方便在其他类中调用。\n```objectivc-c\n@interface DBHelper : NSObject\n\n+ (instancetype)sharedInstance;\n\n@property (nonatomic, strong, readonly) NSManagedObjectContext *managedObjectContext;\n@property (nonatomic, strong, readonly) NSManagedObjectModel *objectModel;\n@property (nonatomic, strong, readonly) NSPersistentStoreCoordinator *persistentStoreCoordinator;\n\n- (void)saveContext;\n\n@end\n```\n### 创建托管对象\n创建实体后，就可以根据对应的实体，生成开发中使用的基于 NSManagedObject 类的托管对象类文件。使用快捷键 Command + N，选择 Core Data -> NSManagerObject subclass -> Next，选择模型文件 -> 选择实体，完成模型文件的创建。\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227162725013.png?714x506_130)\n\n## 操作数据\n### 插入数据\n在模型类中可以加入一个类方法来将新的对象插入到 managed object 上下文中，并使用 `saveContext` 将数据保存到SQLite数据库中：\n```objectivc-c\nUser *user = [NSEntityDescription insertNewObjectForEntityForName:@\"User\" inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];\nuser.name = @\"张三\";\nuser.age = @22;\n[[DBHelper sharedInstance] saveContext];\n```\nCore Data 创建新对象的 API 并不是非常的直观，我们可以以一种更加优雅的方式来实现同样的功能：\n```objectivc-c\n+ (NSString *)entityName{\n  return NSStringFromClass(self);\n}\n\n+ (instancetype)insertNewObjectForEntity {\n  return [NSEntityDescription insertNewObjectForEntityForName:[self entityName]\n                                       inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];\n}\n\n- (void)save {\n  [[DBHelper sharedInstance] saveContext];\n}\n```\n现在保存一个对象就简单多了：\n```objectivc-c\nUser *user = [User insertNewObjectForEntity];\nuser.name = @\"李四\";\nuser.age = @22;\n[user save];\n```\n### 查询数据\n我们只需要创建一个 `NSFetchRequest`对象，然后调用 managed object context 的 `executeFetchRequest:` 方法返回查询结果集合。\n\n```objectivc-c\nNSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"User\"];\n  \nNSError *error = nil;\nNSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&error];\nif (error) {\n    NSLog(@\"error: %@\", error.localizedDescription);\n    return;\n}\n[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSLog(@\"name: %@, age: %zd\", obj.name, obj.age.integerValue);\n}];\n```\n我们通过给 `request` 设置一些条件，查询我们想要的数据：\n```\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name = %@\", @\"张三\"];\nrequest.predicate = predicate;\n```\n### 修改数据\n修改数据很简单，我们只要根据条件查询出数据后，修改对象的属性后，保存数据即可：\n```objectivc-c\nNSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"User\"];\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name=%@\", @\"张三\"];\nrequest.predicate = predicate;\n  \nNSError *error = nil;\nNSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&error];\nif (error) {\n    NSLog(@\"error: %@\", error.localizedDescription);\n    return;\n}\n[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    obj.age = @33;\n}];\n  \n[[DBHelper sharedInstance] saveContext];\n```\n\n### 删除数据\n删除数据跟修改数据几乎一模一样，唯一的区别就是查询出数据后，调用 managed object context 的 `deleteObject:` 方法来删除数据：\n```objectivc-c\nNSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"User\"];\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name=%@\", @\"张三\"];\nrequest.predicate = predicate;\n  \nNSError *error = nil;\nNSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&error];\n if (error) {\n    NSLog(@\"error: %@\", error.localizedDescription);\n    return;\n}\n\n\n[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    [[DBHelper sharedInstance].managedObjectContext deleteObject:obj];\n }];\n  \n[[DBHelper sharedInstance] saveContext];\n```\n## 总结\n很多人，特别是初学者都认为 Core Data 很难，所以尽量去避免在项目中使用它。其实去了解后发现其实并不是很复杂。像上面的增删改查操作，看上去大体流程都差不多，都是一些最基础的简单操作。要想更深入地了解 Core Data 可以去网上看高级教程。\n\n\n","source":"_posts/初识Core-Data.md","raw":"---\ntitle: 初识Core Data\ndate: 2015-09-27 14:40:29\ntags: \n  - iOS \n  - Core Data\ncategory: iOS\n---\nCore Data 是一个强大的对象图形化管理和对象持久化的框架，这一框架在 iOS 和 OS X 系统中已经存在很多年了。<!-- more --> 2005年的四月份，Apple 发布了 OS X 10.4，正是在这个版本中 Core Data 框架发布了。Core Data 可以很方便地将 `OC` 对象存储到数据库中，也可以将数据库中的数据转化为 `OC` 对象，在这个过程中不需要我们手动编写任何 `SQL` 语句，Core Data 会帮我们完成。对于不喜欢 `SQL` 语句的同学来说，使用 Core Data 倒是个不错的选择。即使你不愿使用 `Core Data` ，作为一个合格的 iOS 开发者， 你也应该熟悉 Core Data。\n\n\n\n## 组成部分\n在 Core Data 中有几个比较重要的类：\n\n* **NSManagedObjectContext**\n    托管对象上下文，我们进行数据操作时，大多都是和它打交道。我们每一个托管对象都存在于一个 context 内。Core Data 支持多个 contexts，不过对于更高级的使用情况才用。\n* **NSManagedObjectModel**\n    托管对象模型，我们一般通过 `.xcdatamodeid`文件来加载一个托管对象模型，也可以通过代码创建。你可以把它理解为一个数据库。\n* **NSPersistentStoreCoordinator**\n    持久化存储协调器（persistent store coordinator），它将对象图管理部分和持久化部分捆绑在一起，当它们两者中的任何一部分需要和另一部分交流时，这便需要持久化存储协调器来调节了。\n* **NSPersistentStore**\n    持久化存储（persistent store），每个持久化存储协调器都有一个属于自己的持久化存储。它在文件系统中与 SQLite 数据库交互。为了支持更高级的设置，Core Data 可以将多个 stores 附属于同一个持久化存储协调器，并且除了存储 SQL 格式外，还有很多存储类型可供选择。\n* **NSManagedObject**\n    托管对象类（Entity），所有 Core Data 中的托管对象都必须继承该类，根据实体创建托管对象类文件。\n\n下图很清晰地表现了它们之间的关系：\n\n![](https://objccn.io/images/issues/issue-4/stack-complex.png)\n\n当所有的组件都捆绑到一起的时候，我们把它称作 Core Data 堆栈，这个堆栈有两个主要部分。一部分是关于对象图管理，这正是我们需要很好掌握的那一部分，并且知道怎么使用。第二部分是关于持久化，也就是数据如何存储到磁盘中。持久化存储协调器（persistent store coordinator）刚好位于堆栈中间。这样很好的将两部分实现了分离，我们就不用关心存储的实现细节。\n\n## 创建 Core Data 堆栈\n创建一个 Core Data 堆栈最方便快捷的方式是在我们创建项目时选择 `Use Core Data` 复选框，这样创建出来的工程系统会默认生成一些CoreData的代码以及一个.xcdatamodeld后缀的模型文件。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227154154030.png?687x133_130)\n\n不过我建议不要这么做，因为 Xcode 会把自动生成的部分代码放在AppDelegate中，我们应该把这部分代码单独抽离出去，放在专门的类或模块来管理 Core Data 相关的逻辑。\n\n### 构建模型文件\n使用 Core Data 的第一步是创建后缀为 `.xcdatamodeld`的模型文件，使用快捷键 Command + N，选择 Core Data -> Data Model -> Next，完成模型文件的创建。创建完成后，点击底部 `Add Entity` 按钮，来添加一个实体，命名为 `User`。\n\n添加 `User` 实体后，会发现一个实体对应着三部分内容：Attributes、Relationships、Fetched Properties，分别对应着属性、关联关系、获取操作。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227155859067.png?1138x620_130)\n\n点击 Attributes 下面的加号按钮可以给实体添加属性。\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227160223054.png?921x132_130)\n\n### 设置堆栈\n我们使用 `initWithConcurrencyType:` 为主队列创建一个 managed object context，在有些代码中，你可能见到 `[[NSManagedObjectContext alloc] init]`。不过最好使用 `initWithConcurrencyType: `初始化，以明确你是使用基于队列的并发模型。\n\n```objectivc-c\n- (NSManagedObjectContext *)managedObjectContext {\n  if (_managedObjectContext == nil) {\n    _managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];\n    _managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator;\n  }\n  return _managedObjectContext;\n}\n```\n在创建 managed object context 时我们给它设置了一个持久化存储协调器\n```\n- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {\n  if (_persistentStoreCoordinator == nil) {\n    NSURL *path = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@\"test.sqlite\"];\n    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.objectModel];\n    NSError *error = nil;\n    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:path options:nil error:&error]) {\n      NSLog(@\"error: %@\", error.localizedDescription);\n    }\n  }\n  return _persistentStoreCoordinator;\n}\n\n- (NSManagedObjectModel *)objectModel {\n  if (_objectModel == nil) {\n    NSURL *momdURL = [[NSBundle mainBundle] URLForResource:@\"coredata\" withExtension:@\"momd\"];\n    _objectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:momdURL];\n  }\n  return _objectModel;\n}\n```\n我们通过一个托管对象模型创建了一个持久化存储协调器，并使用 `addPersistentStoreWithType: configuration: URL: options: error:` 关联了数据库的部分，关联本地数据库后会返回一个 `NSPersistentStore` 对象，这个对象负责具体持久化存储的实现。可以多次调用该方法添加多个持久化存储对象。\n\n一个持久化存储协调器有四种可选的持久化存储方案，用得最多的是 SQLite 的方式。其中Binary和XML这两种方式，在进行数据操作时，需要将整个文件加载到内存中，这样对内存的消耗是很大的。\n\n* **NSSQLiteStoreType：**SQLite数据库\n* **NSXMLStoreType：**XML文件\n* **NSBinaryStoreType：**二进制文件\n* **NSInMemoryStoreType：**直接存储在内存中\n\n我在一个单独的类中，完成了以上所有操作，并添加了一个 `saveContext` 方法，方便在其他类中调用。\n```objectivc-c\n@interface DBHelper : NSObject\n\n+ (instancetype)sharedInstance;\n\n@property (nonatomic, strong, readonly) NSManagedObjectContext *managedObjectContext;\n@property (nonatomic, strong, readonly) NSManagedObjectModel *objectModel;\n@property (nonatomic, strong, readonly) NSPersistentStoreCoordinator *persistentStoreCoordinator;\n\n- (void)saveContext;\n\n@end\n```\n### 创建托管对象\n创建实体后，就可以根据对应的实体，生成开发中使用的基于 NSManagedObject 类的托管对象类文件。使用快捷键 Command + N，选择 Core Data -> NSManagerObject subclass -> Next，选择模型文件 -> 选择实体，完成模型文件的创建。\n![](http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227162725013.png?714x506_130)\n\n## 操作数据\n### 插入数据\n在模型类中可以加入一个类方法来将新的对象插入到 managed object 上下文中，并使用 `saveContext` 将数据保存到SQLite数据库中：\n```objectivc-c\nUser *user = [NSEntityDescription insertNewObjectForEntityForName:@\"User\" inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];\nuser.name = @\"张三\";\nuser.age = @22;\n[[DBHelper sharedInstance] saveContext];\n```\nCore Data 创建新对象的 API 并不是非常的直观，我们可以以一种更加优雅的方式来实现同样的功能：\n```objectivc-c\n+ (NSString *)entityName{\n  return NSStringFromClass(self);\n}\n\n+ (instancetype)insertNewObjectForEntity {\n  return [NSEntityDescription insertNewObjectForEntityForName:[self entityName]\n                                       inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];\n}\n\n- (void)save {\n  [[DBHelper sharedInstance] saveContext];\n}\n```\n现在保存一个对象就简单多了：\n```objectivc-c\nUser *user = [User insertNewObjectForEntity];\nuser.name = @\"李四\";\nuser.age = @22;\n[user save];\n```\n### 查询数据\n我们只需要创建一个 `NSFetchRequest`对象，然后调用 managed object context 的 `executeFetchRequest:` 方法返回查询结果集合。\n\n```objectivc-c\nNSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"User\"];\n  \nNSError *error = nil;\nNSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&error];\nif (error) {\n    NSLog(@\"error: %@\", error.localizedDescription);\n    return;\n}\n[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    NSLog(@\"name: %@, age: %zd\", obj.name, obj.age.integerValue);\n}];\n```\n我们通过给 `request` 设置一些条件，查询我们想要的数据：\n```\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name = %@\", @\"张三\"];\nrequest.predicate = predicate;\n```\n### 修改数据\n修改数据很简单，我们只要根据条件查询出数据后，修改对象的属性后，保存数据即可：\n```objectivc-c\nNSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"User\"];\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name=%@\", @\"张三\"];\nrequest.predicate = predicate;\n  \nNSError *error = nil;\nNSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&error];\nif (error) {\n    NSLog(@\"error: %@\", error.localizedDescription);\n    return;\n}\n[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    obj.age = @33;\n}];\n  \n[[DBHelper sharedInstance] saveContext];\n```\n\n### 删除数据\n删除数据跟修改数据几乎一模一样，唯一的区别就是查询出数据后，调用 managed object context 的 `deleteObject:` 方法来删除数据：\n```objectivc-c\nNSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"User\"];\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name=%@\", @\"张三\"];\nrequest.predicate = predicate;\n  \nNSError *error = nil;\nNSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&error];\n if (error) {\n    NSLog(@\"error: %@\", error.localizedDescription);\n    return;\n}\n\n\n[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n    [[DBHelper sharedInstance].managedObjectContext deleteObject:obj];\n }];\n  \n[[DBHelper sharedInstance] saveContext];\n```\n## 总结\n很多人，特别是初学者都认为 Core Data 很难，所以尽量去避免在项目中使用它。其实去了解后发现其实并不是很复杂。像上面的增删改查操作，看上去大体流程都差不多，都是一些最基础的简单操作。要想更深入地了解 Core Data 可以去网上看高级教程。\n\n\n","slug":"初识Core-Data","published":1,"updated":"2018-05-30T03:37:14.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6ziki00181u0ol2giduv5","content":"<p>Core Data 是一个强大的对象图形化管理和对象持久化的框架，这一框架在 iOS 和 OS X 系统中已经存在很多年了。<a id=\"more\"></a> 2005年的四月份，Apple 发布了 OS X 10.4，正是在这个版本中 Core Data 框架发布了。Core Data 可以很方便地将 <code>OC</code> 对象存储到数据库中，也可以将数据库中的数据转化为 <code>OC</code> 对象，在这个过程中不需要我们手动编写任何 <code>SQL</code> 语句，Core Data 会帮我们完成。对于不喜欢 <code>SQL</code> 语句的同学来说，使用 Core Data 倒是个不错的选择。即使你不愿使用 <code>Core Data</code> ，作为一个合格的 iOS 开发者， 你也应该熟悉 Core Data。</p>\n<h2 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h2><p>在 Core Data 中有几个比较重要的类：</p>\n<ul>\n<li><strong>NSManagedObjectContext</strong><br>  托管对象上下文，我们进行数据操作时，大多都是和它打交道。我们每一个托管对象都存在于一个 context 内。Core Data 支持多个 contexts，不过对于更高级的使用情况才用。</li>\n<li><strong>NSManagedObjectModel</strong><br>  托管对象模型，我们一般通过 <code>.xcdatamodeid</code>文件来加载一个托管对象模型，也可以通过代码创建。你可以把它理解为一个数据库。</li>\n<li><strong>NSPersistentStoreCoordinator</strong><br>  持久化存储协调器（persistent store coordinator），它将对象图管理部分和持久化部分捆绑在一起，当它们两者中的任何一部分需要和另一部分交流时，这便需要持久化存储协调器来调节了。</li>\n<li><strong>NSPersistentStore</strong><br>  持久化存储（persistent store），每个持久化存储协调器都有一个属于自己的持久化存储。它在文件系统中与 SQLite 数据库交互。为了支持更高级的设置，Core Data 可以将多个 stores 附属于同一个持久化存储协调器，并且除了存储 SQL 格式外，还有很多存储类型可供选择。</li>\n<li><strong>NSManagedObject</strong><br>  托管对象类（Entity），所有 Core Data 中的托管对象都必须继承该类，根据实体创建托管对象类文件。</li>\n</ul>\n<p>下图很清晰地表现了它们之间的关系：</p>\n<p><img src=\"https://objccn.io/images/issues/issue-4/stack-complex.png\" alt=\"\"></p>\n<p>当所有的组件都捆绑到一起的时候，我们把它称作 Core Data 堆栈，这个堆栈有两个主要部分。一部分是关于对象图管理，这正是我们需要很好掌握的那一部分，并且知道怎么使用。第二部分是关于持久化，也就是数据如何存储到磁盘中。持久化存储协调器（persistent store coordinator）刚好位于堆栈中间。这样很好的将两部分实现了分离，我们就不用关心存储的实现细节。</p>\n<h2 id=\"创建-Core-Data-堆栈\"><a href=\"#创建-Core-Data-堆栈\" class=\"headerlink\" title=\"创建 Core Data 堆栈\"></a>创建 Core Data 堆栈</h2><p>创建一个 Core Data 堆栈最方便快捷的方式是在我们创建项目时选择 <code>Use Core Data</code> 复选框，这样创建出来的工程系统会默认生成一些CoreData的代码以及一个.xcdatamodeld后缀的模型文件。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227154154030.png?687x133_130\" alt=\"\"></p>\n<p>不过我建议不要这么做，因为 Xcode 会把自动生成的部分代码放在AppDelegate中，我们应该把这部分代码单独抽离出去，放在专门的类或模块来管理 Core Data 相关的逻辑。</p>\n<h3 id=\"构建模型文件\"><a href=\"#构建模型文件\" class=\"headerlink\" title=\"构建模型文件\"></a>构建模型文件</h3><p>使用 Core Data 的第一步是创建后缀为 <code>.xcdatamodeld</code>的模型文件，使用快捷键 Command + N，选择 Core Data -&gt; Data Model -&gt; Next，完成模型文件的创建。创建完成后，点击底部 <code>Add Entity</code> 按钮，来添加一个实体，命名为 <code>User</code>。</p>\n<p>添加 <code>User</code> 实体后，会发现一个实体对应着三部分内容：Attributes、Relationships、Fetched Properties，分别对应着属性、关联关系、获取操作。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227155859067.png?1138x620_130\" alt=\"\"></p>\n<p>点击 Attributes 下面的加号按钮可以给实体添加属性。<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227160223054.png?921x132_130\" alt=\"\"></p>\n<h3 id=\"设置堆栈\"><a href=\"#设置堆栈\" class=\"headerlink\" title=\"设置堆栈\"></a>设置堆栈</h3><p>我们使用 <code>initWithConcurrencyType:</code> 为主队列创建一个 managed object context，在有些代码中，你可能见到 <code>[[NSManagedObjectContext alloc] init]</code>。不过最好使用 <code>initWithConcurrencyType:</code>初始化，以明确你是使用基于队列的并发模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSManagedObjectContext *)managedObjectContext &#123;</span><br><span class=\"line\">  if (_managedObjectContext == nil) &#123;</span><br><span class=\"line\">    _managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];</span><br><span class=\"line\">    _managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _managedObjectContext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建 managed object context 时我们给它设置了一个持久化存储协调器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSPersistentStoreCoordinator *)persistentStoreCoordinator &#123;</span><br><span class=\"line\">  if (_persistentStoreCoordinator == nil) &#123;</span><br><span class=\"line\">    NSURL *path = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@&quot;test.sqlite&quot;];</span><br><span class=\"line\">    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.objectModel];</span><br><span class=\"line\">    NSError *error = nil;</span><br><span class=\"line\">    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:path options:nil error:&amp;error]) &#123;</span><br><span class=\"line\">      NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _persistentStoreCoordinator;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSManagedObjectModel *)objectModel &#123;</span><br><span class=\"line\">  if (_objectModel == nil) &#123;</span><br><span class=\"line\">    NSURL *momdURL = [[NSBundle mainBundle] URLForResource:@&quot;coredata&quot; withExtension:@&quot;momd&quot;];</span><br><span class=\"line\">    _objectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:momdURL];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _objectModel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们通过一个托管对象模型创建了一个持久化存储协调器，并使用 <code>addPersistentStoreWithType: configuration: URL: options: error:</code> 关联了数据库的部分，关联本地数据库后会返回一个 <code>NSPersistentStore</code> 对象，这个对象负责具体持久化存储的实现。可以多次调用该方法添加多个持久化存储对象。</p>\n<p>一个持久化存储协调器有四种可选的持久化存储方案，用得最多的是 SQLite 的方式。其中Binary和XML这两种方式，在进行数据操作时，需要将整个文件加载到内存中，这样对内存的消耗是很大的。</p>\n<ul>\n<li><strong>NSSQLiteStoreType：</strong>SQLite数据库</li>\n<li><strong>NSXMLStoreType：</strong>XML文件</li>\n<li><strong>NSBinaryStoreType：</strong>二进制文件</li>\n<li><strong>NSInMemoryStoreType：</strong>直接存储在内存中</li>\n</ul>\n<p>我在一个单独的类中，完成了以上所有操作，并添加了一个 <code>saveContext</code> 方法，方便在其他类中调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface DBHelper : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)sharedInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong, readonly) NSManagedObjectContext *managedObjectContext;</span><br><span class=\"line\">@property (nonatomic, strong, readonly) NSManagedObjectModel *objectModel;</span><br><span class=\"line\">@property (nonatomic, strong, readonly) NSPersistentStoreCoordinator *persistentStoreCoordinator;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)saveContext;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建托管对象\"><a href=\"#创建托管对象\" class=\"headerlink\" title=\"创建托管对象\"></a>创建托管对象</h3><p>创建实体后，就可以根据对应的实体，生成开发中使用的基于 NSManagedObject 类的托管对象类文件。使用快捷键 Command + N，选择 Core Data -&gt; NSManagerObject subclass -&gt; Next，选择模型文件 -&gt; 选择实体，完成模型文件的创建。<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227162725013.png?714x506_130\" alt=\"\"></p>\n<h2 id=\"操作数据\"><a href=\"#操作数据\" class=\"headerlink\" title=\"操作数据\"></a>操作数据</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>在模型类中可以加入一个类方法来将新的对象插入到 managed object 上下文中，并使用 <code>saveContext</code> 将数据保存到SQLite数据库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User *user = [NSEntityDescription insertNewObjectForEntityForName:@&quot;User&quot; inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];</span><br><span class=\"line\">user.name = @&quot;张三&quot;;</span><br><span class=\"line\">user.age = @22;</span><br><span class=\"line\">[[DBHelper sharedInstance] saveContext];</span><br></pre></td></tr></table></figure></p>\n<p>Core Data 创建新对象的 API 并不是非常的直观，我们可以以一种更加优雅的方式来实现同样的功能：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (NSString *)entityName&#123;</span><br><span class=\"line\">  return NSStringFromClass(self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)insertNewObjectForEntity &#123;</span><br><span class=\"line\">  return [NSEntityDescription insertNewObjectForEntityForName:[self entityName]</span><br><span class=\"line\">                                       inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)save &#123;</span><br><span class=\"line\">  [[DBHelper sharedInstance] saveContext];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在保存一个对象就简单多了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User *user = [User insertNewObjectForEntity];</span><br><span class=\"line\">user.name = @&quot;李四&quot;;</span><br><span class=\"line\">user.age = @22;</span><br><span class=\"line\">[user save];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p>我们只需要创建一个 <code>NSFetchRequest</code>对象，然后调用 managed object context 的 <code>executeFetchRequest:</code> 方法返回查询结果集合。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class=\"line\">  </span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">NSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&amp;error];</span><br><span class=\"line\">if (error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">    NSLog(@&quot;name: %@, age: %zd&quot;, obj.name, obj.age.integerValue);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>我们通过给 <code>request</code> 设置一些条件，查询我们想要的数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;name = %@&quot;, @&quot;张三&quot;];</span><br><span class=\"line\">request.predicate = predicate;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p>修改数据很简单，我们只要根据条件查询出数据后，修改对象的属性后，保存数据即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class=\"line\">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;name=%@&quot;, @&quot;张三&quot;];</span><br><span class=\"line\">request.predicate = predicate;</span><br><span class=\"line\">  </span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">NSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&amp;error];</span><br><span class=\"line\">if (error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">    obj.age = @33;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[[DBHelper sharedInstance] saveContext];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>删除数据跟修改数据几乎一模一样，唯一的区别就是查询出数据后，调用 managed object context 的 <code>deleteObject:</code> 方法来删除数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class=\"line\">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;name=%@&quot;, @&quot;张三&quot;];</span><br><span class=\"line\">request.predicate = predicate;</span><br><span class=\"line\">  </span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">NSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&amp;error];</span><br><span class=\"line\"> if (error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">    [[DBHelper sharedInstance].managedObjectContext deleteObject:obj];</span><br><span class=\"line\"> &#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[[DBHelper sharedInstance] saveContext];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>很多人，特别是初学者都认为 Core Data 很难，所以尽量去避免在项目中使用它。其实去了解后发现其实并不是很复杂。像上面的增删改查操作，看上去大体流程都差不多，都是一些最基础的简单操作。要想更深入地了解 Core Data 可以去网上看高级教程。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Core Data 是一个强大的对象图形化管理和对象持久化的框架，这一框架在 iOS 和 OS X 系统中已经存在很多年了。","more":"2005年的四月份，Apple 发布了 OS X 10.4，正是在这个版本中 Core Data 框架发布了。Core Data 可以很方便地将 <code>OC</code> 对象存储到数据库中，也可以将数据库中的数据转化为 <code>OC</code> 对象，在这个过程中不需要我们手动编写任何 <code>SQL</code> 语句，Core Data 会帮我们完成。对于不喜欢 <code>SQL</code> 语句的同学来说，使用 Core Data 倒是个不错的选择。即使你不愿使用 <code>Core Data</code> ，作为一个合格的 iOS 开发者， 你也应该熟悉 Core Data。</p>\n<h2 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h2><p>在 Core Data 中有几个比较重要的类：</p>\n<ul>\n<li><strong>NSManagedObjectContext</strong><br>  托管对象上下文，我们进行数据操作时，大多都是和它打交道。我们每一个托管对象都存在于一个 context 内。Core Data 支持多个 contexts，不过对于更高级的使用情况才用。</li>\n<li><strong>NSManagedObjectModel</strong><br>  托管对象模型，我们一般通过 <code>.xcdatamodeid</code>文件来加载一个托管对象模型，也可以通过代码创建。你可以把它理解为一个数据库。</li>\n<li><strong>NSPersistentStoreCoordinator</strong><br>  持久化存储协调器（persistent store coordinator），它将对象图管理部分和持久化部分捆绑在一起，当它们两者中的任何一部分需要和另一部分交流时，这便需要持久化存储协调器来调节了。</li>\n<li><strong>NSPersistentStore</strong><br>  持久化存储（persistent store），每个持久化存储协调器都有一个属于自己的持久化存储。它在文件系统中与 SQLite 数据库交互。为了支持更高级的设置，Core Data 可以将多个 stores 附属于同一个持久化存储协调器，并且除了存储 SQL 格式外，还有很多存储类型可供选择。</li>\n<li><strong>NSManagedObject</strong><br>  托管对象类（Entity），所有 Core Data 中的托管对象都必须继承该类，根据实体创建托管对象类文件。</li>\n</ul>\n<p>下图很清晰地表现了它们之间的关系：</p>\n<p><img src=\"https://objccn.io/images/issues/issue-4/stack-complex.png\" alt=\"\"></p>\n<p>当所有的组件都捆绑到一起的时候，我们把它称作 Core Data 堆栈，这个堆栈有两个主要部分。一部分是关于对象图管理，这正是我们需要很好掌握的那一部分，并且知道怎么使用。第二部分是关于持久化，也就是数据如何存储到磁盘中。持久化存储协调器（persistent store coordinator）刚好位于堆栈中间。这样很好的将两部分实现了分离，我们就不用关心存储的实现细节。</p>\n<h2 id=\"创建-Core-Data-堆栈\"><a href=\"#创建-Core-Data-堆栈\" class=\"headerlink\" title=\"创建 Core Data 堆栈\"></a>创建 Core Data 堆栈</h2><p>创建一个 Core Data 堆栈最方便快捷的方式是在我们创建项目时选择 <code>Use Core Data</code> 复选框，这样创建出来的工程系统会默认生成一些CoreData的代码以及一个.xcdatamodeld后缀的模型文件。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227154154030.png?687x133_130\" alt=\"\"></p>\n<p>不过我建议不要这么做，因为 Xcode 会把自动生成的部分代码放在AppDelegate中，我们应该把这部分代码单独抽离出去，放在专门的类或模块来管理 Core Data 相关的逻辑。</p>\n<h3 id=\"构建模型文件\"><a href=\"#构建模型文件\" class=\"headerlink\" title=\"构建模型文件\"></a>构建模型文件</h3><p>使用 Core Data 的第一步是创建后缀为 <code>.xcdatamodeld</code>的模型文件，使用快捷键 Command + N，选择 Core Data -&gt; Data Model -&gt; Next，完成模型文件的创建。创建完成后，点击底部 <code>Add Entity</code> 按钮，来添加一个实体，命名为 <code>User</code>。</p>\n<p>添加 <code>User</code> 实体后，会发现一个实体对应着三部分内容：Attributes、Relationships、Fetched Properties，分别对应着属性、关联关系、获取操作。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/15/18436043320170227155859067.png?1138x620_130\" alt=\"\"></p>\n<p>点击 Attributes 下面的加号按钮可以给实体添加属性。<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227160223054.png?921x132_130\" alt=\"\"></p>\n<h3 id=\"设置堆栈\"><a href=\"#设置堆栈\" class=\"headerlink\" title=\"设置堆栈\"></a>设置堆栈</h3><p>我们使用 <code>initWithConcurrencyType:</code> 为主队列创建一个 managed object context，在有些代码中，你可能见到 <code>[[NSManagedObjectContext alloc] init]</code>。不过最好使用 <code>initWithConcurrencyType:</code>初始化，以明确你是使用基于队列的并发模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSManagedObjectContext *)managedObjectContext &#123;</span><br><span class=\"line\">  if (_managedObjectContext == nil) &#123;</span><br><span class=\"line\">    _managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];</span><br><span class=\"line\">    _managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _managedObjectContext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建 managed object context 时我们给它设置了一个持久化存储协调器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSPersistentStoreCoordinator *)persistentStoreCoordinator &#123;</span><br><span class=\"line\">  if (_persistentStoreCoordinator == nil) &#123;</span><br><span class=\"line\">    NSURL *path = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@&quot;test.sqlite&quot;];</span><br><span class=\"line\">    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.objectModel];</span><br><span class=\"line\">    NSError *error = nil;</span><br><span class=\"line\">    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:path options:nil error:&amp;error]) &#123;</span><br><span class=\"line\">      NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _persistentStoreCoordinator;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSManagedObjectModel *)objectModel &#123;</span><br><span class=\"line\">  if (_objectModel == nil) &#123;</span><br><span class=\"line\">    NSURL *momdURL = [[NSBundle mainBundle] URLForResource:@&quot;coredata&quot; withExtension:@&quot;momd&quot;];</span><br><span class=\"line\">    _objectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:momdURL];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _objectModel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们通过一个托管对象模型创建了一个持久化存储协调器，并使用 <code>addPersistentStoreWithType: configuration: URL: options: error:</code> 关联了数据库的部分，关联本地数据库后会返回一个 <code>NSPersistentStore</code> 对象，这个对象负责具体持久化存储的实现。可以多次调用该方法添加多个持久化存储对象。</p>\n<p>一个持久化存储协调器有四种可选的持久化存储方案，用得最多的是 SQLite 的方式。其中Binary和XML这两种方式，在进行数据操作时，需要将整个文件加载到内存中，这样对内存的消耗是很大的。</p>\n<ul>\n<li><strong>NSSQLiteStoreType：</strong>SQLite数据库</li>\n<li><strong>NSXMLStoreType：</strong>XML文件</li>\n<li><strong>NSBinaryStoreType：</strong>二进制文件</li>\n<li><strong>NSInMemoryStoreType：</strong>直接存储在内存中</li>\n</ul>\n<p>我在一个单独的类中，完成了以上所有操作，并添加了一个 <code>saveContext</code> 方法，方便在其他类中调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface DBHelper : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)sharedInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong, readonly) NSManagedObjectContext *managedObjectContext;</span><br><span class=\"line\">@property (nonatomic, strong, readonly) NSManagedObjectModel *objectModel;</span><br><span class=\"line\">@property (nonatomic, strong, readonly) NSPersistentStoreCoordinator *persistentStoreCoordinator;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)saveContext;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建托管对象\"><a href=\"#创建托管对象\" class=\"headerlink\" title=\"创建托管对象\"></a>创建托管对象</h3><p>创建实体后，就可以根据对应的实体，生成开发中使用的基于 NSManagedObject 类的托管对象类文件。使用快捷键 Command + N，选择 Core Data -&gt; NSManagerObject subclass -&gt; Next，选择模型文件 -&gt; 选择实体，完成模型文件的创建。<br><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170227/16/18436043320170227162725013.png?714x506_130\" alt=\"\"></p>\n<h2 id=\"操作数据\"><a href=\"#操作数据\" class=\"headerlink\" title=\"操作数据\"></a>操作数据</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>在模型类中可以加入一个类方法来将新的对象插入到 managed object 上下文中，并使用 <code>saveContext</code> 将数据保存到SQLite数据库中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User *user = [NSEntityDescription insertNewObjectForEntityForName:@&quot;User&quot; inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];</span><br><span class=\"line\">user.name = @&quot;张三&quot;;</span><br><span class=\"line\">user.age = @22;</span><br><span class=\"line\">[[DBHelper sharedInstance] saveContext];</span><br></pre></td></tr></table></figure></p>\n<p>Core Data 创建新对象的 API 并不是非常的直观，我们可以以一种更加优雅的方式来实现同样的功能：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (NSString *)entityName&#123;</span><br><span class=\"line\">  return NSStringFromClass(self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)insertNewObjectForEntity &#123;</span><br><span class=\"line\">  return [NSEntityDescription insertNewObjectForEntityForName:[self entityName]</span><br><span class=\"line\">                                       inManagedObjectContext:[DBHelper sharedInstance].managedObjectContext];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)save &#123;</span><br><span class=\"line\">  [[DBHelper sharedInstance] saveContext];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在保存一个对象就简单多了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User *user = [User insertNewObjectForEntity];</span><br><span class=\"line\">user.name = @&quot;李四&quot;;</span><br><span class=\"line\">user.age = @22;</span><br><span class=\"line\">[user save];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p>我们只需要创建一个 <code>NSFetchRequest</code>对象，然后调用 managed object context 的 <code>executeFetchRequest:</code> 方法返回查询结果集合。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class=\"line\">  </span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">NSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&amp;error];</span><br><span class=\"line\">if (error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">    NSLog(@&quot;name: %@, age: %zd&quot;, obj.name, obj.age.integerValue);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>我们通过给 <code>request</code> 设置一些条件，查询我们想要的数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;name = %@&quot;, @&quot;张三&quot;];</span><br><span class=\"line\">request.predicate = predicate;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p>修改数据很简单，我们只要根据条件查询出数据后，修改对象的属性后，保存数据即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class=\"line\">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;name=%@&quot;, @&quot;张三&quot;];</span><br><span class=\"line\">request.predicate = predicate;</span><br><span class=\"line\">  </span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">NSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&amp;error];</span><br><span class=\"line\">if (error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">    obj.age = @33;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[[DBHelper sharedInstance] saveContext];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p>删除数据跟修改数据几乎一模一样，唯一的区别就是查询出数据后，调用 managed object context 的 <code>deleteObject:</code> 方法来删除数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class=\"line\">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;name=%@&quot;, @&quot;张三&quot;];</span><br><span class=\"line\">request.predicate = predicate;</span><br><span class=\"line\">  </span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">NSArray *result = [[DBHelper sharedInstance].managedObjectContext executeFetchRequest:request error:&amp;error];</span><br><span class=\"line\"> if (error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;error: %@&quot;, error.localizedDescription);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[result enumerateObjectsUsingBlock:^(User   * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">    [[DBHelper sharedInstance].managedObjectContext deleteObject:obj];</span><br><span class=\"line\"> &#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[[DBHelper sharedInstance] saveContext];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>很多人，特别是初学者都认为 Core Data 很难，所以尽量去避免在项目中使用它。其实去了解后发现其实并不是很复杂。像上面的增删改查操作，看上去大体流程都差不多，都是一些最基础的简单操作。要想更深入地了解 Core Data 可以去网上看高级教程。</p>"},{"title":"如何发布自己的开源框架到CocoaPods","date":"2016-02-14T00:52:00.000Z","thumbnailImage":"https://www.raywenderlich.com/wp-content/uploads/2015/02/cocoapods_logo-250x250.png","autoThumbnailImage":"yes","coverSize":"partial","coverImage":"http://ashishkakkad.com/wp-content/uploads/2016/01/CocoaPodsLogo.png","_content":"在开发过程中，经常会使用到第三框架，我们通过一个`pod install`命令，很方便的就将第三方框架加到我们自己的项目中。  \n如果我们也想将自己写的组件或库开源出去，让别人也可以通过`pod install`命令安装自己的框架该怎么做呢？\n<!--more-->\n下面，我就教大家一步一步的将自己的pods发布到`CocoaPods` 中。如果你现在对`CocoaPods`还不太了解，推荐你看一看这篇文章：[用CocoaPods做iOS程序的依赖管理](http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)\n\n## 创建自己项目的Podspec描述文件\n下面我会通过一个名为`HUPhotoBrowser`的项目来讲解一下整个过程。\n项目发布到`github`后，需要打上`tag`。之后我们在工程根目录中初始化一个Podspec文件：\n```\npod spec create HUPhotoBrowser\n```\n该命令将在本目录产生一个名为`HUPhotoBrowser.podspec`文件。用编辑器打开该文件，里面已经有非常丰富的说明文档。下面介绍如何声明第三方库的代码目录和资源目录，还有该第三方库所依赖ios核心框架和第三方库。这是我的podspec文件：\n```\nPod::Spec.new do |s|\n  s.name         = \"HUPhotoBrowser\"\n  s.version      = \"0.0.2\"\n  s.summary      = \"photo browser for ios.\"\n  s.homepage     = \"https://github.com/hujewelz/HUPhotoBrowser\"\n  s.license      = \"MIT\"\n  s.author             = { \"Jewelz Hu\" => \"hujewelz@163.com\" }\n  s.platform     = :ios, \"7.0\"\n  s.source       = { :git => \"https://github.com/hujewelz/HUPhotoBrowser.git\", :tag => \"0.0.2\" }\n  s.source_files  = \"HUPhotoBrowser\", \"HUPhotoBrowser/**/*.{h,m}\"\n   s.framework  = \"UIKit\"\n  # s.frameworks = \"SomeFramework\", \"AnotherFramework\"\n```\n`s.name`是我们库的名称，`s.version`是库原代码版本号，`s.summary`是对我们库的一个简单的介绍，`s.homepage`声明库的主页，`s.license`是所采用的授权版本，`s.author`是库的作者。` s.platform`是我们库所支持的软件平台，这在我们最后提交进行编译 时有用。`s.source`声明原代码的地址。我这里是托管在github上,所以这里将地址copy过来就行了。\n\n![屏幕快照 2016-02-26 下午3.02.58.png](http://upload-images.jianshu.io/upload_images/1351863-5f185444531af1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n对于很多第三方库而言，在发布的时候都会打上一个`tag`，如版本0.0.1就会打上一个名为`0.0.1`的`tag`,你也可以选择一个最新的`commit`来作为该库0.0.1版的代码, 那么最终source就是这样了：\n```\n{:git => \"https://github.com/hujewelz/HUPhotoBrowser.git\", :commit => '65584b0e0b08e01f83e66d487180c164b5182409'}\n```\n我这里还是使用的tag，所以我这里就是这样的：\n```\n { :git => \"https://github.com/hujewelz/HUPhotoBrowser.git\", :tag => \"0.0.2\" }\n```\n以后我们的库有新版本时，我们可以修改相应的`version`和`source`。\n`s.source_files`声明了我们库的源代码的位置，所以这个地方不能填错了。\n先看一下我的目录结构：\n\n![屏幕快照 2016-02-26 下午3.15.07.png](http://upload-images.jianshu.io/upload_images/1351863-98aca18e60fac44a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n所以工程根目录下的`HUPhotoBrowse`文件夹才是库的原代码目录。\n```\ns.source_files  = \"HUPhotoBrowser\", \"HUPhotoBrowser/**/*.{h,m}\"\n```\n目录的层级关系一定要跟代码库的保持一致。这里前一部分可以不用的，因为我这里后一部分的`HUPhotoBrowser/**`与前面是一致的，这个指定的目录下的文件都会进行编译。如果该目录下还有一些资源文件（如图片等），这些文件并不需要进行编译。可以使用`s.resourcs`声明。` *.{h,m}`是一个类似正则表达式的字符串，表示匹配所有以`.h`和`.m`为扩展名的文件。\n`s.framework`声明了所依赖的核心库，我这里只用到了`UIKit`,所以是这样的：\n``` \ns.framework  = \"UIKit\"\n```\n如果你的项目中依赖多个库，可以使用\n```\ns.frameworks = \"SomeFramework\", \"AnotherFramework\"\n```\n当然，我们开发的库中也可能还依赖第三方库，例如`JSONKit`，那么，就可以做如下声明:\n```\n s.dependency \"JSONKit\", \"~> 1.4\"\n```\n如果有多个需要填写多个`s.dependency`。  \n编辑完`podspec`文件后，需要验证一下这个文件是否可用，如果有任何WARNING或者ERROR都是不可以的，它就不能被添加到Spec Repo中，不过xcode的WARNING是可以存在的，验证需要执行命令：\n```\npod spec lint PodName.podspec\n```\n当看到`HUPhotoBrowser passed validation.`时，说明验证通过了。在检测你的podspec时候，如果直接用pod spec lint xxx.podspec的话，出现错误它只会直接一句红色的话`The spec did not pass validation, due to 1 error.`告诉你的有多少个error和warning，而不会具体的指出你的错误出在哪里，这时候你可以在这句指令后面加上参数--verbose 这样就会告诉你具体的错误信息。这样根据它提示你的错误信息去解决就可以了。\n\n编辑好`podspec`文件后就可以将该`podspec`文件保存到本机的`~/.cocoapods/repos/master/Specs`目录中仅供自己使用，也可以将其提交到CocoaPods/Specs代码库中。下面我们先将其保存到本机中：\n\n![屏幕快照 2016-02-26 下午3.44.31.png](http://upload-images.jianshu.io/upload_images/1351863-c8e31c301e9c2c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面可以看一下是否可以通过搜索找到该库:\n\n![屏幕快照 2016-02-26 下午3.48.06.png](http://upload-images.jianshu.io/upload_images/1351863-51c1e65c0c2a5a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同样在需要依赖于`HUPhotoBrowser`这个库的项目，可以将下列添加到项目的`Podfile`文件中\n```\npod 'HUPhotoBrowser', '~0.0.2'\n```\n保存文件，并用`pod install`安装`HUPhotoBrowser`库。\n\n通过以上步骤创建Pod库还只能供自己使用，下面会继续讲解如何将其提交到CocoaPods/Specs代码库中，让其他人也可以通过`pod install`安装我们的开源库。\n\n## CocoaPods Trunk发布自己的Pods\n在cocoapods使用了trunk之后，`CocoaPods` 需要0.33以上版本，用 `pod --version`查看版本，如果版本低，需要更新。\n### 注册Trunk\n```\n$ pod trunk register orta@cocoapods.org 'Orta Therox' --description='macbook air'\n```\n大家在注册时需要替换成自己的邮箱和用户名，一切顺利的话就会受到一份邮件，点击邮件中的链接后验证一下：\n```\npod trunk me\n```\n\n![屏幕快照 2016-02-26 下午4.05.42.png](http://upload-images.jianshu.io/upload_images/1351863-641b06a41444a0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n当然，如果你的pod是由多人维护的，你也可以添加其他维护者:\n```\n$ pod trunk add-owner ARAnalytics kyle@cocoapods.org\n```\n上面的工作完成之后，我们就可以开始 `trunk push`了。\n### Trunk push\n`pod trunk push` 命令会首先验证你本地的`podspec`文件(是否有错误)，之后会上传`spec`文件到`trunk`，最后会将你上传的`podspec`文件转换为需要的`json`文件。在工程根目录(包含有.podspec)下执行命令：\n```\npod trunk push\n```\n如果在`trunk push`过程中报错了，仔细查看一下错误信息。我当初就是使用了`podspec`文件中描述的版本所没有的API，之后修改`podspec`文件中` s.platform = :ios, \"7.0\"`就可以了。\n\n![屏幕快照 2016-02-26 下午4.12.59.png](http://upload-images.jianshu.io/upload_images/1351863-70f2bc73825180bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果你能看的上面的结果说明上传成功了。我们也可以在本地的`~/.cocoapods/repos/master/Specs`目录下看到转换之后的`json`文件,\n\n![屏幕快照 2016-02-26 下午4.16.56.png](http://upload-images.jianshu.io/upload_images/1351863-9f93e6c957de080f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此我们整个制作自己的开源库的过程就完成了，以后有新版本只需要修改工程根目录下的`podspec`文件就行了，然后重新执行`pod trunk push`命令。\n\n## 最后\n最后对这个过程做个总结：\n1. 开源库发布之后，需要打上`tag`\n2. 进入到项目根目录下，创建`podspec`文件\n```\npod spec create PodName\n```\n3. 编辑`podspec`文件中的相关信息，有两个比较重要的地方` s.source`和` s.source_files `,可以验证是否有误：\n```\npod spec lint PodName.podspec\n```\n4. 注册pod trunk\n```\n$ pod trunk register orta@cocoapods.org 'Orta Therox' --description='macbook air'\n```\n5. 发布到pod trunk\n```\npod trunk push [NAME.podspec]\n```\n该命令在包含有`.podspec`文件的目录下执行\n6. 更新pod库\n```\npod setup\n```\n如果`pod trunk push`成功后无法`pod search`到自己的库，可执行该命令。\n\n## 最后的最后\n哈哈。好吧，我承认其实我是来打广告的。例子中的[**HUPhotoBrowser**](https://github.com/hujewelz/HUPhotoBrowser)是我开源的一个图片浏览器的库，使用起来非常简单，一行代码就以实现图片浏览功能，支持本地和网络图片。希望大家可以支持一下，欢迎大家star。如果有什么问题的话可以直接issue我。最后，希望能跟大家共同进步。项目地址：[HUPhotoBrowser](https://github.com/hujewelz/HUPhotoBrowser)\n\n","source":"_posts/如何发布自己的开源框架到CocoaPods.md","raw":"---\ntitle: 如何发布自己的开源框架到CocoaPods\ndate: 2016-02-14 08:52:00\ntags: \n  - iOS \n  - CocoaPods\ncategory: iOS\nthumbnailImage: https://www.raywenderlich.com/wp-content/uploads/2015/02/cocoapods_logo-250x250.png\nautoThumbnailImage: yes\ncoverSize: partial\ncoverImage: http://ashishkakkad.com/wp-content/uploads/2016/01/CocoaPodsLogo.png\n---\n在开发过程中，经常会使用到第三框架，我们通过一个`pod install`命令，很方便的就将第三方框架加到我们自己的项目中。  \n如果我们也想将自己写的组件或库开源出去，让别人也可以通过`pod install`命令安装自己的框架该怎么做呢？\n<!--more-->\n下面，我就教大家一步一步的将自己的pods发布到`CocoaPods` 中。如果你现在对`CocoaPods`还不太了解，推荐你看一看这篇文章：[用CocoaPods做iOS程序的依赖管理](http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)\n\n## 创建自己项目的Podspec描述文件\n下面我会通过一个名为`HUPhotoBrowser`的项目来讲解一下整个过程。\n项目发布到`github`后，需要打上`tag`。之后我们在工程根目录中初始化一个Podspec文件：\n```\npod spec create HUPhotoBrowser\n```\n该命令将在本目录产生一个名为`HUPhotoBrowser.podspec`文件。用编辑器打开该文件，里面已经有非常丰富的说明文档。下面介绍如何声明第三方库的代码目录和资源目录，还有该第三方库所依赖ios核心框架和第三方库。这是我的podspec文件：\n```\nPod::Spec.new do |s|\n  s.name         = \"HUPhotoBrowser\"\n  s.version      = \"0.0.2\"\n  s.summary      = \"photo browser for ios.\"\n  s.homepage     = \"https://github.com/hujewelz/HUPhotoBrowser\"\n  s.license      = \"MIT\"\n  s.author             = { \"Jewelz Hu\" => \"hujewelz@163.com\" }\n  s.platform     = :ios, \"7.0\"\n  s.source       = { :git => \"https://github.com/hujewelz/HUPhotoBrowser.git\", :tag => \"0.0.2\" }\n  s.source_files  = \"HUPhotoBrowser\", \"HUPhotoBrowser/**/*.{h,m}\"\n   s.framework  = \"UIKit\"\n  # s.frameworks = \"SomeFramework\", \"AnotherFramework\"\n```\n`s.name`是我们库的名称，`s.version`是库原代码版本号，`s.summary`是对我们库的一个简单的介绍，`s.homepage`声明库的主页，`s.license`是所采用的授权版本，`s.author`是库的作者。` s.platform`是我们库所支持的软件平台，这在我们最后提交进行编译 时有用。`s.source`声明原代码的地址。我这里是托管在github上,所以这里将地址copy过来就行了。\n\n![屏幕快照 2016-02-26 下午3.02.58.png](http://upload-images.jianshu.io/upload_images/1351863-5f185444531af1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n对于很多第三方库而言，在发布的时候都会打上一个`tag`，如版本0.0.1就会打上一个名为`0.0.1`的`tag`,你也可以选择一个最新的`commit`来作为该库0.0.1版的代码, 那么最终source就是这样了：\n```\n{:git => \"https://github.com/hujewelz/HUPhotoBrowser.git\", :commit => '65584b0e0b08e01f83e66d487180c164b5182409'}\n```\n我这里还是使用的tag，所以我这里就是这样的：\n```\n { :git => \"https://github.com/hujewelz/HUPhotoBrowser.git\", :tag => \"0.0.2\" }\n```\n以后我们的库有新版本时，我们可以修改相应的`version`和`source`。\n`s.source_files`声明了我们库的源代码的位置，所以这个地方不能填错了。\n先看一下我的目录结构：\n\n![屏幕快照 2016-02-26 下午3.15.07.png](http://upload-images.jianshu.io/upload_images/1351863-98aca18e60fac44a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n所以工程根目录下的`HUPhotoBrowse`文件夹才是库的原代码目录。\n```\ns.source_files  = \"HUPhotoBrowser\", \"HUPhotoBrowser/**/*.{h,m}\"\n```\n目录的层级关系一定要跟代码库的保持一致。这里前一部分可以不用的，因为我这里后一部分的`HUPhotoBrowser/**`与前面是一致的，这个指定的目录下的文件都会进行编译。如果该目录下还有一些资源文件（如图片等），这些文件并不需要进行编译。可以使用`s.resourcs`声明。` *.{h,m}`是一个类似正则表达式的字符串，表示匹配所有以`.h`和`.m`为扩展名的文件。\n`s.framework`声明了所依赖的核心库，我这里只用到了`UIKit`,所以是这样的：\n``` \ns.framework  = \"UIKit\"\n```\n如果你的项目中依赖多个库，可以使用\n```\ns.frameworks = \"SomeFramework\", \"AnotherFramework\"\n```\n当然，我们开发的库中也可能还依赖第三方库，例如`JSONKit`，那么，就可以做如下声明:\n```\n s.dependency \"JSONKit\", \"~> 1.4\"\n```\n如果有多个需要填写多个`s.dependency`。  \n编辑完`podspec`文件后，需要验证一下这个文件是否可用，如果有任何WARNING或者ERROR都是不可以的，它就不能被添加到Spec Repo中，不过xcode的WARNING是可以存在的，验证需要执行命令：\n```\npod spec lint PodName.podspec\n```\n当看到`HUPhotoBrowser passed validation.`时，说明验证通过了。在检测你的podspec时候，如果直接用pod spec lint xxx.podspec的话，出现错误它只会直接一句红色的话`The spec did not pass validation, due to 1 error.`告诉你的有多少个error和warning，而不会具体的指出你的错误出在哪里，这时候你可以在这句指令后面加上参数--verbose 这样就会告诉你具体的错误信息。这样根据它提示你的错误信息去解决就可以了。\n\n编辑好`podspec`文件后就可以将该`podspec`文件保存到本机的`~/.cocoapods/repos/master/Specs`目录中仅供自己使用，也可以将其提交到CocoaPods/Specs代码库中。下面我们先将其保存到本机中：\n\n![屏幕快照 2016-02-26 下午3.44.31.png](http://upload-images.jianshu.io/upload_images/1351863-c8e31c301e9c2c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面可以看一下是否可以通过搜索找到该库:\n\n![屏幕快照 2016-02-26 下午3.48.06.png](http://upload-images.jianshu.io/upload_images/1351863-51c1e65c0c2a5a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同样在需要依赖于`HUPhotoBrowser`这个库的项目，可以将下列添加到项目的`Podfile`文件中\n```\npod 'HUPhotoBrowser', '~0.0.2'\n```\n保存文件，并用`pod install`安装`HUPhotoBrowser`库。\n\n通过以上步骤创建Pod库还只能供自己使用，下面会继续讲解如何将其提交到CocoaPods/Specs代码库中，让其他人也可以通过`pod install`安装我们的开源库。\n\n## CocoaPods Trunk发布自己的Pods\n在cocoapods使用了trunk之后，`CocoaPods` 需要0.33以上版本，用 `pod --version`查看版本，如果版本低，需要更新。\n### 注册Trunk\n```\n$ pod trunk register orta@cocoapods.org 'Orta Therox' --description='macbook air'\n```\n大家在注册时需要替换成自己的邮箱和用户名，一切顺利的话就会受到一份邮件，点击邮件中的链接后验证一下：\n```\npod trunk me\n```\n\n![屏幕快照 2016-02-26 下午4.05.42.png](http://upload-images.jianshu.io/upload_images/1351863-641b06a41444a0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n当然，如果你的pod是由多人维护的，你也可以添加其他维护者:\n```\n$ pod trunk add-owner ARAnalytics kyle@cocoapods.org\n```\n上面的工作完成之后，我们就可以开始 `trunk push`了。\n### Trunk push\n`pod trunk push` 命令会首先验证你本地的`podspec`文件(是否有错误)，之后会上传`spec`文件到`trunk`，最后会将你上传的`podspec`文件转换为需要的`json`文件。在工程根目录(包含有.podspec)下执行命令：\n```\npod trunk push\n```\n如果在`trunk push`过程中报错了，仔细查看一下错误信息。我当初就是使用了`podspec`文件中描述的版本所没有的API，之后修改`podspec`文件中` s.platform = :ios, \"7.0\"`就可以了。\n\n![屏幕快照 2016-02-26 下午4.12.59.png](http://upload-images.jianshu.io/upload_images/1351863-70f2bc73825180bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果你能看的上面的结果说明上传成功了。我们也可以在本地的`~/.cocoapods/repos/master/Specs`目录下看到转换之后的`json`文件,\n\n![屏幕快照 2016-02-26 下午4.16.56.png](http://upload-images.jianshu.io/upload_images/1351863-9f93e6c957de080f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此我们整个制作自己的开源库的过程就完成了，以后有新版本只需要修改工程根目录下的`podspec`文件就行了，然后重新执行`pod trunk push`命令。\n\n## 最后\n最后对这个过程做个总结：\n1. 开源库发布之后，需要打上`tag`\n2. 进入到项目根目录下，创建`podspec`文件\n```\npod spec create PodName\n```\n3. 编辑`podspec`文件中的相关信息，有两个比较重要的地方` s.source`和` s.source_files `,可以验证是否有误：\n```\npod spec lint PodName.podspec\n```\n4. 注册pod trunk\n```\n$ pod trunk register orta@cocoapods.org 'Orta Therox' --description='macbook air'\n```\n5. 发布到pod trunk\n```\npod trunk push [NAME.podspec]\n```\n该命令在包含有`.podspec`文件的目录下执行\n6. 更新pod库\n```\npod setup\n```\n如果`pod trunk push`成功后无法`pod search`到自己的库，可执行该命令。\n\n## 最后的最后\n哈哈。好吧，我承认其实我是来打广告的。例子中的[**HUPhotoBrowser**](https://github.com/hujewelz/HUPhotoBrowser)是我开源的一个图片浏览器的库，使用起来非常简单，一行代码就以实现图片浏览功能，支持本地和网络图片。希望大家可以支持一下，欢迎大家star。如果有什么问题的话可以直接issue我。最后，希望能跟大家共同进步。项目地址：[HUPhotoBrowser](https://github.com/hujewelz/HUPhotoBrowser)\n\n","slug":"如何发布自己的开源框架到CocoaPods","published":1,"updated":"2018-05-30T03:37:30.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikj001d1u0o5p8kprek","content":"<p>在开发过程中，经常会使用到第三框架，我们通过一个<code>pod install</code>命令，很方便的就将第三方框架加到我们自己的项目中。<br>如果我们也想将自己写的组件或库开源出去，让别人也可以通过<code>pod install</code>命令安装自己的框架该怎么做呢？<br><a id=\"more\"></a><br>下面，我就教大家一步一步的将自己的pods发布到<code>CocoaPods</code> 中。如果你现在对<code>CocoaPods</code>还不太了解，推荐你看一看这篇文章：<a href=\"http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"noopener\">用CocoaPods做iOS程序的依赖管理</a></p>\n<h2 id=\"创建自己项目的Podspec描述文件\"><a href=\"#创建自己项目的Podspec描述文件\" class=\"headerlink\" title=\"创建自己项目的Podspec描述文件\"></a>创建自己项目的Podspec描述文件</h2><p>下面我会通过一个名为<code>HUPhotoBrowser</code>的项目来讲解一下整个过程。<br>项目发布到<code>github</code>后，需要打上<code>tag</code>。之后我们在工程根目录中初始化一个Podspec文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create HUPhotoBrowser</span><br></pre></td></tr></table></figure></p>\n<p>该命令将在本目录产生一个名为<code>HUPhotoBrowser.podspec</code>文件。用编辑器打开该文件，里面已经有非常丰富的说明文档。下面介绍如何声明第三方库的代码目录和资源目录，还有该第三方库所依赖ios核心框架和第三方库。这是我的podspec文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">  s.name         = &quot;HUPhotoBrowser&quot;</span><br><span class=\"line\">  s.version      = &quot;0.0.2&quot;</span><br><span class=\"line\">  s.summary      = &quot;photo browser for ios.&quot;</span><br><span class=\"line\">  s.homepage     = &quot;https://github.com/hujewelz/HUPhotoBrowser&quot;</span><br><span class=\"line\">  s.license      = &quot;MIT&quot;</span><br><span class=\"line\">  s.author             = &#123; &quot;Jewelz Hu&quot; =&gt; &quot;hujewelz@163.com&quot; &#125;</span><br><span class=\"line\">  s.platform     = :ios, &quot;7.0&quot;</span><br><span class=\"line\">  s.source       = &#123; :git =&gt; &quot;https://github.com/hujewelz/HUPhotoBrowser.git&quot;, :tag =&gt; &quot;0.0.2&quot; &#125;</span><br><span class=\"line\">  s.source_files  = &quot;HUPhotoBrowser&quot;, &quot;HUPhotoBrowser/**/*.&#123;h,m&#125;&quot;</span><br><span class=\"line\">   s.framework  = &quot;UIKit&quot;</span><br><span class=\"line\">  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</span><br></pre></td></tr></table></figure></p>\n<p><code>s.name</code>是我们库的名称，<code>s.version</code>是库原代码版本号，<code>s.summary</code>是对我们库的一个简单的介绍，<code>s.homepage</code>声明库的主页，<code>s.license</code>是所采用的授权版本，<code>s.author</code>是库的作者。<code>s.platform</code>是我们库所支持的软件平台，这在我们最后提交进行编译 时有用。<code>s.source</code>声明原代码的地址。我这里是托管在github上,所以这里将地址copy过来就行了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-5f185444531af1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.02.58.png\"><br>对于很多第三方库而言，在发布的时候都会打上一个<code>tag</code>，如版本0.0.1就会打上一个名为<code>0.0.1</code>的<code>tag</code>,你也可以选择一个最新的<code>commit</code>来作为该库0.0.1版的代码, 那么最终source就是这样了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;:git =&gt; &quot;https://github.com/hujewelz/HUPhotoBrowser.git&quot;, :commit =&gt; &apos;65584b0e0b08e01f83e66d487180c164b5182409&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我这里还是使用的tag，所以我这里就是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; :git =&gt; &quot;https://github.com/hujewelz/HUPhotoBrowser.git&quot;, :tag =&gt; &quot;0.0.2&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>以后我们的库有新版本时，我们可以修改相应的<code>version</code>和<code>source</code>。<br><code>s.source_files</code>声明了我们库的源代码的位置，所以这个地方不能填错了。<br>先看一下我的目录结构：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-98aca18e60fac44a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.15.07.png\"><br>所以工程根目录下的<code>HUPhotoBrowse</code>文件夹才是库的原代码目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.source_files  = &quot;HUPhotoBrowser&quot;, &quot;HUPhotoBrowser/**/*.&#123;h,m&#125;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>目录的层级关系一定要跟代码库的保持一致。这里前一部分可以不用的，因为我这里后一部分的<code>HUPhotoBrowser/**</code>与前面是一致的，这个指定的目录下的文件都会进行编译。如果该目录下还有一些资源文件（如图片等），这些文件并不需要进行编译。可以使用<code>s.resourcs</code>声明。<code>*.{h,m}</code>是一个类似正则表达式的字符串，表示匹配所有以<code>.h</code>和<code>.m</code>为扩展名的文件。<br><code>s.framework</code>声明了所依赖的核心库，我这里只用到了<code>UIKit</code>,所以是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.framework  = &quot;UIKit&quot;</span><br></pre></td></tr></table></figure></p>\n<p>如果你的项目中依赖多个库，可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</span><br></pre></td></tr></table></figure></p>\n<p>当然，我们开发的库中也可能还依赖第三方库，例如<code>JSONKit</code>，那么，就可以做如下声明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</span><br></pre></td></tr></table></figure></p>\n<p>如果有多个需要填写多个<code>s.dependency</code>。<br>编辑完<code>podspec</code>文件后，需要验证一下这个文件是否可用，如果有任何WARNING或者ERROR都是不可以的，它就不能被添加到Spec Repo中，不过xcode的WARNING是可以存在的，验证需要执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint PodName.podspec</span><br></pre></td></tr></table></figure></p>\n<p>当看到<code>HUPhotoBrowser passed validation.</code>时，说明验证通过了。在检测你的podspec时候，如果直接用pod spec lint xxx.podspec的话，出现错误它只会直接一句红色的话<code>The spec did not pass validation, due to 1 error.</code>告诉你的有多少个error和warning，而不会具体的指出你的错误出在哪里，这时候你可以在这句指令后面加上参数–verbose 这样就会告诉你具体的错误信息。这样根据它提示你的错误信息去解决就可以了。</p>\n<p>编辑好<code>podspec</code>文件后就可以将该<code>podspec</code>文件保存到本机的<code>~/.cocoapods/repos/master/Specs</code>目录中仅供自己使用，也可以将其提交到CocoaPods/Specs代码库中。下面我们先将其保存到本机中：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-c8e31c301e9c2c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.44.31.png\"><br>下面可以看一下是否可以通过搜索找到该库:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-51c1e65c0c2a5a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.48.06.png\"><br>同样在需要依赖于<code>HUPhotoBrowser</code>这个库的项目，可以将下列添加到项目的<code>Podfile</code>文件中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;HUPhotoBrowser&apos;, &apos;~0.0.2&apos;</span><br></pre></td></tr></table></figure></p>\n<p>保存文件，并用<code>pod install</code>安装<code>HUPhotoBrowser</code>库。</p>\n<p>通过以上步骤创建Pod库还只能供自己使用，下面会继续讲解如何将其提交到CocoaPods/Specs代码库中，让其他人也可以通过<code>pod install</code>安装我们的开源库。</p>\n<h2 id=\"CocoaPods-Trunk发布自己的Pods\"><a href=\"#CocoaPods-Trunk发布自己的Pods\" class=\"headerlink\" title=\"CocoaPods Trunk发布自己的Pods\"></a>CocoaPods Trunk发布自己的Pods</h2><p>在cocoapods使用了trunk之后，<code>CocoaPods</code> 需要0.33以上版本，用 <code>pod --version</code>查看版本，如果版本低，需要更新。</p>\n<h3 id=\"注册Trunk\"><a href=\"#注册Trunk\" class=\"headerlink\" title=\"注册Trunk\"></a>注册Trunk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk register orta@cocoapods.org &apos;Orta Therox&apos; --description=&apos;macbook air&apos;</span><br></pre></td></tr></table></figure>\n<p>大家在注册时需要替换成自己的邮箱和用户名，一切顺利的话就会受到一份邮件，点击邮件中的链接后验证一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk me</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-641b06a41444a0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午4.05.42.png\"><br>当然，如果你的pod是由多人维护的，你也可以添加其他维护者:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk add-owner ARAnalytics kyle@cocoapods.org</span><br></pre></td></tr></table></figure></p>\n<p>上面的工作完成之后，我们就可以开始 <code>trunk push</code>了。</p>\n<h3 id=\"Trunk-push\"><a href=\"#Trunk-push\" class=\"headerlink\" title=\"Trunk push\"></a>Trunk push</h3><p><code>pod trunk push</code> 命令会首先验证你本地的<code>podspec</code>文件(是否有错误)，之后会上传<code>spec</code>文件到<code>trunk</code>，最后会将你上传的<code>podspec</code>文件转换为需要的<code>json</code>文件。在工程根目录(包含有.podspec)下执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push</span><br></pre></td></tr></table></figure></p>\n<p>如果在<code>trunk push</code>过程中报错了，仔细查看一下错误信息。我当初就是使用了<code>podspec</code>文件中描述的版本所没有的API，之后修改<code>podspec</code>文件中<code>s.platform = :ios, &quot;7.0&quot;</code>就可以了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-70f2bc73825180bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午4.12.59.png\"><br>如果你能看的上面的结果说明上传成功了。我们也可以在本地的<code>~/.cocoapods/repos/master/Specs</code>目录下看到转换之后的<code>json</code>文件,</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-9f93e6c957de080f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午4.16.56.png\"><br>至此我们整个制作自己的开源库的过程就完成了，以后有新版本只需要修改工程根目录下的<code>podspec</code>文件就行了，然后重新执行<code>pod trunk push</code>命令。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后对这个过程做个总结：</p>\n<ol>\n<li>开源库发布之后，需要打上<code>tag</code></li>\n<li><p>进入到项目根目录下，创建<code>podspec</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create PodName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>podspec</code>文件中的相关信息，有两个比较重要的地方<code>s.source</code>和<code>s.source_files</code>,可以验证是否有误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint PodName.podspec</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册pod trunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk register orta@cocoapods.org &apos;Orta Therox&apos; --description=&apos;macbook air&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布到pod trunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push [NAME.podspec]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>该命令在包含有<code>.podspec</code>文件的目录下执行</p>\n<ol start=\"6\">\n<li>更新pod库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod setup</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果<code>pod trunk push</code>成功后无法<code>pod search</code>到自己的库，可执行该命令。</p>\n<h2 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h2><p>哈哈。好吧，我承认其实我是来打广告的。例子中的<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\"><strong>HUPhotoBrowser</strong></a>是我开源的一个图片浏览器的库，使用起来非常简单，一行代码就以实现图片浏览功能，支持本地和网络图片。希望大家可以支持一下，欢迎大家star。如果有什么问题的话可以直接issue我。最后，希望能跟大家共同进步。项目地址：<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\">HUPhotoBrowser</a></p>\n","site":{"data":{}},"thumbnailImageUrl":"https://www.raywenderlich.com/wp-content/uploads/2015/02/cocoapods_logo-250x250.png","excerpt":"<p>在开发过程中，经常会使用到第三框架，我们通过一个<code>pod install</code>命令，很方便的就将第三方框架加到我们自己的项目中。<br>如果我们也想将自己写的组件或库开源出去，让别人也可以通过<code>pod install</code>命令安装自己的框架该怎么做呢？<br>","more":"<br>下面，我就教大家一步一步的将自己的pods发布到<code>CocoaPods</code> 中。如果你现在对<code>CocoaPods</code>还不太了解，推荐你看一看这篇文章：<a href=\"http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"noopener\">用CocoaPods做iOS程序的依赖管理</a></p>\n<h2 id=\"创建自己项目的Podspec描述文件\"><a href=\"#创建自己项目的Podspec描述文件\" class=\"headerlink\" title=\"创建自己项目的Podspec描述文件\"></a>创建自己项目的Podspec描述文件</h2><p>下面我会通过一个名为<code>HUPhotoBrowser</code>的项目来讲解一下整个过程。<br>项目发布到<code>github</code>后，需要打上<code>tag</code>。之后我们在工程根目录中初始化一个Podspec文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create HUPhotoBrowser</span><br></pre></td></tr></table></figure></p>\n<p>该命令将在本目录产生一个名为<code>HUPhotoBrowser.podspec</code>文件。用编辑器打开该文件，里面已经有非常丰富的说明文档。下面介绍如何声明第三方库的代码目录和资源目录，还有该第三方库所依赖ios核心框架和第三方库。这是我的podspec文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">  s.name         = &quot;HUPhotoBrowser&quot;</span><br><span class=\"line\">  s.version      = &quot;0.0.2&quot;</span><br><span class=\"line\">  s.summary      = &quot;photo browser for ios.&quot;</span><br><span class=\"line\">  s.homepage     = &quot;https://github.com/hujewelz/HUPhotoBrowser&quot;</span><br><span class=\"line\">  s.license      = &quot;MIT&quot;</span><br><span class=\"line\">  s.author             = &#123; &quot;Jewelz Hu&quot; =&gt; &quot;hujewelz@163.com&quot; &#125;</span><br><span class=\"line\">  s.platform     = :ios, &quot;7.0&quot;</span><br><span class=\"line\">  s.source       = &#123; :git =&gt; &quot;https://github.com/hujewelz/HUPhotoBrowser.git&quot;, :tag =&gt; &quot;0.0.2&quot; &#125;</span><br><span class=\"line\">  s.source_files  = &quot;HUPhotoBrowser&quot;, &quot;HUPhotoBrowser/**/*.&#123;h,m&#125;&quot;</span><br><span class=\"line\">   s.framework  = &quot;UIKit&quot;</span><br><span class=\"line\">  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</span><br></pre></td></tr></table></figure></p>\n<p><code>s.name</code>是我们库的名称，<code>s.version</code>是库原代码版本号，<code>s.summary</code>是对我们库的一个简单的介绍，<code>s.homepage</code>声明库的主页，<code>s.license</code>是所采用的授权版本，<code>s.author</code>是库的作者。<code>s.platform</code>是我们库所支持的软件平台，这在我们最后提交进行编译 时有用。<code>s.source</code>声明原代码的地址。我这里是托管在github上,所以这里将地址copy过来就行了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-5f185444531af1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.02.58.png\"><br>对于很多第三方库而言，在发布的时候都会打上一个<code>tag</code>，如版本0.0.1就会打上一个名为<code>0.0.1</code>的<code>tag</code>,你也可以选择一个最新的<code>commit</code>来作为该库0.0.1版的代码, 那么最终source就是这样了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;:git =&gt; &quot;https://github.com/hujewelz/HUPhotoBrowser.git&quot;, :commit =&gt; &apos;65584b0e0b08e01f83e66d487180c164b5182409&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我这里还是使用的tag，所以我这里就是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; :git =&gt; &quot;https://github.com/hujewelz/HUPhotoBrowser.git&quot;, :tag =&gt; &quot;0.0.2&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>以后我们的库有新版本时，我们可以修改相应的<code>version</code>和<code>source</code>。<br><code>s.source_files</code>声明了我们库的源代码的位置，所以这个地方不能填错了。<br>先看一下我的目录结构：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-98aca18e60fac44a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.15.07.png\"><br>所以工程根目录下的<code>HUPhotoBrowse</code>文件夹才是库的原代码目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.source_files  = &quot;HUPhotoBrowser&quot;, &quot;HUPhotoBrowser/**/*.&#123;h,m&#125;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>目录的层级关系一定要跟代码库的保持一致。这里前一部分可以不用的，因为我这里后一部分的<code>HUPhotoBrowser/**</code>与前面是一致的，这个指定的目录下的文件都会进行编译。如果该目录下还有一些资源文件（如图片等），这些文件并不需要进行编译。可以使用<code>s.resourcs</code>声明。<code>*.{h,m}</code>是一个类似正则表达式的字符串，表示匹配所有以<code>.h</code>和<code>.m</code>为扩展名的文件。<br><code>s.framework</code>声明了所依赖的核心库，我这里只用到了<code>UIKit</code>,所以是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.framework  = &quot;UIKit&quot;</span><br></pre></td></tr></table></figure></p>\n<p>如果你的项目中依赖多个库，可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</span><br></pre></td></tr></table></figure></p>\n<p>当然，我们开发的库中也可能还依赖第三方库，例如<code>JSONKit</code>，那么，就可以做如下声明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</span><br></pre></td></tr></table></figure></p>\n<p>如果有多个需要填写多个<code>s.dependency</code>。<br>编辑完<code>podspec</code>文件后，需要验证一下这个文件是否可用，如果有任何WARNING或者ERROR都是不可以的，它就不能被添加到Spec Repo中，不过xcode的WARNING是可以存在的，验证需要执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint PodName.podspec</span><br></pre></td></tr></table></figure></p>\n<p>当看到<code>HUPhotoBrowser passed validation.</code>时，说明验证通过了。在检测你的podspec时候，如果直接用pod spec lint xxx.podspec的话，出现错误它只会直接一句红色的话<code>The spec did not pass validation, due to 1 error.</code>告诉你的有多少个error和warning，而不会具体的指出你的错误出在哪里，这时候你可以在这句指令后面加上参数–verbose 这样就会告诉你具体的错误信息。这样根据它提示你的错误信息去解决就可以了。</p>\n<p>编辑好<code>podspec</code>文件后就可以将该<code>podspec</code>文件保存到本机的<code>~/.cocoapods/repos/master/Specs</code>目录中仅供自己使用，也可以将其提交到CocoaPods/Specs代码库中。下面我们先将其保存到本机中：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-c8e31c301e9c2c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.44.31.png\"><br>下面可以看一下是否可以通过搜索找到该库:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-51c1e65c0c2a5a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午3.48.06.png\"><br>同样在需要依赖于<code>HUPhotoBrowser</code>这个库的项目，可以将下列添加到项目的<code>Podfile</code>文件中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;HUPhotoBrowser&apos;, &apos;~0.0.2&apos;</span><br></pre></td></tr></table></figure></p>\n<p>保存文件，并用<code>pod install</code>安装<code>HUPhotoBrowser</code>库。</p>\n<p>通过以上步骤创建Pod库还只能供自己使用，下面会继续讲解如何将其提交到CocoaPods/Specs代码库中，让其他人也可以通过<code>pod install</code>安装我们的开源库。</p>\n<h2 id=\"CocoaPods-Trunk发布自己的Pods\"><a href=\"#CocoaPods-Trunk发布自己的Pods\" class=\"headerlink\" title=\"CocoaPods Trunk发布自己的Pods\"></a>CocoaPods Trunk发布自己的Pods</h2><p>在cocoapods使用了trunk之后，<code>CocoaPods</code> 需要0.33以上版本，用 <code>pod --version</code>查看版本，如果版本低，需要更新。</p>\n<h3 id=\"注册Trunk\"><a href=\"#注册Trunk\" class=\"headerlink\" title=\"注册Trunk\"></a>注册Trunk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk register orta@cocoapods.org &apos;Orta Therox&apos; --description=&apos;macbook air&apos;</span><br></pre></td></tr></table></figure>\n<p>大家在注册时需要替换成自己的邮箱和用户名，一切顺利的话就会受到一份邮件，点击邮件中的链接后验证一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk me</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-641b06a41444a0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午4.05.42.png\"><br>当然，如果你的pod是由多人维护的，你也可以添加其他维护者:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk add-owner ARAnalytics kyle@cocoapods.org</span><br></pre></td></tr></table></figure></p>\n<p>上面的工作完成之后，我们就可以开始 <code>trunk push</code>了。</p>\n<h3 id=\"Trunk-push\"><a href=\"#Trunk-push\" class=\"headerlink\" title=\"Trunk push\"></a>Trunk push</h3><p><code>pod trunk push</code> 命令会首先验证你本地的<code>podspec</code>文件(是否有错误)，之后会上传<code>spec</code>文件到<code>trunk</code>，最后会将你上传的<code>podspec</code>文件转换为需要的<code>json</code>文件。在工程根目录(包含有.podspec)下执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push</span><br></pre></td></tr></table></figure></p>\n<p>如果在<code>trunk push</code>过程中报错了，仔细查看一下错误信息。我当初就是使用了<code>podspec</code>文件中描述的版本所没有的API，之后修改<code>podspec</code>文件中<code>s.platform = :ios, &quot;7.0&quot;</code>就可以了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-70f2bc73825180bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午4.12.59.png\"><br>如果你能看的上面的结果说明上传成功了。我们也可以在本地的<code>~/.cocoapods/repos/master/Specs</code>目录下看到转换之后的<code>json</code>文件,</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1351863-9f93e6c957de080f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2016-02-26 下午4.16.56.png\"><br>至此我们整个制作自己的开源库的过程就完成了，以后有新版本只需要修改工程根目录下的<code>podspec</code>文件就行了，然后重新执行<code>pod trunk push</code>命令。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后对这个过程做个总结：</p>\n<ol>\n<li>开源库发布之后，需要打上<code>tag</code></li>\n<li><p>进入到项目根目录下，创建<code>podspec</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec create PodName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>podspec</code>文件中的相关信息，有两个比较重要的地方<code>s.source</code>和<code>s.source_files</code>,可以验证是否有误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint PodName.podspec</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册pod trunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod trunk register orta@cocoapods.org &apos;Orta Therox&apos; --description=&apos;macbook air&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布到pod trunk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push [NAME.podspec]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>该命令在包含有<code>.podspec</code>文件的目录下执行</p>\n<ol start=\"6\">\n<li>更新pod库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod setup</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果<code>pod trunk push</code>成功后无法<code>pod search</code>到自己的库，可执行该命令。</p>\n<h2 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h2><p>哈哈。好吧，我承认其实我是来打广告的。例子中的<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\"><strong>HUPhotoBrowser</strong></a>是我开源的一个图片浏览器的库，使用起来非常简单，一行代码就以实现图片浏览功能，支持本地和网络图片。希望大家可以支持一下，欢迎大家star。如果有什么问题的话可以直接issue我。最后，希望能跟大家共同进步。项目地址：<a href=\"https://github.com/hujewelz/HUPhotoBrowser\" target=\"_blank\" rel=\"noopener\">HUPhotoBrowser</a></p>"},{"title":"属性 -- 你真的弄明白了吗?","date":"2015-06-11T05:43:02.000Z","_content":"\"属性\"（property）是 Objective-C 2.0 的一项特性，用于封装对象中的数据。Objective-C 对象通常会把其所需要的数据保存为实例变量，并通过 \"存取方法\"（`getter`和`setter`） 来访问。`getter`用于读取变量值，`setter`用于给属性设置值。\"属性\"这一特性的引入，使得这一切可以让编译器自动完成。此特性还引入了一种新的\"点语法\"，使开发者可以更容易地依照类对象来访问数据。\n\n<!--more-->\n\n## 自动合成\n在 Objective-C 中，你可以在类的接口定义中使用 `@property` 语法就能定义一个 \"属性\"。其意思是说：编译器会自动生成存取方法，并向类中添加相应的实例变量。例如下面的例子：\n```\n@interface HUPerson : NSObject\n\n@property (nonatomic, copy) NSString *name;\n\n@end\n```\n这跟以前不使用 \"属性\" 写出来的代码是等效的：\n```\n@interface HUPerson : NSObject {\n  NSString *_name;\n}\n\n- (NSString *)name;\n- (void)setName:(NSString *)name;\n\n@end\n```\n访问属性时，我们可以使用 \"点语法\"，编译器会把 \"点语法\"转换为相应的存取方法的调用，使用\"点语法\"的效果与直接调用存取方法相同。\n``` \nHUPerson *person = [[HUPerson alloc] init];\n\n// 下面的调用是一样的\nperson.name = @\"jewelz\";\n[person setName:@\"jewelz\"];\n\n//NSString *name = person.name;\nNSString *name = [person name];\n```\n使用属性时，编译器自动生成存取方法和实例变量的过程叫做 \"自动合成\"（autosynthesis）。这个过程在由编译器在编译期执行，所以我们在编译器里看不到这些自动合成的代码。自动合成的示例变量名是在属性名前面加上下划线。不过我们可以使用`@synthesize`语法来指定示例变量名：\n```\n@implementation HUPerson\n@synthesize name = _aName;\n\n@end\n```\n上面的代码会将生成的实例变量命名为`_aName`，而不再使用默认的名称。不过在项目中使用这个方法修改实例变量的名称并不是个好主意。统一的代码风格对于一个大型项目来说是很有必要的，所以还是使用默认的命名吧，除非你坚持要这么做。\n\n若不想让编译器自动合成存取方法，则可以自己实现。如果你只实现了存取方法中的一个，那么另一个会由编译器帮你合成。前提是你定义的属性是可以读写的，而不是 `readonly`的。我们还有一种方式来阻止编译器自动合成存取方法，那就是使用 `@dynamic` 关键字，它会告诉编译器：不用自动给我合成存取方法也不用生成实例变量。在编译访问属性的代码时，即使编译器找不到定义的存取方法，也不会报错。例如下面这样：\n```\n@interface HUPerson : NSObject\n@property (nonatomic, copy) NSString *name;\n\n@end\n\n@implementation HUPerson\n@dynamic name;\n\n@end\n\n```\n这时编译器不会为 `HUPerson` 自动合成存取方法或实例变量。你仍然可以正常的访问其中的属性，编译器也不会发出警告信息。如果你没有实现相应的存取方法，那么在运行时程序就会崩溃掉。\n\n## 属性特性\n在定义属性时，我们常常会给属性指定一些特性，例如：\n```\n@property (nonatomic, readwrite, copy) NSString *name;\n```\n属性的特性有四中类型：\n#### 原子性\n在默认情况下，由编译器合成的方法会通过锁机制确保其原子性。如果属性指定为 `nonatomic`，则不会使用同步锁。系统默认是 `atomic`的，不过这在一定程度上会影响系统性能，所以在iOS开发中一般指定为 `nonatomic`的。\n#### 读写权限\n* 具备 **readwrite**（读写） 特性的属性同时拥有 `getter` 和 `setter`方法，这是编译器自动帮我们生成的。\n* 具备 **readonly**（只读） 特性的属性只有 `getter` 方法。这样的话我们就不能在类内部使用点语法来给变量赋值了，所以一般的做法是：在类的接口中对外公开为只读属性，然后在类的 Extension 中将其重新定义为读写属性。\n#### 内存管理语义\n编译器在合成存取方法时，要根据次特性来决定使用哪种内存管理策略，在合成设置方法时，编辑器会生成相应的代码。主要有以下几种：\n\n* **asign** 设置方法只会执行针对纯类型（NSInter、CGFloat等）的简单赋值。\n* **strong** 此特性表明该属性定义了一种 \"拥有关系\"。为这种属性设置值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。\n* **weak** 此特性表明该属性定义了一种 \"非拥有关系\"。为这种属性设置值时，设置方法既不保留新值，也不释放旧值，此特性与 asign 类似，不过在属性所指的对象遭到销毁时，属性值会被设置为 `nil`。\n* **unsafe_unretained** 此特性的语言与 asign 相同，但是它使用于对象类型。它表明了一种 \"非拥有关系\"，不过与 weak 不同，在属性所指的对象遭到销毁时，属性值不会被设置为 `nil`。\n* **copy** 此特性表达的所属关系与 strong 类似。为这种属性设置值时，并不保留新值，而是将其 \"拷贝\"。\n#### 方法名\n可以通过如下特性来指定存取方法的方法名：\n\n* **getter=name** 指定 `getter`的名称。一个好的实践是，当某个属性是 BOOL 类型时，我们将其获取方法加上 \"is\" 前缀。类似下面这样：\n    ```@property (nonatomic, assign, getter=isOn) BOOL on;\n    ```\n* **setter=name** 指定 `setter`的名称。这种用法不太常见。\n\n\n","source":"_posts/属性-你真的弄明白了吗.md","raw":"---\ntitle: 属性 -- 你真的弄明白了吗?\ndate: 2015-06-11 13:43:02\ntags: Objective-C\ncategory: iOS\n---\n\"属性\"（property）是 Objective-C 2.0 的一项特性，用于封装对象中的数据。Objective-C 对象通常会把其所需要的数据保存为实例变量，并通过 \"存取方法\"（`getter`和`setter`） 来访问。`getter`用于读取变量值，`setter`用于给属性设置值。\"属性\"这一特性的引入，使得这一切可以让编译器自动完成。此特性还引入了一种新的\"点语法\"，使开发者可以更容易地依照类对象来访问数据。\n\n<!--more-->\n\n## 自动合成\n在 Objective-C 中，你可以在类的接口定义中使用 `@property` 语法就能定义一个 \"属性\"。其意思是说：编译器会自动生成存取方法，并向类中添加相应的实例变量。例如下面的例子：\n```\n@interface HUPerson : NSObject\n\n@property (nonatomic, copy) NSString *name;\n\n@end\n```\n这跟以前不使用 \"属性\" 写出来的代码是等效的：\n```\n@interface HUPerson : NSObject {\n  NSString *_name;\n}\n\n- (NSString *)name;\n- (void)setName:(NSString *)name;\n\n@end\n```\n访问属性时，我们可以使用 \"点语法\"，编译器会把 \"点语法\"转换为相应的存取方法的调用，使用\"点语法\"的效果与直接调用存取方法相同。\n``` \nHUPerson *person = [[HUPerson alloc] init];\n\n// 下面的调用是一样的\nperson.name = @\"jewelz\";\n[person setName:@\"jewelz\"];\n\n//NSString *name = person.name;\nNSString *name = [person name];\n```\n使用属性时，编译器自动生成存取方法和实例变量的过程叫做 \"自动合成\"（autosynthesis）。这个过程在由编译器在编译期执行，所以我们在编译器里看不到这些自动合成的代码。自动合成的示例变量名是在属性名前面加上下划线。不过我们可以使用`@synthesize`语法来指定示例变量名：\n```\n@implementation HUPerson\n@synthesize name = _aName;\n\n@end\n```\n上面的代码会将生成的实例变量命名为`_aName`，而不再使用默认的名称。不过在项目中使用这个方法修改实例变量的名称并不是个好主意。统一的代码风格对于一个大型项目来说是很有必要的，所以还是使用默认的命名吧，除非你坚持要这么做。\n\n若不想让编译器自动合成存取方法，则可以自己实现。如果你只实现了存取方法中的一个，那么另一个会由编译器帮你合成。前提是你定义的属性是可以读写的，而不是 `readonly`的。我们还有一种方式来阻止编译器自动合成存取方法，那就是使用 `@dynamic` 关键字，它会告诉编译器：不用自动给我合成存取方法也不用生成实例变量。在编译访问属性的代码时，即使编译器找不到定义的存取方法，也不会报错。例如下面这样：\n```\n@interface HUPerson : NSObject\n@property (nonatomic, copy) NSString *name;\n\n@end\n\n@implementation HUPerson\n@dynamic name;\n\n@end\n\n```\n这时编译器不会为 `HUPerson` 自动合成存取方法或实例变量。你仍然可以正常的访问其中的属性，编译器也不会发出警告信息。如果你没有实现相应的存取方法，那么在运行时程序就会崩溃掉。\n\n## 属性特性\n在定义属性时，我们常常会给属性指定一些特性，例如：\n```\n@property (nonatomic, readwrite, copy) NSString *name;\n```\n属性的特性有四中类型：\n#### 原子性\n在默认情况下，由编译器合成的方法会通过锁机制确保其原子性。如果属性指定为 `nonatomic`，则不会使用同步锁。系统默认是 `atomic`的，不过这在一定程度上会影响系统性能，所以在iOS开发中一般指定为 `nonatomic`的。\n#### 读写权限\n* 具备 **readwrite**（读写） 特性的属性同时拥有 `getter` 和 `setter`方法，这是编译器自动帮我们生成的。\n* 具备 **readonly**（只读） 特性的属性只有 `getter` 方法。这样的话我们就不能在类内部使用点语法来给变量赋值了，所以一般的做法是：在类的接口中对外公开为只读属性，然后在类的 Extension 中将其重新定义为读写属性。\n#### 内存管理语义\n编译器在合成存取方法时，要根据次特性来决定使用哪种内存管理策略，在合成设置方法时，编辑器会生成相应的代码。主要有以下几种：\n\n* **asign** 设置方法只会执行针对纯类型（NSInter、CGFloat等）的简单赋值。\n* **strong** 此特性表明该属性定义了一种 \"拥有关系\"。为这种属性设置值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。\n* **weak** 此特性表明该属性定义了一种 \"非拥有关系\"。为这种属性设置值时，设置方法既不保留新值，也不释放旧值，此特性与 asign 类似，不过在属性所指的对象遭到销毁时，属性值会被设置为 `nil`。\n* **unsafe_unretained** 此特性的语言与 asign 相同，但是它使用于对象类型。它表明了一种 \"非拥有关系\"，不过与 weak 不同，在属性所指的对象遭到销毁时，属性值不会被设置为 `nil`。\n* **copy** 此特性表达的所属关系与 strong 类似。为这种属性设置值时，并不保留新值，而是将其 \"拷贝\"。\n#### 方法名\n可以通过如下特性来指定存取方法的方法名：\n\n* **getter=name** 指定 `getter`的名称。一个好的实践是，当某个属性是 BOOL 类型时，我们将其获取方法加上 \"is\" 前缀。类似下面这样：\n    ```@property (nonatomic, assign, getter=isOn) BOOL on;\n    ```\n* **setter=name** 指定 `setter`的名称。这种用法不太常见。\n\n\n","slug":"属性-你真的弄明白了吗","published":1,"updated":"2017-03-01T07:40:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikk001g1u0o582y5tau","content":"<p>“属性”（property）是 Objective-C 2.0 的一项特性，用于封装对象中的数据。Objective-C 对象通常会把其所需要的数据保存为实例变量，并通过 “存取方法”（<code>getter</code>和<code>setter</code>） 来访问。<code>getter</code>用于读取变量值，<code>setter</code>用于给属性设置值。”属性”这一特性的引入，使得这一切可以让编译器自动完成。此特性还引入了一种新的”点语法”，使开发者可以更容易地依照类对象来访问数据。</p>\n<a id=\"more\"></a>\n<h2 id=\"自动合成\"><a href=\"#自动合成\" class=\"headerlink\" title=\"自动合成\"></a>自动合成</h2><p>在 Objective-C 中，你可以在类的接口定义中使用 <code>@property</code> 语法就能定义一个 “属性”。其意思是说：编译器会自动生成存取方法，并向类中添加相应的实例变量。例如下面的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface HUPerson : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>这跟以前不使用 “属性” 写出来的代码是等效的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface HUPerson : NSObject &#123;</span><br><span class=\"line\">  NSString *_name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSString *)name;</span><br><span class=\"line\">- (void)setName:(NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>访问属性时，我们可以使用 “点语法”，编译器会把 “点语法”转换为相应的存取方法的调用，使用”点语法”的效果与直接调用存取方法相同。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HUPerson *person = [[HUPerson alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面的调用是一样的</span><br><span class=\"line\">person.name = @&quot;jewelz&quot;;</span><br><span class=\"line\">[person setName:@&quot;jewelz&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">//NSString *name = person.name;</span><br><span class=\"line\">NSString *name = [person name];</span><br></pre></td></tr></table></figure></p>\n<p>使用属性时，编译器自动生成存取方法和实例变量的过程叫做 “自动合成”（autosynthesis）。这个过程在由编译器在编译期执行，所以我们在编译器里看不到这些自动合成的代码。自动合成的示例变量名是在属性名前面加上下划线。不过我们可以使用<code>@synthesize</code>语法来指定示例变量名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation HUPerson</span><br><span class=\"line\">@synthesize name = _aName;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码会将生成的实例变量命名为<code>_aName</code>，而不再使用默认的名称。不过在项目中使用这个方法修改实例变量的名称并不是个好主意。统一的代码风格对于一个大型项目来说是很有必要的，所以还是使用默认的命名吧，除非你坚持要这么做。</p>\n<p>若不想让编译器自动合成存取方法，则可以自己实现。如果你只实现了存取方法中的一个，那么另一个会由编译器帮你合成。前提是你定义的属性是可以读写的，而不是 <code>readonly</code>的。我们还有一种方式来阻止编译器自动合成存取方法，那就是使用 <code>@dynamic</code> 关键字，它会告诉编译器：不用自动给我合成存取方法也不用生成实例变量。在编译访问属性的代码时，即使编译器找不到定义的存取方法，也不会报错。例如下面这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface HUPerson : NSObject</span><br><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation HUPerson</span><br><span class=\"line\">@dynamic name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>这时编译器不会为 <code>HUPerson</code> 自动合成存取方法或实例变量。你仍然可以正常的访问其中的属性，编译器也不会发出警告信息。如果你没有实现相应的存取方法，那么在运行时程序就会崩溃掉。</p>\n<h2 id=\"属性特性\"><a href=\"#属性特性\" class=\"headerlink\" title=\"属性特性\"></a>属性特性</h2><p>在定义属性时，我们常常会给属性指定一些特性，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readwrite, copy) NSString *name;</span><br></pre></td></tr></table></figure></p>\n<p>属性的特性有四中类型：</p>\n<h4 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h4><p>在默认情况下，由编译器合成的方法会通过锁机制确保其原子性。如果属性指定为 <code>nonatomic</code>，则不会使用同步锁。系统默认是 <code>atomic</code>的，不过这在一定程度上会影响系统性能，所以在iOS开发中一般指定为 <code>nonatomic</code>的。</p>\n<h4 id=\"读写权限\"><a href=\"#读写权限\" class=\"headerlink\" title=\"读写权限\"></a>读写权限</h4><ul>\n<li>具备 <strong>readwrite</strong>（读写） 特性的属性同时拥有 <code>getter</code> 和 <code>setter</code>方法，这是编译器自动帮我们生成的。</li>\n<li><p>具备 <strong>readonly</strong>（只读） 特性的属性只有 <code>getter</code> 方法。这样的话我们就不能在类内部使用点语法来给变量赋值了，所以一般的做法是：在类的接口中对外公开为只读属性，然后在类的 Extension 中将其重新定义为读写属性。</p>\n<h4 id=\"内存管理语义\"><a href=\"#内存管理语义\" class=\"headerlink\" title=\"内存管理语义\"></a>内存管理语义</h4><p>编译器在合成存取方法时，要根据次特性来决定使用哪种内存管理策略，在合成设置方法时，编辑器会生成相应的代码。主要有以下几种：</p>\n</li>\n<li><p><strong>asign</strong> 设置方法只会执行针对纯类型（NSInter、CGFloat等）的简单赋值。</p>\n</li>\n<li><strong>strong</strong> 此特性表明该属性定义了一种 “拥有关系”。为这种属性设置值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。</li>\n<li><strong>weak</strong> 此特性表明该属性定义了一种 “非拥有关系”。为这种属性设置值时，设置方法既不保留新值，也不释放旧值，此特性与 asign 类似，不过在属性所指的对象遭到销毁时，属性值会被设置为 <code>nil</code>。</li>\n<li><strong>unsafe_unretained</strong> 此特性的语言与 asign 相同，但是它使用于对象类型。它表明了一种 “非拥有关系”，不过与 weak 不同，在属性所指的对象遭到销毁时，属性值不会被设置为 <code>nil</code>。</li>\n<li><p><strong>copy</strong> 此特性表达的所属关系与 strong 类似。为这种属性设置值时，并不保留新值，而是将其 “拷贝”。</p>\n<h4 id=\"方法名\"><a href=\"#方法名\" class=\"headerlink\" title=\"方法名\"></a>方法名</h4><p>可以通过如下特性来指定存取方法的方法名：</p>\n</li>\n<li><p><strong>getter=name</strong> 指定 <code>getter</code>的名称。一个好的实践是，当某个属性是 BOOL 类型时，我们将其获取方法加上 “is” 前缀。类似下面这样：</p>\n  <figure class=\"highlight plain\"><figcaption><span>(nonatomic, assign, getter</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setter=name</strong> 指定 <code>setter</code>的名称。这种用法不太常见。</p>\n</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>“属性”（property）是 Objective-C 2.0 的一项特性，用于封装对象中的数据。Objective-C 对象通常会把其所需要的数据保存为实例变量，并通过 “存取方法”（<code>getter</code>和<code>setter</code>） 来访问。<code>getter</code>用于读取变量值，<code>setter</code>用于给属性设置值。”属性”这一特性的引入，使得这一切可以让编译器自动完成。此特性还引入了一种新的”点语法”，使开发者可以更容易地依照类对象来访问数据。</p>","more":"<h2 id=\"自动合成\"><a href=\"#自动合成\" class=\"headerlink\" title=\"自动合成\"></a>自动合成</h2><p>在 Objective-C 中，你可以在类的接口定义中使用 <code>@property</code> 语法就能定义一个 “属性”。其意思是说：编译器会自动生成存取方法，并向类中添加相应的实例变量。例如下面的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface HUPerson : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>这跟以前不使用 “属性” 写出来的代码是等效的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface HUPerson : NSObject &#123;</span><br><span class=\"line\">  NSString *_name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSString *)name;</span><br><span class=\"line\">- (void)setName:(NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>访问属性时，我们可以使用 “点语法”，编译器会把 “点语法”转换为相应的存取方法的调用，使用”点语法”的效果与直接调用存取方法相同。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HUPerson *person = [[HUPerson alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面的调用是一样的</span><br><span class=\"line\">person.name = @&quot;jewelz&quot;;</span><br><span class=\"line\">[person setName:@&quot;jewelz&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">//NSString *name = person.name;</span><br><span class=\"line\">NSString *name = [person name];</span><br></pre></td></tr></table></figure></p>\n<p>使用属性时，编译器自动生成存取方法和实例变量的过程叫做 “自动合成”（autosynthesis）。这个过程在由编译器在编译期执行，所以我们在编译器里看不到这些自动合成的代码。自动合成的示例变量名是在属性名前面加上下划线。不过我们可以使用<code>@synthesize</code>语法来指定示例变量名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation HUPerson</span><br><span class=\"line\">@synthesize name = _aName;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码会将生成的实例变量命名为<code>_aName</code>，而不再使用默认的名称。不过在项目中使用这个方法修改实例变量的名称并不是个好主意。统一的代码风格对于一个大型项目来说是很有必要的，所以还是使用默认的命名吧，除非你坚持要这么做。</p>\n<p>若不想让编译器自动合成存取方法，则可以自己实现。如果你只实现了存取方法中的一个，那么另一个会由编译器帮你合成。前提是你定义的属性是可以读写的，而不是 <code>readonly</code>的。我们还有一种方式来阻止编译器自动合成存取方法，那就是使用 <code>@dynamic</code> 关键字，它会告诉编译器：不用自动给我合成存取方法也不用生成实例变量。在编译访问属性的代码时，即使编译器找不到定义的存取方法，也不会报错。例如下面这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface HUPerson : NSObject</span><br><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation HUPerson</span><br><span class=\"line\">@dynamic name;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>这时编译器不会为 <code>HUPerson</code> 自动合成存取方法或实例变量。你仍然可以正常的访问其中的属性，编译器也不会发出警告信息。如果你没有实现相应的存取方法，那么在运行时程序就会崩溃掉。</p>\n<h2 id=\"属性特性\"><a href=\"#属性特性\" class=\"headerlink\" title=\"属性特性\"></a>属性特性</h2><p>在定义属性时，我们常常会给属性指定一些特性，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readwrite, copy) NSString *name;</span><br></pre></td></tr></table></figure></p>\n<p>属性的特性有四中类型：</p>\n<h4 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h4><p>在默认情况下，由编译器合成的方法会通过锁机制确保其原子性。如果属性指定为 <code>nonatomic</code>，则不会使用同步锁。系统默认是 <code>atomic</code>的，不过这在一定程度上会影响系统性能，所以在iOS开发中一般指定为 <code>nonatomic</code>的。</p>\n<h4 id=\"读写权限\"><a href=\"#读写权限\" class=\"headerlink\" title=\"读写权限\"></a>读写权限</h4><ul>\n<li>具备 <strong>readwrite</strong>（读写） 特性的属性同时拥有 <code>getter</code> 和 <code>setter</code>方法，这是编译器自动帮我们生成的。</li>\n<li><p>具备 <strong>readonly</strong>（只读） 特性的属性只有 <code>getter</code> 方法。这样的话我们就不能在类内部使用点语法来给变量赋值了，所以一般的做法是：在类的接口中对外公开为只读属性，然后在类的 Extension 中将其重新定义为读写属性。</p>\n<h4 id=\"内存管理语义\"><a href=\"#内存管理语义\" class=\"headerlink\" title=\"内存管理语义\"></a>内存管理语义</h4><p>编译器在合成存取方法时，要根据次特性来决定使用哪种内存管理策略，在合成设置方法时，编辑器会生成相应的代码。主要有以下几种：</p>\n</li>\n<li><p><strong>asign</strong> 设置方法只会执行针对纯类型（NSInter、CGFloat等）的简单赋值。</p>\n</li>\n<li><strong>strong</strong> 此特性表明该属性定义了一种 “拥有关系”。为这种属性设置值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。</li>\n<li><strong>weak</strong> 此特性表明该属性定义了一种 “非拥有关系”。为这种属性设置值时，设置方法既不保留新值，也不释放旧值，此特性与 asign 类似，不过在属性所指的对象遭到销毁时，属性值会被设置为 <code>nil</code>。</li>\n<li><strong>unsafe_unretained</strong> 此特性的语言与 asign 相同，但是它使用于对象类型。它表明了一种 “非拥有关系”，不过与 weak 不同，在属性所指的对象遭到销毁时，属性值不会被设置为 <code>nil</code>。</li>\n<li><p><strong>copy</strong> 此特性表达的所属关系与 strong 类似。为这种属性设置值时，并不保留新值，而是将其 “拷贝”。</p>\n<h4 id=\"方法名\"><a href=\"#方法名\" class=\"headerlink\" title=\"方法名\"></a>方法名</h4><p>可以通过如下特性来指定存取方法的方法名：</p>\n</li>\n<li><p><strong>getter=name</strong> 指定 <code>getter</code>的名称。一个好的实践是，当某个属性是 BOOL 类型时，我们将其获取方法加上 “is” 前缀。类似下面这样：</p>\n  <figure class=\"highlight plain\"><figcaption><span>(nonatomic, assign, getter</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setter=name</strong> 指定 <code>setter</code>的名称。这种用法不太常见。</p>\n</li>\n</ul>"},{"title":" 在 Swift 中使用值类型","date":"2018-03-11T08:13:18.000Z","_content":"\n\n\n本文是 Swift 系列文章中的第二篇，你可以在[这里](http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/)找到第一篇。按照计划，这篇文章主要介绍一下值类型在 Swift 中的应用。\n\n在讲 Swift 中的值类型之前，我想先复习一下 Objective-C 中的一个知识：为什么在声明 NSString 类型的 property 时要用 copy？我想应该没有人不知道答案吧。在 Swift 中使用字符串可以用 String 类型，而在使用 String 时，就不会出现这个问题了。NSString 在 Foundation 框架中是引用类型，而 String 在 Swift 标准库中是值类型，这可以说是两者最明显的区别了。\n\n<!--more-->\n\n在使用 Swift 时，我们有多种方式来存储结构化的数据，比如结构体，枚举和类。在 Swift 标准库中，绝大多数的公开类型都是结构体，而枚举和类只占很小一部分。这可能是标准库中那些类型的特性使然，但是不管从什么方面这个事实都提醒我们 Swift 中结构体有多么重要。许多 Foundation 框架中的类现在有专门针对 Swift 构建的对应结构体类型了。\n\n结构体和类主要有以下的不同：\n\n* 结构体（和枚举）是值类型，而类时引用类型。\n* 内存的管理方式不同。结构体可以被直接持有并访问，而类的示例只能通过引用来间接地访问。结构体不会被引用，但是会被复制。也就是所，结构体的持有者是唯一的，但是类的示例却能有很多个持有者。\n* 结构体是不能被继承的，而使用类，可以通过继承来共享代码。\n\n\n\n## 值类型\n\n我们经常会处理一些需要有明确的生命周期的对象，我们会去初始化它，修改它，最后销毁它。最常见的就是 View 和 View Controller了。一个视图就有着清晰的生命周期：我们会创建它，然后修改它的属于，比如改变背景色，改变位置和大小等，最后当不需要显示时，我们将它从屏幕移除并销毁这个对象。如果我们想修改两个完全不同的视图，我们就需要保证它们是独立的。想比较两个视图，我们只要检查它们是不是指向相同的内存。由于我们比较多是内存地址 ，所有使用引用类型比较合适。\n\n其他一些类型并不需要生命周期。比如一个 URL 在创建后就不会再被更改。更重要的是，它在被摧毁时并不需要进行额外的操作。当我们比较两个 URL 变量时，我们并不关心它们是否指向内存中的同一地址，我们所比较的是它们是否指向同样的 URL。因为我们通过它们的属性来比较 URL，我们将其称为值。在 Objective-C 里，我们用 NSURL 来实现一个不可变的对象。不过在 Swift 中对应的 URL 却是一个结构体。\n\n值永远不会改变，它们具有不可变的特性。这 (在绝大多数情况下) 是一件好事，因为使用不变的数据可以让代码更容易被理解。不可变性也让代码天然地具有线程安全的特性，因为不能改变的东西是可以在线程之间安全地共享的。\n\nSwift 中，结构体是用来构建值类型的。结构体不能通过引用来进行比较，你只能通过它们的属性来比较两个结构体。虽然我们可以用 var 来在结构体中声明可变的变量属性，但是这个可变性只体现在变量本身上，而不是指里面的值。改变一个结构体变量的属性，在概念上来说，和为整个变量赋值一个全新的结构体是等价的。我们总是使用一个新的结构体，并设置被改变的属性值，然后用它替代原来的结构体。这就是为什么我们在修改一个结构体变量的属性时，这个变量必须使用 var 而不能使用 let 的原因，就像下面代码这样：\n\n```swift\nlet p = Person(name: \"Jake\", age: 20)\np.age = 23 // Cannot assign to property: 'p' is a 'let' constant\n```\n\n结构体只有一个持有者。比如，当我们将结构体变量传递给一个函数时，函数将接收到结构体的复制，它也只能改变它自己的这份复制。这叫做值语义 (value semantics)。而对于对象来说，它们是通过传递引用来工作的，因此类对象会拥有很多持有者，这被叫做引用语义 (reference semantics)。因为结构体只有一个持有者，所以它不可能造成引用循环。而对于类和函数这样的引用类型，我们需要特别小心，避免造成引用循环的问题。\n\n\n\n值类型总是需要复制这件事情听起来可能有点低效，不过，编译器可以帮助我们进行优化，以避免不必要的复制操作。结构体复制的时候发生的是按照字节进行的浅复制。除非结构体中含有类，否则复制时都不需要考虑其中属性的引用计数。当使用 let 来声明结构体时，编译器可以确定之后这个结构体的任何一个字节都不会被改变。另外，和 C++ 中类似的值类型不同，开发者没有办法知道和干预何时会发生结构体的复制。这些简化给了编译器更多的可能性，来排除那些不必要的复制，或者使用传递引用而非值的方式来优化一个常量结构体。\n\n编译器所做的对于值类型的复制优化和值语义类型的写时复制行为并不是一回事儿。写时复制必须由开发者来实现，想要实现写时复制，你需要检测所包含的类是否有共享的引用。\n\n和自动移除不必要的值类型复制不同，写时复制是需要自己实现的。不过编译器会移除那些不必要的“无效”浅复制，以及像是 Array 这样的类型中的代码会执行“智能的”写时复制，两者互为补充，都是对值类型的优化。\n\n如果一个结构体只由其他结构体组成，那编译器可以确保不可变性。同样地，当使用结构体时，编译器也可以生成非常快的代码。举个例子，对一个只含有结构体的数组进行操作的效率，通常要比对一个含有对象的数组进行操作的效率高得多。这是因为结构体通常要更直接：值是直接存储在数组的内存中的。而对象的数组中包含的只是对象的引用。最后，在很多情况下，编译器可以将结构体放到栈上，而不用放在堆里。\n\n![](array_in_stack.png)\n\n## 可变性\n\n所有的竞争问题、死锁问题、并发问题都是由可变变量导致的，如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。这就是为什么大部分专家都会推荐你尽可能地使用不可变的对象，以便写出安全可维护的代码。幸运的是，Swift 可以让我们在写出安全代码的同时，保留直观的可变代码的风格。\n\n\n\n\n\n\n\n## 结构体\n\n## 写时复制\n\n\n\n","source":"_posts/在-Swift-中使用值类型.md","raw":"---\ntitle: ' 在 Swift 中使用值类型'\ndate: 2018-03-11 16:13:18\ntags: Swift\ncategories: Swift\n---\n\n\n\n本文是 Swift 系列文章中的第二篇，你可以在[这里](http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/)找到第一篇。按照计划，这篇文章主要介绍一下值类型在 Swift 中的应用。\n\n在讲 Swift 中的值类型之前，我想先复习一下 Objective-C 中的一个知识：为什么在声明 NSString 类型的 property 时要用 copy？我想应该没有人不知道答案吧。在 Swift 中使用字符串可以用 String 类型，而在使用 String 时，就不会出现这个问题了。NSString 在 Foundation 框架中是引用类型，而 String 在 Swift 标准库中是值类型，这可以说是两者最明显的区别了。\n\n<!--more-->\n\n在使用 Swift 时，我们有多种方式来存储结构化的数据，比如结构体，枚举和类。在 Swift 标准库中，绝大多数的公开类型都是结构体，而枚举和类只占很小一部分。这可能是标准库中那些类型的特性使然，但是不管从什么方面这个事实都提醒我们 Swift 中结构体有多么重要。许多 Foundation 框架中的类现在有专门针对 Swift 构建的对应结构体类型了。\n\n结构体和类主要有以下的不同：\n\n* 结构体（和枚举）是值类型，而类时引用类型。\n* 内存的管理方式不同。结构体可以被直接持有并访问，而类的示例只能通过引用来间接地访问。结构体不会被引用，但是会被复制。也就是所，结构体的持有者是唯一的，但是类的示例却能有很多个持有者。\n* 结构体是不能被继承的，而使用类，可以通过继承来共享代码。\n\n\n\n## 值类型\n\n我们经常会处理一些需要有明确的生命周期的对象，我们会去初始化它，修改它，最后销毁它。最常见的就是 View 和 View Controller了。一个视图就有着清晰的生命周期：我们会创建它，然后修改它的属于，比如改变背景色，改变位置和大小等，最后当不需要显示时，我们将它从屏幕移除并销毁这个对象。如果我们想修改两个完全不同的视图，我们就需要保证它们是独立的。想比较两个视图，我们只要检查它们是不是指向相同的内存。由于我们比较多是内存地址 ，所有使用引用类型比较合适。\n\n其他一些类型并不需要生命周期。比如一个 URL 在创建后就不会再被更改。更重要的是，它在被摧毁时并不需要进行额外的操作。当我们比较两个 URL 变量时，我们并不关心它们是否指向内存中的同一地址，我们所比较的是它们是否指向同样的 URL。因为我们通过它们的属性来比较 URL，我们将其称为值。在 Objective-C 里，我们用 NSURL 来实现一个不可变的对象。不过在 Swift 中对应的 URL 却是一个结构体。\n\n值永远不会改变，它们具有不可变的特性。这 (在绝大多数情况下) 是一件好事，因为使用不变的数据可以让代码更容易被理解。不可变性也让代码天然地具有线程安全的特性，因为不能改变的东西是可以在线程之间安全地共享的。\n\nSwift 中，结构体是用来构建值类型的。结构体不能通过引用来进行比较，你只能通过它们的属性来比较两个结构体。虽然我们可以用 var 来在结构体中声明可变的变量属性，但是这个可变性只体现在变量本身上，而不是指里面的值。改变一个结构体变量的属性，在概念上来说，和为整个变量赋值一个全新的结构体是等价的。我们总是使用一个新的结构体，并设置被改变的属性值，然后用它替代原来的结构体。这就是为什么我们在修改一个结构体变量的属性时，这个变量必须使用 var 而不能使用 let 的原因，就像下面代码这样：\n\n```swift\nlet p = Person(name: \"Jake\", age: 20)\np.age = 23 // Cannot assign to property: 'p' is a 'let' constant\n```\n\n结构体只有一个持有者。比如，当我们将结构体变量传递给一个函数时，函数将接收到结构体的复制，它也只能改变它自己的这份复制。这叫做值语义 (value semantics)。而对于对象来说，它们是通过传递引用来工作的，因此类对象会拥有很多持有者，这被叫做引用语义 (reference semantics)。因为结构体只有一个持有者，所以它不可能造成引用循环。而对于类和函数这样的引用类型，我们需要特别小心，避免造成引用循环的问题。\n\n\n\n值类型总是需要复制这件事情听起来可能有点低效，不过，编译器可以帮助我们进行优化，以避免不必要的复制操作。结构体复制的时候发生的是按照字节进行的浅复制。除非结构体中含有类，否则复制时都不需要考虑其中属性的引用计数。当使用 let 来声明结构体时，编译器可以确定之后这个结构体的任何一个字节都不会被改变。另外，和 C++ 中类似的值类型不同，开发者没有办法知道和干预何时会发生结构体的复制。这些简化给了编译器更多的可能性，来排除那些不必要的复制，或者使用传递引用而非值的方式来优化一个常量结构体。\n\n编译器所做的对于值类型的复制优化和值语义类型的写时复制行为并不是一回事儿。写时复制必须由开发者来实现，想要实现写时复制，你需要检测所包含的类是否有共享的引用。\n\n和自动移除不必要的值类型复制不同，写时复制是需要自己实现的。不过编译器会移除那些不必要的“无效”浅复制，以及像是 Array 这样的类型中的代码会执行“智能的”写时复制，两者互为补充，都是对值类型的优化。\n\n如果一个结构体只由其他结构体组成，那编译器可以确保不可变性。同样地，当使用结构体时，编译器也可以生成非常快的代码。举个例子，对一个只含有结构体的数组进行操作的效率，通常要比对一个含有对象的数组进行操作的效率高得多。这是因为结构体通常要更直接：值是直接存储在数组的内存中的。而对象的数组中包含的只是对象的引用。最后，在很多情况下，编译器可以将结构体放到栈上，而不用放在堆里。\n\n![](array_in_stack.png)\n\n## 可变性\n\n所有的竞争问题、死锁问题、并发问题都是由可变变量导致的，如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。这就是为什么大部分专家都会推荐你尽可能地使用不可变的对象，以便写出安全可维护的代码。幸运的是，Swift 可以让我们在写出安全代码的同时，保留直观的可变代码的风格。\n\n\n\n\n\n\n\n## 结构体\n\n## 写时复制\n\n\n\n","slug":"在-Swift-中使用值类型","published":1,"updated":"2019-03-11T11:46:29.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikl001j1u0oarq02yfk","content":"<p>本文是 Swift 系列文章中的第二篇，你可以在<a href=\"http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/\" target=\"_blank\" rel=\"noopener\">这里</a>找到第一篇。按照计划，这篇文章主要介绍一下值类型在 Swift 中的应用。</p>\n<p>在讲 Swift 中的值类型之前，我想先复习一下 Objective-C 中的一个知识：为什么在声明 NSString 类型的 property 时要用 copy？我想应该没有人不知道答案吧。在 Swift 中使用字符串可以用 String 类型，而在使用 String 时，就不会出现这个问题了。NSString 在 Foundation 框架中是引用类型，而 String 在 Swift 标准库中是值类型，这可以说是两者最明显的区别了。</p>\n<a id=\"more\"></a>\n<p>在使用 Swift 时，我们有多种方式来存储结构化的数据，比如结构体，枚举和类。在 Swift 标准库中，绝大多数的公开类型都是结构体，而枚举和类只占很小一部分。这可能是标准库中那些类型的特性使然，但是不管从什么方面这个事实都提醒我们 Swift 中结构体有多么重要。许多 Foundation 框架中的类现在有专门针对 Swift 构建的对应结构体类型了。</p>\n<p>结构体和类主要有以下的不同：</p>\n<ul>\n<li>结构体（和枚举）是值类型，而类时引用类型。</li>\n<li>内存的管理方式不同。结构体可以被直接持有并访问，而类的示例只能通过引用来间接地访问。结构体不会被引用，但是会被复制。也就是所，结构体的持有者是唯一的，但是类的示例却能有很多个持有者。</li>\n<li>结构体是不能被继承的，而使用类，可以通过继承来共享代码。</li>\n</ul>\n<h2 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h2><p>我们经常会处理一些需要有明确的生命周期的对象，我们会去初始化它，修改它，最后销毁它。最常见的就是 View 和 View Controller了。一个视图就有着清晰的生命周期：我们会创建它，然后修改它的属于，比如改变背景色，改变位置和大小等，最后当不需要显示时，我们将它从屏幕移除并销毁这个对象。如果我们想修改两个完全不同的视图，我们就需要保证它们是独立的。想比较两个视图，我们只要检查它们是不是指向相同的内存。由于我们比较多是内存地址 ，所有使用引用类型比较合适。</p>\n<p>其他一些类型并不需要生命周期。比如一个 URL 在创建后就不会再被更改。更重要的是，它在被摧毁时并不需要进行额外的操作。当我们比较两个 URL 变量时，我们并不关心它们是否指向内存中的同一地址，我们所比较的是它们是否指向同样的 URL。因为我们通过它们的属性来比较 URL，我们将其称为值。在 Objective-C 里，我们用 NSURL 来实现一个不可变的对象。不过在 Swift 中对应的 URL 却是一个结构体。</p>\n<p>值永远不会改变，它们具有不可变的特性。这 (在绝大多数情况下) 是一件好事，因为使用不变的数据可以让代码更容易被理解。不可变性也让代码天然地具有线程安全的特性，因为不能改变的东西是可以在线程之间安全地共享的。</p>\n<p>Swift 中，结构体是用来构建值类型的。结构体不能通过引用来进行比较，你只能通过它们的属性来比较两个结构体。虽然我们可以用 var 来在结构体中声明可变的变量属性，但是这个可变性只体现在变量本身上，而不是指里面的值。改变一个结构体变量的属性，在概念上来说，和为整个变量赋值一个全新的结构体是等价的。我们总是使用一个新的结构体，并设置被改变的属性值，然后用它替代原来的结构体。这就是为什么我们在修改一个结构体变量的属性时，这个变量必须使用 var 而不能使用 let 的原因，就像下面代码这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"type\">Person</span>(name: <span class=\"string\">\"Jake\"</span>, age: <span class=\"number\">20</span>)</span><br><span class=\"line\">p.age = <span class=\"number\">23</span> <span class=\"comment\">// Cannot assign to property: 'p' is a 'let' constant</span></span><br></pre></td></tr></table></figure>\n<p>结构体只有一个持有者。比如，当我们将结构体变量传递给一个函数时，函数将接收到结构体的复制，它也只能改变它自己的这份复制。这叫做值语义 (value semantics)。而对于对象来说，它们是通过传递引用来工作的，因此类对象会拥有很多持有者，这被叫做引用语义 (reference semantics)。因为结构体只有一个持有者，所以它不可能造成引用循环。而对于类和函数这样的引用类型，我们需要特别小心，避免造成引用循环的问题。</p>\n<p>值类型总是需要复制这件事情听起来可能有点低效，不过，编译器可以帮助我们进行优化，以避免不必要的复制操作。结构体复制的时候发生的是按照字节进行的浅复制。除非结构体中含有类，否则复制时都不需要考虑其中属性的引用计数。当使用 let 来声明结构体时，编译器可以确定之后这个结构体的任何一个字节都不会被改变。另外，和 C++ 中类似的值类型不同，开发者没有办法知道和干预何时会发生结构体的复制。这些简化给了编译器更多的可能性，来排除那些不必要的复制，或者使用传递引用而非值的方式来优化一个常量结构体。</p>\n<p>编译器所做的对于值类型的复制优化和值语义类型的写时复制行为并不是一回事儿。写时复制必须由开发者来实现，想要实现写时复制，你需要检测所包含的类是否有共享的引用。</p>\n<p>和自动移除不必要的值类型复制不同，写时复制是需要自己实现的。不过编译器会移除那些不必要的“无效”浅复制，以及像是 Array 这样的类型中的代码会执行“智能的”写时复制，两者互为补充，都是对值类型的优化。</p>\n<p>如果一个结构体只由其他结构体组成，那编译器可以确保不可变性。同样地，当使用结构体时，编译器也可以生成非常快的代码。举个例子，对一个只含有结构体的数组进行操作的效率，通常要比对一个含有对象的数组进行操作的效率高得多。这是因为结构体通常要更直接：值是直接存储在数组的内存中的。而对象的数组中包含的只是对象的引用。最后，在很多情况下，编译器可以将结构体放到栈上，而不用放在堆里。</p>\n<p><img src=\"array_in_stack.png\" alt=\"\"></p>\n<h2 id=\"可变性\"><a href=\"#可变性\" class=\"headerlink\" title=\"可变性\"></a>可变性</h2><p>所有的竞争问题、死锁问题、并发问题都是由可变变量导致的，如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。这就是为什么大部分专家都会推荐你尽可能地使用不可变的对象，以便写出安全可维护的代码。幸运的是，Swift 可以让我们在写出安全代码的同时，保留直观的可变代码的风格。</p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h2 id=\"写时复制\"><a href=\"#写时复制\" class=\"headerlink\" title=\"写时复制\"></a>写时复制</h2>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>本文是 Swift 系列文章中的第二篇，你可以在<a href=\"http://jewelz.me/cjt0zq7ce0006620o0nhutb0j/\" target=\"_blank\" rel=\"noopener\">这里</a>找到第一篇。按照计划，这篇文章主要介绍一下值类型在 Swift 中的应用。</p>\n<p>在讲 Swift 中的值类型之前，我想先复习一下 Objective-C 中的一个知识：为什么在声明 NSString 类型的 property 时要用 copy？我想应该没有人不知道答案吧。在 Swift 中使用字符串可以用 String 类型，而在使用 String 时，就不会出现这个问题了。NSString 在 Foundation 框架中是引用类型，而 String 在 Swift 标准库中是值类型，这可以说是两者最明显的区别了。</p>","more":"<p>在使用 Swift 时，我们有多种方式来存储结构化的数据，比如结构体，枚举和类。在 Swift 标准库中，绝大多数的公开类型都是结构体，而枚举和类只占很小一部分。这可能是标准库中那些类型的特性使然，但是不管从什么方面这个事实都提醒我们 Swift 中结构体有多么重要。许多 Foundation 框架中的类现在有专门针对 Swift 构建的对应结构体类型了。</p>\n<p>结构体和类主要有以下的不同：</p>\n<ul>\n<li>结构体（和枚举）是值类型，而类时引用类型。</li>\n<li>内存的管理方式不同。结构体可以被直接持有并访问，而类的示例只能通过引用来间接地访问。结构体不会被引用，但是会被复制。也就是所，结构体的持有者是唯一的，但是类的示例却能有很多个持有者。</li>\n<li>结构体是不能被继承的，而使用类，可以通过继承来共享代码。</li>\n</ul>\n<h2 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h2><p>我们经常会处理一些需要有明确的生命周期的对象，我们会去初始化它，修改它，最后销毁它。最常见的就是 View 和 View Controller了。一个视图就有着清晰的生命周期：我们会创建它，然后修改它的属于，比如改变背景色，改变位置和大小等，最后当不需要显示时，我们将它从屏幕移除并销毁这个对象。如果我们想修改两个完全不同的视图，我们就需要保证它们是独立的。想比较两个视图，我们只要检查它们是不是指向相同的内存。由于我们比较多是内存地址 ，所有使用引用类型比较合适。</p>\n<p>其他一些类型并不需要生命周期。比如一个 URL 在创建后就不会再被更改。更重要的是，它在被摧毁时并不需要进行额外的操作。当我们比较两个 URL 变量时，我们并不关心它们是否指向内存中的同一地址，我们所比较的是它们是否指向同样的 URL。因为我们通过它们的属性来比较 URL，我们将其称为值。在 Objective-C 里，我们用 NSURL 来实现一个不可变的对象。不过在 Swift 中对应的 URL 却是一个结构体。</p>\n<p>值永远不会改变，它们具有不可变的特性。这 (在绝大多数情况下) 是一件好事，因为使用不变的数据可以让代码更容易被理解。不可变性也让代码天然地具有线程安全的特性，因为不能改变的东西是可以在线程之间安全地共享的。</p>\n<p>Swift 中，结构体是用来构建值类型的。结构体不能通过引用来进行比较，你只能通过它们的属性来比较两个结构体。虽然我们可以用 var 来在结构体中声明可变的变量属性，但是这个可变性只体现在变量本身上，而不是指里面的值。改变一个结构体变量的属性，在概念上来说，和为整个变量赋值一个全新的结构体是等价的。我们总是使用一个新的结构体，并设置被改变的属性值，然后用它替代原来的结构体。这就是为什么我们在修改一个结构体变量的属性时，这个变量必须使用 var 而不能使用 let 的原因，就像下面代码这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"type\">Person</span>(name: <span class=\"string\">\"Jake\"</span>, age: <span class=\"number\">20</span>)</span><br><span class=\"line\">p.age = <span class=\"number\">23</span> <span class=\"comment\">// Cannot assign to property: 'p' is a 'let' constant</span></span><br></pre></td></tr></table></figure>\n<p>结构体只有一个持有者。比如，当我们将结构体变量传递给一个函数时，函数将接收到结构体的复制，它也只能改变它自己的这份复制。这叫做值语义 (value semantics)。而对于对象来说，它们是通过传递引用来工作的，因此类对象会拥有很多持有者，这被叫做引用语义 (reference semantics)。因为结构体只有一个持有者，所以它不可能造成引用循环。而对于类和函数这样的引用类型，我们需要特别小心，避免造成引用循环的问题。</p>\n<p>值类型总是需要复制这件事情听起来可能有点低效，不过，编译器可以帮助我们进行优化，以避免不必要的复制操作。结构体复制的时候发生的是按照字节进行的浅复制。除非结构体中含有类，否则复制时都不需要考虑其中属性的引用计数。当使用 let 来声明结构体时，编译器可以确定之后这个结构体的任何一个字节都不会被改变。另外，和 C++ 中类似的值类型不同，开发者没有办法知道和干预何时会发生结构体的复制。这些简化给了编译器更多的可能性，来排除那些不必要的复制，或者使用传递引用而非值的方式来优化一个常量结构体。</p>\n<p>编译器所做的对于值类型的复制优化和值语义类型的写时复制行为并不是一回事儿。写时复制必须由开发者来实现，想要实现写时复制，你需要检测所包含的类是否有共享的引用。</p>\n<p>和自动移除不必要的值类型复制不同，写时复制是需要自己实现的。不过编译器会移除那些不必要的“无效”浅复制，以及像是 Array 这样的类型中的代码会执行“智能的”写时复制，两者互为补充，都是对值类型的优化。</p>\n<p>如果一个结构体只由其他结构体组成，那编译器可以确保不可变性。同样地，当使用结构体时，编译器也可以生成非常快的代码。举个例子，对一个只含有结构体的数组进行操作的效率，通常要比对一个含有对象的数组进行操作的效率高得多。这是因为结构体通常要更直接：值是直接存储在数组的内存中的。而对象的数组中包含的只是对象的引用。最后，在很多情况下，编译器可以将结构体放到栈上，而不用放在堆里。</p>\n<p><img src=\"array_in_stack.png\" alt=\"\"></p>\n<h2 id=\"可变性\"><a href=\"#可变性\" class=\"headerlink\" title=\"可变性\"></a>可变性</h2><p>所有的竞争问题、死锁问题、并发问题都是由可变变量导致的，如果变量永远不会被更改，那么就不可能产生竞争或者并发问题。这就是为什么大部分专家都会推荐你尽可能地使用不可变的对象，以便写出安全可维护的代码。幸运的是，Swift 可以让我们在写出安全代码的同时，保留直观的可变代码的风格。</p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h2 id=\"写时复制\"><a href=\"#写时复制\" class=\"headerlink\" title=\"写时复制\"></a>写时复制</h2>"},{"title":"快速搭建基于HLS和RTMP的视频推流","date":"2016-11-22T02:04:49.000Z","_content":"在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：\n\n<!--more-->\n\n* 推流端：采集，前处理，编码，推流。\n\n* 服务端处理：转码，录制，截图，鉴黄。\n\n* 播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。\n\n\n# 前言\n在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：\n\n* 推流端：采集，前处理，编码，推流。\n\n* 服务端处理：转码，录制，截图，鉴黄。\n\n* 播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。\n\n概括起来就是以下几个步骤：\n\n* 采集: iOS 系统因为软硬件种类不多，硬件适配性比较好，所以比较简单。而 Android 端市面上机型众多，要做些机型的适配工作。PC 端是最麻烦的，各种奇葩摄像头驱动。所以现在很多的中小型直播平台，只做 iOS 端的视频直播。\n\n* 前处理: 美颜算法，视频的模糊效果，水印等都是在这个环节做。目前 iOS 端最著名开源框架的毫无疑问就是 GPUImage 。其中内置了一百多种渲染效果，还支持各种脚本自定义。\n\n* 编码: 重难点在于要在分辨率，帧率，码率，GOP 等参数设计上找到最佳平衡点。iOS8 之后，Apple 开放了 VideoToolbox.framework, 可以直接进行硬编解码，这也是为什么现在大多数直播平台最低只支持到iOS8 的原因之一。iOS 端硬件兼容性比较好，可以直接采取硬编码。而 Android 得硬编码又是一大坑。\n\n* 传输: 这块一般都是交给 CDN 服务商。CDN 只提供带宽和服务器之间的传输，发送端和接收端的网络连接抖动缓存还是要自己实现的。目前国内最大的CDN服务商应该是网宿。\n\n* 服务器处理: 需要在服务器做一些流处理工作，让推送上来的流适配各个平台各种不同的协议，比如:RTMP,HLS,FLV...\n\n* 解码和渲染: 也就即音视频的播放。解码毫无疑问也必须要硬解码。iOS 端兼容较好，Android 依然大坑。这块的难点在于音画同步，国内比较好的开源项目应该是B站开源的[ijkplayer](https://github.com/Bilibili/ijkplayer)。\n\n对于移动端开发者来说，最主要工作的就是推流端和播放器端了。\n在本篇文章中我把注意力放在大家不太关注的服务端。同学们只要按照下面的步骤，就能很快的搭建一个视频推流服务器。\n\n# 在 Mac下 搭建 nginx+rtmp 服务器\n\n### 1. 使用 [homebrew](https://brew.sh) 安装 nginx\n\n先 clone nginx 到本地：\n```shell\nbrew tap homebrew/nginx\n```\n执行安装：\n```shell\nbrew install nginx-full --with-rtmp-module\n```\n此时, nginx和rtmp模块就安装好了, 输入命令：\n```shell\nnginx\n```\n在浏览器里打开 [http://localhost:8080](http://localhost:8080)，如果出现以下页面说明 nginx 安装成功。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170322/12/18436043320170322125539085.png?526x218_130)\n\n### 2. 配置 hls 和 rtmp\n使用编辑器打开 `usr/local/etc/nginx/nginx.conf`文件，找到 `http` 下的 `server`, 在花括号中添加如下内容：\n```\nserver {\n   listen       8080;\n   server_name  localhost;\n\n   #charset koi8-r;\n\n   #access_log  logs/host.access.log  main;\n\n   location / {\n       root   html;\n       index  index.html index.htm;\n   }\n\n   # HLS config\n   location /hls {\n       types {\n           application/vnd.apple.mpegurl m3u8;\n           video/mp2t ts;\n     }\n       root html;\n       add_header Cache-Control no-cache;\n\t}\n\t...\n```\n这样 HLS 就配置好了。\n    \n现在来配置 RTMP ，直接滚动到最后一行，在 `http` 的结束(最后的`}`)后面添加如下内容：\n```\nrtmp {\n    server {\n       listen 1935;\n       application gzhm {\n           live on;\n           record off;\n       }\n       #增加对HLS支持开始\n       application hls {\n           live on;\n           hls on;\n           hls_path /usr/local/var/www/hls;\n       }\n   }\n}\n```\n保存配置文件，重新加载 nginx 配置：\n```shell\nnginx -s reload\n```\n\n# 测试推流\n我们可以使用 [ffmpeg](http://ffmpeg.org) 来进行推流。关于 ffmpeg 的详细用法，大家可以参考官方文档。 \n> FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。\n\n### 1. 使用 homebrew 安装 ffmpeg\n在终端执行命令：\n\n```shell\nbrew install ffmpeg\n```\n\n安装 ffmpeg 时间就要长一点了, 请耐心等待一会。安装完成后，就可以使用 ffmpeg 来推流了。\n\n### 2. 推流\n我们可以在终端输入以下命令来推流：\n```shell\nffmpeg -loglevel verbose -re -i  视频的全路径  -vcodec libx264 -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:1935/hls/文件名称(不包含后缀)\n```\n\n然后你就可以在 `/usr/local/var/www/hls` 目录下看到一个后缀名为 `.m3u8` 的文件和 `.ts` 分片文件。\n    \n这里的输出目录 `/hls` 是在 `nginx.conf`中 配置好的。这里要对应，不然是无法推流成功的。\n### 3. 测试拉流\n1. HLS 拉流测试：\n  \n    你可以在电脑 Safari 里输入地址查看视频，也可以用 iPad 或者 iPhone 上的 Safari 来访问（需要把 localhost 改为 nginx 的所在电脑的ip地址）\n\n    ```\n    http://localhost:8080/hls/a.m3u8\n    ```\n    \n2. RTMP 拉流测试\n    由于浏览器并不支持 rtmp 协议，所以我们需要下载支持 rtmp 协议的视频播放器，可以使用 VLC 播放器。\n        \n    将视频推流到服务器后，打开 VLC，然后 File -> open network -> 输入：\n    ```\n    trmp://localhost:1935/hls/a\n    ```\n    \n通过以上简单的几个步骤，就能在自己的电脑上搭建推流服务器了。不过在真实的项目中还是建议使用第三方的直播服务，比如阿里云和腾讯云，他们对视频直播都有比较完整的方案。\n    \n\n","source":"_posts/快速搭建基于HLS和RTMP的视频推流.md","raw":"---\ntitle: 快速搭建基于HLS和RTMP的视频推流\ndate: 2016-11-22 10:04:49\ntags: 直播\n---\n在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：\n\n<!--more-->\n\n* 推流端：采集，前处理，编码，推流。\n\n* 服务端处理：转码，录制，截图，鉴黄。\n\n* 播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。\n\n\n# 前言\n在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：\n\n* 推流端：采集，前处理，编码，推流。\n\n* 服务端处理：转码，录制，截图，鉴黄。\n\n* 播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。\n\n概括起来就是以下几个步骤：\n\n* 采集: iOS 系统因为软硬件种类不多，硬件适配性比较好，所以比较简单。而 Android 端市面上机型众多，要做些机型的适配工作。PC 端是最麻烦的，各种奇葩摄像头驱动。所以现在很多的中小型直播平台，只做 iOS 端的视频直播。\n\n* 前处理: 美颜算法，视频的模糊效果，水印等都是在这个环节做。目前 iOS 端最著名开源框架的毫无疑问就是 GPUImage 。其中内置了一百多种渲染效果，还支持各种脚本自定义。\n\n* 编码: 重难点在于要在分辨率，帧率，码率，GOP 等参数设计上找到最佳平衡点。iOS8 之后，Apple 开放了 VideoToolbox.framework, 可以直接进行硬编解码，这也是为什么现在大多数直播平台最低只支持到iOS8 的原因之一。iOS 端硬件兼容性比较好，可以直接采取硬编码。而 Android 得硬编码又是一大坑。\n\n* 传输: 这块一般都是交给 CDN 服务商。CDN 只提供带宽和服务器之间的传输，发送端和接收端的网络连接抖动缓存还是要自己实现的。目前国内最大的CDN服务商应该是网宿。\n\n* 服务器处理: 需要在服务器做一些流处理工作，让推送上来的流适配各个平台各种不同的协议，比如:RTMP,HLS,FLV...\n\n* 解码和渲染: 也就即音视频的播放。解码毫无疑问也必须要硬解码。iOS 端兼容较好，Android 依然大坑。这块的难点在于音画同步，国内比较好的开源项目应该是B站开源的[ijkplayer](https://github.com/Bilibili/ijkplayer)。\n\n对于移动端开发者来说，最主要工作的就是推流端和播放器端了。\n在本篇文章中我把注意力放在大家不太关注的服务端。同学们只要按照下面的步骤，就能很快的搭建一个视频推流服务器。\n\n# 在 Mac下 搭建 nginx+rtmp 服务器\n\n### 1. 使用 [homebrew](https://brew.sh) 安装 nginx\n\n先 clone nginx 到本地：\n```shell\nbrew tap homebrew/nginx\n```\n执行安装：\n```shell\nbrew install nginx-full --with-rtmp-module\n```\n此时, nginx和rtmp模块就安装好了, 输入命令：\n```shell\nnginx\n```\n在浏览器里打开 [http://localhost:8080](http://localhost:8080)，如果出现以下页面说明 nginx 安装成功。\n\n![](http://image18-c.poco.cn/mypoco/myphoto/20170322/12/18436043320170322125539085.png?526x218_130)\n\n### 2. 配置 hls 和 rtmp\n使用编辑器打开 `usr/local/etc/nginx/nginx.conf`文件，找到 `http` 下的 `server`, 在花括号中添加如下内容：\n```\nserver {\n   listen       8080;\n   server_name  localhost;\n\n   #charset koi8-r;\n\n   #access_log  logs/host.access.log  main;\n\n   location / {\n       root   html;\n       index  index.html index.htm;\n   }\n\n   # HLS config\n   location /hls {\n       types {\n           application/vnd.apple.mpegurl m3u8;\n           video/mp2t ts;\n     }\n       root html;\n       add_header Cache-Control no-cache;\n\t}\n\t...\n```\n这样 HLS 就配置好了。\n    \n现在来配置 RTMP ，直接滚动到最后一行，在 `http` 的结束(最后的`}`)后面添加如下内容：\n```\nrtmp {\n    server {\n       listen 1935;\n       application gzhm {\n           live on;\n           record off;\n       }\n       #增加对HLS支持开始\n       application hls {\n           live on;\n           hls on;\n           hls_path /usr/local/var/www/hls;\n       }\n   }\n}\n```\n保存配置文件，重新加载 nginx 配置：\n```shell\nnginx -s reload\n```\n\n# 测试推流\n我们可以使用 [ffmpeg](http://ffmpeg.org) 来进行推流。关于 ffmpeg 的详细用法，大家可以参考官方文档。 \n> FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。\n\n### 1. 使用 homebrew 安装 ffmpeg\n在终端执行命令：\n\n```shell\nbrew install ffmpeg\n```\n\n安装 ffmpeg 时间就要长一点了, 请耐心等待一会。安装完成后，就可以使用 ffmpeg 来推流了。\n\n### 2. 推流\n我们可以在终端输入以下命令来推流：\n```shell\nffmpeg -loglevel verbose -re -i  视频的全路径  -vcodec libx264 -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:1935/hls/文件名称(不包含后缀)\n```\n\n然后你就可以在 `/usr/local/var/www/hls` 目录下看到一个后缀名为 `.m3u8` 的文件和 `.ts` 分片文件。\n    \n这里的输出目录 `/hls` 是在 `nginx.conf`中 配置好的。这里要对应，不然是无法推流成功的。\n### 3. 测试拉流\n1. HLS 拉流测试：\n  \n    你可以在电脑 Safari 里输入地址查看视频，也可以用 iPad 或者 iPhone 上的 Safari 来访问（需要把 localhost 改为 nginx 的所在电脑的ip地址）\n\n    ```\n    http://localhost:8080/hls/a.m3u8\n    ```\n    \n2. RTMP 拉流测试\n    由于浏览器并不支持 rtmp 协议，所以我们需要下载支持 rtmp 协议的视频播放器，可以使用 VLC 播放器。\n        \n    将视频推流到服务器后，打开 VLC，然后 File -> open network -> 输入：\n    ```\n    trmp://localhost:1935/hls/a\n    ```\n    \n通过以上简单的几个步骤，就能在自己的电脑上搭建推流服务器了。不过在真实的项目中还是建议使用第三方的直播服务，比如阿里云和腾讯云，他们对视频直播都有比较完整的方案。\n    \n\n","slug":"快速搭建基于HLS和RTMP的视频推流","published":1,"updated":"2018-05-27T00:10:25.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikm001m1u0o4gsi2n95","content":"<p>在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>推流端：采集，前处理，编码，推流。</p>\n</li>\n<li><p>服务端处理：转码，录制，截图，鉴黄。</p>\n</li>\n<li><p>播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。</p>\n</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：</p>\n<ul>\n<li><p>推流端：采集，前处理，编码，推流。</p>\n</li>\n<li><p>服务端处理：转码，录制，截图，鉴黄。</p>\n</li>\n<li><p>播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。</p>\n</li>\n</ul>\n<p>概括起来就是以下几个步骤：</p>\n<ul>\n<li><p>采集: iOS 系统因为软硬件种类不多，硬件适配性比较好，所以比较简单。而 Android 端市面上机型众多，要做些机型的适配工作。PC 端是最麻烦的，各种奇葩摄像头驱动。所以现在很多的中小型直播平台，只做 iOS 端的视频直播。</p>\n</li>\n<li><p>前处理: 美颜算法，视频的模糊效果，水印等都是在这个环节做。目前 iOS 端最著名开源框架的毫无疑问就是 GPUImage 。其中内置了一百多种渲染效果，还支持各种脚本自定义。</p>\n</li>\n<li><p>编码: 重难点在于要在分辨率，帧率，码率，GOP 等参数设计上找到最佳平衡点。iOS8 之后，Apple 开放了 VideoToolbox.framework, 可以直接进行硬编解码，这也是为什么现在大多数直播平台最低只支持到iOS8 的原因之一。iOS 端硬件兼容性比较好，可以直接采取硬编码。而 Android 得硬编码又是一大坑。</p>\n</li>\n<li><p>传输: 这块一般都是交给 CDN 服务商。CDN 只提供带宽和服务器之间的传输，发送端和接收端的网络连接抖动缓存还是要自己实现的。目前国内最大的CDN服务商应该是网宿。</p>\n</li>\n<li><p>服务器处理: 需要在服务器做一些流处理工作，让推送上来的流适配各个平台各种不同的协议，比如:RTMP,HLS,FLV…</p>\n</li>\n<li><p>解码和渲染: 也就即音视频的播放。解码毫无疑问也必须要硬解码。iOS 端兼容较好，Android 依然大坑。这块的难点在于音画同步，国内比较好的开源项目应该是B站开源的<a href=\"https://github.com/Bilibili/ijkplayer\" target=\"_blank\" rel=\"noopener\">ijkplayer</a>。</p>\n</li>\n</ul>\n<p>对于移动端开发者来说，最主要工作的就是推流端和播放器端了。<br>在本篇文章中我把注意力放在大家不太关注的服务端。同学们只要按照下面的步骤，就能很快的搭建一个视频推流服务器。</p>\n<h1 id=\"在-Mac下-搭建-nginx-rtmp-服务器\"><a href=\"#在-Mac下-搭建-nginx-rtmp-服务器\" class=\"headerlink\" title=\"在 Mac下 搭建 nginx+rtmp 服务器\"></a>在 Mac下 搭建 nginx+rtmp 服务器</h1><h3 id=\"1-使用-homebrew-安装-nginx\"><a href=\"#1-使用-homebrew-安装-nginx\" class=\"headerlink\" title=\"1. 使用 homebrew 安装 nginx\"></a>1. 使用 <a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">homebrew</a> 安装 nginx</h3><p>先 clone nginx 到本地：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap homebrew/nginx</span><br></pre></td></tr></table></figure></p>\n<p>执行安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx-full --with-rtmp-module</span><br></pre></td></tr></table></figure></p>\n<p>此时, nginx和rtmp模块就安装好了, 输入命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器里打开 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>，如果出现以下页面说明 nginx 安装成功。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170322/12/18436043320170322125539085.png?526x218_130\" alt=\"\"></p>\n<h3 id=\"2-配置-hls-和-rtmp\"><a href=\"#2-配置-hls-和-rtmp\" class=\"headerlink\" title=\"2. 配置 hls 和 rtmp\"></a>2. 配置 hls 和 rtmp</h3><p>使用编辑器打开 <code>usr/local/etc/nginx/nginx.conf</code>文件，找到 <code>http</code> 下的 <code>server</code>, 在花括号中添加如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">   listen       8080;</span><br><span class=\"line\">   server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">   #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">   location / &#123;</span><br><span class=\"line\">       root   html;</span><br><span class=\"line\">       index  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   # HLS config</span><br><span class=\"line\">   location /hls &#123;</span><br><span class=\"line\">       types &#123;</span><br><span class=\"line\">           application/vnd.apple.mpegurl m3u8;</span><br><span class=\"line\">           video/mp2t ts;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">       root html;</span><br><span class=\"line\">       add_header Cache-Control no-cache;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure></p>\n<p>这样 HLS 就配置好了。</p>\n<p>现在来配置 RTMP ，直接滚动到最后一行，在 <code>http</code> 的结束(最后的<code>}</code>)后面添加如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">       listen 1935;</span><br><span class=\"line\">       application gzhm &#123;</span><br><span class=\"line\">           live on;</span><br><span class=\"line\">           record off;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       #增加对HLS支持开始</span><br><span class=\"line\">       application hls &#123;</span><br><span class=\"line\">           live on;</span><br><span class=\"line\">           hls on;</span><br><span class=\"line\">           hls_path /usr/local/var/www/hls;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保存配置文件，重新加载 nginx 配置：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"测试推流\"><a href=\"#测试推流\" class=\"headerlink\" title=\"测试推流\"></a>测试推流</h1><p>我们可以使用 <a href=\"http://ffmpeg.org\" target=\"_blank\" rel=\"noopener\">ffmpeg</a> 来进行推流。关于 ffmpeg 的详细用法，大家可以参考官方文档。 </p>\n<blockquote>\n<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。</p>\n</blockquote>\n<h3 id=\"1-使用-homebrew-安装-ffmpeg\"><a href=\"#1-使用-homebrew-安装-ffmpeg\" class=\"headerlink\" title=\"1. 使用 homebrew 安装 ffmpeg\"></a>1. 使用 homebrew 安装 ffmpeg</h3><p>在终端执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n<p>安装 ffmpeg 时间就要长一点了, 请耐心等待一会。安装完成后，就可以使用 ffmpeg 来推流了。</p>\n<h3 id=\"2-推流\"><a href=\"#2-推流\" class=\"headerlink\" title=\"2. 推流\"></a>2. 推流</h3><p>我们可以在终端输入以下命令来推流：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -loglevel verbose -re -i  视频的全路径  -vcodec libx264 -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:1935/hls/文件名称(不包含后缀)</span><br></pre></td></tr></table></figure></p>\n<p>然后你就可以在 <code>/usr/local/var/www/hls</code> 目录下看到一个后缀名为 <code>.m3u8</code> 的文件和 <code>.ts</code> 分片文件。</p>\n<p>这里的输出目录 <code>/hls</code> 是在 <code>nginx.conf</code>中 配置好的。这里要对应，不然是无法推流成功的。</p>\n<h3 id=\"3-测试拉流\"><a href=\"#3-测试拉流\" class=\"headerlink\" title=\"3. 测试拉流\"></a>3. 测试拉流</h3><ol>\n<li><p>HLS 拉流测试：</p>\n<p> 你可以在电脑 Safari 里输入地址查看视频，也可以用 iPad 或者 iPhone 上的 Safari 来访问（需要把 localhost 改为 nginx 的所在电脑的ip地址）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/hls/a.m3u8</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>RTMP 拉流测试<br> 由于浏览器并不支持 rtmp 协议，所以我们需要下载支持 rtmp 协议的视频播放器，可以使用 VLC 播放器。</p>\n<p> 将视频推流到服务器后，打开 VLC，然后 File -&gt; open network -&gt; 输入：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trmp://localhost:1935/hls/a</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过以上简单的几个步骤，就能在自己的电脑上搭建推流服务器了。不过在真实的项目中还是建议使用第三方的直播服务，比如阿里云和腾讯云，他们对视频直播都有比较完整的方案。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：</p>","more":"<ul>\n<li><p>推流端：采集，前处理，编码，推流。</p>\n</li>\n<li><p>服务端处理：转码，录制，截图，鉴黄。</p>\n</li>\n<li><p>播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。</p>\n</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在视频直播越来越火热的今天，作为一个开发者有必要了解一个完整的直播流程是怎样的。在一个完整的手机机直播主要包含了以下几个环节：</p>\n<ul>\n<li><p>推流端：采集，前处理，编码，推流。</p>\n</li>\n<li><p>服务端处理：转码，录制，截图，鉴黄。</p>\n</li>\n<li><p>播放器：拉流，解码，渲染；互动系统：聊天室，礼物系统等。</p>\n</li>\n</ul>\n<p>概括起来就是以下几个步骤：</p>\n<ul>\n<li><p>采集: iOS 系统因为软硬件种类不多，硬件适配性比较好，所以比较简单。而 Android 端市面上机型众多，要做些机型的适配工作。PC 端是最麻烦的，各种奇葩摄像头驱动。所以现在很多的中小型直播平台，只做 iOS 端的视频直播。</p>\n</li>\n<li><p>前处理: 美颜算法，视频的模糊效果，水印等都是在这个环节做。目前 iOS 端最著名开源框架的毫无疑问就是 GPUImage 。其中内置了一百多种渲染效果，还支持各种脚本自定义。</p>\n</li>\n<li><p>编码: 重难点在于要在分辨率，帧率，码率，GOP 等参数设计上找到最佳平衡点。iOS8 之后，Apple 开放了 VideoToolbox.framework, 可以直接进行硬编解码，这也是为什么现在大多数直播平台最低只支持到iOS8 的原因之一。iOS 端硬件兼容性比较好，可以直接采取硬编码。而 Android 得硬编码又是一大坑。</p>\n</li>\n<li><p>传输: 这块一般都是交给 CDN 服务商。CDN 只提供带宽和服务器之间的传输，发送端和接收端的网络连接抖动缓存还是要自己实现的。目前国内最大的CDN服务商应该是网宿。</p>\n</li>\n<li><p>服务器处理: 需要在服务器做一些流处理工作，让推送上来的流适配各个平台各种不同的协议，比如:RTMP,HLS,FLV…</p>\n</li>\n<li><p>解码和渲染: 也就即音视频的播放。解码毫无疑问也必须要硬解码。iOS 端兼容较好，Android 依然大坑。这块的难点在于音画同步，国内比较好的开源项目应该是B站开源的<a href=\"https://github.com/Bilibili/ijkplayer\" target=\"_blank\" rel=\"noopener\">ijkplayer</a>。</p>\n</li>\n</ul>\n<p>对于移动端开发者来说，最主要工作的就是推流端和播放器端了。<br>在本篇文章中我把注意力放在大家不太关注的服务端。同学们只要按照下面的步骤，就能很快的搭建一个视频推流服务器。</p>\n<h1 id=\"在-Mac下-搭建-nginx-rtmp-服务器\"><a href=\"#在-Mac下-搭建-nginx-rtmp-服务器\" class=\"headerlink\" title=\"在 Mac下 搭建 nginx+rtmp 服务器\"></a>在 Mac下 搭建 nginx+rtmp 服务器</h1><h3 id=\"1-使用-homebrew-安装-nginx\"><a href=\"#1-使用-homebrew-安装-nginx\" class=\"headerlink\" title=\"1. 使用 homebrew 安装 nginx\"></a>1. 使用 <a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">homebrew</a> 安装 nginx</h3><p>先 clone nginx 到本地：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap homebrew/nginx</span><br></pre></td></tr></table></figure></p>\n<p>执行安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx-full --with-rtmp-module</span><br></pre></td></tr></table></figure></p>\n<p>此时, nginx和rtmp模块就安装好了, 输入命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器里打开 <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a>，如果出现以下页面说明 nginx 安装成功。</p>\n<p><img src=\"http://image18-c.poco.cn/mypoco/myphoto/20170322/12/18436043320170322125539085.png?526x218_130\" alt=\"\"></p>\n<h3 id=\"2-配置-hls-和-rtmp\"><a href=\"#2-配置-hls-和-rtmp\" class=\"headerlink\" title=\"2. 配置 hls 和 rtmp\"></a>2. 配置 hls 和 rtmp</h3><p>使用编辑器打开 <code>usr/local/etc/nginx/nginx.conf</code>文件，找到 <code>http</code> 下的 <code>server</code>, 在花括号中添加如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">   listen       8080;</span><br><span class=\"line\">   server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">   #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">   location / &#123;</span><br><span class=\"line\">       root   html;</span><br><span class=\"line\">       index  index.html index.htm;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   # HLS config</span><br><span class=\"line\">   location /hls &#123;</span><br><span class=\"line\">       types &#123;</span><br><span class=\"line\">           application/vnd.apple.mpegurl m3u8;</span><br><span class=\"line\">           video/mp2t ts;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">       root html;</span><br><span class=\"line\">       add_header Cache-Control no-cache;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure></p>\n<p>这样 HLS 就配置好了。</p>\n<p>现在来配置 RTMP ，直接滚动到最后一行，在 <code>http</code> 的结束(最后的<code>}</code>)后面添加如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">       listen 1935;</span><br><span class=\"line\">       application gzhm &#123;</span><br><span class=\"line\">           live on;</span><br><span class=\"line\">           record off;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       #增加对HLS支持开始</span><br><span class=\"line\">       application hls &#123;</span><br><span class=\"line\">           live on;</span><br><span class=\"line\">           hls on;</span><br><span class=\"line\">           hls_path /usr/local/var/www/hls;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保存配置文件，重新加载 nginx 配置：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"测试推流\"><a href=\"#测试推流\" class=\"headerlink\" title=\"测试推流\"></a>测试推流</h1><p>我们可以使用 <a href=\"http://ffmpeg.org\" target=\"_blank\" rel=\"noopener\">ffmpeg</a> 来进行推流。关于 ffmpeg 的详细用法，大家可以参考官方文档。 </p>\n<blockquote>\n<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。</p>\n</blockquote>\n<h3 id=\"1-使用-homebrew-安装-ffmpeg\"><a href=\"#1-使用-homebrew-安装-ffmpeg\" class=\"headerlink\" title=\"1. 使用 homebrew 安装 ffmpeg\"></a>1. 使用 homebrew 安装 ffmpeg</h3><p>在终端执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n<p>安装 ffmpeg 时间就要长一点了, 请耐心等待一会。安装完成后，就可以使用 ffmpeg 来推流了。</p>\n<h3 id=\"2-推流\"><a href=\"#2-推流\" class=\"headerlink\" title=\"2. 推流\"></a>2. 推流</h3><p>我们可以在终端输入以下命令来推流：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -loglevel verbose -re -i  视频的全路径  -vcodec libx264 -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:1935/hls/文件名称(不包含后缀)</span><br></pre></td></tr></table></figure></p>\n<p>然后你就可以在 <code>/usr/local/var/www/hls</code> 目录下看到一个后缀名为 <code>.m3u8</code> 的文件和 <code>.ts</code> 分片文件。</p>\n<p>这里的输出目录 <code>/hls</code> 是在 <code>nginx.conf</code>中 配置好的。这里要对应，不然是无法推流成功的。</p>\n<h3 id=\"3-测试拉流\"><a href=\"#3-测试拉流\" class=\"headerlink\" title=\"3. 测试拉流\"></a>3. 测试拉流</h3><ol>\n<li><p>HLS 拉流测试：</p>\n<p> 你可以在电脑 Safari 里输入地址查看视频，也可以用 iPad 或者 iPhone 上的 Safari 来访问（需要把 localhost 改为 nginx 的所在电脑的ip地址）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/hls/a.m3u8</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>RTMP 拉流测试<br> 由于浏览器并不支持 rtmp 协议，所以我们需要下载支持 rtmp 协议的视频播放器，可以使用 VLC 播放器。</p>\n<p> 将视频推流到服务器后，打开 VLC，然后 File -&gt; open network -&gt; 输入：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trmp://localhost:1935/hls/a</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>通过以上简单的几个步骤，就能在自己的电脑上搭建推流服务器了。不过在真实的项目中还是建议使用第三方的直播服务，比如阿里云和腾讯云，他们对视频直播都有比较完整的方案。</p>"},{"title":"开启 RxSwift 之旅——开篇","date":"2017-06-01T02:08:13.000Z","thumbnailImage":"rxlogo.png","_content":"\nRxSwift 是 ReactiveX 在 Swift 下的实现。ReactiveX 是一个通过使用可观察序列来组合异步和基于事件的程序的库。\n\n<!--more-->\n\n很多地方通常把 ReactiveX 称为 “函数响应式编程” ，其实这是不恰当的。ReactiveX 可以是函数式的，可以是响应式的，但是和“函数响应式编程”是不同的概览。一个主要的不同点是“函数响应式编程”是对随着时间不停变化的值进行操作的，而 ReactiveX 对随时间发射的离散值进行操作。\n\n我们先不急着去看 RxSwift 的源码，在这之前，我们有必要先了解一下什么是响应式编程。\n\n\n\n## \"什么是响应式编程\"\n\n> 响应式编程是一种面向数据流和变化传播的编程范式。\n\n在某种程度上，这并不是什么新东西。用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。响应式就是基于这种想法。\n\n一个流就是一个将要发生的以时间为序的事件序列。它能发射出三种不同的东西：一个数据值(某种类型的)，一个错误（error）或者一个“完成（completed）”的信号。比如说，当前按钮所在的窗口或视图关闭时，“单击”事件流也就“完成”了。\n\n以一个单击事件流为例：定义一个针对数据值的函数，在发出一个值时，该函数就会异步地执行，还有一个针对发出错误时的函数，最后还有针对发出‘完成’时的函数。“监听”流的行为叫做订阅。我们定义的这些函数就是观察者。这个流就是被观察的主体(subject)（或“可观察的(observable)”）。这正是观察者设计模式。\n\n在你使用 RxSwift 时，你就会发现它正是按照这种模式来进行设计的。在 RxSwift 中，一个流可以被称为序列(Sequences)。序列的生产者就是 Observable 。\n\n在 RxSwift 的 playground 中就有这么一句话：\n> Every Observable instance is just a sequence.\n\n## Observable\n\n如果你在学习 RxSwift 之前就使用过 ReactiveCocoa 的话，你会发现 RxSwift 和 ReactiveCocoa 完全是两个不同的物种。在 RxSwift 的世界里，所有的东西都是 Observable 的。你可以创造它们、操作它们，然后订阅它们来响应变化。\n\n理解 Observable 还有一件很重要的事情：\n> Observables will not execute their subscription closure unless there is a subscriber. \n\n可以这么理解，如果你只是调用一个返回一个 Observable 的方法，生成序列不会被执行。Observable 只是一个解释序列如何被生成和什么参数被使用于生成元素的定义。生成序列开始于 subscribe 方法被调用的时候。\n\n下面的例子中，Observable 的闭包永远不会执行：\n\n```swift\nexample(\"Observable with no subscribers\") {\n    _ = Observable<String>.create { observer -> Disposable in\n        print(\"This will never be printed\")\n        observer.on(.next(\"😬\"))\n        observer.on(.completed)\n        return Disposables.create()\n    }\n}\n```\n\n只有当我们调用 `subscribe(_:)` 时，Observable 的闭包才会执行：\n\n```swift\nexample(\"Observable with subscriber\") {\n  _ = Observable<String>.create { observer in\n            print(\"Observable created\")\n            observer.on(.next(\"😉\"))\n            observer.on(.completed)\n            return Disposables.create()\n        }\n        .subscribe { event in\n            print(event)\n    }\n}\n```\n\n上面例子中从传入闭包创建一个 Observable ，到调用 `subscribe(_:)` 这个过程中 RxSwift 到底做了什么？我们可以先从简单的 empty 开始。\n\n### empty\n\nempty 就是创建一个空的 sequence, 它只能发出一个 completed 事件。\n\n```swift\nexample(of: \"empty\") {\n    Observable<Int>.empty()\n        .subscribe({\n            print($0)\n    }) \n}\n\n// 打印结果\n--- Example of: empty ---\ncompleted\n\n```\n\n上面代码中通过 Observable 的 `empty` 方法创建了一个 `Observable<Int>`, 打开 Observable+Creation.swift 文件，可以看到 `empty()` 的实现：\n\n```swift\npublic static func empty() -> Observable<E> {\n    return EmptyProducer<E>()\n}\n```\n\n这里返回了一个 `EmptyProducer` 的实例，点进去看看`EmptyProducer`是个什么东西：\n\n```swift\nfinal class EmptyProducer<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType>(_ observer: O) -> Disposable where O.E == Element {\n        observer.on(.completed)\n        return Disposables.create()\n    }\n}\n```\n\n`EmptyProducer`是 `Producer` 的子类，重写了 `subscribe(:)` 。在 subscribe 方法中，观察者订阅了一个完成信号。\n\n当我们通过 `empty()` 创建了一个 Observable 后，然后会调用 `subscribe(_:)`，打开 ObservableType+Extensions.swift 文件, 可以看到 subscribe 方法的实现：\n\n```swift\npublic func subscribe(_ on: @escaping (Event<E>) -> Void) -> Disposable {\n    let observer = AnonymousObserver { e in\n        on(e)\n    }\n    return self.subscribeSafe(observer)\n}\n```\nsubscribe 方法接受了闭包之后，先创建了一个匿名观察者，subscribe 的闭包参数作为构造器的参数传给了 observer。点击进去 AnonymousObserver源码：\n\n```swift\nfinal class AnonymousObserver<ElementType> : ObserverBase<ElementType> {\n    typealias Element = ElementType\n    \n    typealias EventHandler = (Event<Element>) -> Void\n    \n    private let _eventHandler : EventHandler\n    \n    init(_ eventHandler: @escaping EventHandler) {\n#if TRACE_RESOURCES\n        let _ = Resources.incrementTotal()\n#endif\n        _eventHandler = eventHandler\n    }\n\n    override func onCore(_ event: Event<Element>) {\n        return _eventHandler(event)\n    }\n    \n#if TRACE_RESOURCES\n    deinit {\n        let _ = Resources.decrementTotal()\n    }\n#endif\n}\n```\n\nAnonymousObserver 的构造器接受一个闭包，然后在 onCore 方法中， 私有的 `_eventHandler` 会被调用。到这里为止，我们还是不知道我们在调用 `subscribe(_:)` 时传入的闭包最终的调用时机。不过已经很清楚的知道了，这个闭包在 `onCore(:)` 中调用了，我们继续进入 AnonymousObserver 的父类 ObserverBase 中一探究竟：\n\n```swift\nclass ObserverBase<ElementType> : Disposable, ObserverType {\n    typealias E = ElementType\n\n    private var _isStopped: AtomicInt = 0\n\n    func on(_ event: Event<E>) {\n        switch event {\n        case .next:\n            if _isStopped == 0 {\n                onCore(event)\n            }\n        case .error, .completed:\n            if AtomicCompareAndSwap(0, 1, &_isStopped) {\n                onCore(event)\n            }\n        }\n    }\n\n    func onCore(_ event: Event<E>) {\n        rxAbstractMethod()\n    }\n\n    func dispose() {\n        _ = AtomicCompareAndSwap(0, 1, &_isStopped)\n    }\n}\n```\n这一下就很清楚了，`onCore(:)` 会被 `on(:)` 调用。让我们再次回到 ObservableType+Extensions.swift 文件中，匿名观察者(AnonymousObserver)创建完后，调用 `subscribeSafe(:)` 作为函数返回值。在文件的最下面可以看到 `subscribeSafe(:)` 的实现：\n\n```swift\nfileprivate func subscribeSafe<O: ObserverType>(_ observer: O) -> Disposable where O.E == E {\n    return self.asObservable().subscribe(observer)\n}\n```\n\n这里会调用 `subscribe(:)` ，注意了，这里的 `subscribe(:)` 是 ObservableType 协议中定义的方法：\n\n```swift \npublic protocol ObservableType : ObservableConvertibleType {\n    \n    associatedtype E\n    \n    func subscribe<O: ObserverType>(_ observer: O) -> Disposable where O.E == E\n}\n```\n\n这里的参数是一个 ObserverType，也就是一个观察者，千万要与 `func subscribe(_ on: @escaping (Event<E>) -> Void) -> Disposable` 做好区分。\n\n好了， subscribe 方法将创建的匿名观察者作为参数，而在 EmptyProducer 中的 subscribe 的实现我们已经看过了：\n\n```\noverride func subscribe<O : ObserverType>(_ observer: O) -> Disposable where O.E == Element {\n    observer.on(.completed)\n    return Disposables.create()\n}\n```\n\n这里刚好调用了观察者的 `on(:)`, 在 ObserverBase 中 on 方法会调用 `onCore(:)`, onCore 方法调用了 `subscribe(_ on: @escaping (Event<E>) -> Void) -> Disposable` 参数中的闭包。由于 `subscribe(_ observer: O)` 中观察者只订阅了 \"completed\" 信号，所有闭包不会执行。\n\n至此从创建一个 observable， 到调用 `subscribe(_:)` 整个过程我们已经很清楚了。现在也就能明白为什么只是调用一个返回一个 Observable 的方法，生成序列不会被执行了。\n\n## 小结\n最后总结一下调用 `subscribe(_:)` 后的整个过程：用 subscribe 中的闭包创建一个匿名观察者（观察者私有的 `_eventHandler` 会将闭包保存起来），然后将创建的匿名观察者作为参数传给 `subscribeSafe(:)` , `subscribeSafe(:)` 会调用 `subscribe(:)`, 并将匿名观察者作为参数。`subscribe(:)` 会调用 observer 的 `on(:)`, 当 observer 的 on 方法被调用后，最终会调用开始时传入的闭包。\n\n以上只是分析了一下 empty 的实现，像 of, just, create 等的实现在细节上有一些区别，总的思路是一样的。在查看源码时可能会有一点绕，主要是因为继承太多，很多方法都要到父类中去找，而且 ObservableType 和 ObserverType 的 Extension 太多，代码分散到各个文件中。\n\nRxSwift 的代码只看了个开头，还有很多地方没有完全弄明白。在使用 RxSwift 的过程中你能体会到 \"响应式\" 和 \"函数式\" 给我们的开发带来的便利性。\n\n","source":"_posts/开启 RxSwift 之旅——开篇.md","raw":"---\ntitle: 开启 RxSwift 之旅——开篇\ndate: 2017-06-01 10:08:13\ntags: \n  - Swift \n  - 响应式编程\ncategory: Swift\nthumbnailImage: rxlogo.png\n---\n\nRxSwift 是 ReactiveX 在 Swift 下的实现。ReactiveX 是一个通过使用可观察序列来组合异步和基于事件的程序的库。\n\n<!--more-->\n\n很多地方通常把 ReactiveX 称为 “函数响应式编程” ，其实这是不恰当的。ReactiveX 可以是函数式的，可以是响应式的，但是和“函数响应式编程”是不同的概览。一个主要的不同点是“函数响应式编程”是对随着时间不停变化的值进行操作的，而 ReactiveX 对随时间发射的离散值进行操作。\n\n我们先不急着去看 RxSwift 的源码，在这之前，我们有必要先了解一下什么是响应式编程。\n\n\n\n## \"什么是响应式编程\"\n\n> 响应式编程是一种面向数据流和变化传播的编程范式。\n\n在某种程度上，这并不是什么新东西。用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。响应式就是基于这种想法。\n\n一个流就是一个将要发生的以时间为序的事件序列。它能发射出三种不同的东西：一个数据值(某种类型的)，一个错误（error）或者一个“完成（completed）”的信号。比如说，当前按钮所在的窗口或视图关闭时，“单击”事件流也就“完成”了。\n\n以一个单击事件流为例：定义一个针对数据值的函数，在发出一个值时，该函数就会异步地执行，还有一个针对发出错误时的函数，最后还有针对发出‘完成’时的函数。“监听”流的行为叫做订阅。我们定义的这些函数就是观察者。这个流就是被观察的主体(subject)（或“可观察的(observable)”）。这正是观察者设计模式。\n\n在你使用 RxSwift 时，你就会发现它正是按照这种模式来进行设计的。在 RxSwift 中，一个流可以被称为序列(Sequences)。序列的生产者就是 Observable 。\n\n在 RxSwift 的 playground 中就有这么一句话：\n> Every Observable instance is just a sequence.\n\n## Observable\n\n如果你在学习 RxSwift 之前就使用过 ReactiveCocoa 的话，你会发现 RxSwift 和 ReactiveCocoa 完全是两个不同的物种。在 RxSwift 的世界里，所有的东西都是 Observable 的。你可以创造它们、操作它们，然后订阅它们来响应变化。\n\n理解 Observable 还有一件很重要的事情：\n> Observables will not execute their subscription closure unless there is a subscriber. \n\n可以这么理解，如果你只是调用一个返回一个 Observable 的方法，生成序列不会被执行。Observable 只是一个解释序列如何被生成和什么参数被使用于生成元素的定义。生成序列开始于 subscribe 方法被调用的时候。\n\n下面的例子中，Observable 的闭包永远不会执行：\n\n```swift\nexample(\"Observable with no subscribers\") {\n    _ = Observable<String>.create { observer -> Disposable in\n        print(\"This will never be printed\")\n        observer.on(.next(\"😬\"))\n        observer.on(.completed)\n        return Disposables.create()\n    }\n}\n```\n\n只有当我们调用 `subscribe(_:)` 时，Observable 的闭包才会执行：\n\n```swift\nexample(\"Observable with subscriber\") {\n  _ = Observable<String>.create { observer in\n            print(\"Observable created\")\n            observer.on(.next(\"😉\"))\n            observer.on(.completed)\n            return Disposables.create()\n        }\n        .subscribe { event in\n            print(event)\n    }\n}\n```\n\n上面例子中从传入闭包创建一个 Observable ，到调用 `subscribe(_:)` 这个过程中 RxSwift 到底做了什么？我们可以先从简单的 empty 开始。\n\n### empty\n\nempty 就是创建一个空的 sequence, 它只能发出一个 completed 事件。\n\n```swift\nexample(of: \"empty\") {\n    Observable<Int>.empty()\n        .subscribe({\n            print($0)\n    }) \n}\n\n// 打印结果\n--- Example of: empty ---\ncompleted\n\n```\n\n上面代码中通过 Observable 的 `empty` 方法创建了一个 `Observable<Int>`, 打开 Observable+Creation.swift 文件，可以看到 `empty()` 的实现：\n\n```swift\npublic static func empty() -> Observable<E> {\n    return EmptyProducer<E>()\n}\n```\n\n这里返回了一个 `EmptyProducer` 的实例，点进去看看`EmptyProducer`是个什么东西：\n\n```swift\nfinal class EmptyProducer<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType>(_ observer: O) -> Disposable where O.E == Element {\n        observer.on(.completed)\n        return Disposables.create()\n    }\n}\n```\n\n`EmptyProducer`是 `Producer` 的子类，重写了 `subscribe(:)` 。在 subscribe 方法中，观察者订阅了一个完成信号。\n\n当我们通过 `empty()` 创建了一个 Observable 后，然后会调用 `subscribe(_:)`，打开 ObservableType+Extensions.swift 文件, 可以看到 subscribe 方法的实现：\n\n```swift\npublic func subscribe(_ on: @escaping (Event<E>) -> Void) -> Disposable {\n    let observer = AnonymousObserver { e in\n        on(e)\n    }\n    return self.subscribeSafe(observer)\n}\n```\nsubscribe 方法接受了闭包之后，先创建了一个匿名观察者，subscribe 的闭包参数作为构造器的参数传给了 observer。点击进去 AnonymousObserver源码：\n\n```swift\nfinal class AnonymousObserver<ElementType> : ObserverBase<ElementType> {\n    typealias Element = ElementType\n    \n    typealias EventHandler = (Event<Element>) -> Void\n    \n    private let _eventHandler : EventHandler\n    \n    init(_ eventHandler: @escaping EventHandler) {\n#if TRACE_RESOURCES\n        let _ = Resources.incrementTotal()\n#endif\n        _eventHandler = eventHandler\n    }\n\n    override func onCore(_ event: Event<Element>) {\n        return _eventHandler(event)\n    }\n    \n#if TRACE_RESOURCES\n    deinit {\n        let _ = Resources.decrementTotal()\n    }\n#endif\n}\n```\n\nAnonymousObserver 的构造器接受一个闭包，然后在 onCore 方法中， 私有的 `_eventHandler` 会被调用。到这里为止，我们还是不知道我们在调用 `subscribe(_:)` 时传入的闭包最终的调用时机。不过已经很清楚的知道了，这个闭包在 `onCore(:)` 中调用了，我们继续进入 AnonymousObserver 的父类 ObserverBase 中一探究竟：\n\n```swift\nclass ObserverBase<ElementType> : Disposable, ObserverType {\n    typealias E = ElementType\n\n    private var _isStopped: AtomicInt = 0\n\n    func on(_ event: Event<E>) {\n        switch event {\n        case .next:\n            if _isStopped == 0 {\n                onCore(event)\n            }\n        case .error, .completed:\n            if AtomicCompareAndSwap(0, 1, &_isStopped) {\n                onCore(event)\n            }\n        }\n    }\n\n    func onCore(_ event: Event<E>) {\n        rxAbstractMethod()\n    }\n\n    func dispose() {\n        _ = AtomicCompareAndSwap(0, 1, &_isStopped)\n    }\n}\n```\n这一下就很清楚了，`onCore(:)` 会被 `on(:)` 调用。让我们再次回到 ObservableType+Extensions.swift 文件中，匿名观察者(AnonymousObserver)创建完后，调用 `subscribeSafe(:)` 作为函数返回值。在文件的最下面可以看到 `subscribeSafe(:)` 的实现：\n\n```swift\nfileprivate func subscribeSafe<O: ObserverType>(_ observer: O) -> Disposable where O.E == E {\n    return self.asObservable().subscribe(observer)\n}\n```\n\n这里会调用 `subscribe(:)` ，注意了，这里的 `subscribe(:)` 是 ObservableType 协议中定义的方法：\n\n```swift \npublic protocol ObservableType : ObservableConvertibleType {\n    \n    associatedtype E\n    \n    func subscribe<O: ObserverType>(_ observer: O) -> Disposable where O.E == E\n}\n```\n\n这里的参数是一个 ObserverType，也就是一个观察者，千万要与 `func subscribe(_ on: @escaping (Event<E>) -> Void) -> Disposable` 做好区分。\n\n好了， subscribe 方法将创建的匿名观察者作为参数，而在 EmptyProducer 中的 subscribe 的实现我们已经看过了：\n\n```\noverride func subscribe<O : ObserverType>(_ observer: O) -> Disposable where O.E == Element {\n    observer.on(.completed)\n    return Disposables.create()\n}\n```\n\n这里刚好调用了观察者的 `on(:)`, 在 ObserverBase 中 on 方法会调用 `onCore(:)`, onCore 方法调用了 `subscribe(_ on: @escaping (Event<E>) -> Void) -> Disposable` 参数中的闭包。由于 `subscribe(_ observer: O)` 中观察者只订阅了 \"completed\" 信号，所有闭包不会执行。\n\n至此从创建一个 observable， 到调用 `subscribe(_:)` 整个过程我们已经很清楚了。现在也就能明白为什么只是调用一个返回一个 Observable 的方法，生成序列不会被执行了。\n\n## 小结\n最后总结一下调用 `subscribe(_:)` 后的整个过程：用 subscribe 中的闭包创建一个匿名观察者（观察者私有的 `_eventHandler` 会将闭包保存起来），然后将创建的匿名观察者作为参数传给 `subscribeSafe(:)` , `subscribeSafe(:)` 会调用 `subscribe(:)`, 并将匿名观察者作为参数。`subscribe(:)` 会调用 observer 的 `on(:)`, 当 observer 的 on 方法被调用后，最终会调用开始时传入的闭包。\n\n以上只是分析了一下 empty 的实现，像 of, just, create 等的实现在细节上有一些区别，总的思路是一样的。在查看源码时可能会有一点绕，主要是因为继承太多，很多方法都要到父类中去找，而且 ObservableType 和 ObserverType 的 Extension 太多，代码分散到各个文件中。\n\nRxSwift 的代码只看了个开头，还有很多地方没有完全弄明白。在使用 RxSwift 的过程中你能体会到 \"响应式\" 和 \"函数式\" 给我们的开发带来的便利性。\n\n","slug":"开启 RxSwift 之旅——开篇","published":1,"updated":"2018-05-30T03:37:54.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikn001p1u0o6t03zo1m","content":"<p>RxSwift 是 ReactiveX 在 Swift 下的实现。ReactiveX 是一个通过使用可观察序列来组合异步和基于事件的程序的库。</p>\n<a id=\"more\"></a>\n<p>很多地方通常把 ReactiveX 称为 “函数响应式编程” ，其实这是不恰当的。ReactiveX 可以是函数式的，可以是响应式的，但是和“函数响应式编程”是不同的概览。一个主要的不同点是“函数响应式编程”是对随着时间不停变化的值进行操作的，而 ReactiveX 对随时间发射的离散值进行操作。</p>\n<p>我们先不急着去看 RxSwift 的源码，在这之前，我们有必要先了解一下什么是响应式编程。</p>\n<h2 id=\"“什么是响应式编程”\"><a href=\"#“什么是响应式编程”\" class=\"headerlink\" title=\"“什么是响应式编程”\"></a>“什么是响应式编程”</h2><blockquote>\n<p>响应式编程是一种面向数据流和变化传播的编程范式。</p>\n</blockquote>\n<p>在某种程度上，这并不是什么新东西。用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。响应式就是基于这种想法。</p>\n<p>一个流就是一个将要发生的以时间为序的事件序列。它能发射出三种不同的东西：一个数据值(某种类型的)，一个错误（error）或者一个“完成（completed）”的信号。比如说，当前按钮所在的窗口或视图关闭时，“单击”事件流也就“完成”了。</p>\n<p>以一个单击事件流为例：定义一个针对数据值的函数，在发出一个值时，该函数就会异步地执行，还有一个针对发出错误时的函数，最后还有针对发出‘完成’时的函数。“监听”流的行为叫做订阅。我们定义的这些函数就是观察者。这个流就是被观察的主体(subject)（或“可观察的(observable)”）。这正是观察者设计模式。</p>\n<p>在你使用 RxSwift 时，你就会发现它正是按照这种模式来进行设计的。在 RxSwift 中，一个流可以被称为序列(Sequences)。序列的生产者就是 Observable 。</p>\n<p>在 RxSwift 的 playground 中就有这么一句话：</p>\n<blockquote>\n<p>Every Observable instance is just a sequence.</p>\n</blockquote>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>如果你在学习 RxSwift 之前就使用过 ReactiveCocoa 的话，你会发现 RxSwift 和 ReactiveCocoa 完全是两个不同的物种。在 RxSwift 的世界里，所有的东西都是 Observable 的。你可以创造它们、操作它们，然后订阅它们来响应变化。</p>\n<p>理解 Observable 还有一件很重要的事情：</p>\n<blockquote>\n<p>Observables will not execute their subscription closure unless there is a subscriber. </p>\n</blockquote>\n<p>可以这么理解，如果你只是调用一个返回一个 Observable 的方法，生成序列不会被执行。Observable 只是一个解释序列如何被生成和什么参数被使用于生成元素的定义。生成序列开始于 subscribe 方法被调用的时候。</p>\n<p>下面的例子中，Observable 的闭包永远不会执行：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"Observable with no subscribers\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"This will never be printed\"</span>)</span><br><span class=\"line\">        observer.on(.next(<span class=\"string\">\"😬\"</span>))</span><br><span class=\"line\">        observer.on(.completed)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有当我们调用 <code>subscribe(_:)</code> 时，Observable 的闭包才会执行：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"Observable with subscriber\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"number\">_</span> = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Observable created\"</span>)</span><br><span class=\"line\">            observer.on(.next(<span class=\"string\">\"😉\"</span>))</span><br><span class=\"line\">            observer.on(.completed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子中从传入闭包创建一个 Observable ，到调用 <code>subscribe(_:)</code> 这个过程中 RxSwift 到底做了什么？我们可以先从简单的 empty 开始。</p>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h3><p>empty 就是创建一个空的 sequence, 它只能发出一个 completed 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(of: <span class=\"string\">\"empty\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">        .subscribe(&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">--- <span class=\"type\">Example</span> of: empty ---</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n<p>上面代码中通过 Observable 的 <code>empty</code> 方法创建了一个 <code>Observable&lt;Int&gt;</code>, 打开 Observable+Creation.swift 文件，可以看到 <code>empty()</code> 的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">EmptyProducer</span>&lt;<span class=\"type\">E</span>&gt;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里返回了一个 <code>EmptyProducer</code> 的实例，点进去看看<code>EmptyProducer</code>是个什么东西：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmptyProducer</span>&lt;<span class=\"title\">Element</span>&gt; : <span class=\"title\">Producer</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span>&lt;O : ObserverType&gt;<span class=\"params\">(<span class=\"number\">_</span> observer: O)</span></span> -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">where</span> <span class=\"type\">O</span>.<span class=\"type\">E</span> == <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        observer.on(.completed)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>EmptyProducer</code>是 <code>Producer</code> 的子类，重写了 <code>subscribe(:)</code> 。在 subscribe 方法中，观察者订阅了一个完成信号。</p>\n<p>当我们通过 <code>empty()</code> 创建了一个 Observable 后，然后会调用 <code>subscribe(_:)</code>，打开 ObservableType+Extensions.swift 文件, 可以看到 subscribe 方法的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"number\">_</span> on: @escaping <span class=\"params\">(Event&lt;E&gt;)</span></span></span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> observer = <span class=\"type\">AnonymousObserver</span> &#123; e <span class=\"keyword\">in</span></span><br><span class=\"line\">        on(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.subscribeSafe(observer)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>subscribe 方法接受了闭包之后，先创建了一个匿名观察者，subscribe 的闭包参数作为构造器的参数传给了 observer。点击进去 AnonymousObserver源码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousObserver</span>&lt;<span class=\"title\">ElementType</span>&gt; : <span class=\"title\">ObserverBase</span>&lt;<span class=\"title\">ElementType</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Element</span> = <span class=\"type\">ElementType</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">EventHandler</span> = (<span class=\"type\">Event</span>&lt;<span class=\"type\">Element</span>&gt;) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> _eventHandler : <span class=\"type\">EventHandler</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"number\">_</span> eventHandler: @escaping <span class=\"type\">EventHandler</span>) &#123;</span><br><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">TRACE_RESOURCES</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"type\">Resources</span>.incrementTotal()</span><br><span class=\"line\">#endif</span><br><span class=\"line\">        _eventHandler = eventHandler</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">onCore</span><span class=\"params\">(<span class=\"number\">_</span> event: Event&lt;Element&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _eventHandler(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">TRACE_RESOURCES</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"type\">Resources</span>.decrementTotal()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AnonymousObserver 的构造器接受一个闭包，然后在 onCore 方法中， 私有的 <code>_eventHandler</code> 会被调用。到这里为止，我们还是不知道我们在调用 <code>subscribe(_:)</code> 时传入的闭包最终的调用时机。不过已经很清楚的知道了，这个闭包在 <code>onCore(:)</code> 中调用了，我们继续进入 AnonymousObserver 的父类 ObserverBase 中一探究竟：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverBase</span>&lt;<span class=\"title\">ElementType</span>&gt; : <span class=\"title\">Disposable</span>, <span class=\"title\">ObserverType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">E</span> = <span class=\"type\">ElementType</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> _isStopped: <span class=\"type\">AtomicInt</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">on</span><span class=\"params\">(<span class=\"number\">_</span> event: Event&lt;E&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> event &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .next:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> _isStopped == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                onCore(event)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .error, .completed:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"type\">AtomicCompareAndSwap</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, &amp;_isStopped) &#123;</span><br><span class=\"line\">                onCore(event)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">onCore</span><span class=\"params\">(<span class=\"number\">_</span> event: Event&lt;E&gt;)</span></span> &#123;</span><br><span class=\"line\">        rxAbstractMethod()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispose</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"number\">_</span> = <span class=\"type\">AtomicCompareAndSwap</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, &amp;_isStopped)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一下就很清楚了，<code>onCore(:)</code> 会被 <code>on(:)</code> 调用。让我们再次回到 ObservableType+Extensions.swift 文件中，匿名观察者(AnonymousObserver)创建完后，调用 <code>subscribeSafe(:)</code> 作为函数返回值。在文件的最下面可以看到 <code>subscribeSafe(:)</code> 的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribeSafe</span>&lt;O: ObserverType&gt;<span class=\"params\">(<span class=\"number\">_</span> observer: O)</span></span> -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">where</span> <span class=\"type\">O</span>.<span class=\"type\">E</span> == <span class=\"type\">E</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.asObservable().subscribe(observer)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会调用 <code>subscribe(:)</code> ，注意了，这里的 <code>subscribe(:)</code> 是 ObservableType 协议中定义的方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ObservableType</span> : <span class=\"title\">ObservableConvertibleType</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    associatedtype <span class=\"type\">E</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span>&lt;O: ObserverType&gt;<span class=\"params\">(<span class=\"number\">_</span> observer: O)</span></span> -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">where</span> <span class=\"type\">O</span>.<span class=\"type\">E</span> == <span class=\"type\">E</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的参数是一个 ObserverType，也就是一个观察者，千万要与 <code>func subscribe(_ on: @escaping (Event&lt;E&gt;) -&gt; Void) -&gt; Disposable</code> 做好区分。</p>\n<p>好了， subscribe 方法将创建的匿名观察者作为参数，而在 EmptyProducer 中的 subscribe 的实现我们已经看过了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override func subscribe&lt;O : ObserverType&gt;(_ observer: O) -&gt; Disposable where O.E == Element &#123;</span><br><span class=\"line\">    observer.on(.completed)</span><br><span class=\"line\">    return Disposables.create()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里刚好调用了观察者的 <code>on(:)</code>, 在 ObserverBase 中 on 方法会调用 <code>onCore(:)</code>, onCore 方法调用了 <code>subscribe(_ on: @escaping (Event&lt;E&gt;) -&gt; Void) -&gt; Disposable</code> 参数中的闭包。由于 <code>subscribe(_ observer: O)</code> 中观察者只订阅了 “completed” 信号，所有闭包不会执行。</p>\n<p>至此从创建一个 observable， 到调用 <code>subscribe(_:)</code> 整个过程我们已经很清楚了。现在也就能明白为什么只是调用一个返回一个 Observable 的方法，生成序列不会被执行了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>最后总结一下调用 <code>subscribe(_:)</code> 后的整个过程：用 subscribe 中的闭包创建一个匿名观察者（观察者私有的 <code>_eventHandler</code> 会将闭包保存起来），然后将创建的匿名观察者作为参数传给 <code>subscribeSafe(:)</code> , <code>subscribeSafe(:)</code> 会调用 <code>subscribe(:)</code>, 并将匿名观察者作为参数。<code>subscribe(:)</code> 会调用 observer 的 <code>on(:)</code>, 当 observer 的 on 方法被调用后，最终会调用开始时传入的闭包。</p>\n<p>以上只是分析了一下 empty 的实现，像 of, just, create 等的实现在细节上有一些区别，总的思路是一样的。在查看源码时可能会有一点绕，主要是因为继承太多，很多方法都要到父类中去找，而且 ObservableType 和 ObserverType 的 Extension 太多，代码分散到各个文件中。</p>\n<p>RxSwift 的代码只看了个开头，还有很多地方没有完全弄明白。在使用 RxSwift 的过程中你能体会到 “响应式” 和 “函数式” 给我们的开发带来的便利性。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikn001p1u0o6t03zo1m/rxlogo.png","excerpt":"<p>RxSwift 是 ReactiveX 在 Swift 下的实现。ReactiveX 是一个通过使用可观察序列来组合异步和基于事件的程序的库。</p>","more":"<p>很多地方通常把 ReactiveX 称为 “函数响应式编程” ，其实这是不恰当的。ReactiveX 可以是函数式的，可以是响应式的，但是和“函数响应式编程”是不同的概览。一个主要的不同点是“函数响应式编程”是对随着时间不停变化的值进行操作的，而 ReactiveX 对随时间发射的离散值进行操作。</p>\n<p>我们先不急着去看 RxSwift 的源码，在这之前，我们有必要先了解一下什么是响应式编程。</p>\n<h2 id=\"“什么是响应式编程”\"><a href=\"#“什么是响应式编程”\" class=\"headerlink\" title=\"“什么是响应式编程”\"></a>“什么是响应式编程”</h2><blockquote>\n<p>响应式编程是一种面向数据流和变化传播的编程范式。</p>\n</blockquote>\n<p>在某种程度上，这并不是什么新东西。用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。响应式就是基于这种想法。</p>\n<p>一个流就是一个将要发生的以时间为序的事件序列。它能发射出三种不同的东西：一个数据值(某种类型的)，一个错误（error）或者一个“完成（completed）”的信号。比如说，当前按钮所在的窗口或视图关闭时，“单击”事件流也就“完成”了。</p>\n<p>以一个单击事件流为例：定义一个针对数据值的函数，在发出一个值时，该函数就会异步地执行，还有一个针对发出错误时的函数，最后还有针对发出‘完成’时的函数。“监听”流的行为叫做订阅。我们定义的这些函数就是观察者。这个流就是被观察的主体(subject)（或“可观察的(observable)”）。这正是观察者设计模式。</p>\n<p>在你使用 RxSwift 时，你就会发现它正是按照这种模式来进行设计的。在 RxSwift 中，一个流可以被称为序列(Sequences)。序列的生产者就是 Observable 。</p>\n<p>在 RxSwift 的 playground 中就有这么一句话：</p>\n<blockquote>\n<p>Every Observable instance is just a sequence.</p>\n</blockquote>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>如果你在学习 RxSwift 之前就使用过 ReactiveCocoa 的话，你会发现 RxSwift 和 ReactiveCocoa 完全是两个不同的物种。在 RxSwift 的世界里，所有的东西都是 Observable 的。你可以创造它们、操作它们，然后订阅它们来响应变化。</p>\n<p>理解 Observable 还有一件很重要的事情：</p>\n<blockquote>\n<p>Observables will not execute their subscription closure unless there is a subscriber. </p>\n</blockquote>\n<p>可以这么理解，如果你只是调用一个返回一个 Observable 的方法，生成序列不会被执行。Observable 只是一个解释序列如何被生成和什么参数被使用于生成元素的定义。生成序列开始于 subscribe 方法被调用的时候。</p>\n<p>下面的例子中，Observable 的闭包永远不会执行：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"Observable with no subscribers\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"number\">_</span> = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"This will never be printed\"</span>)</span><br><span class=\"line\">        observer.on(.next(<span class=\"string\">\"😬\"</span>))</span><br><span class=\"line\">        observer.on(.completed)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有当我们调用 <code>subscribe(_:)</code> 时，Observable 的闭包才会执行：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"Observable with subscriber\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"number\">_</span> = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Observable created\"</span>)</span><br><span class=\"line\">            observer.on(.next(<span class=\"string\">\"😉\"</span>))</span><br><span class=\"line\">            observer.on(.completed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面例子中从传入闭包创建一个 Observable ，到调用 <code>subscribe(_:)</code> 这个过程中 RxSwift 到底做了什么？我们可以先从简单的 empty 开始。</p>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h3><p>empty 就是创建一个空的 sequence, 它只能发出一个 completed 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(of: <span class=\"string\">\"empty\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">        .subscribe(&#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\">--- <span class=\"type\">Example</span> of: empty ---</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n<p>上面代码中通过 Observable 的 <code>empty</code> 方法创建了一个 <code>Observable&lt;Int&gt;</code>, 打开 Observable+Creation.swift 文件，可以看到 <code>empty()</code> 的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">EmptyProducer</span>&lt;<span class=\"type\">E</span>&gt;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里返回了一个 <code>EmptyProducer</code> 的实例，点进去看看<code>EmptyProducer</code>是个什么东西：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmptyProducer</span>&lt;<span class=\"title\">Element</span>&gt; : <span class=\"title\">Producer</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span>&lt;O : ObserverType&gt;<span class=\"params\">(<span class=\"number\">_</span> observer: O)</span></span> -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">where</span> <span class=\"type\">O</span>.<span class=\"type\">E</span> == <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        observer.on(.completed)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>EmptyProducer</code>是 <code>Producer</code> 的子类，重写了 <code>subscribe(:)</code> 。在 subscribe 方法中，观察者订阅了一个完成信号。</p>\n<p>当我们通过 <code>empty()</code> 创建了一个 Observable 后，然后会调用 <code>subscribe(_:)</code>，打开 ObservableType+Extensions.swift 文件, 可以看到 subscribe 方法的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"number\">_</span> on: @escaping <span class=\"params\">(Event&lt;E&gt;)</span></span></span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> observer = <span class=\"type\">AnonymousObserver</span> &#123; e <span class=\"keyword\">in</span></span><br><span class=\"line\">        on(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.subscribeSafe(observer)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>subscribe 方法接受了闭包之后，先创建了一个匿名观察者，subscribe 的闭包参数作为构造器的参数传给了 observer。点击进去 AnonymousObserver源码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonymousObserver</span>&lt;<span class=\"title\">ElementType</span>&gt; : <span class=\"title\">ObserverBase</span>&lt;<span class=\"title\">ElementType</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Element</span> = <span class=\"type\">ElementType</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">EventHandler</span> = (<span class=\"type\">Event</span>&lt;<span class=\"type\">Element</span>&gt;) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> _eventHandler : <span class=\"type\">EventHandler</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"number\">_</span> eventHandler: @escaping <span class=\"type\">EventHandler</span>) &#123;</span><br><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">TRACE_RESOURCES</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"type\">Resources</span>.incrementTotal()</span><br><span class=\"line\">#endif</span><br><span class=\"line\">        _eventHandler = eventHandler</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">onCore</span><span class=\"params\">(<span class=\"number\">_</span> event: Event&lt;Element&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _eventHandler(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">TRACE_RESOURCES</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"type\">Resources</span>.decrementTotal()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AnonymousObserver 的构造器接受一个闭包，然后在 onCore 方法中， 私有的 <code>_eventHandler</code> 会被调用。到这里为止，我们还是不知道我们在调用 <code>subscribe(_:)</code> 时传入的闭包最终的调用时机。不过已经很清楚的知道了，这个闭包在 <code>onCore(:)</code> 中调用了，我们继续进入 AnonymousObserver 的父类 ObserverBase 中一探究竟：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverBase</span>&lt;<span class=\"title\">ElementType</span>&gt; : <span class=\"title\">Disposable</span>, <span class=\"title\">ObserverType</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">E</span> = <span class=\"type\">ElementType</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> _isStopped: <span class=\"type\">AtomicInt</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">on</span><span class=\"params\">(<span class=\"number\">_</span> event: Event&lt;E&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> event &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .next:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> _isStopped == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                onCore(event)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .error, .completed:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"type\">AtomicCompareAndSwap</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, &amp;_isStopped) &#123;</span><br><span class=\"line\">                onCore(event)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">onCore</span><span class=\"params\">(<span class=\"number\">_</span> event: Event&lt;E&gt;)</span></span> &#123;</span><br><span class=\"line\">        rxAbstractMethod()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispose</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"number\">_</span> = <span class=\"type\">AtomicCompareAndSwap</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, &amp;_isStopped)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一下就很清楚了，<code>onCore(:)</code> 会被 <code>on(:)</code> 调用。让我们再次回到 ObservableType+Extensions.swift 文件中，匿名观察者(AnonymousObserver)创建完后，调用 <code>subscribeSafe(:)</code> 作为函数返回值。在文件的最下面可以看到 <code>subscribeSafe(:)</code> 的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribeSafe</span>&lt;O: ObserverType&gt;<span class=\"params\">(<span class=\"number\">_</span> observer: O)</span></span> -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">where</span> <span class=\"type\">O</span>.<span class=\"type\">E</span> == <span class=\"type\">E</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.asObservable().subscribe(observer)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会调用 <code>subscribe(:)</code> ，注意了，这里的 <code>subscribe(:)</code> 是 ObservableType 协议中定义的方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ObservableType</span> : <span class=\"title\">ObservableConvertibleType</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    associatedtype <span class=\"type\">E</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span>&lt;O: ObserverType&gt;<span class=\"params\">(<span class=\"number\">_</span> observer: O)</span></span> -&gt; <span class=\"type\">Disposable</span> <span class=\"keyword\">where</span> <span class=\"type\">O</span>.<span class=\"type\">E</span> == <span class=\"type\">E</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的参数是一个 ObserverType，也就是一个观察者，千万要与 <code>func subscribe(_ on: @escaping (Event&lt;E&gt;) -&gt; Void) -&gt; Disposable</code> 做好区分。</p>\n<p>好了， subscribe 方法将创建的匿名观察者作为参数，而在 EmptyProducer 中的 subscribe 的实现我们已经看过了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override func subscribe&lt;O : ObserverType&gt;(_ observer: O) -&gt; Disposable where O.E == Element &#123;</span><br><span class=\"line\">    observer.on(.completed)</span><br><span class=\"line\">    return Disposables.create()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里刚好调用了观察者的 <code>on(:)</code>, 在 ObserverBase 中 on 方法会调用 <code>onCore(:)</code>, onCore 方法调用了 <code>subscribe(_ on: @escaping (Event&lt;E&gt;) -&gt; Void) -&gt; Disposable</code> 参数中的闭包。由于 <code>subscribe(_ observer: O)</code> 中观察者只订阅了 “completed” 信号，所有闭包不会执行。</p>\n<p>至此从创建一个 observable， 到调用 <code>subscribe(_:)</code> 整个过程我们已经很清楚了。现在也就能明白为什么只是调用一个返回一个 Observable 的方法，生成序列不会被执行了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>最后总结一下调用 <code>subscribe(_:)</code> 后的整个过程：用 subscribe 中的闭包创建一个匿名观察者（观察者私有的 <code>_eventHandler</code> 会将闭包保存起来），然后将创建的匿名观察者作为参数传给 <code>subscribeSafe(:)</code> , <code>subscribeSafe(:)</code> 会调用 <code>subscribe(:)</code>, 并将匿名观察者作为参数。<code>subscribe(:)</code> 会调用 observer 的 <code>on(:)</code>, 当 observer 的 on 方法被调用后，最终会调用开始时传入的闭包。</p>\n<p>以上只是分析了一下 empty 的实现，像 of, just, create 等的实现在细节上有一些区别，总的思路是一样的。在查看源码时可能会有一点绕，主要是因为继承太多，很多方法都要到父类中去找，而且 ObservableType 和 ObserverType 的 Extension 太多，代码分散到各个文件中。</p>\n<p>RxSwift 的代码只看了个开头，还有很多地方没有完全弄明白。在使用 RxSwift 的过程中你能体会到 “响应式” 和 “函数式” 给我们的开发带来的便利性。</p>"},{"title":"打造一个流畅的UITableView","date":"2016-06-23T01:16:16.000Z","_content":"Table view需要有很好的滚动性能，不然用户会在滚动过程中发现动画的瑕疵。\n为了保证table view平滑滚动，确保你采取了以下的措施:\n\n<!--more-->\n\n* 正确使用`reuseIdentifier`来重用cell\n* 尽量使所有的view opaque，包括cell自身\n* 避免图片缩放\n* 缓存行高\n* 尽量不要在`cellForRowAtIndexPath:`中设置数据，如果你需要用到它，只用一次然后缓存结果\n* 对齐像素\n* 使用`rowHeight`, `sectionFooterHeight` 和 `sectionHeaderHeight`来设定固定的高，不要请求delegate\n\n\n\n## 1. 正确使用 **reuseIdentifier** 来重用cell\n一个开发中常见的错误就是没有给UITableViewCells， UICollectionViewCells，甚至是UITableViewHeaderFooterViews设置正确的reuseIdentifier。\n\n为了性能最优化，table view用 `tableView:cellForRowAtIndexPath:` 为rows分配cells的时候，它的数据应该重用自UITableViewCell。\n\n不使用reuseIdentifier的话，每显示一行，table view就不得不创建全新的cell。这对性能的影响可是相当大的，尤其会使app的滚动体验大打折扣。所以在使用 UITableViewCell， UICollectionViewCell，或者 UITableViewHeaderFooterView 的时候一定要使用reuseIdentifier。\n```\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n  static NSString *ID = @\"cell\";\n  TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID forIndexPath:indexPath];\n  \n  return cell;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section {\n  static NSString *footerViewWithIdentifie = @\"footer\";\n  UITableViewHeaderFooterView *footer = [tableView dequeueReusableHeaderFooterViewWithIdentifier:footerViewWithIdentifie];\n  return footer;\n}\n```\n\n## 2. 尽量把views设置为不透明\n如果你有不透明的Views，你应该设置它们的opaque属性为YES。一些没有被设置为opaque的视图，因为透明通道的存在，系统需要去计算图层堆叠后像素点的真实颜色，这就会产生是混合(blending)操作。我们可以通过模拟器的Debug\\Color Blended Layers 选项来查看哪些 view 没有设置为不透明。选中’Color Blended Layers‘。然后iOS模拟器就会将全部区域显示为两种颜色：绿色和红色。绿色区域表示没有混合，但红色区域表示有混合操作。\n\n![opaque](opaque.png)\n\n如果屏幕是静止的，那么这个opaque属性的设置与否不是一个大问题。但是，如果 view 是嵌入到 scroll view 中的，或者是复杂动画的一部分，不将设置这个属性的话肯定会影响程序的性能。所以为了程序的性能，尽可能的将view设置为不透明。\n\n## 3. 避免图片缩放\n如果要在 `UIImageView` 中显示一个来自bundle的图片，你应保证图片的大小和 `UIImageView` 的大小相同。在运行中缩放图片是很耗费资源的，特别是 `UIImageView` 嵌套在 `UIScrollView` 中的情况下。如果不做任何处理，直接将图片丢进去，问题就大了，这意味着，GPU需要对大图进行缩放到小的区域显示，需要做像素点的sampling，这种smapling的代价很高，又需要兼顾pixel alignment。计算量会飙升。\n如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。\n```\n- (UIImage *)imageByScalingAndCroppingForSize:(CGSize)targetSize\n{\n    UIImage *sourceImage = self;\n    UIImage *newImage = nil;\n    CGSize imageSize = sourceImage.size;\n    CGFloat width = imageSize.width;\n    CGFloat height = imageSize.height;\n    CGFloat targetWidth = targetSize.width;\n    CGFloat targetHeight = targetSize.height;\n    CGFloat scaleFactor = 0.0;\n    CGFloat scaledWidth = targetWidth;\n    CGFloat scaledHeight = targetHeight;\n    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);\n    \n    if (CGSizeEqualToSize(imageSize, targetSize) == NO) {\n        CGFloat widthFactor = targetWidth / width;\n        CGFloat heightFactor = targetHeight / height;\n        \n        if (widthFactor > heightFactor)\n            scaleFactor = widthFactor; // scale to fit height\n        else\n            scaleFactor = heightFactor; // scale to fit width\n        scaledWidth  = width * scaleFactor;\n        scaledHeight = height * scaleFactor;\n        \n        // center the image\n        if (widthFactor > heightFactor) {\n            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;\n        }\n        else if (widthFactor < heightFactor) {\n            thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;\n        }\n    }\n    \n    UIGraphicsBeginImageContext(targetSize); // this will crop\n    \n    CGRect thumbnailRect = CGRectZero;\n    thumbnailRect.origin = thumbnailPoint;\n    thumbnailRect.size.width  = scaledWidth;\n    thumbnailRect.size.height = scaledHeight;\n    \n    [sourceImage drawInRect:thumbnailRect];\n    \n    newImage = UIGraphicsGetImageFromCurrentImageContext();\n    if(newImage == nil)\n        NSLog(@\"could not scale image\");\n  \n    UIGraphicsEndImageContext();\n  \n    return newImage;\n}\n```\n\n## 4. 缓存行高\n这个方法对于cell定高的UITableView来说没有意义，但如果由于某些原因需要动态高度的cell的话，这个方法可以很容易地让滑动更流畅。\n\nUITableView的delegate方法`tableView:heightForRowAtIndexPath:`会为每个cell调用一次，所以你应该非常快地返回高度值，避免做一些复杂的高度计算。所以如果你需要动态计算cell的高度的话，应该在调用这个方法之前就计算好高度，并将其缓存起来。我的习惯是在从服务器获取完数据后，在做数据模型化的时候计算内容的高度，并用属性保存起来。\n\n```\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n  CellModel *model = self.cellModels[indexPath.row];\n  return model.rowHeight;\n}\n```\n\n如果你的cell高度是固定的话，请使用`rowHeight`, `sectionFooterHeight` 和 `sectionHeaderHeight`来设定固定的高，不要请求delegate。因为`tableView:heightForRowAtIndexPath:`会为每个cell调用一次。\n\n## 5. 尽量不要在`cellForRowAtIndexPath:`中设置数据\n在UITableView的dataSource中实现的`tableView:cellForRowAtIndexPath:`方法，需要为每个cell调用一次，它应该快速执行。所以你需要尽可能快地返回重用cell实例。不要在这里去执行数据绑定，因为目前在屏幕上还没有cell。为了执行数据绑定，可以在UITableView的delegate方法`tableView:willDisplayCell:forRowAtIndexPath:`中进行。这个方法在显示cell之前会被调用。\n\n## 6. 对齐像素\n在完美的世界中(我们尝试构建的)，屏幕点总是被处理成物理像素的整型坐标。但在现实生活中它可能是浮点值，例如，线段可能起始于x为0.25的地方。这时候，iOS将执行子像素渲染。\n\n这一技术在应用于特定类型的内容(如文本)时很有意义。但当我们绘制平滑直线时则没有必要。\n如果所有的平滑线段都使用子像素渲染技术来渲染，那你会让iOS执行一些不必要的任务，从而降低FPS。\n\n什么情况下会出现这种不必要的子像素抗锯齿操作呢？最常发生的情况是通过代码计算而变成浮点值的视图坐标，或者是一些不正确的图片资源，这些图片的大小不是对齐到屏幕的物理像素上的（例如，你有一张在Retina显示屏上的大小为60X61的图片，而不是60X60的）。\n\n我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Misaligned Image“。\n这一次有两种高亮区域：品红色区域会执行子像素渲染，而黄色区域是图片大小没有对齐的情况。\n\n![](yellow.png)\n\n所以为了避免出现上面的情况，要做到这两点：\n\n* 对所有像素相关的数据做四舍五入处理（使用ceilf, floorf和CGRectIntegral），包括点坐标，UIView的高度和宽度。\n* 跟踪你的图像资源：图片必须是像素完美的，否则在Retina屏幕上渲染时，它会做不必要的抗锯齿处理。\n\n## 7. 少用masksToBounds\n日常生产中app布局离不开美丽的圆角(RounderCorner)，特别是用圆角UIImageView来做数据呈现交互，但是这种柔和易于让人接受的视图效果并不仅仅是改变了一个形状那么简单，需要付出一定的性能代价。\n相信这已经是总所周知的问题了，日常我们使用layer的两个属性，简单的两行代码就能实现圆角的呈现\n\n```\nimageView.layer.cornerRadius = 20;\nimageView.layer.masksToBounds = YES;\n```\n\n由于这样处理的渲染机制是GPU在当前屏幕缓冲区外新开辟一个渲染缓冲区进行工作，也就是离屏渲染，这会给我们带来额外的性能损耗，如果这样的圆角操作达到一定数量，会触发缓冲区和上下文的的频繁切换，这个才是最致命的，创建新的缓冲区代价都不算大，付出最大代价的是上下文切换。性能的代价会宏观地表现在用户体验上----掉帧。\n\n如果你非得使用`cornerRadius`呢？如果你非得这做的话，那么这样也可以拯救你：\n\n```\nself.layer.shouldRasterize = YES;\nself.layer.rasterizationScale = [UIScreen mainScreen].scale;\n```\n\n`shouldRasterize = YES` 会使视图渲染内容被缓存起来，下次绘制的时候可以直接显示缓存，当然要在视图内容不改变的情况下。\n\n最好的方式是：预先生成圆角图片，并缓存起来。预处理圆角图片可以在后台处理，处理完毕后缓存起来，再在主线程显示，这就避免了不必要的离屏渲染了。\n\n```\n@implementation UIImageView (CornerRadius)\n\n- (void)hu_setCornerRadius:(CGFloat)radius {\n  \n  dispatch_queue_t bq = dispatch_queue_create(\"com.hujewelz.cornerradius\", DISPATCH_QUEUE_CONCURRENT);\n  dispatch_async(bq, ^{\n    \n    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale);\n    \n    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:self.bounds byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(radius, radius)];\n    [path addClip];\n    \n    [self.image drawInRect:self.bounds];\n    \n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n   \n    dispatch_async(dispatch_get_main_queue(), ^{\n      self.image = image;\n    });\n    \n    UIGraphicsEndImageContext();\n    \n  });\n  \n  \n}\n```\n\n我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Offscreen-Rendered“。\n黄色区域表示产生了离屏渲染。\n\n\n","source":"_posts/打造一个流畅的UITableView.md","raw":"---\ntitle: 打造一个流畅的UITableView\ndate: 2016-06-23 09:16:16\ntags: iOS\ncategory: iOS\n---\nTable view需要有很好的滚动性能，不然用户会在滚动过程中发现动画的瑕疵。\n为了保证table view平滑滚动，确保你采取了以下的措施:\n\n<!--more-->\n\n* 正确使用`reuseIdentifier`来重用cell\n* 尽量使所有的view opaque，包括cell自身\n* 避免图片缩放\n* 缓存行高\n* 尽量不要在`cellForRowAtIndexPath:`中设置数据，如果你需要用到它，只用一次然后缓存结果\n* 对齐像素\n* 使用`rowHeight`, `sectionFooterHeight` 和 `sectionHeaderHeight`来设定固定的高，不要请求delegate\n\n\n\n## 1. 正确使用 **reuseIdentifier** 来重用cell\n一个开发中常见的错误就是没有给UITableViewCells， UICollectionViewCells，甚至是UITableViewHeaderFooterViews设置正确的reuseIdentifier。\n\n为了性能最优化，table view用 `tableView:cellForRowAtIndexPath:` 为rows分配cells的时候，它的数据应该重用自UITableViewCell。\n\n不使用reuseIdentifier的话，每显示一行，table view就不得不创建全新的cell。这对性能的影响可是相当大的，尤其会使app的滚动体验大打折扣。所以在使用 UITableViewCell， UICollectionViewCell，或者 UITableViewHeaderFooterView 的时候一定要使用reuseIdentifier。\n```\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n  static NSString *ID = @\"cell\";\n  TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID forIndexPath:indexPath];\n  \n  return cell;\n}\n\n- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section {\n  static NSString *footerViewWithIdentifie = @\"footer\";\n  UITableViewHeaderFooterView *footer = [tableView dequeueReusableHeaderFooterViewWithIdentifier:footerViewWithIdentifie];\n  return footer;\n}\n```\n\n## 2. 尽量把views设置为不透明\n如果你有不透明的Views，你应该设置它们的opaque属性为YES。一些没有被设置为opaque的视图，因为透明通道的存在，系统需要去计算图层堆叠后像素点的真实颜色，这就会产生是混合(blending)操作。我们可以通过模拟器的Debug\\Color Blended Layers 选项来查看哪些 view 没有设置为不透明。选中’Color Blended Layers‘。然后iOS模拟器就会将全部区域显示为两种颜色：绿色和红色。绿色区域表示没有混合，但红色区域表示有混合操作。\n\n![opaque](opaque.png)\n\n如果屏幕是静止的，那么这个opaque属性的设置与否不是一个大问题。但是，如果 view 是嵌入到 scroll view 中的，或者是复杂动画的一部分，不将设置这个属性的话肯定会影响程序的性能。所以为了程序的性能，尽可能的将view设置为不透明。\n\n## 3. 避免图片缩放\n如果要在 `UIImageView` 中显示一个来自bundle的图片，你应保证图片的大小和 `UIImageView` 的大小相同。在运行中缩放图片是很耗费资源的，特别是 `UIImageView` 嵌套在 `UIScrollView` 中的情况下。如果不做任何处理，直接将图片丢进去，问题就大了，这意味着，GPU需要对大图进行缩放到小的区域显示，需要做像素点的sampling，这种smapling的代价很高，又需要兼顾pixel alignment。计算量会飙升。\n如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。\n```\n- (UIImage *)imageByScalingAndCroppingForSize:(CGSize)targetSize\n{\n    UIImage *sourceImage = self;\n    UIImage *newImage = nil;\n    CGSize imageSize = sourceImage.size;\n    CGFloat width = imageSize.width;\n    CGFloat height = imageSize.height;\n    CGFloat targetWidth = targetSize.width;\n    CGFloat targetHeight = targetSize.height;\n    CGFloat scaleFactor = 0.0;\n    CGFloat scaledWidth = targetWidth;\n    CGFloat scaledHeight = targetHeight;\n    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);\n    \n    if (CGSizeEqualToSize(imageSize, targetSize) == NO) {\n        CGFloat widthFactor = targetWidth / width;\n        CGFloat heightFactor = targetHeight / height;\n        \n        if (widthFactor > heightFactor)\n            scaleFactor = widthFactor; // scale to fit height\n        else\n            scaleFactor = heightFactor; // scale to fit width\n        scaledWidth  = width * scaleFactor;\n        scaledHeight = height * scaleFactor;\n        \n        // center the image\n        if (widthFactor > heightFactor) {\n            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;\n        }\n        else if (widthFactor < heightFactor) {\n            thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;\n        }\n    }\n    \n    UIGraphicsBeginImageContext(targetSize); // this will crop\n    \n    CGRect thumbnailRect = CGRectZero;\n    thumbnailRect.origin = thumbnailPoint;\n    thumbnailRect.size.width  = scaledWidth;\n    thumbnailRect.size.height = scaledHeight;\n    \n    [sourceImage drawInRect:thumbnailRect];\n    \n    newImage = UIGraphicsGetImageFromCurrentImageContext();\n    if(newImage == nil)\n        NSLog(@\"could not scale image\");\n  \n    UIGraphicsEndImageContext();\n  \n    return newImage;\n}\n```\n\n## 4. 缓存行高\n这个方法对于cell定高的UITableView来说没有意义，但如果由于某些原因需要动态高度的cell的话，这个方法可以很容易地让滑动更流畅。\n\nUITableView的delegate方法`tableView:heightForRowAtIndexPath:`会为每个cell调用一次，所以你应该非常快地返回高度值，避免做一些复杂的高度计算。所以如果你需要动态计算cell的高度的话，应该在调用这个方法之前就计算好高度，并将其缓存起来。我的习惯是在从服务器获取完数据后，在做数据模型化的时候计算内容的高度，并用属性保存起来。\n\n```\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n  CellModel *model = self.cellModels[indexPath.row];\n  return model.rowHeight;\n}\n```\n\n如果你的cell高度是固定的话，请使用`rowHeight`, `sectionFooterHeight` 和 `sectionHeaderHeight`来设定固定的高，不要请求delegate。因为`tableView:heightForRowAtIndexPath:`会为每个cell调用一次。\n\n## 5. 尽量不要在`cellForRowAtIndexPath:`中设置数据\n在UITableView的dataSource中实现的`tableView:cellForRowAtIndexPath:`方法，需要为每个cell调用一次，它应该快速执行。所以你需要尽可能快地返回重用cell实例。不要在这里去执行数据绑定，因为目前在屏幕上还没有cell。为了执行数据绑定，可以在UITableView的delegate方法`tableView:willDisplayCell:forRowAtIndexPath:`中进行。这个方法在显示cell之前会被调用。\n\n## 6. 对齐像素\n在完美的世界中(我们尝试构建的)，屏幕点总是被处理成物理像素的整型坐标。但在现实生活中它可能是浮点值，例如，线段可能起始于x为0.25的地方。这时候，iOS将执行子像素渲染。\n\n这一技术在应用于特定类型的内容(如文本)时很有意义。但当我们绘制平滑直线时则没有必要。\n如果所有的平滑线段都使用子像素渲染技术来渲染，那你会让iOS执行一些不必要的任务，从而降低FPS。\n\n什么情况下会出现这种不必要的子像素抗锯齿操作呢？最常发生的情况是通过代码计算而变成浮点值的视图坐标，或者是一些不正确的图片资源，这些图片的大小不是对齐到屏幕的物理像素上的（例如，你有一张在Retina显示屏上的大小为60X61的图片，而不是60X60的）。\n\n我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Misaligned Image“。\n这一次有两种高亮区域：品红色区域会执行子像素渲染，而黄色区域是图片大小没有对齐的情况。\n\n![](yellow.png)\n\n所以为了避免出现上面的情况，要做到这两点：\n\n* 对所有像素相关的数据做四舍五入处理（使用ceilf, floorf和CGRectIntegral），包括点坐标，UIView的高度和宽度。\n* 跟踪你的图像资源：图片必须是像素完美的，否则在Retina屏幕上渲染时，它会做不必要的抗锯齿处理。\n\n## 7. 少用masksToBounds\n日常生产中app布局离不开美丽的圆角(RounderCorner)，特别是用圆角UIImageView来做数据呈现交互，但是这种柔和易于让人接受的视图效果并不仅仅是改变了一个形状那么简单，需要付出一定的性能代价。\n相信这已经是总所周知的问题了，日常我们使用layer的两个属性，简单的两行代码就能实现圆角的呈现\n\n```\nimageView.layer.cornerRadius = 20;\nimageView.layer.masksToBounds = YES;\n```\n\n由于这样处理的渲染机制是GPU在当前屏幕缓冲区外新开辟一个渲染缓冲区进行工作，也就是离屏渲染，这会给我们带来额外的性能损耗，如果这样的圆角操作达到一定数量，会触发缓冲区和上下文的的频繁切换，这个才是最致命的，创建新的缓冲区代价都不算大，付出最大代价的是上下文切换。性能的代价会宏观地表现在用户体验上----掉帧。\n\n如果你非得使用`cornerRadius`呢？如果你非得这做的话，那么这样也可以拯救你：\n\n```\nself.layer.shouldRasterize = YES;\nself.layer.rasterizationScale = [UIScreen mainScreen].scale;\n```\n\n`shouldRasterize = YES` 会使视图渲染内容被缓存起来，下次绘制的时候可以直接显示缓存，当然要在视图内容不改变的情况下。\n\n最好的方式是：预先生成圆角图片，并缓存起来。预处理圆角图片可以在后台处理，处理完毕后缓存起来，再在主线程显示，这就避免了不必要的离屏渲染了。\n\n```\n@implementation UIImageView (CornerRadius)\n\n- (void)hu_setCornerRadius:(CGFloat)radius {\n  \n  dispatch_queue_t bq = dispatch_queue_create(\"com.hujewelz.cornerradius\", DISPATCH_QUEUE_CONCURRENT);\n  dispatch_async(bq, ^{\n    \n    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale);\n    \n    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:self.bounds byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(radius, radius)];\n    [path addClip];\n    \n    [self.image drawInRect:self.bounds];\n    \n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n   \n    dispatch_async(dispatch_get_main_queue(), ^{\n      self.image = image;\n    });\n    \n    UIGraphicsEndImageContext();\n    \n  });\n  \n  \n}\n```\n\n我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Offscreen-Rendered“。\n黄色区域表示产生了离屏渲染。\n\n\n","slug":"打造一个流畅的UITableView","published":1,"updated":"2018-05-27T00:11:13.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikp001t1u0ocxkce5qv","content":"<p>Table view需要有很好的滚动性能，不然用户会在滚动过程中发现动画的瑕疵。<br>为了保证table view平滑滚动，确保你采取了以下的措施:</p>\n<a id=\"more\"></a>\n<ul>\n<li>正确使用<code>reuseIdentifier</code>来重用cell</li>\n<li>尽量使所有的view opaque，包括cell自身</li>\n<li>避免图片缩放</li>\n<li>缓存行高</li>\n<li>尽量不要在<code>cellForRowAtIndexPath:</code>中设置数据，如果你需要用到它，只用一次然后缓存结果</li>\n<li>对齐像素</li>\n<li>使用<code>rowHeight</code>, <code>sectionFooterHeight</code> 和 <code>sectionHeaderHeight</code>来设定固定的高，不要请求delegate</li>\n</ul>\n<h2 id=\"1-正确使用-reuseIdentifier-来重用cell\"><a href=\"#1-正确使用-reuseIdentifier-来重用cell\" class=\"headerlink\" title=\"1. 正确使用 reuseIdentifier 来重用cell\"></a>1. 正确使用 <strong>reuseIdentifier</strong> 来重用cell</h2><p>一个开发中常见的错误就是没有给UITableViewCells， UICollectionViewCells，甚至是UITableViewHeaderFooterViews设置正确的reuseIdentifier。</p>\n<p>为了性能最优化，table view用 <code>tableView:cellForRowAtIndexPath:</code> 为rows分配cells的时候，它的数据应该重用自UITableViewCell。</p>\n<p>不使用reuseIdentifier的话，每显示一行，table view就不得不创建全新的cell。这对性能的影响可是相当大的，尤其会使app的滚动体验大打折扣。所以在使用 UITableViewCell， UICollectionViewCell，或者 UITableViewHeaderFooterView 的时候一定要使用reuseIdentifier。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">  static NSString *ID = @&quot;cell&quot;;</span><br><span class=\"line\">  TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID forIndexPath:indexPath];</span><br><span class=\"line\">  </span><br><span class=\"line\">  return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section &#123;</span><br><span class=\"line\">  static NSString *footerViewWithIdentifie = @&quot;footer&quot;;</span><br><span class=\"line\">  UITableViewHeaderFooterView *footer = [tableView dequeueReusableHeaderFooterViewWithIdentifier:footerViewWithIdentifie];</span><br><span class=\"line\">  return footer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-尽量把views设置为不透明\"><a href=\"#2-尽量把views设置为不透明\" class=\"headerlink\" title=\"2. 尽量把views设置为不透明\"></a>2. 尽量把views设置为不透明</h2><p>如果你有不透明的Views，你应该设置它们的opaque属性为YES。一些没有被设置为opaque的视图，因为透明通道的存在，系统需要去计算图层堆叠后像素点的真实颜色，这就会产生是混合(blending)操作。我们可以通过模拟器的Debug\\Color Blended Layers 选项来查看哪些 view 没有设置为不透明。选中’Color Blended Layers‘。然后iOS模拟器就会将全部区域显示为两种颜色：绿色和红色。绿色区域表示没有混合，但红色区域表示有混合操作。</p>\n<p><img src=\"opaque.png\" alt=\"opaque\"></p>\n<p>如果屏幕是静止的，那么这个opaque属性的设置与否不是一个大问题。但是，如果 view 是嵌入到 scroll view 中的，或者是复杂动画的一部分，不将设置这个属性的话肯定会影响程序的性能。所以为了程序的性能，尽可能的将view设置为不透明。</p>\n<h2 id=\"3-避免图片缩放\"><a href=\"#3-避免图片缩放\" class=\"headerlink\" title=\"3. 避免图片缩放\"></a>3. 避免图片缩放</h2><p>如果要在 <code>UIImageView</code> 中显示一个来自bundle的图片，你应保证图片的大小和 <code>UIImageView</code> 的大小相同。在运行中缩放图片是很耗费资源的，特别是 <code>UIImageView</code> 嵌套在 <code>UIScrollView</code> 中的情况下。如果不做任何处理，直接将图片丢进去，问题就大了，这意味着，GPU需要对大图进行缩放到小的区域显示，需要做像素点的sampling，这种smapling的代价很高，又需要兼顾pixel alignment。计算量会飙升。<br>如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (UIImage *)imageByScalingAndCroppingForSize:(CGSize)targetSize</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UIImage *sourceImage = self;</span><br><span class=\"line\">    UIImage *newImage = nil;</span><br><span class=\"line\">    CGSize imageSize = sourceImage.size;</span><br><span class=\"line\">    CGFloat width = imageSize.width;</span><br><span class=\"line\">    CGFloat height = imageSize.height;</span><br><span class=\"line\">    CGFloat targetWidth = targetSize.width;</span><br><span class=\"line\">    CGFloat targetHeight = targetSize.height;</span><br><span class=\"line\">    CGFloat scaleFactor = 0.0;</span><br><span class=\"line\">    CGFloat scaledWidth = targetWidth;</span><br><span class=\"line\">    CGFloat scaledHeight = targetHeight;</span><br><span class=\"line\">    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (CGSizeEqualToSize(imageSize, targetSize) == NO) &#123;</span><br><span class=\"line\">        CGFloat widthFactor = targetWidth / width;</span><br><span class=\"line\">        CGFloat heightFactor = targetHeight / height;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (widthFactor &gt; heightFactor)</span><br><span class=\"line\">            scaleFactor = widthFactor; // scale to fit height</span><br><span class=\"line\">        else</span><br><span class=\"line\">            scaleFactor = heightFactor; // scale to fit width</span><br><span class=\"line\">        scaledWidth  = width * scaleFactor;</span><br><span class=\"line\">        scaledHeight = height * scaleFactor;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // center the image</span><br><span class=\"line\">        if (widthFactor &gt; heightFactor) &#123;</span><br><span class=\"line\">            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (widthFactor &lt; heightFactor) &#123;</span><br><span class=\"line\">            thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContext(targetSize); // this will crop</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGRect thumbnailRect = CGRectZero;</span><br><span class=\"line\">    thumbnailRect.origin = thumbnailPoint;</span><br><span class=\"line\">    thumbnailRect.size.width  = scaledWidth;</span><br><span class=\"line\">    thumbnailRect.size.height = scaledHeight;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [sourceImage drawInRect:thumbnailRect];</span><br><span class=\"line\">    </span><br><span class=\"line\">    newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    if(newImage == nil)</span><br><span class=\"line\">        NSLog(@&quot;could not scale image&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">    return newImage;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-缓存行高\"><a href=\"#4-缓存行高\" class=\"headerlink\" title=\"4. 缓存行高\"></a>4. 缓存行高</h2><p>这个方法对于cell定高的UITableView来说没有意义，但如果由于某些原因需要动态高度的cell的话，这个方法可以很容易地让滑动更流畅。</p>\n<p>UITableView的delegate方法<code>tableView:heightForRowAtIndexPath:</code>会为每个cell调用一次，所以你应该非常快地返回高度值，避免做一些复杂的高度计算。所以如果你需要动态计算cell的高度的话，应该在调用这个方法之前就计算好高度，并将其缓存起来。我的习惯是在从服务器获取完数据后，在做数据模型化的时候计算内容的高度，并用属性保存起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">  CellModel *model = self.cellModels[indexPath.row];</span><br><span class=\"line\">  return model.rowHeight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你的cell高度是固定的话，请使用<code>rowHeight</code>, <code>sectionFooterHeight</code> 和 <code>sectionHeaderHeight</code>来设定固定的高，不要请求delegate。因为<code>tableView:heightForRowAtIndexPath:</code>会为每个cell调用一次。</p>\n<h2 id=\"5-尽量不要在cellForRowAtIndexPath-中设置数据\"><a href=\"#5-尽量不要在cellForRowAtIndexPath-中设置数据\" class=\"headerlink\" title=\"5. 尽量不要在cellForRowAtIndexPath:中设置数据\"></a>5. 尽量不要在<code>cellForRowAtIndexPath:</code>中设置数据</h2><p>在UITableView的dataSource中实现的<code>tableView:cellForRowAtIndexPath:</code>方法，需要为每个cell调用一次，它应该快速执行。所以你需要尽可能快地返回重用cell实例。不要在这里去执行数据绑定，因为目前在屏幕上还没有cell。为了执行数据绑定，可以在UITableView的delegate方法<code>tableView:willDisplayCell:forRowAtIndexPath:</code>中进行。这个方法在显示cell之前会被调用。</p>\n<h2 id=\"6-对齐像素\"><a href=\"#6-对齐像素\" class=\"headerlink\" title=\"6. 对齐像素\"></a>6. 对齐像素</h2><p>在完美的世界中(我们尝试构建的)，屏幕点总是被处理成物理像素的整型坐标。但在现实生活中它可能是浮点值，例如，线段可能起始于x为0.25的地方。这时候，iOS将执行子像素渲染。</p>\n<p>这一技术在应用于特定类型的内容(如文本)时很有意义。但当我们绘制平滑直线时则没有必要。<br>如果所有的平滑线段都使用子像素渲染技术来渲染，那你会让iOS执行一些不必要的任务，从而降低FPS。</p>\n<p>什么情况下会出现这种不必要的子像素抗锯齿操作呢？最常发生的情况是通过代码计算而变成浮点值的视图坐标，或者是一些不正确的图片资源，这些图片的大小不是对齐到屏幕的物理像素上的（例如，你有一张在Retina显示屏上的大小为60X61的图片，而不是60X60的）。</p>\n<p>我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Misaligned Image“。<br>这一次有两种高亮区域：品红色区域会执行子像素渲染，而黄色区域是图片大小没有对齐的情况。</p>\n<p><img src=\"yellow.png\" alt=\"\"></p>\n<p>所以为了避免出现上面的情况，要做到这两点：</p>\n<ul>\n<li>对所有像素相关的数据做四舍五入处理（使用ceilf, floorf和CGRectIntegral），包括点坐标，UIView的高度和宽度。</li>\n<li>跟踪你的图像资源：图片必须是像素完美的，否则在Retina屏幕上渲染时，它会做不必要的抗锯齿处理。</li>\n</ul>\n<h2 id=\"7-少用masksToBounds\"><a href=\"#7-少用masksToBounds\" class=\"headerlink\" title=\"7. 少用masksToBounds\"></a>7. 少用masksToBounds</h2><p>日常生产中app布局离不开美丽的圆角(RounderCorner)，特别是用圆角UIImageView来做数据呈现交互，但是这种柔和易于让人接受的视图效果并不仅仅是改变了一个形状那么简单，需要付出一定的性能代价。<br>相信这已经是总所周知的问题了，日常我们使用layer的两个属性，简单的两行代码就能实现圆角的呈现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageView.layer.cornerRadius = 20;</span><br><span class=\"line\">imageView.layer.masksToBounds = YES;</span><br></pre></td></tr></table></figure>\n<p>由于这样处理的渲染机制是GPU在当前屏幕缓冲区外新开辟一个渲染缓冲区进行工作，也就是离屏渲染，这会给我们带来额外的性能损耗，如果这样的圆角操作达到一定数量，会触发缓冲区和上下文的的频繁切换，这个才是最致命的，创建新的缓冲区代价都不算大，付出最大代价的是上下文切换。性能的代价会宏观地表现在用户体验上—-掉帧。</p>\n<p>如果你非得使用<code>cornerRadius</code>呢？如果你非得这做的话，那么这样也可以拯救你：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.layer.shouldRasterize = YES;</span><br><span class=\"line\">self.layer.rasterizationScale = [UIScreen mainScreen].scale;</span><br></pre></td></tr></table></figure>\n<p><code>shouldRasterize = YES</code> 会使视图渲染内容被缓存起来，下次绘制的时候可以直接显示缓存，当然要在视图内容不改变的情况下。</p>\n<p>最好的方式是：预先生成圆角图片，并缓存起来。预处理圆角图片可以在后台处理，处理完毕后缓存起来，再在主线程显示，这就避免了不必要的离屏渲染了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation UIImageView (CornerRadius)</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)hu_setCornerRadius:(CGFloat)radius &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  dispatch_queue_t bq = dispatch_queue_create(&quot;com.hujewelz.cornerradius&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">  dispatch_async(bq, ^&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:self.bounds byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(radius, radius)];</span><br><span class=\"line\">    [path addClip];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.image drawInRect:self.bounds];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">   </span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">      self.image = image;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Offscreen-Rendered“。<br>黄色区域表示产生了离屏渲染。</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Table view需要有很好的滚动性能，不然用户会在滚动过程中发现动画的瑕疵。<br>为了保证table view平滑滚动，确保你采取了以下的措施:</p>","more":"<ul>\n<li>正确使用<code>reuseIdentifier</code>来重用cell</li>\n<li>尽量使所有的view opaque，包括cell自身</li>\n<li>避免图片缩放</li>\n<li>缓存行高</li>\n<li>尽量不要在<code>cellForRowAtIndexPath:</code>中设置数据，如果你需要用到它，只用一次然后缓存结果</li>\n<li>对齐像素</li>\n<li>使用<code>rowHeight</code>, <code>sectionFooterHeight</code> 和 <code>sectionHeaderHeight</code>来设定固定的高，不要请求delegate</li>\n</ul>\n<h2 id=\"1-正确使用-reuseIdentifier-来重用cell\"><a href=\"#1-正确使用-reuseIdentifier-来重用cell\" class=\"headerlink\" title=\"1. 正确使用 reuseIdentifier 来重用cell\"></a>1. 正确使用 <strong>reuseIdentifier</strong> 来重用cell</h2><p>一个开发中常见的错误就是没有给UITableViewCells， UICollectionViewCells，甚至是UITableViewHeaderFooterViews设置正确的reuseIdentifier。</p>\n<p>为了性能最优化，table view用 <code>tableView:cellForRowAtIndexPath:</code> 为rows分配cells的时候，它的数据应该重用自UITableViewCell。</p>\n<p>不使用reuseIdentifier的话，每显示一行，table view就不得不创建全新的cell。这对性能的影响可是相当大的，尤其会使app的滚动体验大打折扣。所以在使用 UITableViewCell， UICollectionViewCell，或者 UITableViewHeaderFooterView 的时候一定要使用reuseIdentifier。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">  static NSString *ID = @&quot;cell&quot;;</span><br><span class=\"line\">  TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID forIndexPath:indexPath];</span><br><span class=\"line\">  </span><br><span class=\"line\">  return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section &#123;</span><br><span class=\"line\">  static NSString *footerViewWithIdentifie = @&quot;footer&quot;;</span><br><span class=\"line\">  UITableViewHeaderFooterView *footer = [tableView dequeueReusableHeaderFooterViewWithIdentifier:footerViewWithIdentifie];</span><br><span class=\"line\">  return footer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-尽量把views设置为不透明\"><a href=\"#2-尽量把views设置为不透明\" class=\"headerlink\" title=\"2. 尽量把views设置为不透明\"></a>2. 尽量把views设置为不透明</h2><p>如果你有不透明的Views，你应该设置它们的opaque属性为YES。一些没有被设置为opaque的视图，因为透明通道的存在，系统需要去计算图层堆叠后像素点的真实颜色，这就会产生是混合(blending)操作。我们可以通过模拟器的Debug\\Color Blended Layers 选项来查看哪些 view 没有设置为不透明。选中’Color Blended Layers‘。然后iOS模拟器就会将全部区域显示为两种颜色：绿色和红色。绿色区域表示没有混合，但红色区域表示有混合操作。</p>\n<p><img src=\"opaque.png\" alt=\"opaque\"></p>\n<p>如果屏幕是静止的，那么这个opaque属性的设置与否不是一个大问题。但是，如果 view 是嵌入到 scroll view 中的，或者是复杂动画的一部分，不将设置这个属性的话肯定会影响程序的性能。所以为了程序的性能，尽可能的将view设置为不透明。</p>\n<h2 id=\"3-避免图片缩放\"><a href=\"#3-避免图片缩放\" class=\"headerlink\" title=\"3. 避免图片缩放\"></a>3. 避免图片缩放</h2><p>如果要在 <code>UIImageView</code> 中显示一个来自bundle的图片，你应保证图片的大小和 <code>UIImageView</code> 的大小相同。在运行中缩放图片是很耗费资源的，特别是 <code>UIImageView</code> 嵌套在 <code>UIScrollView</code> 中的情况下。如果不做任何处理，直接将图片丢进去，问题就大了，这意味着，GPU需要对大图进行缩放到小的区域显示，需要做像素点的sampling，这种smapling的代价很高，又需要兼顾pixel alignment。计算量会飙升。<br>如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (UIImage *)imageByScalingAndCroppingForSize:(CGSize)targetSize</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UIImage *sourceImage = self;</span><br><span class=\"line\">    UIImage *newImage = nil;</span><br><span class=\"line\">    CGSize imageSize = sourceImage.size;</span><br><span class=\"line\">    CGFloat width = imageSize.width;</span><br><span class=\"line\">    CGFloat height = imageSize.height;</span><br><span class=\"line\">    CGFloat targetWidth = targetSize.width;</span><br><span class=\"line\">    CGFloat targetHeight = targetSize.height;</span><br><span class=\"line\">    CGFloat scaleFactor = 0.0;</span><br><span class=\"line\">    CGFloat scaledWidth = targetWidth;</span><br><span class=\"line\">    CGFloat scaledHeight = targetHeight;</span><br><span class=\"line\">    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (CGSizeEqualToSize(imageSize, targetSize) == NO) &#123;</span><br><span class=\"line\">        CGFloat widthFactor = targetWidth / width;</span><br><span class=\"line\">        CGFloat heightFactor = targetHeight / height;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (widthFactor &gt; heightFactor)</span><br><span class=\"line\">            scaleFactor = widthFactor; // scale to fit height</span><br><span class=\"line\">        else</span><br><span class=\"line\">            scaleFactor = heightFactor; // scale to fit width</span><br><span class=\"line\">        scaledWidth  = width * scaleFactor;</span><br><span class=\"line\">        scaledHeight = height * scaleFactor;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // center the image</span><br><span class=\"line\">        if (widthFactor &gt; heightFactor) &#123;</span><br><span class=\"line\">            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (widthFactor &lt; heightFactor) &#123;</span><br><span class=\"line\">            thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContext(targetSize); // this will crop</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGRect thumbnailRect = CGRectZero;</span><br><span class=\"line\">    thumbnailRect.origin = thumbnailPoint;</span><br><span class=\"line\">    thumbnailRect.size.width  = scaledWidth;</span><br><span class=\"line\">    thumbnailRect.size.height = scaledHeight;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [sourceImage drawInRect:thumbnailRect];</span><br><span class=\"line\">    </span><br><span class=\"line\">    newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    if(newImage == nil)</span><br><span class=\"line\">        NSLog(@&quot;could not scale image&quot;);</span><br><span class=\"line\">  </span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">    return newImage;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-缓存行高\"><a href=\"#4-缓存行高\" class=\"headerlink\" title=\"4. 缓存行高\"></a>4. 缓存行高</h2><p>这个方法对于cell定高的UITableView来说没有意义，但如果由于某些原因需要动态高度的cell的话，这个方法可以很容易地让滑动更流畅。</p>\n<p>UITableView的delegate方法<code>tableView:heightForRowAtIndexPath:</code>会为每个cell调用一次，所以你应该非常快地返回高度值，避免做一些复杂的高度计算。所以如果你需要动态计算cell的高度的话，应该在调用这个方法之前就计算好高度，并将其缓存起来。我的习惯是在从服务器获取完数据后，在做数据模型化的时候计算内容的高度，并用属性保存起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">  CellModel *model = self.cellModels[indexPath.row];</span><br><span class=\"line\">  return model.rowHeight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你的cell高度是固定的话，请使用<code>rowHeight</code>, <code>sectionFooterHeight</code> 和 <code>sectionHeaderHeight</code>来设定固定的高，不要请求delegate。因为<code>tableView:heightForRowAtIndexPath:</code>会为每个cell调用一次。</p>\n<h2 id=\"5-尽量不要在cellForRowAtIndexPath-中设置数据\"><a href=\"#5-尽量不要在cellForRowAtIndexPath-中设置数据\" class=\"headerlink\" title=\"5. 尽量不要在cellForRowAtIndexPath:中设置数据\"></a>5. 尽量不要在<code>cellForRowAtIndexPath:</code>中设置数据</h2><p>在UITableView的dataSource中实现的<code>tableView:cellForRowAtIndexPath:</code>方法，需要为每个cell调用一次，它应该快速执行。所以你需要尽可能快地返回重用cell实例。不要在这里去执行数据绑定，因为目前在屏幕上还没有cell。为了执行数据绑定，可以在UITableView的delegate方法<code>tableView:willDisplayCell:forRowAtIndexPath:</code>中进行。这个方法在显示cell之前会被调用。</p>\n<h2 id=\"6-对齐像素\"><a href=\"#6-对齐像素\" class=\"headerlink\" title=\"6. 对齐像素\"></a>6. 对齐像素</h2><p>在完美的世界中(我们尝试构建的)，屏幕点总是被处理成物理像素的整型坐标。但在现实生活中它可能是浮点值，例如，线段可能起始于x为0.25的地方。这时候，iOS将执行子像素渲染。</p>\n<p>这一技术在应用于特定类型的内容(如文本)时很有意义。但当我们绘制平滑直线时则没有必要。<br>如果所有的平滑线段都使用子像素渲染技术来渲染，那你会让iOS执行一些不必要的任务，从而降低FPS。</p>\n<p>什么情况下会出现这种不必要的子像素抗锯齿操作呢？最常发生的情况是通过代码计算而变成浮点值的视图坐标，或者是一些不正确的图片资源，这些图片的大小不是对齐到屏幕的物理像素上的（例如，你有一张在Retina显示屏上的大小为60X61的图片，而不是60X60的）。</p>\n<p>我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Misaligned Image“。<br>这一次有两种高亮区域：品红色区域会执行子像素渲染，而黄色区域是图片大小没有对齐的情况。</p>\n<p><img src=\"yellow.png\" alt=\"\"></p>\n<p>所以为了避免出现上面的情况，要做到这两点：</p>\n<ul>\n<li>对所有像素相关的数据做四舍五入处理（使用ceilf, floorf和CGRectIntegral），包括点坐标，UIView的高度和宽度。</li>\n<li>跟踪你的图像资源：图片必须是像素完美的，否则在Retina屏幕上渲染时，它会做不必要的抗锯齿处理。</li>\n</ul>\n<h2 id=\"7-少用masksToBounds\"><a href=\"#7-少用masksToBounds\" class=\"headerlink\" title=\"7. 少用masksToBounds\"></a>7. 少用masksToBounds</h2><p>日常生产中app布局离不开美丽的圆角(RounderCorner)，特别是用圆角UIImageView来做数据呈现交互，但是这种柔和易于让人接受的视图效果并不仅仅是改变了一个形状那么简单，需要付出一定的性能代价。<br>相信这已经是总所周知的问题了，日常我们使用layer的两个属性，简单的两行代码就能实现圆角的呈现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageView.layer.cornerRadius = 20;</span><br><span class=\"line\">imageView.layer.masksToBounds = YES;</span><br></pre></td></tr></table></figure>\n<p>由于这样处理的渲染机制是GPU在当前屏幕缓冲区外新开辟一个渲染缓冲区进行工作，也就是离屏渲染，这会给我们带来额外的性能损耗，如果这样的圆角操作达到一定数量，会触发缓冲区和上下文的的频繁切换，这个才是最致命的，创建新的缓冲区代价都不算大，付出最大代价的是上下文切换。性能的代价会宏观地表现在用户体验上—-掉帧。</p>\n<p>如果你非得使用<code>cornerRadius</code>呢？如果你非得这做的话，那么这样也可以拯救你：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.layer.shouldRasterize = YES;</span><br><span class=\"line\">self.layer.rasterizationScale = [UIScreen mainScreen].scale;</span><br></pre></td></tr></table></figure>\n<p><code>shouldRasterize = YES</code> 会使视图渲染内容被缓存起来，下次绘制的时候可以直接显示缓存，当然要在视图内容不改变的情况下。</p>\n<p>最好的方式是：预先生成圆角图片，并缓存起来。预处理圆角图片可以在后台处理，处理完毕后缓存起来，再在主线程显示，这就避免了不必要的离屏渲染了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation UIImageView (CornerRadius)</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)hu_setCornerRadius:(CGFloat)radius &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  dispatch_queue_t bq = dispatch_queue_create(&quot;com.hujewelz.cornerradius&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">  dispatch_async(bq, ^&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:self.bounds byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(radius, radius)];</span><br><span class=\"line\">    [path addClip];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.image drawInRect:self.bounds];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">   </span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">      self.image = image;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在iOS模拟器上运行程序，在”Debug“菜单中选中”Color Offscreen-Rendered“。<br>黄色区域表示产生了离屏渲染。</p>"},{"title":"用 Swift 写一个响应式编程库","date":"2017-12-02T09:18:21.000Z","thumbnailImage":"cover.png","coverImage":"cover.png","_content":"\n2017年又快过去了，忙了一年感觉没啥收获，感觉是不是应该写点啥，想了好久没想出要写什么。下半年因为工作的原因，狗狗也没养了，吉他上也积满了灰尘，\n\n<!--more-->\n\n兴致勃勃的学习素描，到现在也没画出了啥😂，博客也很久没更新了。想想感觉更新一下博客吧。\n\n整个2017年我完全使用 Swift 进行开发了。使用 Swift 进行开发是一个很愉快的体验，我已经完全不想再去碰 OC 了。最近想做一个响应式编程的库，所以就把它拿来分享一下。\n\n\n## Reactive Programing \n\n说到响应式编程，ReactiveCocoa 和 RxSwift 可以说是目前 iOS 开发中最优秀的第三方开源库了。今天咱们不聊 ReactiveCocoa 和 RxSwif，咱们自己来写一个响应式编程库。如果你对观察者模式很熟悉的话，那么响应式编程就很容易理解了。\n\n> 响应式编程是一种面向数据流和变化传播的编程范式。\n\n比如用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。“监听”流的行为叫做订阅。响应式就是基于这种想法。\n\n 废话不多说，撸起袖子开干。\n\n我们以一个获取用户信息的网络请求为例：\n\n```swift\nfunc fetchUser(with id: Int, completion: @escaping ((User) -> Void)) {\n     DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) {\n         let user = User(name: \"jewelz\")\n         completion(user)\n     }\n}\n```\n\n上面是我们通常的做法，在请求方法里传入一个回调函数，在回调里拿到结果。在响应式里面，我们监听请求，当请求完成时，观察者得到更新。\n\n```swift\nfunc fetchUser(with id: Int) -> Signal<User> {}\n```\n\n发送网络请求就可以这样：\n\n```swift\nfetchUser(with: \"12345\").subscribe({\n    \n})\n```\n\n在完成 Signal 之前， 需要定义订阅后返回的数据结构，这里我只关心成功和失败两种状态的数据，所以可以这样写:\n\n```swift\nenum Result<Value> {\n    case success(Value)\n    case error(Error)\n}\n```\n\n现在可以开始实现我们的 Signal 了:\n\n```swift\nfinal class Signal<Value> {\n    fileprivate typealias Subscriber = (Result<Value>) -> Void\n  \tfileprivate var subscribers: [Subscriber] = []\n  \n    func send(_ result: Result<Value>) {\n        for subscriber in subscribers {\n            subscriber(result)\n        }\n    }\n  \n    func subscribe(_ subscriber: @escaping (Result<Value>) -> Void) {\n        subscribers.append(subscriber)\n    }\n}\n```\n\n写个小例子测试一下：\n\n```swift\nlet signal = Signal<Int>()\nsignal.subscribe { result in\n    print(result)\n}\nsignal.send(.success(100))\nsignal.send(.success(200))\n\n// Print\nsuccess(100)\nsuccess(200)\n```\n\n我们的 Signal 已经可以正常工作了，不过还有很多改进的空间，我们可以使用一个工厂方法来创建一个 Signal, 同时将 `send `变为私有的：\n\n```swift\nstatic func empty() -> ((Result<Value>) -> Void, Signal<Value>) {\n     let signal = Signal<Value>()\n     return (signal.send, signal)\n}\n\nfileprivate func send(_ result: Result<Value>) { ... }\n```\n\n现在我们需要这样使用 Signal 了：\n\n```swift\nlet (sink, signal) = Signal<Int>.empty()\nsignal.subscribe { result in\n    print(result)\n}\nsink(.success(100))\nsink(.success(200))\n```\n\n接着我们可以给 UITextField 绑定一个 Signal，只需要在 Extension 中给 UITextField添加一个计算属性  ：\n\n```\nextension UITextField {\n    var signal: Signal<String> {\n        let (sink, signal) = Signal<String>.empty()\n        let observer = KeyValueObserver<String>(object: self, keyPath: #keyPath(text)) { str in\n            sink(.success(str))\n        }\n        signal.objects.append(observer)\n        return signal\n    }\n}\n```\n\n上面代码中的 `observer` 是一个局部变量，在 `signal`调用完后，就会被销毁，所以需要在 Signal 中保存该对象，可以给 Signal 添加一个数组，用来保存需要延长生命周期的对象。 KeyValueObserver 是对 KVO 的简单封装，其实现如下：\n\n```swift\nfinal class KeyValueObserver<T>: NSObject {\n    \n    private let object: NSObject\n    private let keyPath: String\n    private let callback: (T) -> Void\n    \n    init(object: NSObject, keyPath: String, callback: @escaping (T) -> Void) {\n        self.object = object\n        self.keyPath = keyPath\n        self.callback = callback\n        super.init()\n        object.addObserver(self, forKeyPath: keyPath, options: [.new], context: nil)\n    }\n    \n    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n        guard let keyPath = keyPath, keyPath == self.keyPath, let value = change?[.newKey] as? T else { return }\n      \n        callback(value)\n    }\n    \n    deinit {\n        object.removeObserver(self, forKeyPath: keyPath)\n    }\n}\n```\n\n现在就可以使用` textField.signal.subscribe({})` 来观察 UITextField 内容的改变了。\n\n 在 Playground 写个 VC 测试一下：\n\n```swift\nclass VC {\n    let textField =  UITextField()\n    var signal: Signal<String>?\n    \n    func viewDidLoad() {\n        signal = textField.signal\n        signal?.subscribe({ result in\n            print(result)\n        })\n        textField.text = \"1234567\"\n    }\n    \n    deinit {\n        print(\"Removing vc\")\n    }\n}\n\nvar vc: VC? = VC()\nvc?.viewDidLoad()\nvc = nil\n\n// Print\nsuccess(\"1234567\")\nRemoving vc\n```\n\n\n\n## Reference Cycles\n\n我在上面的 Signal 中，添加了 `deinit`方法：\n\n```swift\ndeinit {\n\tprint(\"Removing Signal\")\n}\n\n```\n\n最后发现 Signal 的析构方法并没有执行，也就是说上面的代码中出现了循环引用，其实仔细分析上面 UITextField 的拓展中 `signal`的实现就能发现问题出在哪儿了。\n\n```swift\nlet observer = KeyValueObserver<String>(object: self, keyPath: #keyPath(text)) { str in\n    sink(.success(str))\n}\n```\n\n在 `KeyValueObserver` 的回调中，调用了 `sink()`方法，而 `sink` 方法其实就是 `signal.send(_:)`方法，这里在闭包中捕获了` signal` 变量，于是就形成了循环引用。这里只要使用 `weak` 就能解决。修改下的代码是这样的：\n\n```swift\nstatic func empty() -> ((Result<Value>) -> Void, Signal<Value>) {\n     let signal = Signal<Value>()\n     return ({[weak signal] value in signal?.send(value)}, signal)\n}\n```\n\n再次运行， Signal 的析构方法就能执行了。\n\n上面就实现了一个简单的响应式编程的库了。不过这里还存在很多问题，比如我们应该在适当的时机移除观察者，现在我们的观察者被添加在 ` subscribers` 数组中，这样就不知道该移除哪一个观察者，所以我们将数字替换成字典，用 UUID   作为 key :\n\n```swift \nfileprivate typealias Token = UUID\nfileprivate var subscribers: [Token: Subscriber] = [:]\n```\n\n我们可以模仿 RxSwift 中的 Disposable 用来移除观察者，实现代码如下：\n\n```swift\nfinal class Disposable {\n    private let dispose: () -> Void\n    \n    static func create(_ dispose: @escaping () -> Void) -> Disposable {\n        return Disposable(dispose)\n    }\n    \n    init(_ dispose: @escaping () -> Void) {\n        self.dispose = dispose\n    }\n    \n    deinit {\n        dispose()\n    }\n}\n```\n\n原来的 `subscribe(_:)` 返回一个 Disposable 就可以了:\n\n```swift\nfunc subscribe(_ subscriber: @escaping (Result<Value>) -> Void) -> Disposable {\n     let token = UUID()\n     subscribers[token] = subscriber\n      return Disposable.create {\n          self.subscribers[token] = nil\n      }   \n }\n```\n\n这样我们只要在适当的时机销毁 Disposable 就可以移除观察者了。\n\n作为一个响应式编程库都会有 `map`, `flatMap`, `filter`, `reduce` 等方法，所以我们的库也不能少，我们可以简单的实现几个。\n\n\n\n## map\n\nmap 比较简单，就是将一个 *返回值为包装值的函数* 作用于一个**包装(Wrapped)值**的过程， 这里的包装值可以理解为可以包含其他值的一种结构，例如 Swift 中的数组，可选类型都是包装值。它们都有重载的 `map`, `flatMap`等函数。以数组为例，我们经常这样使用：\n\n```swift\nlet images = [\"1\", \"2\", \"3\"].map{ UIImage(named: $0) }\n```\n\n现在来实现我们的 map 函数：\n\n```swift\nfunc map<T>(_ transform: @escaping (Value) -> T) -> Signal<T> {\n     let (sink, signal) = Signal<T>.empty()\n     let dispose = subscribe { (result) in\n          sink(result.map(transform))\n      }\n      signal.objects.append(dispose)\n      return signal\n}\n```\n\n我同时给 Result 也实现了 map 函数:\n\n```swift\nextension Result {\n    func map<T>(_ transform: @escaping (Value) -> T) -> Result<T> {\n        switch self {\n        case .success(let value):\n            return .success(transform(value))\n        case .error(let error):\n            return .error(error)\n        }\n    }\n}\n\n// Test\n\nlet (sink, intSignal) = Signal<Int>.empty()\nintSignal\n    .map{ String($0)}\n    .subscribe {  result in\n        print(result)\n}\nsink(.success(100))\n\n// Print success(\"100\")\n```\n\n\n\n## flatMap\n\nflatMap 和 map 很相似，但也有一些不同，以可选型为例，Swif t是这样定义 map 和 flatMap 的：\n\n```swift\npublic func map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?\npublic func flatMap<U>(_ transform: (Wrapped) throws -> U?) rethrows -> U?\n```\n\n flatMap 和 map 的不同主要体现在 transform 函数的返回值不同。map 接受的函数返回值类型是 `U`类型，而 flatMap 接受的函数返回值类型是 ` U?`类型。例如对于一个可选值，可以这样调用：\n\n```swift\nlet aString: String? = \"￥99.9\"\nlet price = aString.flatMap{ Float($0)}\n\n// Price is nil\n```\n\n我们这里 flatMap 和 Swift 中数组以及可选型中的 flatMap 保持了一致。\n\n所以我们的 flatMap 应该是这样定义：`flatMap<T>(_ transform: @escaping (Value) -> Signal<T>) -> Signal<T>` 。\n\n理解了 flatMap 和 map 的不同，实现起来也就很简单了：\n\n```swift\nfunc flatMap<T>(_ transform: @escaping (Value) -> Signal<T>) -> Signal<T> {\n     let (sink, signal) = Signal<T>.empty()\n     var _dispose: Disposable?\n     let dispose = subscribe { (result) in\n         switch result {\n         case .success(let value):\n             let new = transform(value)\n             _dispose = new.subscribe({ _result in\n                 sink(_result)\n             })\n         case .error(let error):\n             sink(.error(error))\n         }\n    }\n    if _dispose != nil {\n        signal.objects.append(_dispose!)\n    }\n    signal.objects.append(dispose)\n    return signal\n}\n```\n\n现在我们可以模拟一个网络请求来测试 flatMap：\n\n```swift\nfunc users() -> Signal<[User]> {\n     let (sink, signal) = Signal<[User]>.empty()\n     DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) {\n         let users = Array(1...10).map{ User(id: String(describing: $0)) }\n         sink(.success(users))\n     }\n     return signal\n }\n    \nfunc userDetail(with id: String) -> Signal<User> {\n    let (sink, signal) = Signal<User>.empty()\n    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) {\n        sink(.success(User(id: id, name: \"jewelz\")))\n    }\n    return signal\n}\n\nlet dispose = users()\n    .flatMap { return self.userDetail(with: $0.first!.id) }\n    .subscribe { result in\n        print(result)\n}\ndisposes.append(dispose)\n\n// Print: success(ReactivePrograming.User(name: Optional(\"jewelz\"), id: \"1\"))\n```\n\n通过使用 flatMap ，我们可以很简单的将一个 Signal 转换为另一个 Signal , 这在我们处理多个请求嵌套时就会很方便了。\n\n## 写在最后\n\n上面通过100 多行的代码就实现了一个简单的响应式编程库。不过对于一个库来说，以上的内容还远远不够。现在的 Signal 还不具有原子性，要作为一个实际可用的库，应该是线程安的。还有我们对 Disposable 的处理也不够优雅，可以模仿 RxSwift 中 DisposeBag 的做法。上面这些问题可以留给读者自己去思考了。（更多内容可以查看[我的主页](http://jewelz.me)）","source":"_posts/用 Swift 写一个响应式编程库.md","raw":"---\ntitle: 用 Swift 写一个响应式编程库\ndate: 2017-12-02 17:18:21\ntags:\n  - Swift\n  - Reactive programing\ncategories: Swift\nthumbnailImage: cover.png\ncoverImage: cover.png\n---\n\n2017年又快过去了，忙了一年感觉没啥收获，感觉是不是应该写点啥，想了好久没想出要写什么。下半年因为工作的原因，狗狗也没养了，吉他上也积满了灰尘，\n\n<!--more-->\n\n兴致勃勃的学习素描，到现在也没画出了啥😂，博客也很久没更新了。想想感觉更新一下博客吧。\n\n整个2017年我完全使用 Swift 进行开发了。使用 Swift 进行开发是一个很愉快的体验，我已经完全不想再去碰 OC 了。最近想做一个响应式编程的库，所以就把它拿来分享一下。\n\n\n## Reactive Programing \n\n说到响应式编程，ReactiveCocoa 和 RxSwift 可以说是目前 iOS 开发中最优秀的第三方开源库了。今天咱们不聊 ReactiveCocoa 和 RxSwif，咱们自己来写一个响应式编程库。如果你对观察者模式很熟悉的话，那么响应式编程就很容易理解了。\n\n> 响应式编程是一种面向数据流和变化传播的编程范式。\n\n比如用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。“监听”流的行为叫做订阅。响应式就是基于这种想法。\n\n 废话不多说，撸起袖子开干。\n\n我们以一个获取用户信息的网络请求为例：\n\n```swift\nfunc fetchUser(with id: Int, completion: @escaping ((User) -> Void)) {\n     DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) {\n         let user = User(name: \"jewelz\")\n         completion(user)\n     }\n}\n```\n\n上面是我们通常的做法，在请求方法里传入一个回调函数，在回调里拿到结果。在响应式里面，我们监听请求，当请求完成时，观察者得到更新。\n\n```swift\nfunc fetchUser(with id: Int) -> Signal<User> {}\n```\n\n发送网络请求就可以这样：\n\n```swift\nfetchUser(with: \"12345\").subscribe({\n    \n})\n```\n\n在完成 Signal 之前， 需要定义订阅后返回的数据结构，这里我只关心成功和失败两种状态的数据，所以可以这样写:\n\n```swift\nenum Result<Value> {\n    case success(Value)\n    case error(Error)\n}\n```\n\n现在可以开始实现我们的 Signal 了:\n\n```swift\nfinal class Signal<Value> {\n    fileprivate typealias Subscriber = (Result<Value>) -> Void\n  \tfileprivate var subscribers: [Subscriber] = []\n  \n    func send(_ result: Result<Value>) {\n        for subscriber in subscribers {\n            subscriber(result)\n        }\n    }\n  \n    func subscribe(_ subscriber: @escaping (Result<Value>) -> Void) {\n        subscribers.append(subscriber)\n    }\n}\n```\n\n写个小例子测试一下：\n\n```swift\nlet signal = Signal<Int>()\nsignal.subscribe { result in\n    print(result)\n}\nsignal.send(.success(100))\nsignal.send(.success(200))\n\n// Print\nsuccess(100)\nsuccess(200)\n```\n\n我们的 Signal 已经可以正常工作了，不过还有很多改进的空间，我们可以使用一个工厂方法来创建一个 Signal, 同时将 `send `变为私有的：\n\n```swift\nstatic func empty() -> ((Result<Value>) -> Void, Signal<Value>) {\n     let signal = Signal<Value>()\n     return (signal.send, signal)\n}\n\nfileprivate func send(_ result: Result<Value>) { ... }\n```\n\n现在我们需要这样使用 Signal 了：\n\n```swift\nlet (sink, signal) = Signal<Int>.empty()\nsignal.subscribe { result in\n    print(result)\n}\nsink(.success(100))\nsink(.success(200))\n```\n\n接着我们可以给 UITextField 绑定一个 Signal，只需要在 Extension 中给 UITextField添加一个计算属性  ：\n\n```\nextension UITextField {\n    var signal: Signal<String> {\n        let (sink, signal) = Signal<String>.empty()\n        let observer = KeyValueObserver<String>(object: self, keyPath: #keyPath(text)) { str in\n            sink(.success(str))\n        }\n        signal.objects.append(observer)\n        return signal\n    }\n}\n```\n\n上面代码中的 `observer` 是一个局部变量，在 `signal`调用完后，就会被销毁，所以需要在 Signal 中保存该对象，可以给 Signal 添加一个数组，用来保存需要延长生命周期的对象。 KeyValueObserver 是对 KVO 的简单封装，其实现如下：\n\n```swift\nfinal class KeyValueObserver<T>: NSObject {\n    \n    private let object: NSObject\n    private let keyPath: String\n    private let callback: (T) -> Void\n    \n    init(object: NSObject, keyPath: String, callback: @escaping (T) -> Void) {\n        self.object = object\n        self.keyPath = keyPath\n        self.callback = callback\n        super.init()\n        object.addObserver(self, forKeyPath: keyPath, options: [.new], context: nil)\n    }\n    \n    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n        guard let keyPath = keyPath, keyPath == self.keyPath, let value = change?[.newKey] as? T else { return }\n      \n        callback(value)\n    }\n    \n    deinit {\n        object.removeObserver(self, forKeyPath: keyPath)\n    }\n}\n```\n\n现在就可以使用` textField.signal.subscribe({})` 来观察 UITextField 内容的改变了。\n\n 在 Playground 写个 VC 测试一下：\n\n```swift\nclass VC {\n    let textField =  UITextField()\n    var signal: Signal<String>?\n    \n    func viewDidLoad() {\n        signal = textField.signal\n        signal?.subscribe({ result in\n            print(result)\n        })\n        textField.text = \"1234567\"\n    }\n    \n    deinit {\n        print(\"Removing vc\")\n    }\n}\n\nvar vc: VC? = VC()\nvc?.viewDidLoad()\nvc = nil\n\n// Print\nsuccess(\"1234567\")\nRemoving vc\n```\n\n\n\n## Reference Cycles\n\n我在上面的 Signal 中，添加了 `deinit`方法：\n\n```swift\ndeinit {\n\tprint(\"Removing Signal\")\n}\n\n```\n\n最后发现 Signal 的析构方法并没有执行，也就是说上面的代码中出现了循环引用，其实仔细分析上面 UITextField 的拓展中 `signal`的实现就能发现问题出在哪儿了。\n\n```swift\nlet observer = KeyValueObserver<String>(object: self, keyPath: #keyPath(text)) { str in\n    sink(.success(str))\n}\n```\n\n在 `KeyValueObserver` 的回调中，调用了 `sink()`方法，而 `sink` 方法其实就是 `signal.send(_:)`方法，这里在闭包中捕获了` signal` 变量，于是就形成了循环引用。这里只要使用 `weak` 就能解决。修改下的代码是这样的：\n\n```swift\nstatic func empty() -> ((Result<Value>) -> Void, Signal<Value>) {\n     let signal = Signal<Value>()\n     return ({[weak signal] value in signal?.send(value)}, signal)\n}\n```\n\n再次运行， Signal 的析构方法就能执行了。\n\n上面就实现了一个简单的响应式编程的库了。不过这里还存在很多问题，比如我们应该在适当的时机移除观察者，现在我们的观察者被添加在 ` subscribers` 数组中，这样就不知道该移除哪一个观察者，所以我们将数字替换成字典，用 UUID   作为 key :\n\n```swift \nfileprivate typealias Token = UUID\nfileprivate var subscribers: [Token: Subscriber] = [:]\n```\n\n我们可以模仿 RxSwift 中的 Disposable 用来移除观察者，实现代码如下：\n\n```swift\nfinal class Disposable {\n    private let dispose: () -> Void\n    \n    static func create(_ dispose: @escaping () -> Void) -> Disposable {\n        return Disposable(dispose)\n    }\n    \n    init(_ dispose: @escaping () -> Void) {\n        self.dispose = dispose\n    }\n    \n    deinit {\n        dispose()\n    }\n}\n```\n\n原来的 `subscribe(_:)` 返回一个 Disposable 就可以了:\n\n```swift\nfunc subscribe(_ subscriber: @escaping (Result<Value>) -> Void) -> Disposable {\n     let token = UUID()\n     subscribers[token] = subscriber\n      return Disposable.create {\n          self.subscribers[token] = nil\n      }   \n }\n```\n\n这样我们只要在适当的时机销毁 Disposable 就可以移除观察者了。\n\n作为一个响应式编程库都会有 `map`, `flatMap`, `filter`, `reduce` 等方法，所以我们的库也不能少，我们可以简单的实现几个。\n\n\n\n## map\n\nmap 比较简单，就是将一个 *返回值为包装值的函数* 作用于一个**包装(Wrapped)值**的过程， 这里的包装值可以理解为可以包含其他值的一种结构，例如 Swift 中的数组，可选类型都是包装值。它们都有重载的 `map`, `flatMap`等函数。以数组为例，我们经常这样使用：\n\n```swift\nlet images = [\"1\", \"2\", \"3\"].map{ UIImage(named: $0) }\n```\n\n现在来实现我们的 map 函数：\n\n```swift\nfunc map<T>(_ transform: @escaping (Value) -> T) -> Signal<T> {\n     let (sink, signal) = Signal<T>.empty()\n     let dispose = subscribe { (result) in\n          sink(result.map(transform))\n      }\n      signal.objects.append(dispose)\n      return signal\n}\n```\n\n我同时给 Result 也实现了 map 函数:\n\n```swift\nextension Result {\n    func map<T>(_ transform: @escaping (Value) -> T) -> Result<T> {\n        switch self {\n        case .success(let value):\n            return .success(transform(value))\n        case .error(let error):\n            return .error(error)\n        }\n    }\n}\n\n// Test\n\nlet (sink, intSignal) = Signal<Int>.empty()\nintSignal\n    .map{ String($0)}\n    .subscribe {  result in\n        print(result)\n}\nsink(.success(100))\n\n// Print success(\"100\")\n```\n\n\n\n## flatMap\n\nflatMap 和 map 很相似，但也有一些不同，以可选型为例，Swif t是这样定义 map 和 flatMap 的：\n\n```swift\npublic func map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?\npublic func flatMap<U>(_ transform: (Wrapped) throws -> U?) rethrows -> U?\n```\n\n flatMap 和 map 的不同主要体现在 transform 函数的返回值不同。map 接受的函数返回值类型是 `U`类型，而 flatMap 接受的函数返回值类型是 ` U?`类型。例如对于一个可选值，可以这样调用：\n\n```swift\nlet aString: String? = \"￥99.9\"\nlet price = aString.flatMap{ Float($0)}\n\n// Price is nil\n```\n\n我们这里 flatMap 和 Swift 中数组以及可选型中的 flatMap 保持了一致。\n\n所以我们的 flatMap 应该是这样定义：`flatMap<T>(_ transform: @escaping (Value) -> Signal<T>) -> Signal<T>` 。\n\n理解了 flatMap 和 map 的不同，实现起来也就很简单了：\n\n```swift\nfunc flatMap<T>(_ transform: @escaping (Value) -> Signal<T>) -> Signal<T> {\n     let (sink, signal) = Signal<T>.empty()\n     var _dispose: Disposable?\n     let dispose = subscribe { (result) in\n         switch result {\n         case .success(let value):\n             let new = transform(value)\n             _dispose = new.subscribe({ _result in\n                 sink(_result)\n             })\n         case .error(let error):\n             sink(.error(error))\n         }\n    }\n    if _dispose != nil {\n        signal.objects.append(_dispose!)\n    }\n    signal.objects.append(dispose)\n    return signal\n}\n```\n\n现在我们可以模拟一个网络请求来测试 flatMap：\n\n```swift\nfunc users() -> Signal<[User]> {\n     let (sink, signal) = Signal<[User]>.empty()\n     DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) {\n         let users = Array(1...10).map{ User(id: String(describing: $0)) }\n         sink(.success(users))\n     }\n     return signal\n }\n    \nfunc userDetail(with id: String) -> Signal<User> {\n    let (sink, signal) = Signal<User>.empty()\n    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) {\n        sink(.success(User(id: id, name: \"jewelz\")))\n    }\n    return signal\n}\n\nlet dispose = users()\n    .flatMap { return self.userDetail(with: $0.first!.id) }\n    .subscribe { result in\n        print(result)\n}\ndisposes.append(dispose)\n\n// Print: success(ReactivePrograming.User(name: Optional(\"jewelz\"), id: \"1\"))\n```\n\n通过使用 flatMap ，我们可以很简单的将一个 Signal 转换为另一个 Signal , 这在我们处理多个请求嵌套时就会很方便了。\n\n## 写在最后\n\n上面通过100 多行的代码就实现了一个简单的响应式编程库。不过对于一个库来说，以上的内容还远远不够。现在的 Signal 还不具有原子性，要作为一个实际可用的库，应该是线程安的。还有我们对 Disposable 的处理也不够优雅，可以模仿 RxSwift 中 DisposeBag 的做法。上面这些问题可以留给读者自己去思考了。（更多内容可以查看[我的主页](http://jewelz.me)）","slug":"用 Swift 写一个响应式编程库","published":1,"updated":"2018-05-30T03:38:18.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikq001v1u0orwj3f23u","content":"<p>2017年又快过去了，忙了一年感觉没啥收获，感觉是不是应该写点啥，想了好久没想出要写什么。下半年因为工作的原因，狗狗也没养了，吉他上也积满了灰尘，</p>\n<a id=\"more\"></a>\n<p>兴致勃勃的学习素描，到现在也没画出了啥😂，博客也很久没更新了。想想感觉更新一下博客吧。</p>\n<p>整个2017年我完全使用 Swift 进行开发了。使用 Swift 进行开发是一个很愉快的体验，我已经完全不想再去碰 OC 了。最近想做一个响应式编程的库，所以就把它拿来分享一下。</p>\n<h2 id=\"Reactive-Programing\"><a href=\"#Reactive-Programing\" class=\"headerlink\" title=\"Reactive Programing\"></a>Reactive Programing</h2><p>说到响应式编程，ReactiveCocoa 和 RxSwift 可以说是目前 iOS 开发中最优秀的第三方开源库了。今天咱们不聊 ReactiveCocoa 和 RxSwif，咱们自己来写一个响应式编程库。如果你对观察者模式很熟悉的话，那么响应式编程就很容易理解了。</p>\n<blockquote>\n<p>响应式编程是一种面向数据流和变化传播的编程范式。</p>\n</blockquote>\n<p>比如用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。“监听”流的行为叫做订阅。响应式就是基于这种想法。</p>\n<p> 废话不多说，撸起袖子开干。</p>\n<p>我们以一个获取用户信息的网络请求为例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetchUser</span><span class=\"params\">(with id: Int, completion: @escaping <span class=\"params\">(<span class=\"params\">(User)</span></span></span></span> -&gt; <span class=\"type\">Void</span>)) &#123;</span><br><span class=\"line\">     <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: <span class=\"type\">DispatchTime</span>.now()+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> user = <span class=\"type\">User</span>(name: <span class=\"string\">\"jewelz\"</span>)</span><br><span class=\"line\">         completion(user)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是我们通常的做法，在请求方法里传入一个回调函数，在回调里拿到结果。在响应式里面，我们监听请求，当请求完成时，观察者得到更新。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetchUser</span><span class=\"params\">(with id: Int)</span></span> -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">User</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>发送网络请求就可以这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchUser(with: <span class=\"string\">\"12345\"</span>).subscribe(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在完成 Signal 之前， 需要定义订阅后返回的数据结构，这里我只关心成功和失败两种状态的数据，所以可以这样写:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Result</span>&lt;<span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> success(<span class=\"type\">Value</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> error(<span class=\"type\">Error</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在可以开始实现我们的 Signal 了:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Signal</span>&lt;<span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Subscriber</span> = (<span class=\"type\">Result</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  \t<span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> subscribers: [<span class=\"type\">Subscriber</span>] = []</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"number\">_</span> result: Result&lt;Value&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> subscriber <span class=\"keyword\">in</span> subscribers &#123;</span><br><span class=\"line\">            subscriber(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"number\">_</span> subscriber: @escaping <span class=\"params\">(Result&lt;Value&gt;)</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        subscribers.append(subscriber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写个小例子测试一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> signal = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">signal.subscribe &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.send(.success(<span class=\"number\">100</span>))</span><br><span class=\"line\">signal.send(.success(<span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print</span></span><br><span class=\"line\">success(<span class=\"number\">100</span>)</span><br><span class=\"line\">success(<span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n<p>我们的 Signal 已经可以正常工作了，不过还有很多改进的空间，我们可以使用一个工厂方法来创建一个 Signal, 同时将 <code>send</code>变为私有的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; ((<span class=\"type\">Result</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Void</span>, <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> signal = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (signal.send, signal)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"number\">_</span> result: Result&lt;Value&gt;)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们需要这样使用 Signal 了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">signal.subscribe &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sink(.success(<span class=\"number\">100</span>))</span><br><span class=\"line\">sink(.success(<span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n<p>接着我们可以给 UITextField 绑定一个 Signal，只需要在 Extension 中给 UITextField添加一个计算属性  ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension UITextField &#123;</span><br><span class=\"line\">    var signal: Signal&lt;String&gt; &#123;</span><br><span class=\"line\">        let (sink, signal) = Signal&lt;String&gt;.empty()</span><br><span class=\"line\">        let observer = KeyValueObserver&lt;String&gt;(object: self, keyPath: #keyPath(text)) &#123; str in</span><br><span class=\"line\">            sink(.success(str))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        signal.objects.append(observer)</span><br><span class=\"line\">        return signal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中的 <code>observer</code> 是一个局部变量，在 <code>signal</code>调用完后，就会被销毁，所以需要在 Signal 中保存该对象，可以给 Signal 添加一个数组，用来保存需要延长生命周期的对象。 KeyValueObserver 是对 KVO 的简单封装，其实现如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyValueObserver</span>&lt;<span class=\"title\">T</span>&gt;: <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> object: <span class=\"type\">NSObject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> keyPath: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> callback: (<span class=\"type\">T</span>) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(object: <span class=\"type\">NSObject</span>, keyPath: <span class=\"type\">String</span>, callback: @escaping (<span class=\"type\">T</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.object = object</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.keyPath = keyPath</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.callback = callback</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        object.addObserver(<span class=\"keyword\">self</span>, forKeyPath: keyPath, options: [.new], context: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">observeValue</span><span class=\"params\">(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> keyPath = keyPath, keyPath == <span class=\"keyword\">self</span>.keyPath, <span class=\"keyword\">let</span> value = change?[.newKey] <span class=\"keyword\">as</span>? <span class=\"type\">T</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        callback(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        object.removeObserver(<span class=\"keyword\">self</span>, forKeyPath: keyPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用<code>textField.signal.subscribe({})</code> 来观察 UITextField 内容的改变了。</p>\n<p> 在 Playground 写个 VC 测试一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> textField =  <span class=\"type\">UITextField</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> signal: <span class=\"type\">Signal</span>&lt;<span class=\"type\">String</span>&gt;?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        signal = textField.signal</span><br><span class=\"line\">        signal?.subscribe(&#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        textField.text = <span class=\"string\">\"1234567\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Removing vc\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vc: <span class=\"type\">VC</span>? = <span class=\"type\">VC</span>()</span><br><span class=\"line\">vc?.viewDidLoad()</span><br><span class=\"line\">vc = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print</span></span><br><span class=\"line\">success(<span class=\"string\">\"1234567\"</span>)</span><br><span class=\"line\"><span class=\"type\">Removing</span> vc</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference-Cycles\"><a href=\"#Reference-Cycles\" class=\"headerlink\" title=\"Reference Cycles\"></a>Reference Cycles</h2><p>我在上面的 Signal 中，添加了 <code>deinit</code>方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"Removing Signal\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后发现 Signal 的析构方法并没有执行，也就是说上面的代码中出现了循环引用，其实仔细分析上面 UITextField 的拓展中 <code>signal</code>的实现就能发现问题出在哪儿了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"type\">KeyValueObserver</span>&lt;<span class=\"type\">String</span>&gt;(object: <span class=\"keyword\">self</span>, keyPath: #keyPath(text)) &#123; str <span class=\"keyword\">in</span></span><br><span class=\"line\">    sink(.success(str))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>KeyValueObserver</code> 的回调中，调用了 <code>sink()</code>方法，而 <code>sink</code> 方法其实就是 <code>signal.send(_:)</code>方法，这里在闭包中捕获了<code>signal</code> 变量，于是就形成了循环引用。这里只要使用 <code>weak</code> 就能解决。修改下的代码是这样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; ((<span class=\"type\">Result</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Void</span>, <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> signal = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (&#123;[<span class=\"keyword\">weak</span> signal] value <span class=\"keyword\">in</span> signal?.send(value)&#125;, signal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次运行， Signal 的析构方法就能执行了。</p>\n<p>上面就实现了一个简单的响应式编程的库了。不过这里还存在很多问题，比如我们应该在适当的时机移除观察者，现在我们的观察者被添加在 <code>subscribers</code> 数组中，这样就不知道该移除哪一个观察者，所以我们将数字替换成字典，用 UUID   作为 key :</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Token</span> = <span class=\"type\">UUID</span></span><br><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> subscribers: [<span class=\"type\">Token</span>: <span class=\"type\">Subscriber</span>] = [:]</span><br></pre></td></tr></table></figure>\n<p>我们可以模仿 RxSwift 中的 Disposable 用来移除观察者，实现代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disposable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> dispose: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">create</span><span class=\"params\">(<span class=\"number\">_</span> dispose: @escaping <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Disposable</span>(dispose)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"number\">_</span> dispose: @escaping () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.dispose = dispose</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        dispose()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原来的 <code>subscribe(_:)</code> 返回一个 Disposable 就可以了:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"number\">_</span> subscriber: @escaping <span class=\"params\">(Result&lt;Value&gt;)</span></span></span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> token = <span class=\"type\">UUID</span>()</span><br><span class=\"line\">     subscribers[token] = subscriber</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Disposable</span>.create &#123;</span><br><span class=\"line\">          <span class=\"keyword\">self</span>.subscribers[token] = <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;   </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们只要在适当的时机销毁 Disposable 就可以移除观察者了。</p>\n<p>作为一个响应式编程库都会有 <code>map</code>, <code>flatMap</code>, <code>filter</code>, <code>reduce</code> 等方法，所以我们的库也不能少，我们可以简单的实现几个。</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>map 比较简单，就是将一个 <em>返回值为包装值的函数</em> 作用于一个<strong>包装(Wrapped)值</strong>的过程， 这里的包装值可以理解为可以包含其他值的一种结构，例如 Swift 中的数组，可选类型都是包装值。它们都有重载的 <code>map</code>, <code>flatMap</code>等函数。以数组为例，我们经常这样使用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> images = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].<span class=\"built_in\">map</span>&#123; <span class=\"type\">UIImage</span>(named: $<span class=\"number\">0</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>现在来实现我们的 map 函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: @escaping <span class=\"params\">(Value)</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt;.empty()</span><br><span class=\"line\">     <span class=\"keyword\">let</span> dispose = subscribe &#123; (result) <span class=\"keyword\">in</span></span><br><span class=\"line\">          sink(result.<span class=\"built_in\">map</span>(transform))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      signal.objects.append(dispose)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> signal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我同时给 Result 也实现了 map 函数:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Result</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: @escaping <span class=\"params\">(Value)</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">Result</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> value):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> .success(transform(value))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .error(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> .error(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> (sink, intSignal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">intSignal</span><br><span class=\"line\">    .<span class=\"built_in\">map</span>&#123; <span class=\"type\">String</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    .subscribe &#123;  result <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sink(.success(<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print success(\"100\")</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h2><p>flatMap 和 map 很相似，但也有一些不同，以可选型为例，Swif t是这样定义 map 和 flatMap 的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>?) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br></pre></td></tr></table></figure>\n<p> flatMap 和 map 的不同主要体现在 transform 函数的返回值不同。map 接受的函数返回值类型是 <code>U</code>类型，而 flatMap 接受的函数返回值类型是 <code>U?</code>类型。例如对于一个可选值，可以这样调用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aString: <span class=\"type\">String</span>? = <span class=\"string\">\"￥99.9\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> price = aString.flatMap&#123; <span class=\"type\">Float</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Price is nil</span></span><br></pre></td></tr></table></figure>\n<p>我们这里 flatMap 和 Swift 中数组以及可选型中的 flatMap 保持了一致。</p>\n<p>所以我们的 flatMap 应该是这样定义：<code>flatMap&lt;T&gt;(_ transform: @escaping (Value) -&gt; Signal&lt;T&gt;) -&gt; Signal&lt;T&gt;</code> 。</p>\n<p>理解了 flatMap 和 map 的不同，实现起来也就很简单了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: @escaping <span class=\"params\">(Value)</span></span></span> -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt;) -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt;.empty()</span><br><span class=\"line\">     <span class=\"keyword\">var</span> _dispose: <span class=\"type\">Disposable</span>?</span><br><span class=\"line\">     <span class=\"keyword\">let</span> dispose = subscribe &#123; (result) <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> result &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> value):</span><br><span class=\"line\">             <span class=\"keyword\">let</span> new = transform(value)</span><br><span class=\"line\">             _dispose = new.subscribe(&#123; _result <span class=\"keyword\">in</span></span><br><span class=\"line\">                 sink(_result)</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .error(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             sink(.error(error))</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _dispose != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        signal.objects.append(_dispose!)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signal.objects.append(dispose)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> signal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以模拟一个网络请求来测试 flatMap：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">users</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Signal</span>&lt;[<span class=\"type\">User</span>]&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;[<span class=\"type\">User</span>]&gt;.empty()</span><br><span class=\"line\">     <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: <span class=\"type\">DispatchTime</span>.now()+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> users = <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">map</span>&#123; <span class=\"type\">User</span>(id: <span class=\"type\">String</span>(describing: $<span class=\"number\">0</span>)) &#125;</span><br><span class=\"line\">         sink(.success(users))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> signal</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">userDetail</span><span class=\"params\">(with id: String)</span></span> -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">User</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">User</span>&gt;.empty()</span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: <span class=\"type\">DispatchTime</span>.now()+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        sink(.success(<span class=\"type\">User</span>(id: id, name: <span class=\"string\">\"jewelz\"</span>)))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> signal</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dispose = users()</span><br><span class=\"line\">    .flatMap &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.userDetail(with: $<span class=\"number\">0</span>.first!.id) &#125;</span><br><span class=\"line\">    .subscribe &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">disposes.append(dispose)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print: success(ReactivePrograming.User(name: Optional(\"jewelz\"), id: \"1\"))</span></span><br></pre></td></tr></table></figure>\n<p>通过使用 flatMap ，我们可以很简单的将一个 Signal 转换为另一个 Signal , 这在我们处理多个请求嵌套时就会很方便了。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>上面通过100 多行的代码就实现了一个简单的响应式编程库。不过对于一个库来说，以上的内容还远远不够。现在的 Signal 还不具有原子性，要作为一个实际可用的库，应该是线程安的。还有我们对 Disposable 的处理也不够优雅，可以模仿 RxSwift 中 DisposeBag 的做法。上面这些问题可以留给读者自己去思考了。（更多内容可以查看<a href=\"http://jewelz.me\" target=\"_blank\" rel=\"noopener\">我的主页</a>）</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikq001v1u0orwj3f23u/cover.png","excerpt":"<p>2017年又快过去了，忙了一年感觉没啥收获，感觉是不是应该写点啥，想了好久没想出要写什么。下半年因为工作的原因，狗狗也没养了，吉他上也积满了灰尘，</p>","more":"<p>兴致勃勃的学习素描，到现在也没画出了啥😂，博客也很久没更新了。想想感觉更新一下博客吧。</p>\n<p>整个2017年我完全使用 Swift 进行开发了。使用 Swift 进行开发是一个很愉快的体验，我已经完全不想再去碰 OC 了。最近想做一个响应式编程的库，所以就把它拿来分享一下。</p>\n<h2 id=\"Reactive-Programing\"><a href=\"#Reactive-Programing\" class=\"headerlink\" title=\"Reactive Programing\"></a>Reactive Programing</h2><p>说到响应式编程，ReactiveCocoa 和 RxSwift 可以说是目前 iOS 开发中最优秀的第三方开源库了。今天咱们不聊 ReactiveCocoa 和 RxSwif，咱们自己来写一个响应式编程库。如果你对观察者模式很熟悉的话，那么响应式编程就很容易理解了。</p>\n<blockquote>\n<p>响应式编程是一种面向数据流和变化传播的编程范式。</p>\n</blockquote>\n<p>比如用户输入、单击事件、变量值等都可以看做一个流，你可以观察这个流，并基于这个流做一些操作。“监听”流的行为叫做订阅。响应式就是基于这种想法。</p>\n<p> 废话不多说，撸起袖子开干。</p>\n<p>我们以一个获取用户信息的网络请求为例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetchUser</span><span class=\"params\">(with id: Int, completion: @escaping <span class=\"params\">(<span class=\"params\">(User)</span></span></span></span> -&gt; <span class=\"type\">Void</span>)) &#123;</span><br><span class=\"line\">     <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: <span class=\"type\">DispatchTime</span>.now()+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> user = <span class=\"type\">User</span>(name: <span class=\"string\">\"jewelz\"</span>)</span><br><span class=\"line\">         completion(user)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是我们通常的做法，在请求方法里传入一个回调函数，在回调里拿到结果。在响应式里面，我们监听请求，当请求完成时，观察者得到更新。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetchUser</span><span class=\"params\">(with id: Int)</span></span> -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">User</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>发送网络请求就可以这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchUser(with: <span class=\"string\">\"12345\"</span>).subscribe(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在完成 Signal 之前， 需要定义订阅后返回的数据结构，这里我只关心成功和失败两种状态的数据，所以可以这样写:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Result</span>&lt;<span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> success(<span class=\"type\">Value</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> error(<span class=\"type\">Error</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在可以开始实现我们的 Signal 了:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Signal</span>&lt;<span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Subscriber</span> = (<span class=\"type\">Result</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  \t<span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> subscribers: [<span class=\"type\">Subscriber</span>] = []</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"number\">_</span> result: Result&lt;Value&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> subscriber <span class=\"keyword\">in</span> subscribers &#123;</span><br><span class=\"line\">            subscriber(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"number\">_</span> subscriber: @escaping <span class=\"params\">(Result&lt;Value&gt;)</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        subscribers.append(subscriber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写个小例子测试一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> signal = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">signal.subscribe &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.send(.success(<span class=\"number\">100</span>))</span><br><span class=\"line\">signal.send(.success(<span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print</span></span><br><span class=\"line\">success(<span class=\"number\">100</span>)</span><br><span class=\"line\">success(<span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n<p>我们的 Signal 已经可以正常工作了，不过还有很多改进的空间，我们可以使用一个工厂方法来创建一个 Signal, 同时将 <code>send</code>变为私有的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; ((<span class=\"type\">Result</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Void</span>, <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> signal = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (signal.send, signal)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"number\">_</span> result: Result&lt;Value&gt;)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们需要这样使用 Signal 了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">signal.subscribe &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sink(.success(<span class=\"number\">100</span>))</span><br><span class=\"line\">sink(.success(<span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n<p>接着我们可以给 UITextField 绑定一个 Signal，只需要在 Extension 中给 UITextField添加一个计算属性  ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension UITextField &#123;</span><br><span class=\"line\">    var signal: Signal&lt;String&gt; &#123;</span><br><span class=\"line\">        let (sink, signal) = Signal&lt;String&gt;.empty()</span><br><span class=\"line\">        let observer = KeyValueObserver&lt;String&gt;(object: self, keyPath: #keyPath(text)) &#123; str in</span><br><span class=\"line\">            sink(.success(str))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        signal.objects.append(observer)</span><br><span class=\"line\">        return signal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中的 <code>observer</code> 是一个局部变量，在 <code>signal</code>调用完后，就会被销毁，所以需要在 Signal 中保存该对象，可以给 Signal 添加一个数组，用来保存需要延长生命周期的对象。 KeyValueObserver 是对 KVO 的简单封装，其实现如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyValueObserver</span>&lt;<span class=\"title\">T</span>&gt;: <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> object: <span class=\"type\">NSObject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> keyPath: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> callback: (<span class=\"type\">T</span>) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(object: <span class=\"type\">NSObject</span>, keyPath: <span class=\"type\">String</span>, callback: @escaping (<span class=\"type\">T</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.object = object</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.keyPath = keyPath</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.callback = callback</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        object.addObserver(<span class=\"keyword\">self</span>, forKeyPath: keyPath, options: [.new], context: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">observeValue</span><span class=\"params\">(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> keyPath = keyPath, keyPath == <span class=\"keyword\">self</span>.keyPath, <span class=\"keyword\">let</span> value = change?[.newKey] <span class=\"keyword\">as</span>? <span class=\"type\">T</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">        callback(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        object.removeObserver(<span class=\"keyword\">self</span>, forKeyPath: keyPath)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用<code>textField.signal.subscribe({})</code> 来观察 UITextField 内容的改变了。</p>\n<p> 在 Playground 写个 VC 测试一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> textField =  <span class=\"type\">UITextField</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> signal: <span class=\"type\">Signal</span>&lt;<span class=\"type\">String</span>&gt;?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        signal = textField.signal</span><br><span class=\"line\">        signal?.subscribe(&#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        textField.text = <span class=\"string\">\"1234567\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Removing vc\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vc: <span class=\"type\">VC</span>? = <span class=\"type\">VC</span>()</span><br><span class=\"line\">vc?.viewDidLoad()</span><br><span class=\"line\">vc = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print</span></span><br><span class=\"line\">success(<span class=\"string\">\"1234567\"</span>)</span><br><span class=\"line\"><span class=\"type\">Removing</span> vc</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference-Cycles\"><a href=\"#Reference-Cycles\" class=\"headerlink\" title=\"Reference Cycles\"></a>Reference Cycles</h2><p>我在上面的 Signal 中，添加了 <code>deinit</code>方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">\"Removing Signal\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后发现 Signal 的析构方法并没有执行，也就是说上面的代码中出现了循环引用，其实仔细分析上面 UITextField 的拓展中 <code>signal</code>的实现就能发现问题出在哪儿了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"type\">KeyValueObserver</span>&lt;<span class=\"type\">String</span>&gt;(object: <span class=\"keyword\">self</span>, keyPath: #keyPath(text)) &#123; str <span class=\"keyword\">in</span></span><br><span class=\"line\">    sink(.success(str))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>KeyValueObserver</code> 的回调中，调用了 <code>sink()</code>方法，而 <code>sink</code> 方法其实就是 <code>signal.send(_:)</code>方法，这里在闭包中捕获了<code>signal</code> 变量，于是就形成了循环引用。这里只要使用 <code>weak</code> 就能解决。修改下的代码是这样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; ((<span class=\"type\">Result</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Void</span>, <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> signal = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Value</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (&#123;[<span class=\"keyword\">weak</span> signal] value <span class=\"keyword\">in</span> signal?.send(value)&#125;, signal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次运行， Signal 的析构方法就能执行了。</p>\n<p>上面就实现了一个简单的响应式编程的库了。不过这里还存在很多问题，比如我们应该在适当的时机移除观察者，现在我们的观察者被添加在 <code>subscribers</code> 数组中，这样就不知道该移除哪一个观察者，所以我们将数字替换成字典，用 UUID   作为 key :</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Token</span> = <span class=\"type\">UUID</span></span><br><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> subscribers: [<span class=\"type\">Token</span>: <span class=\"type\">Subscriber</span>] = [:]</span><br></pre></td></tr></table></figure>\n<p>我们可以模仿 RxSwift 中的 Disposable 用来移除观察者，实现代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Disposable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> dispose: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">create</span><span class=\"params\">(<span class=\"number\">_</span> dispose: @escaping <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Disposable</span>(dispose)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"number\">_</span> dispose: @escaping () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.dispose = dispose</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        dispose()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原来的 <code>subscribe(_:)</code> 返回一个 Disposable 就可以了:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"number\">_</span> subscriber: @escaping <span class=\"params\">(Result&lt;Value&gt;)</span></span></span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> token = <span class=\"type\">UUID</span>()</span><br><span class=\"line\">     subscribers[token] = subscriber</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Disposable</span>.create &#123;</span><br><span class=\"line\">          <span class=\"keyword\">self</span>.subscribers[token] = <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;   </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们只要在适当的时机销毁 Disposable 就可以移除观察者了。</p>\n<p>作为一个响应式编程库都会有 <code>map</code>, <code>flatMap</code>, <code>filter</code>, <code>reduce</code> 等方法，所以我们的库也不能少，我们可以简单的实现几个。</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>map 比较简单，就是将一个 <em>返回值为包装值的函数</em> 作用于一个<strong>包装(Wrapped)值</strong>的过程， 这里的包装值可以理解为可以包含其他值的一种结构，例如 Swift 中的数组，可选类型都是包装值。它们都有重载的 <code>map</code>, <code>flatMap</code>等函数。以数组为例，我们经常这样使用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> images = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].<span class=\"built_in\">map</span>&#123; <span class=\"type\">UIImage</span>(named: $<span class=\"number\">0</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>现在来实现我们的 map 函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: @escaping <span class=\"params\">(Value)</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt;.empty()</span><br><span class=\"line\">     <span class=\"keyword\">let</span> dispose = subscribe &#123; (result) <span class=\"keyword\">in</span></span><br><span class=\"line\">          sink(result.<span class=\"built_in\">map</span>(transform))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      signal.objects.append(dispose)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> signal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我同时给 Result 也实现了 map 函数:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Result</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: @escaping <span class=\"params\">(Value)</span></span></span> -&gt; <span class=\"type\">T</span>) -&gt; <span class=\"type\">Result</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> value):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> .success(transform(value))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .error(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> .error(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> (sink, intSignal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">intSignal</span><br><span class=\"line\">    .<span class=\"built_in\">map</span>&#123; <span class=\"type\">String</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    .subscribe &#123;  result <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sink(.success(<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print success(\"100\")</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h2><p>flatMap 和 map 很相似，但也有一些不同，以可选型为例，Swif t是这样定义 map 和 flatMap 的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;U&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: <span class=\"params\">(Wrapped)</span></span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">U</span>?) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">U</span>?</span><br></pre></td></tr></table></figure>\n<p> flatMap 和 map 的不同主要体现在 transform 函数的返回值不同。map 接受的函数返回值类型是 <code>U</code>类型，而 flatMap 接受的函数返回值类型是 <code>U?</code>类型。例如对于一个可选值，可以这样调用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aString: <span class=\"type\">String</span>? = <span class=\"string\">\"￥99.9\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> price = aString.flatMap&#123; <span class=\"type\">Float</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Price is nil</span></span><br></pre></td></tr></table></figure>\n<p>我们这里 flatMap 和 Swift 中数组以及可选型中的 flatMap 保持了一致。</p>\n<p>所以我们的 flatMap 应该是这样定义：<code>flatMap&lt;T&gt;(_ transform: @escaping (Value) -&gt; Signal&lt;T&gt;) -&gt; Signal&lt;T&gt;</code> 。</p>\n<p>理解了 flatMap 和 map 的不同，实现起来也就很简单了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> transform: @escaping <span class=\"params\">(Value)</span></span></span> -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt;) -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">T</span>&gt;.empty()</span><br><span class=\"line\">     <span class=\"keyword\">var</span> _dispose: <span class=\"type\">Disposable</span>?</span><br><span class=\"line\">     <span class=\"keyword\">let</span> dispose = subscribe &#123; (result) <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> result &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> value):</span><br><span class=\"line\">             <span class=\"keyword\">let</span> new = transform(value)</span><br><span class=\"line\">             _dispose = new.subscribe(&#123; _result <span class=\"keyword\">in</span></span><br><span class=\"line\">                 sink(_result)</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .error(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             sink(.error(error))</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _dispose != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        signal.objects.append(_dispose!)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signal.objects.append(dispose)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> signal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以模拟一个网络请求来测试 flatMap：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">users</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Signal</span>&lt;[<span class=\"type\">User</span>]&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;[<span class=\"type\">User</span>]&gt;.empty()</span><br><span class=\"line\">     <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: <span class=\"type\">DispatchTime</span>.now()+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> users = <span class=\"type\">Array</span>(<span class=\"number\">1</span>...<span class=\"number\">10</span>).<span class=\"built_in\">map</span>&#123; <span class=\"type\">User</span>(id: <span class=\"type\">String</span>(describing: $<span class=\"number\">0</span>)) &#125;</span><br><span class=\"line\">         sink(.success(users))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> signal</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">userDetail</span><span class=\"params\">(with id: String)</span></span> -&gt; <span class=\"type\">Signal</span>&lt;<span class=\"type\">User</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> (sink, signal) = <span class=\"type\">Signal</span>&lt;<span class=\"type\">User</span>&gt;.empty()</span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: <span class=\"type\">DispatchTime</span>.now()+<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        sink(.success(<span class=\"type\">User</span>(id: id, name: <span class=\"string\">\"jewelz\"</span>)))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> signal</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dispose = users()</span><br><span class=\"line\">    .flatMap &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.userDetail(with: $<span class=\"number\">0</span>.first!.id) &#125;</span><br><span class=\"line\">    .subscribe &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">disposes.append(dispose)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Print: success(ReactivePrograming.User(name: Optional(\"jewelz\"), id: \"1\"))</span></span><br></pre></td></tr></table></figure>\n<p>通过使用 flatMap ，我们可以很简单的将一个 Signal 转换为另一个 Signal , 这在我们处理多个请求嵌套时就会很方便了。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>上面通过100 多行的代码就实现了一个简单的响应式编程库。不过对于一个库来说，以上的内容还远远不够。现在的 Signal 还不具有原子性，要作为一个实际可用的库，应该是线程安的。还有我们对 Disposable 的处理也不够优雅，可以模仿 RxSwift 中 DisposeBag 的做法。上面这些问题可以留给读者自己去思考了。（更多内容可以查看<a href=\"http://jewelz.me\" target=\"_blank\" rel=\"noopener\">我的主页</a>）</p>"},{"title":"教你如何用Swift写个json转模型的开源库","date":"2017-03-26T09:32:56.000Z","thumbnailImage":"thumbnail.jpg","_content":"在iOS项目开发过程中，我们经常会用到将从服务器获取的 json 转 model 的操作，我们可以使用 Swift 提供的`setValuesForKeys` 或者 Objective-C 提供的`setValuesForKeysWithDictionary` 方法来完成这一操作。\n\n<!--more-->\n\n使用上面两个方法只能将字典转换成 model , 如果 json 最外层是个数组，那么我们就必须在循环中使用这个方法，这非常不方便， 而且还有个条件，就是 model 中的所有属性名必须跟字典中的 key 完全对应，这样就会遇到另外一个问题，如果我们字典中的一个 key 与系统关键字重名，那我们在 model 就不能使用这个 key 作为属性名了。\n\n\n\n为了解决上面的问题，我们会使用一些第三方库去完成字典转模型的操作，例如 MJExtension 。由于它是一个 OC 的库，所以在 Swift 项目中需要引入桥接文件。在 Swift 中使用其 API 时其实是很不 swift 的。所以现在我们就用 Swift 3.0 来写一个 swift style 的 json 转模型的库吧。\n\n例如我们有这样的两个 model:\n```\nclass User: NSObject {\n    var name: String?\n    var age = 0\n    var desc: String?\n}\nclass Repos: NSObject {\n    var title: String?\n    var owner: User?\n    var viewers: [User]?\n}\n```\n最终我们想实现这样的调用: \n```\nlet repos = json ~> Repos.self    // 将一个字典转成一个Repos的实例\n \nlet viewers  = viewers => User.self  //将一个数组转换成User的数组\n```\n`~>` 和 `=>` 是自定义的运算符，主要是为了调用方便。它们的定义是这样的：\n```\npublic func ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T?\npublic func =><T: NSObject>(lhs: Any, rhs: T.Type) -> [T]?\n```\n这里给出我的实现 [ModelSwift](https://github.com/hujewelz/modelSwift)。大家可以先看看我的实现然后试着写出自己的实现。好了，现在就让我们开始吧。\n\n## 要解决的问题\n由于将数组转成模型数组，其实要做的工作跟将字典转模型是一样的，只是做了个循环而已。所以我们首先要解决的问题是：如何在 Swift 将字典转成模型。这里我们是使用 KVC就可以了。我们使用 NSObject 的  `setValue(_ value: Any?, forKey key: String)` 方法来给对象设置值。\n\n从上面要实现的效果来看，我们在使用前并不用先实例化一个对象。所以我们要解决的第二个问题是：如何通过类型来实例化一个对象。 \n\n另一个要解决的问题是字典中的 key 与关键字重名，或者我们想使用自己的名字。所以我们要实现自己的映射的策略。\n\n还有一个问题是，如果我们服务器返回的字典数据中包含另外一个字典数组，对应我们的 model 中就是一个对象包含另外一个对象的数组。那么我们怎样才能知道这个数组中对象的类型呢？\n\n## 实现思路\n对于上面提到的第一问题我在上面已经给出了解决方案，就是让我们的 model 继承 NSObject, 然后使用   `setValue(_ value: Any?, forKey key: String)` 方法来给对象设置值。这里的 `value` 其实是要根据 model 中的属性名去字典中获取的。如果我们能拿到 model 所有的属性名，那么给 model 设置值的操作就完成了。那么如何获取到 model 的属性名呢？这就必须得使用到 Swift 中的反射机制了。\n\n### Mirror\nSwift 的反射机制是基于一个叫 Mirror 的 `struct` 来实现的。对于 Mirror 的详细结构大家可以按住 `cmd` 点进去查看。这里我们主要关注的是 `public typealias Child = (label: String?, value: Any)` 这个 typealias，它其实是一个元祖，`label` 就表示我们的属性名，是 Optional 的。`value` 表示的是属性的值。这里 ` label` 为什么是 Optional 的？如果你仔细考虑下，其实这是非常有意义的，并不是所有支持反射的数据结构都包含有名字的子节点。 Mirror 会以属性的名字做为 `label`，但是 Collection 只有下标，没有名字。Tuple 同样也可能没有给它们的条目指定名字。\n\nMirror 有个 `children` 的存储属性，它的定义是这样的: \n```\n public let children: Mirror.Children\n```\n这里的 `Mirror.Children` 也是一个 typealias，它是这样定义的：\n```\npublic typealias Children = AnyCollection<Mirror.Child>\n```\n可以看到它是 Child 的集合。所以我们可以通过 Mirror 的 `children` 属性来获得 model 的所有属性名。\n\n我们写个类来测试一下：\n```\nclass Person: NSObject {\n    var name = \"\"\n    var age = 0\n    var friends: [Person]?\n}\n\nlet mirror = Mirror(reflecting: Person())\nfor case let (label?, value) in mirror.children {\n    print (\"\\(label) = \\(value)\")\n}\n```\n运行结果是如下：\n```\nname = \nage = 0\nfriends = nil\n```\nMirror 还有一个类型为 `Any.Type` 的 `subjectType` 存储属性，表示该映射对象的类型，例如上面的 `mirror.subjectType` 就是 `User`。使用 `subjectType` 就可以获得对象的类型以及其所有属性的类型。为了实现这个效果，我们可以写出下面的代码:\n```\nfunc subjectType(of subject: Any) -> Any.Type {\n    let mirror = Mirror(reflecting: subject)\n    return mirror.subjectType\n}\n\nfunc children(of subject: Any) {\n    let mirror = Mirror(reflecting: subject)\n    for case let(label?, value) in mirror.children {\n        print (\"\\(label) = \\(subjectType(of: value))\")\n    }\n}\n\nchildren(of: Person())\n```\n打印结果是这样的：\n```\nname = String\nage = Int\nfriends = Optional<Array<Person>>\n```\n我原本想使用这个方法来得到 model 中包含的另外对象的类型和数组中对象的类型，例如 Person 中有 `father` 和 `friends` 属性:\n```\nclass Person: NSObject {\n    var name = \"\"\n    var age = 100\n    var father: Person?\n    var friends: [Person]?\n}\n```\n但是发现结果是 `Optional<Person>` 和 `Optional<Array<Person>>`。所以我们还是得显示地指出一个 model 中包含的其他对象的类型，以及数组中对象的类型。在后面我会给出自己的实现。大家可以给出自己的实现。\n\n### 通过类型来实例化一个对象\n要使用 Mirror 来获得反射对象的所有属性名，就必须先使用 `init(reflecting subject: Any)` 来创建一个 Mirror。而创建 Mirror 就必须传入一个 subject（在这里我们主要传入一个NSObject类型的对象）。所以我们的首要任务就是通过类型来实例化一个对象。\n> 有些同学可能有疑问了：我要转换成 Person 的对象，我直接传入一个\n Person 的实例就行了啊。如果你看看我们 josn 转模型的方法定义就能明白了。 ` func ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T?`\n\n还是以上面的 Person 为例，我们看看这样的调用:\n```\nPerson.self().age\n// 结果是：100\n```\n所以我们通过一个类的 `self()`方法可以得到一个类的实例。其实我们还可以通过 AnyClass 来实例化对象。AnyClass 是类的类型，其定义是这样的：\n```\npublic typealias AnyClass = AnyObject.Type\n```\n我们通过类的`self`属性可以得到类的类型：\n```\nPerson.self     \n//结果是：Person.Type\n```\n得到类的类型后，通过调用其 `init()`方法就可以创建一个实例了：\n```\nPerson.self.init().age\n// 结果是：100\n```\n> 使用类型创建对象的类中的init方法前面必须是 required 的，因为这么创建方式是使用meta type来创建的。由于我们 json 转模型的 model 是继承自 NSObject 的，所以不用在每个类中显示地实现。\n\n## 写个简单的 josn 转模型\n有了上面的基础就可以来实现我们的 josn 转模型了。首先我们来写出 `~>` 的定义，并通过类来创建一个对象\n```\ninfix operator ~>\n\nfunc ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T? {\n    guard let json = lhs as? [String: Any], !json.isEmpty else {\n        return nil\n    }\n    \n    let obj = T.self()\n    let mirror = Mirror(reflecting: obj)\n    \n    for case let(label?, value) in mirror.children {\n        print (\"\\(label) = \\(value)\")\n    }\n    \n    return obj\n}\n\nclass Person: NSObject {\n    var name = \"\"\n    var age = 0\n\n    override var description: String {\n        return \"name = \\(name), age = \\(age)\"\n    }\n}\nlet json: [String: Any] = [\"name\": \"jewelz\", \"age\": 100]\nlet p = json ~> Person.self\n// 打印结果：\n// name = \n// age = 0\n```\n通过上面的几行代码我们确实成功的创建了一个 Person 的实例了。下一步就是给实例设置值了。我们在上面的 `for` 循环中添加如下代码：\n```\n// 从字典中获取值\nif let value = json[label] {\n     obj.setValue(value, forKey: label)\n}\n```\n整个代码就是这样的：\n```\ninfix operator ~>\n\nfunc ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T? {\n    guard let json = lhs as? [String: Any], !json.isEmpty else {\n        return nil\n    }\n    \n    let obj = T.self()\n    let mirror = Mirror(reflecting: obj)\n    \n    for case let(label?, _) in mirror.children {\n        // 从字典中获取值\n        if let value = json[label] {\n            obj.setValue(value, forKey: label)\n        }\n    }\n    return obj\n}\n\nlet p = json ~> Person.self\nprint(p!)\n//结果：name = jewelz, age = 100\n```\n有了上面 `~>` 的实现，`=>` 的实现就很简单了：\n```\ninfix operator =>\nfunc =><T: NSObject>(lhs: Any, rhs: T.Type) -> [T]? {\n    guard let array = lhs as? [Any], !array.isEmpty else {\n        return nil\n    }\n    \n    return array.flatMap{ $0 ~> rhs }\n}\n```\n上面只是实现了一个简单 josn 转模型，其实在实际项目中要解决的问题还有很多。现在再来看看我在文章开头给出的 User 类和 Respo 类:\n```\nclass User: NSObject {\n    var name: String?\n    var age = 0\n    var desc: String?\n}\nclass Repos: NSObject {\n    var title: String?\n    var owner: User?\n    var viewers: [User]?\n}\n```\n只简单的用上面的实现是无法得到想要的结果的。对于 User 类来说，`desc` 属性对应 json 的 `description` key，所以我们还要进行 model 的属性与 json 的键的映射。这里的思路就是将 model 的属性名作为 key，以要替换的 json 的键作为 value 存入字典中。我们可以拓展 NSObject ，添加一个计算属性并提供一个空实现。不过这样的倾入性太大，毕竟不是所有的类都需要做这个映射。所以最后的方式是 POP。比如我们可以制定这样一个协议：\n```\npublic protocol Reflectable: class {\n    var reflectedObject: [String: Any.Type] { get }\n}\n```\n在需要做映射的类中去实现该协议。\n\n对于更复杂的 Repos 类来说，要做的事情更多。比如  `owner`的类型怎么知道？`owner` 这个对象怎么完成赋值？`viewers` 数组中的类型是什么，怎样才能完成赋值？ 虽然通过上面提到的 Mirro 可以得到所有的类型，但得到的是 `Optional<User>`以及 `Optional<Array<User>>`。我的解决的办法就跟上面做属性名替换是一样的。这里就不详细地说明了，大家可以各显神通。写出自己的实现。\n\n## 写在最后\n通过上面的几个步骤，我们就能很快的实现一个简单的 json 转模型的需求了。总结起来就是以下几点：\n\n* 所有要转换的 model 继承 NSObject \n* 使用类的类型来实例化对象\n* 通过反射获得对象的所有属性名\n* 通过  `setValue(_ value: Any?, forKey key: String)` 方法来给属性设置值\n\n\n对于在最后提出的几个问题，我这里就不一一详细地说明了。大家可以[点这里](https://github.com/hujewelz/modelSwift)看看我的实现。大家可以使用 CocoaPods 或者 Carthage 将 [ModelSwift](https://github.com/hujewelz/modelSwift) 集成到项目中。如果在使用中有什么问题可以 issue 我，也可以给个 star 持续关注。\n\n","source":"_posts/教你如何用Swift写个json转模型的开源库.md","raw":"---\ntitle: 教你如何用Swift写个json转模型的开源库\ndate: 2017-03-26 17:32:56\ntags: Swift\ncategory: Swift\nthumbnailImage: thumbnail.jpg\n---\n在iOS项目开发过程中，我们经常会用到将从服务器获取的 json 转 model 的操作，我们可以使用 Swift 提供的`setValuesForKeys` 或者 Objective-C 提供的`setValuesForKeysWithDictionary` 方法来完成这一操作。\n\n<!--more-->\n\n使用上面两个方法只能将字典转换成 model , 如果 json 最外层是个数组，那么我们就必须在循环中使用这个方法，这非常不方便， 而且还有个条件，就是 model 中的所有属性名必须跟字典中的 key 完全对应，这样就会遇到另外一个问题，如果我们字典中的一个 key 与系统关键字重名，那我们在 model 就不能使用这个 key 作为属性名了。\n\n\n\n为了解决上面的问题，我们会使用一些第三方库去完成字典转模型的操作，例如 MJExtension 。由于它是一个 OC 的库，所以在 Swift 项目中需要引入桥接文件。在 Swift 中使用其 API 时其实是很不 swift 的。所以现在我们就用 Swift 3.0 来写一个 swift style 的 json 转模型的库吧。\n\n例如我们有这样的两个 model:\n```\nclass User: NSObject {\n    var name: String?\n    var age = 0\n    var desc: String?\n}\nclass Repos: NSObject {\n    var title: String?\n    var owner: User?\n    var viewers: [User]?\n}\n```\n最终我们想实现这样的调用: \n```\nlet repos = json ~> Repos.self    // 将一个字典转成一个Repos的实例\n \nlet viewers  = viewers => User.self  //将一个数组转换成User的数组\n```\n`~>` 和 `=>` 是自定义的运算符，主要是为了调用方便。它们的定义是这样的：\n```\npublic func ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T?\npublic func =><T: NSObject>(lhs: Any, rhs: T.Type) -> [T]?\n```\n这里给出我的实现 [ModelSwift](https://github.com/hujewelz/modelSwift)。大家可以先看看我的实现然后试着写出自己的实现。好了，现在就让我们开始吧。\n\n## 要解决的问题\n由于将数组转成模型数组，其实要做的工作跟将字典转模型是一样的，只是做了个循环而已。所以我们首先要解决的问题是：如何在 Swift 将字典转成模型。这里我们是使用 KVC就可以了。我们使用 NSObject 的  `setValue(_ value: Any?, forKey key: String)` 方法来给对象设置值。\n\n从上面要实现的效果来看，我们在使用前并不用先实例化一个对象。所以我们要解决的第二个问题是：如何通过类型来实例化一个对象。 \n\n另一个要解决的问题是字典中的 key 与关键字重名，或者我们想使用自己的名字。所以我们要实现自己的映射的策略。\n\n还有一个问题是，如果我们服务器返回的字典数据中包含另外一个字典数组，对应我们的 model 中就是一个对象包含另外一个对象的数组。那么我们怎样才能知道这个数组中对象的类型呢？\n\n## 实现思路\n对于上面提到的第一问题我在上面已经给出了解决方案，就是让我们的 model 继承 NSObject, 然后使用   `setValue(_ value: Any?, forKey key: String)` 方法来给对象设置值。这里的 `value` 其实是要根据 model 中的属性名去字典中获取的。如果我们能拿到 model 所有的属性名，那么给 model 设置值的操作就完成了。那么如何获取到 model 的属性名呢？这就必须得使用到 Swift 中的反射机制了。\n\n### Mirror\nSwift 的反射机制是基于一个叫 Mirror 的 `struct` 来实现的。对于 Mirror 的详细结构大家可以按住 `cmd` 点进去查看。这里我们主要关注的是 `public typealias Child = (label: String?, value: Any)` 这个 typealias，它其实是一个元祖，`label` 就表示我们的属性名，是 Optional 的。`value` 表示的是属性的值。这里 ` label` 为什么是 Optional 的？如果你仔细考虑下，其实这是非常有意义的，并不是所有支持反射的数据结构都包含有名字的子节点。 Mirror 会以属性的名字做为 `label`，但是 Collection 只有下标，没有名字。Tuple 同样也可能没有给它们的条目指定名字。\n\nMirror 有个 `children` 的存储属性，它的定义是这样的: \n```\n public let children: Mirror.Children\n```\n这里的 `Mirror.Children` 也是一个 typealias，它是这样定义的：\n```\npublic typealias Children = AnyCollection<Mirror.Child>\n```\n可以看到它是 Child 的集合。所以我们可以通过 Mirror 的 `children` 属性来获得 model 的所有属性名。\n\n我们写个类来测试一下：\n```\nclass Person: NSObject {\n    var name = \"\"\n    var age = 0\n    var friends: [Person]?\n}\n\nlet mirror = Mirror(reflecting: Person())\nfor case let (label?, value) in mirror.children {\n    print (\"\\(label) = \\(value)\")\n}\n```\n运行结果是如下：\n```\nname = \nage = 0\nfriends = nil\n```\nMirror 还有一个类型为 `Any.Type` 的 `subjectType` 存储属性，表示该映射对象的类型，例如上面的 `mirror.subjectType` 就是 `User`。使用 `subjectType` 就可以获得对象的类型以及其所有属性的类型。为了实现这个效果，我们可以写出下面的代码:\n```\nfunc subjectType(of subject: Any) -> Any.Type {\n    let mirror = Mirror(reflecting: subject)\n    return mirror.subjectType\n}\n\nfunc children(of subject: Any) {\n    let mirror = Mirror(reflecting: subject)\n    for case let(label?, value) in mirror.children {\n        print (\"\\(label) = \\(subjectType(of: value))\")\n    }\n}\n\nchildren(of: Person())\n```\n打印结果是这样的：\n```\nname = String\nage = Int\nfriends = Optional<Array<Person>>\n```\n我原本想使用这个方法来得到 model 中包含的另外对象的类型和数组中对象的类型，例如 Person 中有 `father` 和 `friends` 属性:\n```\nclass Person: NSObject {\n    var name = \"\"\n    var age = 100\n    var father: Person?\n    var friends: [Person]?\n}\n```\n但是发现结果是 `Optional<Person>` 和 `Optional<Array<Person>>`。所以我们还是得显示地指出一个 model 中包含的其他对象的类型，以及数组中对象的类型。在后面我会给出自己的实现。大家可以给出自己的实现。\n\n### 通过类型来实例化一个对象\n要使用 Mirror 来获得反射对象的所有属性名，就必须先使用 `init(reflecting subject: Any)` 来创建一个 Mirror。而创建 Mirror 就必须传入一个 subject（在这里我们主要传入一个NSObject类型的对象）。所以我们的首要任务就是通过类型来实例化一个对象。\n> 有些同学可能有疑问了：我要转换成 Person 的对象，我直接传入一个\n Person 的实例就行了啊。如果你看看我们 josn 转模型的方法定义就能明白了。 ` func ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T?`\n\n还是以上面的 Person 为例，我们看看这样的调用:\n```\nPerson.self().age\n// 结果是：100\n```\n所以我们通过一个类的 `self()`方法可以得到一个类的实例。其实我们还可以通过 AnyClass 来实例化对象。AnyClass 是类的类型，其定义是这样的：\n```\npublic typealias AnyClass = AnyObject.Type\n```\n我们通过类的`self`属性可以得到类的类型：\n```\nPerson.self     \n//结果是：Person.Type\n```\n得到类的类型后，通过调用其 `init()`方法就可以创建一个实例了：\n```\nPerson.self.init().age\n// 结果是：100\n```\n> 使用类型创建对象的类中的init方法前面必须是 required 的，因为这么创建方式是使用meta type来创建的。由于我们 json 转模型的 model 是继承自 NSObject 的，所以不用在每个类中显示地实现。\n\n## 写个简单的 josn 转模型\n有了上面的基础就可以来实现我们的 josn 转模型了。首先我们来写出 `~>` 的定义，并通过类来创建一个对象\n```\ninfix operator ~>\n\nfunc ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T? {\n    guard let json = lhs as? [String: Any], !json.isEmpty else {\n        return nil\n    }\n    \n    let obj = T.self()\n    let mirror = Mirror(reflecting: obj)\n    \n    for case let(label?, value) in mirror.children {\n        print (\"\\(label) = \\(value)\")\n    }\n    \n    return obj\n}\n\nclass Person: NSObject {\n    var name = \"\"\n    var age = 0\n\n    override var description: String {\n        return \"name = \\(name), age = \\(age)\"\n    }\n}\nlet json: [String: Any] = [\"name\": \"jewelz\", \"age\": 100]\nlet p = json ~> Person.self\n// 打印结果：\n// name = \n// age = 0\n```\n通过上面的几行代码我们确实成功的创建了一个 Person 的实例了。下一步就是给实例设置值了。我们在上面的 `for` 循环中添加如下代码：\n```\n// 从字典中获取值\nif let value = json[label] {\n     obj.setValue(value, forKey: label)\n}\n```\n整个代码就是这样的：\n```\ninfix operator ~>\n\nfunc ~><T: NSObject>(lhs: Any, rhs: T.Type) -> T? {\n    guard let json = lhs as? [String: Any], !json.isEmpty else {\n        return nil\n    }\n    \n    let obj = T.self()\n    let mirror = Mirror(reflecting: obj)\n    \n    for case let(label?, _) in mirror.children {\n        // 从字典中获取值\n        if let value = json[label] {\n            obj.setValue(value, forKey: label)\n        }\n    }\n    return obj\n}\n\nlet p = json ~> Person.self\nprint(p!)\n//结果：name = jewelz, age = 100\n```\n有了上面 `~>` 的实现，`=>` 的实现就很简单了：\n```\ninfix operator =>\nfunc =><T: NSObject>(lhs: Any, rhs: T.Type) -> [T]? {\n    guard let array = lhs as? [Any], !array.isEmpty else {\n        return nil\n    }\n    \n    return array.flatMap{ $0 ~> rhs }\n}\n```\n上面只是实现了一个简单 josn 转模型，其实在实际项目中要解决的问题还有很多。现在再来看看我在文章开头给出的 User 类和 Respo 类:\n```\nclass User: NSObject {\n    var name: String?\n    var age = 0\n    var desc: String?\n}\nclass Repos: NSObject {\n    var title: String?\n    var owner: User?\n    var viewers: [User]?\n}\n```\n只简单的用上面的实现是无法得到想要的结果的。对于 User 类来说，`desc` 属性对应 json 的 `description` key，所以我们还要进行 model 的属性与 json 的键的映射。这里的思路就是将 model 的属性名作为 key，以要替换的 json 的键作为 value 存入字典中。我们可以拓展 NSObject ，添加一个计算属性并提供一个空实现。不过这样的倾入性太大，毕竟不是所有的类都需要做这个映射。所以最后的方式是 POP。比如我们可以制定这样一个协议：\n```\npublic protocol Reflectable: class {\n    var reflectedObject: [String: Any.Type] { get }\n}\n```\n在需要做映射的类中去实现该协议。\n\n对于更复杂的 Repos 类来说，要做的事情更多。比如  `owner`的类型怎么知道？`owner` 这个对象怎么完成赋值？`viewers` 数组中的类型是什么，怎样才能完成赋值？ 虽然通过上面提到的 Mirro 可以得到所有的类型，但得到的是 `Optional<User>`以及 `Optional<Array<User>>`。我的解决的办法就跟上面做属性名替换是一样的。这里就不详细地说明了，大家可以各显神通。写出自己的实现。\n\n## 写在最后\n通过上面的几个步骤，我们就能很快的实现一个简单的 json 转模型的需求了。总结起来就是以下几点：\n\n* 所有要转换的 model 继承 NSObject \n* 使用类的类型来实例化对象\n* 通过反射获得对象的所有属性名\n* 通过  `setValue(_ value: Any?, forKey key: String)` 方法来给属性设置值\n\n\n对于在最后提出的几个问题，我这里就不一一详细地说明了。大家可以[点这里](https://github.com/hujewelz/modelSwift)看看我的实现。大家可以使用 CocoaPods 或者 Carthage 将 [ModelSwift](https://github.com/hujewelz/modelSwift) 集成到项目中。如果在使用中有什么问题可以 issue 我，也可以给个 star 持续关注。\n\n","slug":"教你如何用Swift写个json转模型的开源库","published":1,"updated":"2018-05-27T03:02:10.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zikr001z1u0o2fy6gioq","content":"<p>在iOS项目开发过程中，我们经常会用到将从服务器获取的 json 转 model 的操作，我们可以使用 Swift 提供的<code>setValuesForKeys</code> 或者 Objective-C 提供的<code>setValuesForKeysWithDictionary</code> 方法来完成这一操作。</p>\n<a id=\"more\"></a>\n<p>使用上面两个方法只能将字典转换成 model , 如果 json 最外层是个数组，那么我们就必须在循环中使用这个方法，这非常不方便， 而且还有个条件，就是 model 中的所有属性名必须跟字典中的 key 完全对应，这样就会遇到另外一个问题，如果我们字典中的一个 key 与系统关键字重名，那我们在 model 就不能使用这个 key 作为属性名了。</p>\n<p>为了解决上面的问题，我们会使用一些第三方库去完成字典转模型的操作，例如 MJExtension 。由于它是一个 OC 的库，所以在 Swift 项目中需要引入桥接文件。在 Swift 中使用其 API 时其实是很不 swift 的。所以现在我们就用 Swift 3.0 来写一个 swift style 的 json 转模型的库吧。</p>\n<p>例如我们有这样的两个 model:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User: NSObject &#123;</span><br><span class=\"line\">    var name: String?</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\">    var desc: String?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Repos: NSObject &#123;</span><br><span class=\"line\">    var title: String?</span><br><span class=\"line\">    var owner: User?</span><br><span class=\"line\">    var viewers: [User]?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终我们想实现这样的调用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let repos = json ~&gt; Repos.self    // 将一个字典转成一个Repos的实例</span><br><span class=\"line\"> </span><br><span class=\"line\">let viewers  = viewers =&gt; User.self  //将一个数组转换成User的数组</span><br></pre></td></tr></table></figure></p>\n<p><code>~&gt;</code> 和 <code>=&gt;</code> 是自定义的运算符，主要是为了调用方便。它们的定义是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T?</span><br><span class=\"line\">public func =&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; [T]?</span><br></pre></td></tr></table></figure></p>\n<p>这里给出我的实现 <a href=\"https://github.com/hujewelz/modelSwift\" target=\"_blank\" rel=\"noopener\">ModelSwift</a>。大家可以先看看我的实现然后试着写出自己的实现。好了，现在就让我们开始吧。</p>\n<h2 id=\"要解决的问题\"><a href=\"#要解决的问题\" class=\"headerlink\" title=\"要解决的问题\"></a>要解决的问题</h2><p>由于将数组转成模型数组，其实要做的工作跟将字典转模型是一样的，只是做了个循环而已。所以我们首先要解决的问题是：如何在 Swift 将字典转成模型。这里我们是使用 KVC就可以了。我们使用 NSObject 的  <code>setValue(_ value: Any?, forKey key: String)</code> 方法来给对象设置值。</p>\n<p>从上面要实现的效果来看，我们在使用前并不用先实例化一个对象。所以我们要解决的第二个问题是：如何通过类型来实例化一个对象。 </p>\n<p>另一个要解决的问题是字典中的 key 与关键字重名，或者我们想使用自己的名字。所以我们要实现自己的映射的策略。</p>\n<p>还有一个问题是，如果我们服务器返回的字典数据中包含另外一个字典数组，对应我们的 model 中就是一个对象包含另外一个对象的数组。那么我们怎样才能知道这个数组中对象的类型呢？</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>对于上面提到的第一问题我在上面已经给出了解决方案，就是让我们的 model 继承 NSObject, 然后使用   <code>setValue(_ value: Any?, forKey key: String)</code> 方法来给对象设置值。这里的 <code>value</code> 其实是要根据 model 中的属性名去字典中获取的。如果我们能拿到 model 所有的属性名，那么给 model 设置值的操作就完成了。那么如何获取到 model 的属性名呢？这就必须得使用到 Swift 中的反射机制了。</p>\n<h3 id=\"Mirror\"><a href=\"#Mirror\" class=\"headerlink\" title=\"Mirror\"></a>Mirror</h3><p>Swift 的反射机制是基于一个叫 Mirror 的 <code>struct</code> 来实现的。对于 Mirror 的详细结构大家可以按住 <code>cmd</code> 点进去查看。这里我们主要关注的是 <code>public typealias Child = (label: String?, value: Any)</code> 这个 typealias，它其实是一个元祖，<code>label</code> 就表示我们的属性名，是 Optional 的。<code>value</code> 表示的是属性的值。这里 <code>label</code> 为什么是 Optional 的？如果你仔细考虑下，其实这是非常有意义的，并不是所有支持反射的数据结构都包含有名字的子节点。 Mirror 会以属性的名字做为 <code>label</code>，但是 Collection 只有下标，没有名字。Tuple 同样也可能没有给它们的条目指定名字。</p>\n<p>Mirror 有个 <code>children</code> 的存储属性，它的定义是这样的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public let children: Mirror.Children</span><br></pre></td></tr></table></figure></p>\n<p>这里的 <code>Mirror.Children</code> 也是一个 typealias，它是这样定义的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public typealias Children = AnyCollection&lt;Mirror.Child&gt;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到它是 Child 的集合。所以我们可以通过 Mirror 的 <code>children</code> 属性来获得 model 的所有属性名。</p>\n<p>我们写个类来测试一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person: NSObject &#123;</span><br><span class=\"line\">    var name = &quot;&quot;</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\">    var friends: [Person]?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let mirror = Mirror(reflecting: Person())</span><br><span class=\"line\">for case let (label?, value) in mirror.children &#123;</span><br><span class=\"line\">    print (&quot;\\(label) = \\(value)&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果是如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = </span><br><span class=\"line\">age = 0</span><br><span class=\"line\">friends = nil</span><br></pre></td></tr></table></figure></p>\n<p>Mirror 还有一个类型为 <code>Any.Type</code> 的 <code>subjectType</code> 存储属性，表示该映射对象的类型，例如上面的 <code>mirror.subjectType</code> 就是 <code>User</code>。使用 <code>subjectType</code> 就可以获得对象的类型以及其所有属性的类型。为了实现这个效果，我们可以写出下面的代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func subjectType(of subject: Any) -&gt; Any.Type &#123;</span><br><span class=\"line\">    let mirror = Mirror(reflecting: subject)</span><br><span class=\"line\">    return mirror.subjectType</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func children(of subject: Any) &#123;</span><br><span class=\"line\">    let mirror = Mirror(reflecting: subject)</span><br><span class=\"line\">    for case let(label?, value) in mirror.children &#123;</span><br><span class=\"line\">        print (&quot;\\(label) = \\(subjectType(of: value))&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">children(of: Person())</span><br></pre></td></tr></table></figure></p>\n<p>打印结果是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = String</span><br><span class=\"line\">age = Int</span><br><span class=\"line\">friends = Optional&lt;Array&lt;Person&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我原本想使用这个方法来得到 model 中包含的另外对象的类型和数组中对象的类型，例如 Person 中有 <code>father</code> 和 <code>friends</code> 属性:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person: NSObject &#123;</span><br><span class=\"line\">    var name = &quot;&quot;</span><br><span class=\"line\">    var age = 100</span><br><span class=\"line\">    var father: Person?</span><br><span class=\"line\">    var friends: [Person]?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是发现结果是 <code>Optional&lt;Person&gt;</code> 和 <code>Optional&lt;Array&lt;Person&gt;&gt;</code>。所以我们还是得显示地指出一个 model 中包含的其他对象的类型，以及数组中对象的类型。在后面我会给出自己的实现。大家可以给出自己的实现。</p>\n<h3 id=\"通过类型来实例化一个对象\"><a href=\"#通过类型来实例化一个对象\" class=\"headerlink\" title=\"通过类型来实例化一个对象\"></a>通过类型来实例化一个对象</h3><p>要使用 Mirror 来获得反射对象的所有属性名，就必须先使用 <code>init(reflecting subject: Any)</code> 来创建一个 Mirror。而创建 Mirror 就必须传入一个 subject（在这里我们主要传入一个NSObject类型的对象）。所以我们的首要任务就是通过类型来实例化一个对象。</p>\n<blockquote>\n<p>有些同学可能有疑问了：我要转换成 Person 的对象，我直接传入一个<br> Person 的实例就行了啊。如果你看看我们 josn 转模型的方法定义就能明白了。 <code>func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T?</code></p>\n</blockquote>\n<p>还是以上面的 Person 为例，我们看看这样的调用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.self().age</span><br><span class=\"line\">// 结果是：100</span><br></pre></td></tr></table></figure></p>\n<p>所以我们通过一个类的 <code>self()</code>方法可以得到一个类的实例。其实我们还可以通过 AnyClass 来实例化对象。AnyClass 是类的类型，其定义是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public typealias AnyClass = AnyObject.Type</span><br></pre></td></tr></table></figure></p>\n<p>我们通过类的<code>self</code>属性可以得到类的类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.self     </span><br><span class=\"line\">//结果是：Person.Type</span><br></pre></td></tr></table></figure></p>\n<p>得到类的类型后，通过调用其 <code>init()</code>方法就可以创建一个实例了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.self.init().age</span><br><span class=\"line\">// 结果是：100</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>使用类型创建对象的类中的init方法前面必须是 required 的，因为这么创建方式是使用meta type来创建的。由于我们 json 转模型的 model 是继承自 NSObject 的，所以不用在每个类中显示地实现。</p>\n</blockquote>\n<h2 id=\"写个简单的-josn-转模型\"><a href=\"#写个简单的-josn-转模型\" class=\"headerlink\" title=\"写个简单的 josn 转模型\"></a>写个简单的 josn 转模型</h2><p>有了上面的基础就可以来实现我们的 josn 转模型了。首先我们来写出 <code>~&gt;</code> 的定义，并通过类来创建一个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix operator ~&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T? &#123;</span><br><span class=\"line\">    guard let json = lhs as? [String: Any], !json.isEmpty else &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    let obj = T.self()</span><br><span class=\"line\">    let mirror = Mirror(reflecting: obj)</span><br><span class=\"line\">    </span><br><span class=\"line\">    for case let(label?, value) in mirror.children &#123;</span><br><span class=\"line\">        print (&quot;\\(label) = \\(value)&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Person: NSObject &#123;</span><br><span class=\"line\">    var name = &quot;&quot;</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    override var description: String &#123;</span><br><span class=\"line\">        return &quot;name = \\(name), age = \\(age)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let json: [String: Any] = [&quot;name&quot;: &quot;jewelz&quot;, &quot;age&quot;: 100]</span><br><span class=\"line\">let p = json ~&gt; Person.self</span><br><span class=\"line\">// 打印结果：</span><br><span class=\"line\">// name = </span><br><span class=\"line\">// age = 0</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的几行代码我们确实成功的创建了一个 Person 的实例了。下一步就是给实例设置值了。我们在上面的 <code>for</code> 循环中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从字典中获取值</span><br><span class=\"line\">if let value = json[label] &#123;</span><br><span class=\"line\">     obj.setValue(value, forKey: label)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>整个代码就是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix operator ~&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T? &#123;</span><br><span class=\"line\">    guard let json = lhs as? [String: Any], !json.isEmpty else &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    let obj = T.self()</span><br><span class=\"line\">    let mirror = Mirror(reflecting: obj)</span><br><span class=\"line\">    </span><br><span class=\"line\">    for case let(label?, _) in mirror.children &#123;</span><br><span class=\"line\">        // 从字典中获取值</span><br><span class=\"line\">        if let value = json[label] &#123;</span><br><span class=\"line\">            obj.setValue(value, forKey: label)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = json ~&gt; Person.self</span><br><span class=\"line\">print(p!)</span><br><span class=\"line\">//结果：name = jewelz, age = 100</span><br></pre></td></tr></table></figure></p>\n<p>有了上面 <code>~&gt;</code> 的实现，<code>=&gt;</code> 的实现就很简单了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix operator =&gt;</span><br><span class=\"line\">func =&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; [T]? &#123;</span><br><span class=\"line\">    guard let array = lhs as? [Any], !array.isEmpty else &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return array.flatMap&#123; $0 ~&gt; rhs &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面只是实现了一个简单 josn 转模型，其实在实际项目中要解决的问题还有很多。现在再来看看我在文章开头给出的 User 类和 Respo 类:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User: NSObject &#123;</span><br><span class=\"line\">    var name: String?</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\">    var desc: String?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Repos: NSObject &#123;</span><br><span class=\"line\">    var title: String?</span><br><span class=\"line\">    var owner: User?</span><br><span class=\"line\">    var viewers: [User]?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只简单的用上面的实现是无法得到想要的结果的。对于 User 类来说，<code>desc</code> 属性对应 json 的 <code>description</code> key，所以我们还要进行 model 的属性与 json 的键的映射。这里的思路就是将 model 的属性名作为 key，以要替换的 json 的键作为 value 存入字典中。我们可以拓展 NSObject ，添加一个计算属性并提供一个空实现。不过这样的倾入性太大，毕竟不是所有的类都需要做这个映射。所以最后的方式是 POP。比如我们可以制定这样一个协议：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public protocol Reflectable: class &#123;</span><br><span class=\"line\">    var reflectedObject: [String: Any.Type] &#123; get &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在需要做映射的类中去实现该协议。</p>\n<p>对于更复杂的 Repos 类来说，要做的事情更多。比如  <code>owner</code>的类型怎么知道？<code>owner</code> 这个对象怎么完成赋值？<code>viewers</code> 数组中的类型是什么，怎样才能完成赋值？ 虽然通过上面提到的 Mirro 可以得到所有的类型，但得到的是 <code>Optional&lt;User&gt;</code>以及 <code>Optional&lt;Array&lt;User&gt;&gt;</code>。我的解决的办法就跟上面做属性名替换是一样的。这里就不详细地说明了，大家可以各显神通。写出自己的实现。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>通过上面的几个步骤，我们就能很快的实现一个简单的 json 转模型的需求了。总结起来就是以下几点：</p>\n<ul>\n<li>所有要转换的 model 继承 NSObject </li>\n<li>使用类的类型来实例化对象</li>\n<li>通过反射获得对象的所有属性名</li>\n<li>通过  <code>setValue(_ value: Any?, forKey key: String)</code> 方法来给属性设置值</li>\n</ul>\n<p>对于在最后提出的几个问题，我这里就不一一详细地说明了。大家可以<a href=\"https://github.com/hujewelz/modelSwift\" target=\"_blank\" rel=\"noopener\">点这里</a>看看我的实现。大家可以使用 CocoaPods 或者 Carthage 将 <a href=\"https://github.com/hujewelz/modelSwift\" target=\"_blank\" rel=\"noopener\">ModelSwift</a> 集成到项目中。如果在使用中有什么问题可以 issue 我，也可以给个 star 持续关注。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zikr001z1u0o2fy6gioq/thumbnail.jpg","excerpt":"<p>在iOS项目开发过程中，我们经常会用到将从服务器获取的 json 转 model 的操作，我们可以使用 Swift 提供的<code>setValuesForKeys</code> 或者 Objective-C 提供的<code>setValuesForKeysWithDictionary</code> 方法来完成这一操作。</p>","more":"<p>使用上面两个方法只能将字典转换成 model , 如果 json 最外层是个数组，那么我们就必须在循环中使用这个方法，这非常不方便， 而且还有个条件，就是 model 中的所有属性名必须跟字典中的 key 完全对应，这样就会遇到另外一个问题，如果我们字典中的一个 key 与系统关键字重名，那我们在 model 就不能使用这个 key 作为属性名了。</p>\n<p>为了解决上面的问题，我们会使用一些第三方库去完成字典转模型的操作，例如 MJExtension 。由于它是一个 OC 的库，所以在 Swift 项目中需要引入桥接文件。在 Swift 中使用其 API 时其实是很不 swift 的。所以现在我们就用 Swift 3.0 来写一个 swift style 的 json 转模型的库吧。</p>\n<p>例如我们有这样的两个 model:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User: NSObject &#123;</span><br><span class=\"line\">    var name: String?</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\">    var desc: String?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Repos: NSObject &#123;</span><br><span class=\"line\">    var title: String?</span><br><span class=\"line\">    var owner: User?</span><br><span class=\"line\">    var viewers: [User]?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终我们想实现这样的调用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let repos = json ~&gt; Repos.self    // 将一个字典转成一个Repos的实例</span><br><span class=\"line\"> </span><br><span class=\"line\">let viewers  = viewers =&gt; User.self  //将一个数组转换成User的数组</span><br></pre></td></tr></table></figure></p>\n<p><code>~&gt;</code> 和 <code>=&gt;</code> 是自定义的运算符，主要是为了调用方便。它们的定义是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T?</span><br><span class=\"line\">public func =&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; [T]?</span><br></pre></td></tr></table></figure></p>\n<p>这里给出我的实现 <a href=\"https://github.com/hujewelz/modelSwift\" target=\"_blank\" rel=\"noopener\">ModelSwift</a>。大家可以先看看我的实现然后试着写出自己的实现。好了，现在就让我们开始吧。</p>\n<h2 id=\"要解决的问题\"><a href=\"#要解决的问题\" class=\"headerlink\" title=\"要解决的问题\"></a>要解决的问题</h2><p>由于将数组转成模型数组，其实要做的工作跟将字典转模型是一样的，只是做了个循环而已。所以我们首先要解决的问题是：如何在 Swift 将字典转成模型。这里我们是使用 KVC就可以了。我们使用 NSObject 的  <code>setValue(_ value: Any?, forKey key: String)</code> 方法来给对象设置值。</p>\n<p>从上面要实现的效果来看，我们在使用前并不用先实例化一个对象。所以我们要解决的第二个问题是：如何通过类型来实例化一个对象。 </p>\n<p>另一个要解决的问题是字典中的 key 与关键字重名，或者我们想使用自己的名字。所以我们要实现自己的映射的策略。</p>\n<p>还有一个问题是，如果我们服务器返回的字典数据中包含另外一个字典数组，对应我们的 model 中就是一个对象包含另外一个对象的数组。那么我们怎样才能知道这个数组中对象的类型呢？</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>对于上面提到的第一问题我在上面已经给出了解决方案，就是让我们的 model 继承 NSObject, 然后使用   <code>setValue(_ value: Any?, forKey key: String)</code> 方法来给对象设置值。这里的 <code>value</code> 其实是要根据 model 中的属性名去字典中获取的。如果我们能拿到 model 所有的属性名，那么给 model 设置值的操作就完成了。那么如何获取到 model 的属性名呢？这就必须得使用到 Swift 中的反射机制了。</p>\n<h3 id=\"Mirror\"><a href=\"#Mirror\" class=\"headerlink\" title=\"Mirror\"></a>Mirror</h3><p>Swift 的反射机制是基于一个叫 Mirror 的 <code>struct</code> 来实现的。对于 Mirror 的详细结构大家可以按住 <code>cmd</code> 点进去查看。这里我们主要关注的是 <code>public typealias Child = (label: String?, value: Any)</code> 这个 typealias，它其实是一个元祖，<code>label</code> 就表示我们的属性名，是 Optional 的。<code>value</code> 表示的是属性的值。这里 <code>label</code> 为什么是 Optional 的？如果你仔细考虑下，其实这是非常有意义的，并不是所有支持反射的数据结构都包含有名字的子节点。 Mirror 会以属性的名字做为 <code>label</code>，但是 Collection 只有下标，没有名字。Tuple 同样也可能没有给它们的条目指定名字。</p>\n<p>Mirror 有个 <code>children</code> 的存储属性，它的定义是这样的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public let children: Mirror.Children</span><br></pre></td></tr></table></figure></p>\n<p>这里的 <code>Mirror.Children</code> 也是一个 typealias，它是这样定义的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public typealias Children = AnyCollection&lt;Mirror.Child&gt;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到它是 Child 的集合。所以我们可以通过 Mirror 的 <code>children</code> 属性来获得 model 的所有属性名。</p>\n<p>我们写个类来测试一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person: NSObject &#123;</span><br><span class=\"line\">    var name = &quot;&quot;</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\">    var friends: [Person]?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let mirror = Mirror(reflecting: Person())</span><br><span class=\"line\">for case let (label?, value) in mirror.children &#123;</span><br><span class=\"line\">    print (&quot;\\(label) = \\(value)&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果是如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = </span><br><span class=\"line\">age = 0</span><br><span class=\"line\">friends = nil</span><br></pre></td></tr></table></figure></p>\n<p>Mirror 还有一个类型为 <code>Any.Type</code> 的 <code>subjectType</code> 存储属性，表示该映射对象的类型，例如上面的 <code>mirror.subjectType</code> 就是 <code>User</code>。使用 <code>subjectType</code> 就可以获得对象的类型以及其所有属性的类型。为了实现这个效果，我们可以写出下面的代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func subjectType(of subject: Any) -&gt; Any.Type &#123;</span><br><span class=\"line\">    let mirror = Mirror(reflecting: subject)</span><br><span class=\"line\">    return mirror.subjectType</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func children(of subject: Any) &#123;</span><br><span class=\"line\">    let mirror = Mirror(reflecting: subject)</span><br><span class=\"line\">    for case let(label?, value) in mirror.children &#123;</span><br><span class=\"line\">        print (&quot;\\(label) = \\(subjectType(of: value))&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">children(of: Person())</span><br></pre></td></tr></table></figure></p>\n<p>打印结果是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = String</span><br><span class=\"line\">age = Int</span><br><span class=\"line\">friends = Optional&lt;Array&lt;Person&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我原本想使用这个方法来得到 model 中包含的另外对象的类型和数组中对象的类型，例如 Person 中有 <code>father</code> 和 <code>friends</code> 属性:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person: NSObject &#123;</span><br><span class=\"line\">    var name = &quot;&quot;</span><br><span class=\"line\">    var age = 100</span><br><span class=\"line\">    var father: Person?</span><br><span class=\"line\">    var friends: [Person]?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是发现结果是 <code>Optional&lt;Person&gt;</code> 和 <code>Optional&lt;Array&lt;Person&gt;&gt;</code>。所以我们还是得显示地指出一个 model 中包含的其他对象的类型，以及数组中对象的类型。在后面我会给出自己的实现。大家可以给出自己的实现。</p>\n<h3 id=\"通过类型来实例化一个对象\"><a href=\"#通过类型来实例化一个对象\" class=\"headerlink\" title=\"通过类型来实例化一个对象\"></a>通过类型来实例化一个对象</h3><p>要使用 Mirror 来获得反射对象的所有属性名，就必须先使用 <code>init(reflecting subject: Any)</code> 来创建一个 Mirror。而创建 Mirror 就必须传入一个 subject（在这里我们主要传入一个NSObject类型的对象）。所以我们的首要任务就是通过类型来实例化一个对象。</p>\n<blockquote>\n<p>有些同学可能有疑问了：我要转换成 Person 的对象，我直接传入一个<br> Person 的实例就行了啊。如果你看看我们 josn 转模型的方法定义就能明白了。 <code>func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T?</code></p>\n</blockquote>\n<p>还是以上面的 Person 为例，我们看看这样的调用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.self().age</span><br><span class=\"line\">// 结果是：100</span><br></pre></td></tr></table></figure></p>\n<p>所以我们通过一个类的 <code>self()</code>方法可以得到一个类的实例。其实我们还可以通过 AnyClass 来实例化对象。AnyClass 是类的类型，其定义是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public typealias AnyClass = AnyObject.Type</span><br></pre></td></tr></table></figure></p>\n<p>我们通过类的<code>self</code>属性可以得到类的类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.self     </span><br><span class=\"line\">//结果是：Person.Type</span><br></pre></td></tr></table></figure></p>\n<p>得到类的类型后，通过调用其 <code>init()</code>方法就可以创建一个实例了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.self.init().age</span><br><span class=\"line\">// 结果是：100</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>使用类型创建对象的类中的init方法前面必须是 required 的，因为这么创建方式是使用meta type来创建的。由于我们 json 转模型的 model 是继承自 NSObject 的，所以不用在每个类中显示地实现。</p>\n</blockquote>\n<h2 id=\"写个简单的-josn-转模型\"><a href=\"#写个简单的-josn-转模型\" class=\"headerlink\" title=\"写个简单的 josn 转模型\"></a>写个简单的 josn 转模型</h2><p>有了上面的基础就可以来实现我们的 josn 转模型了。首先我们来写出 <code>~&gt;</code> 的定义，并通过类来创建一个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix operator ~&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T? &#123;</span><br><span class=\"line\">    guard let json = lhs as? [String: Any], !json.isEmpty else &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    let obj = T.self()</span><br><span class=\"line\">    let mirror = Mirror(reflecting: obj)</span><br><span class=\"line\">    </span><br><span class=\"line\">    for case let(label?, value) in mirror.children &#123;</span><br><span class=\"line\">        print (&quot;\\(label) = \\(value)&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Person: NSObject &#123;</span><br><span class=\"line\">    var name = &quot;&quot;</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    override var description: String &#123;</span><br><span class=\"line\">        return &quot;name = \\(name), age = \\(age)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let json: [String: Any] = [&quot;name&quot;: &quot;jewelz&quot;, &quot;age&quot;: 100]</span><br><span class=\"line\">let p = json ~&gt; Person.self</span><br><span class=\"line\">// 打印结果：</span><br><span class=\"line\">// name = </span><br><span class=\"line\">// age = 0</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的几行代码我们确实成功的创建了一个 Person 的实例了。下一步就是给实例设置值了。我们在上面的 <code>for</code> 循环中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从字典中获取值</span><br><span class=\"line\">if let value = json[label] &#123;</span><br><span class=\"line\">     obj.setValue(value, forKey: label)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>整个代码就是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix operator ~&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">func ~&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; T? &#123;</span><br><span class=\"line\">    guard let json = lhs as? [String: Any], !json.isEmpty else &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    let obj = T.self()</span><br><span class=\"line\">    let mirror = Mirror(reflecting: obj)</span><br><span class=\"line\">    </span><br><span class=\"line\">    for case let(label?, _) in mirror.children &#123;</span><br><span class=\"line\">        // 从字典中获取值</span><br><span class=\"line\">        if let value = json[label] &#123;</span><br><span class=\"line\">            obj.setValue(value, forKey: label)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = json ~&gt; Person.self</span><br><span class=\"line\">print(p!)</span><br><span class=\"line\">//结果：name = jewelz, age = 100</span><br></pre></td></tr></table></figure></p>\n<p>有了上面 <code>~&gt;</code> 的实现，<code>=&gt;</code> 的实现就很简单了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">infix operator =&gt;</span><br><span class=\"line\">func =&gt;&lt;T: NSObject&gt;(lhs: Any, rhs: T.Type) -&gt; [T]? &#123;</span><br><span class=\"line\">    guard let array = lhs as? [Any], !array.isEmpty else &#123;</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return array.flatMap&#123; $0 ~&gt; rhs &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面只是实现了一个简单 josn 转模型，其实在实际项目中要解决的问题还有很多。现在再来看看我在文章开头给出的 User 类和 Respo 类:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User: NSObject &#123;</span><br><span class=\"line\">    var name: String?</span><br><span class=\"line\">    var age = 0</span><br><span class=\"line\">    var desc: String?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Repos: NSObject &#123;</span><br><span class=\"line\">    var title: String?</span><br><span class=\"line\">    var owner: User?</span><br><span class=\"line\">    var viewers: [User]?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只简单的用上面的实现是无法得到想要的结果的。对于 User 类来说，<code>desc</code> 属性对应 json 的 <code>description</code> key，所以我们还要进行 model 的属性与 json 的键的映射。这里的思路就是将 model 的属性名作为 key，以要替换的 json 的键作为 value 存入字典中。我们可以拓展 NSObject ，添加一个计算属性并提供一个空实现。不过这样的倾入性太大，毕竟不是所有的类都需要做这个映射。所以最后的方式是 POP。比如我们可以制定这样一个协议：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public protocol Reflectable: class &#123;</span><br><span class=\"line\">    var reflectedObject: [String: Any.Type] &#123; get &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在需要做映射的类中去实现该协议。</p>\n<p>对于更复杂的 Repos 类来说，要做的事情更多。比如  <code>owner</code>的类型怎么知道？<code>owner</code> 这个对象怎么完成赋值？<code>viewers</code> 数组中的类型是什么，怎样才能完成赋值？ 虽然通过上面提到的 Mirro 可以得到所有的类型，但得到的是 <code>Optional&lt;User&gt;</code>以及 <code>Optional&lt;Array&lt;User&gt;&gt;</code>。我的解决的办法就跟上面做属性名替换是一样的。这里就不详细地说明了，大家可以各显神通。写出自己的实现。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>通过上面的几个步骤，我们就能很快的实现一个简单的 json 转模型的需求了。总结起来就是以下几点：</p>\n<ul>\n<li>所有要转换的 model 继承 NSObject </li>\n<li>使用类的类型来实例化对象</li>\n<li>通过反射获得对象的所有属性名</li>\n<li>通过  <code>setValue(_ value: Any?, forKey key: String)</code> 方法来给属性设置值</li>\n</ul>\n<p>对于在最后提出的几个问题，我这里就不一一详细地说明了。大家可以<a href=\"https://github.com/hujewelz/modelSwift\" target=\"_blank\" rel=\"noopener\">点这里</a>看看我的实现。大家可以使用 CocoaPods 或者 Carthage 将 <a href=\"https://github.com/hujewelz/modelSwift\" target=\"_blank\" rel=\"noopener\">ModelSwift</a> 集成到项目中。如果在使用中有什么问题可以 issue 我，也可以给个 star 持续关注。</p>"},{"title":"被误解的MVC","date":"2016-04-06T01:01:45.000Z","_content":"**MVC**全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面...\n\n<!-- excerpt -->\n\n## MVC\n\n>**MVC**全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。\n\n<!--more-->\n## 三层架构\n>通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）。区分层次的目的即为了“[高内聚低耦合](http://baike.baidu.com/view/3082578.htm)”的思想。在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。\n\n## 总是被误解\n起初老师总说三层MVC，MVC三层架构……\nMVC是三个字母，三层架构也是“三”，所有我们就很自然的将MVC里的三个核心部件与三层架构等同起来：三层就是MVC，MVC就是三层架构。很多人认为`界面层`等于`View`,`业务逻辑层`等于`Controller`,`数据访问层`等于`Model`，其实这是完全错误的。 \nMVC主要用于三层架构的表现层，是一种复合设计模式，主要是为了解决应用程序用户界面与业务逻辑数据的耦合问题。而三层架构是从整个应用程序架构的角度来划分的。虽然表现不一样，但它们的目的都是一样：分层，解耦。\n\n**MVC**里的`Controller`是负责对页面进行控制的，比如：页面间跳转，显示逻辑等。三层架构里的`业务逻辑层`主要是对`业务实体数据`的加工，把加工后的数据传给页面显示。 MVC里的`Model`只是数据实体，是数据的容器，不具备什么增删改查的功能，它接收的数据是从`业务逻辑层`处理好传过来的数据。而三层架构里的`数据访问层`是具有增删改查功能的，是直接对数据库操作的，为业务逻辑层提供数据支持。\n如果非要让它们有所对应的话，那么三层架构中的界面层就相当于MVC中的V(View)和C(Controller)了，业务逻辑层和数据访问层就对应MVC中的M(Model)。其实从本质上来讲，它们还是不同纬度上的东西。\n\n","source":"_posts/被误解的MVC.md","raw":"---\ntitle: 被误解的MVC\ndate: 2016-04-06 09:01:45\ntags: 架构\ncategories: 架构\n---\n**MVC**全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面...\n\n<!-- excerpt -->\n\n## MVC\n\n>**MVC**全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。\n\n<!--more-->\n## 三层架构\n>通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）。区分层次的目的即为了“[高内聚低耦合](http://baike.baidu.com/view/3082578.htm)”的思想。在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。\n\n## 总是被误解\n起初老师总说三层MVC，MVC三层架构……\nMVC是三个字母，三层架构也是“三”，所有我们就很自然的将MVC里的三个核心部件与三层架构等同起来：三层就是MVC，MVC就是三层架构。很多人认为`界面层`等于`View`,`业务逻辑层`等于`Controller`,`数据访问层`等于`Model`，其实这是完全错误的。 \nMVC主要用于三层架构的表现层，是一种复合设计模式，主要是为了解决应用程序用户界面与业务逻辑数据的耦合问题。而三层架构是从整个应用程序架构的角度来划分的。虽然表现不一样，但它们的目的都是一样：分层，解耦。\n\n**MVC**里的`Controller`是负责对页面进行控制的，比如：页面间跳转，显示逻辑等。三层架构里的`业务逻辑层`主要是对`业务实体数据`的加工，把加工后的数据传给页面显示。 MVC里的`Model`只是数据实体，是数据的容器，不具备什么增删改查的功能，它接收的数据是从`业务逻辑层`处理好传过来的数据。而三层架构里的`数据访问层`是具有增删改查功能的，是直接对数据库操作的，为业务逻辑层提供数据支持。\n如果非要让它们有所对应的话，那么三层架构中的界面层就相当于MVC中的V(View)和C(Controller)了，业务逻辑层和数据访问层就对应MVC中的M(Model)。其实从本质上来讲，它们还是不同纬度上的东西。\n\n","slug":"被误解的MVC","published":1,"updated":"2018-05-27T00:12:20.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zil700221u0oqvk3pe4h","content":"<!-- excerpt -->\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><blockquote>\n<p><strong>MVC</strong>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h2><blockquote>\n<p>通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）。区分层次的目的即为了“<a href=\"http://baike.baidu.com/view/3082578.htm\" target=\"_blank\" rel=\"noopener\">高内聚低耦合</a>”的思想。在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。</p>\n</blockquote>\n<h2 id=\"总是被误解\"><a href=\"#总是被误解\" class=\"headerlink\" title=\"总是被误解\"></a>总是被误解</h2><p>起初老师总说三层MVC，MVC三层架构……<br>MVC是三个字母，三层架构也是“三”，所有我们就很自然的将MVC里的三个核心部件与三层架构等同起来：三层就是MVC，MVC就是三层架构。很多人认为<code>界面层</code>等于<code>View</code>,<code>业务逻辑层</code>等于<code>Controller</code>,<code>数据访问层</code>等于<code>Model</code>，其实这是完全错误的。<br>MVC主要用于三层架构的表现层，是一种复合设计模式，主要是为了解决应用程序用户界面与业务逻辑数据的耦合问题。而三层架构是从整个应用程序架构的角度来划分的。虽然表现不一样，但它们的目的都是一样：分层，解耦。</p>\n<p><strong>MVC</strong>里的<code>Controller</code>是负责对页面进行控制的，比如：页面间跳转，显示逻辑等。三层架构里的<code>业务逻辑层</code>主要是对<code>业务实体数据</code>的加工，把加工后的数据传给页面显示。 MVC里的<code>Model</code>只是数据实体，是数据的容器，不具备什么增删改查的功能，它接收的数据是从<code>业务逻辑层</code>处理好传过来的数据。而三层架构里的<code>数据访问层</code>是具有增删改查功能的，是直接对数据库操作的，为业务逻辑层提供数据支持。<br>如果非要让它们有所对应的话，那么三层架构中的界面层就相当于MVC中的V(View)和C(Controller)了，业务逻辑层和数据访问层就对应MVC中的M(Model)。其实从本质上来讲，它们还是不同纬度上的东西。</p>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p><strong>MVC</strong>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面…</p>","more":"<h2 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h2><blockquote>\n<p>通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）。区分层次的目的即为了“<a href=\"http://baike.baidu.com/view/3082578.htm\" target=\"_blank\" rel=\"noopener\">高内聚低耦合</a>”的思想。在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。</p>\n</blockquote>\n<h2 id=\"总是被误解\"><a href=\"#总是被误解\" class=\"headerlink\" title=\"总是被误解\"></a>总是被误解</h2><p>起初老师总说三层MVC，MVC三层架构……<br>MVC是三个字母，三层架构也是“三”，所有我们就很自然的将MVC里的三个核心部件与三层架构等同起来：三层就是MVC，MVC就是三层架构。很多人认为<code>界面层</code>等于<code>View</code>,<code>业务逻辑层</code>等于<code>Controller</code>,<code>数据访问层</code>等于<code>Model</code>，其实这是完全错误的。<br>MVC主要用于三层架构的表现层，是一种复合设计模式，主要是为了解决应用程序用户界面与业务逻辑数据的耦合问题。而三层架构是从整个应用程序架构的角度来划分的。虽然表现不一样，但它们的目的都是一样：分层，解耦。</p>\n<p><strong>MVC</strong>里的<code>Controller</code>是负责对页面进行控制的，比如：页面间跳转，显示逻辑等。三层架构里的<code>业务逻辑层</code>主要是对<code>业务实体数据</code>的加工，把加工后的数据传给页面显示。 MVC里的<code>Model</code>只是数据实体，是数据的容器，不具备什么增删改查的功能，它接收的数据是从<code>业务逻辑层</code>处理好传过来的数据。而三层架构里的<code>数据访问层</code>是具有增删改查功能的，是直接对数据库操作的，为业务逻辑层提供数据支持。<br>如果非要让它们有所对应的话，那么三层架构中的界面层就相当于MVC中的V(View)和C(Controller)了，业务逻辑层和数据访问层就对应MVC中的M(Model)。其实从本质上来讲，它们还是不同纬度上的东西。</p>"},{"title":"由一道Swift面试题引发的对方法调度的思考","date":"2017-02-14T06:36:34.000Z","thumbnailImage":"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Summary-3-768x380.png","thumbnailImagePosition":"bottom","autoThumbnailImage":"yes","_content":"最近在看swift面试题时，其中有一道题目让我很诧异。题目是这样的：\n\n以下代码会打印出什么？\n<!--more-->\n```swift\nprotocol Pizzeria { \n  func makePizza(_ ingredients: [String])\n  func makeMargherita()\n} \n\nextension Pizzeria { \n  func makeMargherita() { \n    return makePizza([\"tomato\", \"mozzarella\"]) \n  }\n}\n\nstruct Lombardis: Pizzeria { \n  func makePizza(_ ingredients: [String]) { \n    print(ingredients)\n  } \n  func makeMargherita() {\n    return makePizza([\"tomato\", \"basil\", \"mozzarella\"]) \n  }\n}\n\nlet lombardis1: Pizzeria = Lombardis()\nlet lombardis2: Lombardis = Lombardis() \nlombardis1.makeMargherita()\nlombardis2.makeMargherita()\n```\n当然，即使是swift新手也会毫不犹豫的给出答案：\n\n\n打印两行`[\"tomato\", \"basil\", \"mozzarella\"]`\n\n然后面试官笑了笑，将`Pizzeria`中声明的`makeMargherita()`去掉，代码变为：\n```swift\nprotocol Pizzeria { \n  func makePizza(_ ingredients: [String])\n} \n\nextension Pizzeria { \n  func makeMargherita() { \n    return makePizza([\"tomato\", \"mozzarella\"]) \n  }\n}\n\nstruct Lombardis: Pizzeria { \n  func makePizza(_ ingredients: [String]) { \n    print(ingredients)\n  } \n  func makeMargherita() {\n    return makePizza([\"tomato\", \"basil\", \"mozzarella\"]) \n  }\n}\n\nlet lombardis1: Pizzeria = Lombardis()\nlet lombardis2: Lombardis = Lombardis() \nlombardis1.makeMargherita()\nlombardis2.makeMargherita()\n```\n估计有很多童鞋会跟我一样，不假思索地给出答案：打印两行`[\"tomato\", \"basil\", \"mozzarella\"]`。如果答案还是一样，面试官就没有删除那行代码的必要了吧。正确答案应该是：\n```\n[\"tomato\", \"mozzarella\"]\n[\"tomato\", \"basil\", \"mozzarella\"]\n```\n聪明的童鞋即使不知道正确答案，知道此处有陷阱，也会给出了正确答案。那么导致这种结果的真正原因是什么呢？答案就是**方法调度(Method Dispatch)**\n## 什么是方法调度\n方法调度就是一个程序在调用一个方法时如何选择要执行的指令的过程。当我们每次调用一个方法时方法调度都会发生。\n\n编译型语言有三种基础的方法调度方式: 直接调度(Direct Dispatch), 函数表调度(Table Dispatch) 和 消息调度(Message Dispatch)。大部分语言支持一到两种。Java默认使用函数表调度，你可以通过使用 `final` 关键字将其变为直接调度。C++默认使用直接调度，通过 `virtual` 关键字可以改为函数表调度。Objective-C总是使用消息调度。但允许开发者使用C直接派发来获取性能的提高。Swift在这方面走在了前面，她支持全部的3种调度方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。\n\n## 调度类型（Types of Dispatch）\n\n调度的目的是程序告诉CPU被调用的函数在哪里，在我们深入Swift的这种行为之前，有必要了解一下方法调度的三种方式。\n\n**直接调度(Direct Dispatch)**\n\n直接调度是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等, 但这不在这篇博客的讨论范围。\n\n然而, 对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承。\n\n**函数表调度 (Table Dispatch )**\n\n函数表调度是编译型语言实现动态行为最常见的实现方式. 函数表使用了一个数组来存储类声明的每一个函数的指针. 大部分语言把这个称为 “virtual table”(虚函数表), Swift 里称为 “witness table”. 每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 `override` 的话, 表里面只会保存被 `override` 之后的函数. 一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.\n\n看看下面的例子：\n```swift\nclass ParentClass {\n    func method1() {}\n    func method2() {}\n}\nclass ChildClass: ParentClasss {\n    override func method2() {}\n    func method3() {}\n}\n```\n在这个情况下, 编译器会创建两个函数表, 一个是 `ParentClass` 的, 另一个是 `ChildClass` 的:\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/virtual-dispatch-768x227.png)\n\n```swift\nlet obj = ChildClass()\nobj.method2()\n```\n当一个方法被调用时，会经历下面几个过程：\n\n1. 读取 `0xB00` 对象的调度表\n2. 通过索引读取该方法的函数指针，在这里, `method2` 的索引是1(偏移量), 所以地址就是 `0xB00 + 1`\n3. 跳到 `0x222` (函数指针指向 0x222)\n\n查表是一种简单, 易实现, 而且性能可预知的方式. 然而, 这种派发方式比起直接派发还是慢一点。从字节码角度来看, 多了两次读和一次跳转, 由此带来了性能的损耗。另一个慢的原因在于编译器可能会由于函数内执行的任务导致无法优化。\n\n这种基于数组的实现, 缺陷在于函数表无法拓展。子类会在虚数函数表的最后插入新的方法, 没有位置可以让 extension 安全地插入函数。\n\n**消息调度 (Message Dispatch )**\n\n消息调度是调用函数最动态的方式。也是 Cocoa 的基石, 这样的机制催生了 [KVO](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html), [UIAppearence](https://developer.apple.com/reference/uikit/uiappearance) 和 [CoreData](https://developer.apple.com/library/content///documentation/Cocoa/Conceptual/CoreData/index.html) 等功能. 这种运作方式的关键在于开发者可以在运行时改变函数的行为. 不止可以通过 [swizzling](https://www.mikeash.com/pyblog/friday-qa-2010-01-29-method-replacement-for-fun-and-profit.html) 来改变, 甚至可以用 [isa-swizzling](http://stackoverflow.com/questions/38877465/are-method-swizzling-and-isa-swizzling-the-same-thing/38878119#38878119) 修改对象的继承关系, 可以在面向对象的基础上实现自定义调度。\n\n看下面两个类:\n```swift\nclass ParentClass {\n    dynamic func method1() {}\n    dynamic func method1() {}\n}\nclass ChildClass: ParentClass {\n    override func method2() {}\n    dynamic func method3() {}\n}\n```\nSwift 会用树来构建这种继承关系:\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/message-dispatch-768x412.png)\n\n当一个消息被发送时, 运行时会顺着类的继承关系向上查找应该被调用的方法. 如果你觉得这样做效率很低, 它确实很低! 然而, 只要缓存建立了起来, 这个查找过程就会通过缓存来把性能提高到和函数表一样快. 但这只是消息机制的原理, [这里有一篇文章](http://www.friday.com/bbum/2009/12/18/objc_msgsend-part-1-the-road-map/)很深入的讲解了具体的技术细节.\n\n## Swift 的调度机制\n那么，swift是如何调度的呢？这里有四个方面,来指导如何选择调度:\n\n* 方法声明的位置\n* 引用类型\n* 特定的行为\n* 显式地优化\n\n要说明的是Swift 并没有在文档里具体写明什么时候会使用函数表什么时候使用消息机制. 唯一的承诺是使用 `dynamic` 修饰的时候会通过 Objective-C 的运行时使用消息机制。\n\n**声明的位置 (Location Matters)**\n\n在Swift中有两个地方可以声明一个方法：类型声明的作用域内和 `extension`。根据声明类型的不同, 也会有不同的派发方式:\n```swift\nclass MyClass {\n    func mainMethod() {}\n}\nextension MyClass {\n    func extensionMethod() {}\n}\n```\n上面的例子里, `mainMethod` 会使用函数表的方式, 而 `extensionMethod` 则会使用直接调度。根据声明的位置，可以总结如下：\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png)\n\n总结起来有这么几点:\n\n* 值类型总是会使用直接派发, 简单易懂\n* 而协议和类的 `extension` 都会使用直接调度\n* 协议和普通Swift类声明作用域里的方法都会使用函数表进行调度\n* 继承 `NSObject` 的类声明作用域里的方法都会使用函数表调度\n* 继承 `NSObject` 的类的 `extension` 会使用消息调度\n\n**引用类型 (Reference Type Matters)**\n\n引用的类型决定了调度的方式, 这是显而易见的, 但有一个重要的区别。 一个比较常见的疑惑, 发生在一个协议拓展和类型拓展同时实现了同一个函数的时候。\n```swift\nprotocol Animal {\n}\nextension Animal {\n  func extensionMethod() {\n    print(\"In Protocol extension method\")\n  }\n}\n\nstruct 🐱: Animal {\n}\nextension 🐱 {\n  func extensionMethod() {\n    print(\"喵喵\")\n  }\n}\n\nlet cat = 🐱()\nlet proto: Animal = cat\n\ncat.extensionMethod()\nproto.extensionMethod()\n```\n刚接触 Swift 的童鞋可能会认为 `proto.extensionMethod() `调用的是结构体里的实现。 但是, 引用的类型决定了调度的方式, 协议拓展里的方法会使用直接调度。如果把 `extensionMethod` 的声明移动到协议的声明位置的话, 则会使用函数表调度, 最终就会调用结构体里的实现。 并且要记得, 如果两种声明方式都使用了直接调度的话, 基于直接调度的运作方式, 我们不可能实现预想的 `override` 行为。\n\n\n\n","source":"_posts/由一道swift面试题引发的对方法调度的思考(上).md","raw":"---\ntitle: 由一道swift面试题引发的对方法调度的思考\ndate: 2017-02-14 14:36:34\ntags: Swift\ncategory: Swift\nthumbnailImage: https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Summary-3-768x380.png\nthumbnailImagePosition: bottom\nautoThumbnailImage: yes\n---\n最近在看swift面试题时，其中有一道题目让我很诧异。题目是这样的：\n\n以下代码会打印出什么？\n<!--more-->\n```swift\nprotocol Pizzeria { \n  func makePizza(_ ingredients: [String])\n  func makeMargherita()\n} \n\nextension Pizzeria { \n  func makeMargherita() { \n    return makePizza([\"tomato\", \"mozzarella\"]) \n  }\n}\n\nstruct Lombardis: Pizzeria { \n  func makePizza(_ ingredients: [String]) { \n    print(ingredients)\n  } \n  func makeMargherita() {\n    return makePizza([\"tomato\", \"basil\", \"mozzarella\"]) \n  }\n}\n\nlet lombardis1: Pizzeria = Lombardis()\nlet lombardis2: Lombardis = Lombardis() \nlombardis1.makeMargherita()\nlombardis2.makeMargherita()\n```\n当然，即使是swift新手也会毫不犹豫的给出答案：\n\n\n打印两行`[\"tomato\", \"basil\", \"mozzarella\"]`\n\n然后面试官笑了笑，将`Pizzeria`中声明的`makeMargherita()`去掉，代码变为：\n```swift\nprotocol Pizzeria { \n  func makePizza(_ ingredients: [String])\n} \n\nextension Pizzeria { \n  func makeMargherita() { \n    return makePizza([\"tomato\", \"mozzarella\"]) \n  }\n}\n\nstruct Lombardis: Pizzeria { \n  func makePizza(_ ingredients: [String]) { \n    print(ingredients)\n  } \n  func makeMargherita() {\n    return makePizza([\"tomato\", \"basil\", \"mozzarella\"]) \n  }\n}\n\nlet lombardis1: Pizzeria = Lombardis()\nlet lombardis2: Lombardis = Lombardis() \nlombardis1.makeMargherita()\nlombardis2.makeMargherita()\n```\n估计有很多童鞋会跟我一样，不假思索地给出答案：打印两行`[\"tomato\", \"basil\", \"mozzarella\"]`。如果答案还是一样，面试官就没有删除那行代码的必要了吧。正确答案应该是：\n```\n[\"tomato\", \"mozzarella\"]\n[\"tomato\", \"basil\", \"mozzarella\"]\n```\n聪明的童鞋即使不知道正确答案，知道此处有陷阱，也会给出了正确答案。那么导致这种结果的真正原因是什么呢？答案就是**方法调度(Method Dispatch)**\n## 什么是方法调度\n方法调度就是一个程序在调用一个方法时如何选择要执行的指令的过程。当我们每次调用一个方法时方法调度都会发生。\n\n编译型语言有三种基础的方法调度方式: 直接调度(Direct Dispatch), 函数表调度(Table Dispatch) 和 消息调度(Message Dispatch)。大部分语言支持一到两种。Java默认使用函数表调度，你可以通过使用 `final` 关键字将其变为直接调度。C++默认使用直接调度，通过 `virtual` 关键字可以改为函数表调度。Objective-C总是使用消息调度。但允许开发者使用C直接派发来获取性能的提高。Swift在这方面走在了前面，她支持全部的3种调度方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。\n\n## 调度类型（Types of Dispatch）\n\n调度的目的是程序告诉CPU被调用的函数在哪里，在我们深入Swift的这种行为之前，有必要了解一下方法调度的三种方式。\n\n**直接调度(Direct Dispatch)**\n\n直接调度是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等, 但这不在这篇博客的讨论范围。\n\n然而, 对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承。\n\n**函数表调度 (Table Dispatch )**\n\n函数表调度是编译型语言实现动态行为最常见的实现方式. 函数表使用了一个数组来存储类声明的每一个函数的指针. 大部分语言把这个称为 “virtual table”(虚函数表), Swift 里称为 “witness table”. 每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 `override` 的话, 表里面只会保存被 `override` 之后的函数. 一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.\n\n看看下面的例子：\n```swift\nclass ParentClass {\n    func method1() {}\n    func method2() {}\n}\nclass ChildClass: ParentClasss {\n    override func method2() {}\n    func method3() {}\n}\n```\n在这个情况下, 编译器会创建两个函数表, 一个是 `ParentClass` 的, 另一个是 `ChildClass` 的:\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/virtual-dispatch-768x227.png)\n\n```swift\nlet obj = ChildClass()\nobj.method2()\n```\n当一个方法被调用时，会经历下面几个过程：\n\n1. 读取 `0xB00` 对象的调度表\n2. 通过索引读取该方法的函数指针，在这里, `method2` 的索引是1(偏移量), 所以地址就是 `0xB00 + 1`\n3. 跳到 `0x222` (函数指针指向 0x222)\n\n查表是一种简单, 易实现, 而且性能可预知的方式. 然而, 这种派发方式比起直接派发还是慢一点。从字节码角度来看, 多了两次读和一次跳转, 由此带来了性能的损耗。另一个慢的原因在于编译器可能会由于函数内执行的任务导致无法优化。\n\n这种基于数组的实现, 缺陷在于函数表无法拓展。子类会在虚数函数表的最后插入新的方法, 没有位置可以让 extension 安全地插入函数。\n\n**消息调度 (Message Dispatch )**\n\n消息调度是调用函数最动态的方式。也是 Cocoa 的基石, 这样的机制催生了 [KVO](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html), [UIAppearence](https://developer.apple.com/reference/uikit/uiappearance) 和 [CoreData](https://developer.apple.com/library/content///documentation/Cocoa/Conceptual/CoreData/index.html) 等功能. 这种运作方式的关键在于开发者可以在运行时改变函数的行为. 不止可以通过 [swizzling](https://www.mikeash.com/pyblog/friday-qa-2010-01-29-method-replacement-for-fun-and-profit.html) 来改变, 甚至可以用 [isa-swizzling](http://stackoverflow.com/questions/38877465/are-method-swizzling-and-isa-swizzling-the-same-thing/38878119#38878119) 修改对象的继承关系, 可以在面向对象的基础上实现自定义调度。\n\n看下面两个类:\n```swift\nclass ParentClass {\n    dynamic func method1() {}\n    dynamic func method1() {}\n}\nclass ChildClass: ParentClass {\n    override func method2() {}\n    dynamic func method3() {}\n}\n```\nSwift 会用树来构建这种继承关系:\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/message-dispatch-768x412.png)\n\n当一个消息被发送时, 运行时会顺着类的继承关系向上查找应该被调用的方法. 如果你觉得这样做效率很低, 它确实很低! 然而, 只要缓存建立了起来, 这个查找过程就会通过缓存来把性能提高到和函数表一样快. 但这只是消息机制的原理, [这里有一篇文章](http://www.friday.com/bbum/2009/12/18/objc_msgsend-part-1-the-road-map/)很深入的讲解了具体的技术细节.\n\n## Swift 的调度机制\n那么，swift是如何调度的呢？这里有四个方面,来指导如何选择调度:\n\n* 方法声明的位置\n* 引用类型\n* 特定的行为\n* 显式地优化\n\n要说明的是Swift 并没有在文档里具体写明什么时候会使用函数表什么时候使用消息机制. 唯一的承诺是使用 `dynamic` 修饰的时候会通过 Objective-C 的运行时使用消息机制。\n\n**声明的位置 (Location Matters)**\n\n在Swift中有两个地方可以声明一个方法：类型声明的作用域内和 `extension`。根据声明类型的不同, 也会有不同的派发方式:\n```swift\nclass MyClass {\n    func mainMethod() {}\n}\nextension MyClass {\n    func extensionMethod() {}\n}\n```\n上面的例子里, `mainMethod` 会使用函数表的方式, 而 `extensionMethod` 则会使用直接调度。根据声明的位置，可以总结如下：\n\n![](https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png)\n\n总结起来有这么几点:\n\n* 值类型总是会使用直接派发, 简单易懂\n* 而协议和类的 `extension` 都会使用直接调度\n* 协议和普通Swift类声明作用域里的方法都会使用函数表进行调度\n* 继承 `NSObject` 的类声明作用域里的方法都会使用函数表调度\n* 继承 `NSObject` 的类的 `extension` 会使用消息调度\n\n**引用类型 (Reference Type Matters)**\n\n引用的类型决定了调度的方式, 这是显而易见的, 但有一个重要的区别。 一个比较常见的疑惑, 发生在一个协议拓展和类型拓展同时实现了同一个函数的时候。\n```swift\nprotocol Animal {\n}\nextension Animal {\n  func extensionMethod() {\n    print(\"In Protocol extension method\")\n  }\n}\n\nstruct 🐱: Animal {\n}\nextension 🐱 {\n  func extensionMethod() {\n    print(\"喵喵\")\n  }\n}\n\nlet cat = 🐱()\nlet proto: Animal = cat\n\ncat.extensionMethod()\nproto.extensionMethod()\n```\n刚接触 Swift 的童鞋可能会认为 `proto.extensionMethod() `调用的是结构体里的实现。 但是, 引用的类型决定了调度的方式, 协议拓展里的方法会使用直接调度。如果把 `extensionMethod` 的声明移动到协议的声明位置的话, 则会使用函数表调度, 最终就会调用结构体里的实现。 并且要记得, 如果两种声明方式都使用了直接调度的话, 基于直接调度的运作方式, 我们不可能实现预想的 `override` 行为。\n\n\n\n","slug":"由一道swift面试题引发的对方法调度的思考(上)","published":1,"updated":"2017-03-22T05:09:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zil800261u0ov6zecqnf","content":"<p>最近在看swift面试题时，其中有一道题目让我很诧异。题目是这样的：</p>\n<p>以下代码会打印出什么？<br><a id=\"more\"></a><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Lombardis</span>: <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ingredients)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"basil\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis1: <span class=\"type\">Pizzeria</span> = <span class=\"type\">Lombardis</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis2: <span class=\"type\">Lombardis</span> = <span class=\"type\">Lombardis</span>() </span><br><span class=\"line\">lombardis1.makeMargherita()</span><br><span class=\"line\">lombardis2.makeMargherita()</span><br></pre></td></tr></table></figure></p>\n<p>当然，即使是swift新手也会毫不犹豫的给出答案：</p>\n<p>打印两行<code>[&quot;tomato&quot;, &quot;basil&quot;, &quot;mozzarella&quot;]</code></p>\n<p>然后面试官笑了笑，将<code>Pizzeria</code>中声明的<code>makeMargherita()</code>去掉，代码变为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Lombardis</span>: <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ingredients)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"basil\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis1: <span class=\"type\">Pizzeria</span> = <span class=\"type\">Lombardis</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis2: <span class=\"type\">Lombardis</span> = <span class=\"type\">Lombardis</span>() </span><br><span class=\"line\">lombardis1.makeMargherita()</span><br><span class=\"line\">lombardis2.makeMargherita()</span><br></pre></td></tr></table></figure></p>\n<p>估计有很多童鞋会跟我一样，不假思索地给出答案：打印两行<code>[&quot;tomato&quot;, &quot;basil&quot;, &quot;mozzarella&quot;]</code>。如果答案还是一样，面试官就没有删除那行代码的必要了吧。正确答案应该是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;tomato&quot;, &quot;mozzarella&quot;]</span><br><span class=\"line\">[&quot;tomato&quot;, &quot;basil&quot;, &quot;mozzarella&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>聪明的童鞋即使不知道正确答案，知道此处有陷阱，也会给出了正确答案。那么导致这种结果的真正原因是什么呢？答案就是<strong>方法调度(Method Dispatch)</strong></p>\n<h2 id=\"什么是方法调度\"><a href=\"#什么是方法调度\" class=\"headerlink\" title=\"什么是方法调度\"></a>什么是方法调度</h2><p>方法调度就是一个程序在调用一个方法时如何选择要执行的指令的过程。当我们每次调用一个方法时方法调度都会发生。</p>\n<p>编译型语言有三种基础的方法调度方式: 直接调度(Direct Dispatch), 函数表调度(Table Dispatch) 和 消息调度(Message Dispatch)。大部分语言支持一到两种。Java默认使用函数表调度，你可以通过使用 <code>final</code> 关键字将其变为直接调度。C++默认使用直接调度，通过 <code>virtual</code> 关键字可以改为函数表调度。Objective-C总是使用消息调度。但允许开发者使用C直接派发来获取性能的提高。Swift在这方面走在了前面，她支持全部的3种调度方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。</p>\n<h2 id=\"调度类型（Types-of-Dispatch）\"><a href=\"#调度类型（Types-of-Dispatch）\" class=\"headerlink\" title=\"调度类型（Types of Dispatch）\"></a>调度类型（Types of Dispatch）</h2><p>调度的目的是程序告诉CPU被调用的函数在哪里，在我们深入Swift的这种行为之前，有必要了解一下方法调度的三种方式。</p>\n<p><strong>直接调度(Direct Dispatch)</strong></p>\n<p>直接调度是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等, 但这不在这篇博客的讨论范围。</p>\n<p>然而, 对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承。</p>\n<p><strong>函数表调度 (Table Dispatch )</strong></p>\n<p>函数表调度是编译型语言实现动态行为最常见的实现方式. 函数表使用了一个数组来存储类声明的每一个函数的指针. 大部分语言把这个称为 “virtual table”(虚函数表), Swift 里称为 “witness table”. 每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 <code>override</code> 的话, 表里面只会保存被 <code>override</code> 之后的函数. 一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.</p>\n<p>看看下面的例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span>: <span class=\"title\">ParentClasss</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method3</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个情况下, 编译器会创建两个函数表, 一个是 <code>ParentClass</code> 的, 另一个是 <code>ChildClass</code> 的:</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/virtual-dispatch-768x227.png\" alt=\"\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"type\">ChildClass</span>()</span><br><span class=\"line\">obj.method2()</span><br></pre></td></tr></table></figure>\n<p>当一个方法被调用时，会经历下面几个过程：</p>\n<ol>\n<li>读取 <code>0xB00</code> 对象的调度表</li>\n<li>通过索引读取该方法的函数指针，在这里, <code>method2</code> 的索引是1(偏移量), 所以地址就是 <code>0xB00 + 1</code></li>\n<li>跳到 <code>0x222</code> (函数指针指向 0x222)</li>\n</ol>\n<p>查表是一种简单, 易实现, 而且性能可预知的方式. 然而, 这种派发方式比起直接派发还是慢一点。从字节码角度来看, 多了两次读和一次跳转, 由此带来了性能的损耗。另一个慢的原因在于编译器可能会由于函数内执行的任务导致无法优化。</p>\n<p>这种基于数组的实现, 缺陷在于函数表无法拓展。子类会在虚数函数表的最后插入新的方法, 没有位置可以让 extension 安全地插入函数。</p>\n<p><strong>消息调度 (Message Dispatch )</strong></p>\n<p>消息调度是调用函数最动态的方式。也是 Cocoa 的基石, 这样的机制催生了 <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html\" target=\"_blank\" rel=\"noopener\">KVO</a>, <a href=\"https://developer.apple.com/reference/uikit/uiappearance\" target=\"_blank\" rel=\"noopener\">UIAppearence</a> 和 <a href=\"https://developer.apple.com/library/content///documentation/Cocoa/Conceptual/CoreData/index.html\" target=\"_blank\" rel=\"noopener\">CoreData</a> 等功能. 这种运作方式的关键在于开发者可以在运行时改变函数的行为. 不止可以通过 <a href=\"https://www.mikeash.com/pyblog/friday-qa-2010-01-29-method-replacement-for-fun-and-profit.html\" target=\"_blank\" rel=\"noopener\">swizzling</a> 来改变, 甚至可以用 <a href=\"http://stackoverflow.com/questions/38877465/are-method-swizzling-and-isa-swizzling-the-same-thing/38878119#38878119\" target=\"_blank\" rel=\"noopener\">isa-swizzling</a> 修改对象的继承关系, 可以在面向对象的基础上实现自定义调度。</p>\n<p>看下面两个类:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span>: <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method3</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Swift 会用树来构建这种继承关系:</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/message-dispatch-768x412.png\" alt=\"\"></p>\n<p>当一个消息被发送时, 运行时会顺着类的继承关系向上查找应该被调用的方法. 如果你觉得这样做效率很低, 它确实很低! 然而, 只要缓存建立了起来, 这个查找过程就会通过缓存来把性能提高到和函数表一样快. 但这只是消息机制的原理, <a href=\"http://www.friday.com/bbum/2009/12/18/objc_msgsend-part-1-the-road-map/\" target=\"_blank\" rel=\"noopener\">这里有一篇文章</a>很深入的讲解了具体的技术细节.</p>\n<h2 id=\"Swift-的调度机制\"><a href=\"#Swift-的调度机制\" class=\"headerlink\" title=\"Swift 的调度机制\"></a>Swift 的调度机制</h2><p>那么，swift是如何调度的呢？这里有四个方面,来指导如何选择调度:</p>\n<ul>\n<li>方法声明的位置</li>\n<li>引用类型</li>\n<li>特定的行为</li>\n<li>显式地优化</li>\n</ul>\n<p>要说明的是Swift 并没有在文档里具体写明什么时候会使用函数表什么时候使用消息机制. 唯一的承诺是使用 <code>dynamic</code> 修饰的时候会通过 Objective-C 的运行时使用消息机制。</p>\n<p><strong>声明的位置 (Location Matters)</strong></p>\n<p>在Swift中有两个地方可以声明一个方法：类型声明的作用域内和 <code>extension</code>。根据声明类型的不同, 也会有不同的派发方式:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mainMethod</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionMethod</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子里, <code>mainMethod</code> 会使用函数表的方式, 而 <code>extensionMethod</code> 则会使用直接调度。根据声明的位置，可以总结如下：</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png\" alt=\"\"></p>\n<p>总结起来有这么几点:</p>\n<ul>\n<li>值类型总是会使用直接派发, 简单易懂</li>\n<li>而协议和类的 <code>extension</code> 都会使用直接调度</li>\n<li>协议和普通Swift类声明作用域里的方法都会使用函数表进行调度</li>\n<li>继承 <code>NSObject</code> 的类声明作用域里的方法都会使用函数表调度</li>\n<li>继承 <code>NSObject</code> 的类的 <code>extension</code> 会使用消息调度</li>\n</ul>\n<p><strong>引用类型 (Reference Type Matters)</strong></p>\n<p>引用的类型决定了调度的方式, 这是显而易见的, 但有一个重要的区别。 一个比较常见的疑惑, 发生在一个协议拓展和类型拓展同时实现了同一个函数的时候。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"In Protocol extension method\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 🐱: <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> 🐱 </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"喵喵\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cat = 🐱()</span><br><span class=\"line\"><span class=\"keyword\">let</span> proto: <span class=\"type\">Animal</span> = cat</span><br><span class=\"line\"></span><br><span class=\"line\">cat.extensionMethod()</span><br><span class=\"line\">proto.extensionMethod()</span><br></pre></td></tr></table></figure></p>\n<p>刚接触 Swift 的童鞋可能会认为 <code>proto.extensionMethod()</code>调用的是结构体里的实现。 但是, 引用的类型决定了调度的方式, 协议拓展里的方法会使用直接调度。如果把 <code>extensionMethod</code> 的声明移动到协议的声明位置的话, 则会使用函数表调度, 最终就会调用结构体里的实现。 并且要记得, 如果两种声明方式都使用了直接调度的话, 基于直接调度的运作方式, 我们不可能实现预想的 <code>override</code> 行为。</p>\n","site":{"data":{}},"thumbnailImageUrl":"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Summary-3-768x380.png","excerpt":"<p>最近在看swift面试题时，其中有一道题目让我很诧异。题目是这样的：</p>\n<p>以下代码会打印出什么？<br>","more":"<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Lombardis</span>: <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ingredients)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"basil\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis1: <span class=\"type\">Pizzeria</span> = <span class=\"type\">Lombardis</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis2: <span class=\"type\">Lombardis</span> = <span class=\"type\">Lombardis</span>() </span><br><span class=\"line\">lombardis1.makeMargherita()</span><br><span class=\"line\">lombardis2.makeMargherita()</span><br></pre></td></tr></table></figure></p>\n<p>当然，即使是swift新手也会毫不犹豫的给出答案：</p>\n<p>打印两行<code>[&quot;tomato&quot;, &quot;basil&quot;, &quot;mozzarella&quot;]</code></p>\n<p>然后面试官笑了笑，将<code>Pizzeria</code>中声明的<code>makeMargherita()</code>去掉，代码变为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Lombardis</span>: <span class=\"title\">Pizzeria</span> </span>&#123; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makePizza</span><span class=\"params\">(<span class=\"number\">_</span> ingredients: [String])</span></span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ingredients)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeMargherita</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> makePizza([<span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"basil\"</span>, <span class=\"string\">\"mozzarella\"</span>]) </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis1: <span class=\"type\">Pizzeria</span> = <span class=\"type\">Lombardis</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> lombardis2: <span class=\"type\">Lombardis</span> = <span class=\"type\">Lombardis</span>() </span><br><span class=\"line\">lombardis1.makeMargherita()</span><br><span class=\"line\">lombardis2.makeMargherita()</span><br></pre></td></tr></table></figure></p>\n<p>估计有很多童鞋会跟我一样，不假思索地给出答案：打印两行<code>[&quot;tomato&quot;, &quot;basil&quot;, &quot;mozzarella&quot;]</code>。如果答案还是一样，面试官就没有删除那行代码的必要了吧。正确答案应该是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;tomato&quot;, &quot;mozzarella&quot;]</span><br><span class=\"line\">[&quot;tomato&quot;, &quot;basil&quot;, &quot;mozzarella&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>聪明的童鞋即使不知道正确答案，知道此处有陷阱，也会给出了正确答案。那么导致这种结果的真正原因是什么呢？答案就是<strong>方法调度(Method Dispatch)</strong></p>\n<h2 id=\"什么是方法调度\"><a href=\"#什么是方法调度\" class=\"headerlink\" title=\"什么是方法调度\"></a>什么是方法调度</h2><p>方法调度就是一个程序在调用一个方法时如何选择要执行的指令的过程。当我们每次调用一个方法时方法调度都会发生。</p>\n<p>编译型语言有三种基础的方法调度方式: 直接调度(Direct Dispatch), 函数表调度(Table Dispatch) 和 消息调度(Message Dispatch)。大部分语言支持一到两种。Java默认使用函数表调度，你可以通过使用 <code>final</code> 关键字将其变为直接调度。C++默认使用直接调度，通过 <code>virtual</code> 关键字可以改为函数表调度。Objective-C总是使用消息调度。但允许开发者使用C直接派发来获取性能的提高。Swift在这方面走在了前面，她支持全部的3种调度方式。这样的方式非常好,，不过也给很多Swift开发者带来了困扰。</p>\n<h2 id=\"调度类型（Types-of-Dispatch）\"><a href=\"#调度类型（Types-of-Dispatch）\" class=\"headerlink\" title=\"调度类型（Types of Dispatch）\"></a>调度类型（Types of Dispatch）</h2><p>调度的目的是程序告诉CPU被调用的函数在哪里，在我们深入Swift的这种行为之前，有必要了解一下方法调度的三种方式。</p>\n<p><strong>直接调度(Direct Dispatch)</strong></p>\n<p>直接调度是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等, 但这不在这篇博客的讨论范围。</p>\n<p>然而, 对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承。</p>\n<p><strong>函数表调度 (Table Dispatch )</strong></p>\n<p>函数表调度是编译型语言实现动态行为最常见的实现方式. 函数表使用了一个数组来存储类声明的每一个函数的指针. 大部分语言把这个称为 “virtual table”(虚函数表), Swift 里称为 “witness table”. 每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 <code>override</code> 的话, 表里面只会保存被 <code>override</code> 之后的函数. 一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.</p>\n<p>看看下面的例子：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span>: <span class=\"title\">ParentClasss</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method3</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个情况下, 编译器会创建两个函数表, 一个是 <code>ParentClass</code> 的, 另一个是 <code>ChildClass</code> 的:</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/virtual-dispatch-768x227.png\" alt=\"\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"type\">ChildClass</span>()</span><br><span class=\"line\">obj.method2()</span><br></pre></td></tr></table></figure>\n<p>当一个方法被调用时，会经历下面几个过程：</p>\n<ol>\n<li>读取 <code>0xB00</code> 对象的调度表</li>\n<li>通过索引读取该方法的函数指针，在这里, <code>method2</code> 的索引是1(偏移量), 所以地址就是 <code>0xB00 + 1</code></li>\n<li>跳到 <code>0x222</code> (函数指针指向 0x222)</li>\n</ol>\n<p>查表是一种简单, 易实现, 而且性能可预知的方式. 然而, 这种派发方式比起直接派发还是慢一点。从字节码角度来看, 多了两次读和一次跳转, 由此带来了性能的损耗。另一个慢的原因在于编译器可能会由于函数内执行的任务导致无法优化。</p>\n<p>这种基于数组的实现, 缺陷在于函数表无法拓展。子类会在虚数函数表的最后插入新的方法, 没有位置可以让 extension 安全地插入函数。</p>\n<p><strong>消息调度 (Message Dispatch )</strong></p>\n<p>消息调度是调用函数最动态的方式。也是 Cocoa 的基石, 这样的机制催生了 <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html\" target=\"_blank\" rel=\"noopener\">KVO</a>, <a href=\"https://developer.apple.com/reference/uikit/uiappearance\" target=\"_blank\" rel=\"noopener\">UIAppearence</a> 和 <a href=\"https://developer.apple.com/library/content///documentation/Cocoa/Conceptual/CoreData/index.html\" target=\"_blank\" rel=\"noopener\">CoreData</a> 等功能. 这种运作方式的关键在于开发者可以在运行时改变函数的行为. 不止可以通过 <a href=\"https://www.mikeash.com/pyblog/friday-qa-2010-01-29-method-replacement-for-fun-and-profit.html\" target=\"_blank\" rel=\"noopener\">swizzling</a> 来改变, 甚至可以用 <a href=\"http://stackoverflow.com/questions/38877465/are-method-swizzling-and-isa-swizzling-the-same-thing/38878119#38878119\" target=\"_blank\" rel=\"noopener\">isa-swizzling</a> 修改对象的继承关系, 可以在面向对象的基础上实现自定义调度。</p>\n<p>看下面两个类:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span>: <span class=\"title\">ParentClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">method3</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Swift 会用树来构建这种继承关系:</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/message-dispatch-768x412.png\" alt=\"\"></p>\n<p>当一个消息被发送时, 运行时会顺着类的继承关系向上查找应该被调用的方法. 如果你觉得这样做效率很低, 它确实很低! 然而, 只要缓存建立了起来, 这个查找过程就会通过缓存来把性能提高到和函数表一样快. 但这只是消息机制的原理, <a href=\"http://www.friday.com/bbum/2009/12/18/objc_msgsend-part-1-the-road-map/\" target=\"_blank\" rel=\"noopener\">这里有一篇文章</a>很深入的讲解了具体的技术细节.</p>\n<h2 id=\"Swift-的调度机制\"><a href=\"#Swift-的调度机制\" class=\"headerlink\" title=\"Swift 的调度机制\"></a>Swift 的调度机制</h2><p>那么，swift是如何调度的呢？这里有四个方面,来指导如何选择调度:</p>\n<ul>\n<li>方法声明的位置</li>\n<li>引用类型</li>\n<li>特定的行为</li>\n<li>显式地优化</li>\n</ul>\n<p>要说明的是Swift 并没有在文档里具体写明什么时候会使用函数表什么时候使用消息机制. 唯一的承诺是使用 <code>dynamic</code> 修饰的时候会通过 Objective-C 的运行时使用消息机制。</p>\n<p><strong>声明的位置 (Location Matters)</strong></p>\n<p>在Swift中有两个地方可以声明一个方法：类型声明的作用域内和 <code>extension</code>。根据声明类型的不同, 也会有不同的派发方式:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mainMethod</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionMethod</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子里, <code>mainMethod</code> 会使用函数表的方式, 而 <code>extensionMethod</code> 则会使用直接调度。根据声明的位置，可以总结如下：</p>\n<p><img src=\"https://www.raizlabs.com/dev/wp-content/uploads/sites/10/2016/12/Defaults-1-768x503.png\" alt=\"\"></p>\n<p>总结起来有这么几点:</p>\n<ul>\n<li>值类型总是会使用直接派发, 简单易懂</li>\n<li>而协议和类的 <code>extension</code> 都会使用直接调度</li>\n<li>协议和普通Swift类声明作用域里的方法都会使用函数表进行调度</li>\n<li>继承 <code>NSObject</code> 的类声明作用域里的方法都会使用函数表调度</li>\n<li>继承 <code>NSObject</code> 的类的 <code>extension</code> 会使用消息调度</li>\n</ul>\n<p><strong>引用类型 (Reference Type Matters)</strong></p>\n<p>引用的类型决定了调度的方式, 这是显而易见的, 但有一个重要的区别。 一个比较常见的疑惑, 发生在一个协议拓展和类型拓展同时实现了同一个函数的时候。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"In Protocol extension method\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 🐱: <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> 🐱 </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"喵喵\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cat = 🐱()</span><br><span class=\"line\"><span class=\"keyword\">let</span> proto: <span class=\"type\">Animal</span> = cat</span><br><span class=\"line\"></span><br><span class=\"line\">cat.extensionMethod()</span><br><span class=\"line\">proto.extensionMethod()</span><br></pre></td></tr></table></figure></p>\n<p>刚接触 Swift 的童鞋可能会认为 <code>proto.extensionMethod()</code>调用的是结构体里的实现。 但是, 引用的类型决定了调度的方式, 协议拓展里的方法会使用直接调度。如果把 <code>extensionMethod</code> 的声明移动到协议的声明位置的话, 则会使用函数表调度, 最终就会调用结构体里的实现。 并且要记得, 如果两种声明方式都使用了直接调度的话, 基于直接调度的运作方式, 我们不可能实现预想的 <code>override</code> 行为。</p>"},{"title":"组件生命周期管理和通信方案","date":"2019-02-16T01:44:32.000Z","_content":"\n\n随着移动互联网的快速发展，项目的迭代速度越来越快，需求改变越来越频繁，传统开发方式的工程所面临的一些，如代码耦合严重、维护效率低、开发不够敏捷等问题就凸现了出来。于是越来越多的公司开始推行\"组件化\"，通过对原有业务或新业务进行组件(或模块)拆分来提高并行开发效率。\n\n<!--more-->\n\n在笔者面试过程中发现，很多同学口中的\"组件化\"也只是把代码分库，然后在主项目中使用 CocoaPods 把各个子库聚合起来。对于怎样合理地对组件分层、如何管理组件(主要包括组件的生命周期管理和组件的通信管理)，如何管理不同版本的依赖，以及是否有整套集成和发布工具，这类问题的知之甚少。如果完全不了解这些问题，那么只是简单的对主项目进行组件拆分，并不能提高多少开发效率。\n\n笔者认为合理地进行组件拆分和管理各个组件之间的通信是组件化过程中最大的难点。合理地进行组件拆分是为了解耦，并且各个组件能更容易地独立变化。而对于一个完整的应用来说，每个组件不可能孤零零地存在，必定会互相调用。这样不同组件之间必须能进行通信而又没有*编译期的依赖*。\n\n\n## 组件生命周期管理\n\n可能很多同学在实施组件化的过程中知道要解决组件通信的问题，却很少关注组件的生命周期。这里的生命周期主要是指 AppDelegate 中的生命周期方法。有时候一些组件需要在这些钩子方法中做一些事情，这时候就需要一个能够管理组件的工具，并在适当的时机执行组件相应的逻辑。\n\n比如笔者在项目中是这样做的：\n\n```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    [[Ant shareInstance] application:application didFinishLaunchingWithOptions:launchOptions];\n    return YES;\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application\n{\n    [[Ant shareInstance] applicationWillResignActive:application];\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    [[Ant shareInstance] applicationDidEnterBackground:application];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application\n{\n    [[Ant shareInstance] applicationWillEnterForeground:application];\n}\n```\n\n所有注册的组件(模块)会在 AppDelegate 相应的生命周期方法调用时自动调用。例如有如下组件定义：\n\n```objc\nANT_MODULE_EXPORT(Module1App)\n\n@interface Module1App() <ATModuleProtocol> {\n    NSInteger state;\n}\n@end\n\n@implementation Module1App\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    state = 0;\n    NSLog(@\"Module A state: %zd\", state);\n    return YES;\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    state += 1;\n    NSLog(@\"Module A state: %zd\", state);\n}\n@end\n```\n\n上面示例代码中第一行的 `ANT_MODULE_EXPORT(Module1App)` 是导出组件。[Ant](https://github.com/hujewelz/Ant) 会在 dyld 加载完 image 后将导出的组件进行注册。当应用生命周期方法被调用时，会实例化所有注册过的组件，调用组件相应的方法，并进行缓存，之后再次调用就会从缓存中取出组件的实例对象。\n\n> 一般拥有完整生命周期的组件一般称为一个模块，一个模块其实也是一个独立的组件，它一般是包含一个完整的业务，列如：登录模块，外卖模块，消息模块等。\n\n组件的生命周期管理并不复杂，实现方案都没有太大区别，但它也是组件化中必不可少的部分。\n\n## 组件通信\n\n业界关于组件通信的方案比较多，主要有：`url-block`, `target-action`, `protocol-class`。下面笔者会对这三种方案做个简单的介绍。\n\n#### URL-Block\n\n这是蘑菇街在组件化过程中使用的一种组件间通信方式，在应用启动时注册组件提供的服务，把调用组件使用的`url`和组件提供的服务`block`对应起来，保存到内存中。在使用组件的服务时，通过`url`找到对应的`block`，然后获取服务。\n\n```objc\n[MGJRouter registerURLPattern:@\"mgj://foo/bar\" toHandler:^(NSDictionary *routerParameters) {\n    NSLog(@\"routerParameterUserInfo:%@\", routerParameters[MGJRouterParameterUserInfo]);\n}];\n\n[MGJRouter openURL:@\"mgj://foo/bar\"];\n```\n\n笔者是在15年开始学习组件化，那个时候就是使用的蘑菇街的这种发案。不过笔者从来没有在实际项目中使用这种方案。casa 在[这篇文章](https://casatwy.com/iOS-Modulization.html)中批判了这种方案。笔者对 case 的观点很是赞同。\n\n如果项目中需要很多组件的服务，那么就需要在内存中维护大量的 `url-block`项，造成内存问题，对于服务注册的代码应该放在什么地方也是一个问题。笔者一直认为 `url-block` 注册是一种很粗暴的方式，比如某个应用在启动时注册了100个服务，但某些服务在用户使用过程中根本就没有触发，这就造成了内存浪费。比如我们点击应用中的按钮跳转到某个页面，如果用户没有点击按钮，下个页面就永远不会创建，我们一般不会提前创建这个页面的。笔者更倾向于在需要服务的时候才进行服务对象的创建，在特定场景下也提供服务对象的缓存。\n\n使用 `url` 传参也是一个不可忽略的问题，对于一些基础数据类型，使用这种方案倒是没有问题，但是对于一些非常规对象就无能为力了，如 `UIImage`, `NSData` 等类型。\n\n还有一个问题是 casa 在文章中没有指出的，这个问题在他的 `target-action` 方案中也存在。下面用一个例子来说明一下。\n\n比如在一个组件 A 中提供了一个服务：\n\n```objc\n[MGJRouter registerURLPattern:@\"mgj://foo/bar\" toHandler:^(NSDictionary *routerParameters) {\n    NSLog(@\"routerParameterUserInfo:%@\", routerParameters[MGJRouterParameterUserInfo]);\n}];\n```\n\n然后在一个组件 B 中使用了服务：\n\n```objc\n[MGJRouter openURL:@\"mgj://foo/bar\"];\n```\n\n从上面示例代码中可以看到，两个不同组件能通信其实是通过一个字符串来定义的。如果服务使用方在写代码时写错了一个字符，那么使用方根本就不可能调起正确的服务，一旦出现这个问题，在开发过程中很难被发现。如果我们对组件多，注册的服务多，那么在使用时就存在很大的沟通问题，提供方和接入方可能会在每个字符串所代表的意义上浪费大量的时间。而这些问题都可以在工程设计上避免的。虽说我们在写代码时要低耦合，但并不代表不要耦合，有时候需要一些耦合来提高代码的健壮性和可维护性。\n\n在 Swift 中可以使用枚举来解决上面的问题，我们可以像下面这样做：\n\n```swift\nprotocol URLPatternCompatible {\n    var URLPattern: String { get }\n}\n\nenum SomeService {\n    case orderDetail\n    case others\n}\n\nenum SomeService: URLPatternCompatible {\n    var URLPattern: String {\n        switch self {\n        case .orderDetail:\n            return \"mgj://foo/bar/orderdetail\"\n        case .others:\n            return \"mgj://foo/bar/others\"\n        }\n    }\n}\n\n// 组件 A (服务提供方)\nMGJRouter.register(.orderDetail) { ... }\n\n// 组件 B (服务使用方)\nMGJRouter.open(.orderDetail)\n```\n\nSomeService 的定义可以放到一个专门的组件中，服务提供方和使用方都依赖这个专门的组件。我们这里不仅将字符串放到了一个统一的地方进行维护，而且还将一些在运行期才能发现的问题提前暴露到编译器。这里我们通过耦合来达到提高代码的健壮性和可维护性的目的。\n\n#### Target-Action\n\nTarget-actin 是 casa 在批判蘑菇街的方案时提出的一种方案。它解决了 `url-block` 方案中内存问题、url 传参问题、没有区分本地调用和远程调用等问题。其核心就是使用了 NSObject 的 `- (id)performSelector:(SEL)aSelector withObject:(id)object;` 方法。\n\n在本地应用调用中，本地组件A在某处调用 `[[CTMediator sharedInstance] performTarget:targetName action:actionName params:@{...}]` 向 `CTMediator` 发起跨组件调用，`CTMediator` 根据获得的 target 和 action 信息，通过 objective-C 的 runtime 转化生成 target 实例以及对应的 action 选择子，然后最终调用到目标业务提供的逻辑，完成需求。\n\ncasa 在文章中也给出了 demo，在具体的项目中，我们可以这样使用:\n\n```objc\n// CTMediator+SomeAction.h\n- (UIViewController *)xx_someAction:(NSDictionary *)params;\n\n// CTMediator+SomeAction.m \n- (UIViewController *)xx_someAction:(NSDictionary *)params {\n\treturn [self performTarget:@\"A\" action:@\"someAction\" params:params shouldCacheTarget:NO]\n}\n```\n上面是提供给服务调用方的一个简洁的接口。其实就是对 CTMediator 方法的封装。我们一般将 CTMediator 的这个分类放到一个独立的组件中。调用方依赖这个独立的组件就可以了。\n\n在某个组件中调用服务：\n\n```objc\n// 组件 A 中\nUIViewController *vc = [CTMediator sharedInstance] xx_someAction:@{@\"key\": value}];\n```\n\n针对上面服务的定义，服务提供方的定义就*必须*是下面这样：\n\n```objc\n// TargetA.h\n@interface Target_A : NSObject\n- (UIViewController *)someAction:(NSDictionary *)params;\n@end\n\n// TargetA.m\n- (UIViewController *)someAction:(NSDictionary *)params { ... }\n\n```\n\n\n在这整个过程中可以看到，服务的调用方只需要依赖 CTMediator 这个中间件及其分类(定义服务)。服务提供方和调用方没有任何依赖。确实做到了组件解耦。可以肯定的是 target-action 方案确实解决了 url-block 方案的一些问题。但是仔细一看，也是存在一些问题的。\n\n跟 url-block 方案一样，两个不同组件能通信其实仍然是通过一个字符串来定义的。为什么这么说呢，我们可以看一下下面的代码：\n\n```objc\n// CTMediator+SomeAction.m \n- (UIViewController *)xx_someAction:(NSDictionary *)params {\n    return [self performTarget:@\"A\" action:@\"someAction\" params:params shouldCacheTarget:NO]\n}\n\n// TargetA.h\n@interface Target_A : NSObject\n- (UIViewController *)someAction:(NSDictionary *)params;\n@end\n```\n从上面的代码中可以看到，服务能调起主要是调用了 CTMediator 的 \n\n`- (id)performTarget:(NSString *)targetName action:(NSString *)actionName params:(NSDictionary *)params shouldCacheTarget:(BOOL)shouldCacheTarget;` 方法。这里不管是 `targetName` 还是 `action` 都是字符串，在实现中 CTMediator 会示例化一个 `Target_targetName` 类的对象，并且创建一个 `Action_actionName` 的 selector，所有我们在服务提供的组件中的 Target 以及 Action 是不能随便定义的。Target 必须是以 `Target_`开头，方法必须以 `Action_`开头。这种强制要求感觉不是一种工程师的思维。这里想去耦合，却以一种不是很正确的方式造成了隐式的耦合。这也是让我抛弃 CTMediator 转而去开发自己的组件化通信方案的原因之一。\n\n#### Protocol-Class\n\nProtocol-Class 方案也是常用的组件化通信方式之一。这里把它放到最后，肯定是因为笔者使用的是这种方案咯(笑)。\n\nProtocol-Class 方案就是通过 protocol 定义服务接口，服务提供方通过实现该接口来提供接口定义的服务。具体实现就是把 protocol 和 class 做一个映射，同时在内存中保存一张映射表，使用的时候，就通过 protocol 找到对应的 class 来获取需要的服务。这种方案的优缺点先不说，可以先看一下具体的实践：\n**示例图：**\n![protocol-class使用示例图](protocol-class.jpg)\n**示例代码：**\n```objc\n// TestService.h (定义服务)\n@protocol TestService <NSObject>\n/// 测试\n- (void)service1;\n\n@end\n\n// 组件 A (服务提供方)\nANT_REGISTER_SERVICE(TestServiceImpl, TestService)\n@interface TestServiceImpl() <TestService> @end\n\n@implementation TestServiceImpl\n\n- (void)service1 {\n    NSLog(@\"Service test from Impl\");\n}\n\n@end\n\n// 组件 B (服务使用方)\nid <TestService> obj = [Ant serviceImplFromProtocol:@protocol(TestService)];\n[obj service1];\n```\n\n像上面的方案一样，我们会将服务的定义放到独立的组件中。这个组件仅仅只包含了服务的声明。不管是服务提供方还是服务使用方都依赖这个独立的组件，服务提供方还是服务使用方互不依赖。\n\n这里将系统提供的服务定义为协议，通过耦合提高了代码的健壮性和可维护性。这里定义服务的 protocol 对服务提供方做了一个限定：你可以提供哪些服务，同时也给服务使用方做了限定：你可以使用哪些服务。这种设计将系统有哪些服务都交代的清清楚楚，通过服务的 protocol 我们就知道了每个服务的功能，调用需要的参数，返回值等。这里的定义服务的同时也可以作为系统服务的接口文档，这节省了服务提供方和使用方很多的沟通时间，让其能关注业务的开发。这在大型项目，多团队开发中优势尤为明显。\n\n当然 protocol-class 这种方案缺点也很明显，需要在内存中保存 protocol 到 Class 的映射关系。但是我们可以通过将服务分类，让系统注册的 protocol-class 项尽量少一些，不要一个服务定义一个实现。对于一个有100个服务的系统，定义10个服务实现，每个实现提供10个服务，肯定要比100个服务实现占用的内存少很多。这就要求我们在实践过程中能对系统中的服务能做好划分。\n\n## 总结\n\n以上就是笔者对组件化的一些思考，很多观点可能也不太成熟，如果有什么不合理的地方，也欢迎各位同学提出建议。组件解耦在 iOS 中其实有多种解决方案，各位同学可以根据项目实际情况选择适合自己的方案。\n\n> 上面代码中的 [Ant](https://github.com/hujewelz/Ant) 是笔者最近开发的一个负责组件生命周期管理和通信的开源工具。因为笔者公司从17年开始就一直使用 Swift 进行开发，原来的工具是用 Swift 编写的，使用了很多 Swift 的特性，在 OC 中使用就显得不伦不类了，就针对 OC 进行了重新设计，于是就有了 [Ant](https://github.com/hujewelz/Ant) 。\n                                                                                                       \n\n\n\n\n\n\n\n\n\n","source":"_posts/组件生命周期管理和通信方案.md","raw":"---\ntitle: 组件生命周期管理和通信方案\ndate: 2019-02-16 09:44:32\ntags: \n  - iOS\n  - 架构\ncategories: 架构\n---\n\n\n随着移动互联网的快速发展，项目的迭代速度越来越快，需求改变越来越频繁，传统开发方式的工程所面临的一些，如代码耦合严重、维护效率低、开发不够敏捷等问题就凸现了出来。于是越来越多的公司开始推行\"组件化\"，通过对原有业务或新业务进行组件(或模块)拆分来提高并行开发效率。\n\n<!--more-->\n\n在笔者面试过程中发现，很多同学口中的\"组件化\"也只是把代码分库，然后在主项目中使用 CocoaPods 把各个子库聚合起来。对于怎样合理地对组件分层、如何管理组件(主要包括组件的生命周期管理和组件的通信管理)，如何管理不同版本的依赖，以及是否有整套集成和发布工具，这类问题的知之甚少。如果完全不了解这些问题，那么只是简单的对主项目进行组件拆分，并不能提高多少开发效率。\n\n笔者认为合理地进行组件拆分和管理各个组件之间的通信是组件化过程中最大的难点。合理地进行组件拆分是为了解耦，并且各个组件能更容易地独立变化。而对于一个完整的应用来说，每个组件不可能孤零零地存在，必定会互相调用。这样不同组件之间必须能进行通信而又没有*编译期的依赖*。\n\n\n## 组件生命周期管理\n\n可能很多同学在实施组件化的过程中知道要解决组件通信的问题，却很少关注组件的生命周期。这里的生命周期主要是指 AppDelegate 中的生命周期方法。有时候一些组件需要在这些钩子方法中做一些事情，这时候就需要一个能够管理组件的工具，并在适当的时机执行组件相应的逻辑。\n\n比如笔者在项目中是这样做的：\n\n```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    [[Ant shareInstance] application:application didFinishLaunchingWithOptions:launchOptions];\n    return YES;\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application\n{\n    [[Ant shareInstance] applicationWillResignActive:application];\n}\n\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    [[Ant shareInstance] applicationDidEnterBackground:application];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application\n{\n    [[Ant shareInstance] applicationWillEnterForeground:application];\n}\n```\n\n所有注册的组件(模块)会在 AppDelegate 相应的生命周期方法调用时自动调用。例如有如下组件定义：\n\n```objc\nANT_MODULE_EXPORT(Module1App)\n\n@interface Module1App() <ATModuleProtocol> {\n    NSInteger state;\n}\n@end\n\n@implementation Module1App\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    state = 0;\n    NSLog(@\"Module A state: %zd\", state);\n    return YES;\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    state += 1;\n    NSLog(@\"Module A state: %zd\", state);\n}\n@end\n```\n\n上面示例代码中第一行的 `ANT_MODULE_EXPORT(Module1App)` 是导出组件。[Ant](https://github.com/hujewelz/Ant) 会在 dyld 加载完 image 后将导出的组件进行注册。当应用生命周期方法被调用时，会实例化所有注册过的组件，调用组件相应的方法，并进行缓存，之后再次调用就会从缓存中取出组件的实例对象。\n\n> 一般拥有完整生命周期的组件一般称为一个模块，一个模块其实也是一个独立的组件，它一般是包含一个完整的业务，列如：登录模块，外卖模块，消息模块等。\n\n组件的生命周期管理并不复杂，实现方案都没有太大区别，但它也是组件化中必不可少的部分。\n\n## 组件通信\n\n业界关于组件通信的方案比较多，主要有：`url-block`, `target-action`, `protocol-class`。下面笔者会对这三种方案做个简单的介绍。\n\n#### URL-Block\n\n这是蘑菇街在组件化过程中使用的一种组件间通信方式，在应用启动时注册组件提供的服务，把调用组件使用的`url`和组件提供的服务`block`对应起来，保存到内存中。在使用组件的服务时，通过`url`找到对应的`block`，然后获取服务。\n\n```objc\n[MGJRouter registerURLPattern:@\"mgj://foo/bar\" toHandler:^(NSDictionary *routerParameters) {\n    NSLog(@\"routerParameterUserInfo:%@\", routerParameters[MGJRouterParameterUserInfo]);\n}];\n\n[MGJRouter openURL:@\"mgj://foo/bar\"];\n```\n\n笔者是在15年开始学习组件化，那个时候就是使用的蘑菇街的这种发案。不过笔者从来没有在实际项目中使用这种方案。casa 在[这篇文章](https://casatwy.com/iOS-Modulization.html)中批判了这种方案。笔者对 case 的观点很是赞同。\n\n如果项目中需要很多组件的服务，那么就需要在内存中维护大量的 `url-block`项，造成内存问题，对于服务注册的代码应该放在什么地方也是一个问题。笔者一直认为 `url-block` 注册是一种很粗暴的方式，比如某个应用在启动时注册了100个服务，但某些服务在用户使用过程中根本就没有触发，这就造成了内存浪费。比如我们点击应用中的按钮跳转到某个页面，如果用户没有点击按钮，下个页面就永远不会创建，我们一般不会提前创建这个页面的。笔者更倾向于在需要服务的时候才进行服务对象的创建，在特定场景下也提供服务对象的缓存。\n\n使用 `url` 传参也是一个不可忽略的问题，对于一些基础数据类型，使用这种方案倒是没有问题，但是对于一些非常规对象就无能为力了，如 `UIImage`, `NSData` 等类型。\n\n还有一个问题是 casa 在文章中没有指出的，这个问题在他的 `target-action` 方案中也存在。下面用一个例子来说明一下。\n\n比如在一个组件 A 中提供了一个服务：\n\n```objc\n[MGJRouter registerURLPattern:@\"mgj://foo/bar\" toHandler:^(NSDictionary *routerParameters) {\n    NSLog(@\"routerParameterUserInfo:%@\", routerParameters[MGJRouterParameterUserInfo]);\n}];\n```\n\n然后在一个组件 B 中使用了服务：\n\n```objc\n[MGJRouter openURL:@\"mgj://foo/bar\"];\n```\n\n从上面示例代码中可以看到，两个不同组件能通信其实是通过一个字符串来定义的。如果服务使用方在写代码时写错了一个字符，那么使用方根本就不可能调起正确的服务，一旦出现这个问题，在开发过程中很难被发现。如果我们对组件多，注册的服务多，那么在使用时就存在很大的沟通问题，提供方和接入方可能会在每个字符串所代表的意义上浪费大量的时间。而这些问题都可以在工程设计上避免的。虽说我们在写代码时要低耦合，但并不代表不要耦合，有时候需要一些耦合来提高代码的健壮性和可维护性。\n\n在 Swift 中可以使用枚举来解决上面的问题，我们可以像下面这样做：\n\n```swift\nprotocol URLPatternCompatible {\n    var URLPattern: String { get }\n}\n\nenum SomeService {\n    case orderDetail\n    case others\n}\n\nenum SomeService: URLPatternCompatible {\n    var URLPattern: String {\n        switch self {\n        case .orderDetail:\n            return \"mgj://foo/bar/orderdetail\"\n        case .others:\n            return \"mgj://foo/bar/others\"\n        }\n    }\n}\n\n// 组件 A (服务提供方)\nMGJRouter.register(.orderDetail) { ... }\n\n// 组件 B (服务使用方)\nMGJRouter.open(.orderDetail)\n```\n\nSomeService 的定义可以放到一个专门的组件中，服务提供方和使用方都依赖这个专门的组件。我们这里不仅将字符串放到了一个统一的地方进行维护，而且还将一些在运行期才能发现的问题提前暴露到编译器。这里我们通过耦合来达到提高代码的健壮性和可维护性的目的。\n\n#### Target-Action\n\nTarget-actin 是 casa 在批判蘑菇街的方案时提出的一种方案。它解决了 `url-block` 方案中内存问题、url 传参问题、没有区分本地调用和远程调用等问题。其核心就是使用了 NSObject 的 `- (id)performSelector:(SEL)aSelector withObject:(id)object;` 方法。\n\n在本地应用调用中，本地组件A在某处调用 `[[CTMediator sharedInstance] performTarget:targetName action:actionName params:@{...}]` 向 `CTMediator` 发起跨组件调用，`CTMediator` 根据获得的 target 和 action 信息，通过 objective-C 的 runtime 转化生成 target 实例以及对应的 action 选择子，然后最终调用到目标业务提供的逻辑，完成需求。\n\ncasa 在文章中也给出了 demo，在具体的项目中，我们可以这样使用:\n\n```objc\n// CTMediator+SomeAction.h\n- (UIViewController *)xx_someAction:(NSDictionary *)params;\n\n// CTMediator+SomeAction.m \n- (UIViewController *)xx_someAction:(NSDictionary *)params {\n\treturn [self performTarget:@\"A\" action:@\"someAction\" params:params shouldCacheTarget:NO]\n}\n```\n上面是提供给服务调用方的一个简洁的接口。其实就是对 CTMediator 方法的封装。我们一般将 CTMediator 的这个分类放到一个独立的组件中。调用方依赖这个独立的组件就可以了。\n\n在某个组件中调用服务：\n\n```objc\n// 组件 A 中\nUIViewController *vc = [CTMediator sharedInstance] xx_someAction:@{@\"key\": value}];\n```\n\n针对上面服务的定义，服务提供方的定义就*必须*是下面这样：\n\n```objc\n// TargetA.h\n@interface Target_A : NSObject\n- (UIViewController *)someAction:(NSDictionary *)params;\n@end\n\n// TargetA.m\n- (UIViewController *)someAction:(NSDictionary *)params { ... }\n\n```\n\n\n在这整个过程中可以看到，服务的调用方只需要依赖 CTMediator 这个中间件及其分类(定义服务)。服务提供方和调用方没有任何依赖。确实做到了组件解耦。可以肯定的是 target-action 方案确实解决了 url-block 方案的一些问题。但是仔细一看，也是存在一些问题的。\n\n跟 url-block 方案一样，两个不同组件能通信其实仍然是通过一个字符串来定义的。为什么这么说呢，我们可以看一下下面的代码：\n\n```objc\n// CTMediator+SomeAction.m \n- (UIViewController *)xx_someAction:(NSDictionary *)params {\n    return [self performTarget:@\"A\" action:@\"someAction\" params:params shouldCacheTarget:NO]\n}\n\n// TargetA.h\n@interface Target_A : NSObject\n- (UIViewController *)someAction:(NSDictionary *)params;\n@end\n```\n从上面的代码中可以看到，服务能调起主要是调用了 CTMediator 的 \n\n`- (id)performTarget:(NSString *)targetName action:(NSString *)actionName params:(NSDictionary *)params shouldCacheTarget:(BOOL)shouldCacheTarget;` 方法。这里不管是 `targetName` 还是 `action` 都是字符串，在实现中 CTMediator 会示例化一个 `Target_targetName` 类的对象，并且创建一个 `Action_actionName` 的 selector，所有我们在服务提供的组件中的 Target 以及 Action 是不能随便定义的。Target 必须是以 `Target_`开头，方法必须以 `Action_`开头。这种强制要求感觉不是一种工程师的思维。这里想去耦合，却以一种不是很正确的方式造成了隐式的耦合。这也是让我抛弃 CTMediator 转而去开发自己的组件化通信方案的原因之一。\n\n#### Protocol-Class\n\nProtocol-Class 方案也是常用的组件化通信方式之一。这里把它放到最后，肯定是因为笔者使用的是这种方案咯(笑)。\n\nProtocol-Class 方案就是通过 protocol 定义服务接口，服务提供方通过实现该接口来提供接口定义的服务。具体实现就是把 protocol 和 class 做一个映射，同时在内存中保存一张映射表，使用的时候，就通过 protocol 找到对应的 class 来获取需要的服务。这种方案的优缺点先不说，可以先看一下具体的实践：\n**示例图：**\n![protocol-class使用示例图](protocol-class.jpg)\n**示例代码：**\n```objc\n// TestService.h (定义服务)\n@protocol TestService <NSObject>\n/// 测试\n- (void)service1;\n\n@end\n\n// 组件 A (服务提供方)\nANT_REGISTER_SERVICE(TestServiceImpl, TestService)\n@interface TestServiceImpl() <TestService> @end\n\n@implementation TestServiceImpl\n\n- (void)service1 {\n    NSLog(@\"Service test from Impl\");\n}\n\n@end\n\n// 组件 B (服务使用方)\nid <TestService> obj = [Ant serviceImplFromProtocol:@protocol(TestService)];\n[obj service1];\n```\n\n像上面的方案一样，我们会将服务的定义放到独立的组件中。这个组件仅仅只包含了服务的声明。不管是服务提供方还是服务使用方都依赖这个独立的组件，服务提供方还是服务使用方互不依赖。\n\n这里将系统提供的服务定义为协议，通过耦合提高了代码的健壮性和可维护性。这里定义服务的 protocol 对服务提供方做了一个限定：你可以提供哪些服务，同时也给服务使用方做了限定：你可以使用哪些服务。这种设计将系统有哪些服务都交代的清清楚楚，通过服务的 protocol 我们就知道了每个服务的功能，调用需要的参数，返回值等。这里的定义服务的同时也可以作为系统服务的接口文档，这节省了服务提供方和使用方很多的沟通时间，让其能关注业务的开发。这在大型项目，多团队开发中优势尤为明显。\n\n当然 protocol-class 这种方案缺点也很明显，需要在内存中保存 protocol 到 Class 的映射关系。但是我们可以通过将服务分类，让系统注册的 protocol-class 项尽量少一些，不要一个服务定义一个实现。对于一个有100个服务的系统，定义10个服务实现，每个实现提供10个服务，肯定要比100个服务实现占用的内存少很多。这就要求我们在实践过程中能对系统中的服务能做好划分。\n\n## 总结\n\n以上就是笔者对组件化的一些思考，很多观点可能也不太成熟，如果有什么不合理的地方，也欢迎各位同学提出建议。组件解耦在 iOS 中其实有多种解决方案，各位同学可以根据项目实际情况选择适合自己的方案。\n\n> 上面代码中的 [Ant](https://github.com/hujewelz/Ant) 是笔者最近开发的一个负责组件生命周期管理和通信的开源工具。因为笔者公司从17年开始就一直使用 Swift 进行开发，原来的工具是用 Swift 编写的，使用了很多 Swift 的特性，在 OC 中使用就显得不伦不类了，就针对 OC 进行了重新设计，于是就有了 [Ant](https://github.com/hujewelz/Ant) 。\n                                                                                                       \n\n\n\n\n\n\n\n\n\n","slug":"组件生命周期管理和通信方案","published":1,"updated":"2019-02-16T03:13:31.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zil9002a1u0o3x7nhu2q","content":"<p>随着移动互联网的快速发展，项目的迭代速度越来越快，需求改变越来越频繁，传统开发方式的工程所面临的一些，如代码耦合严重、维护效率低、开发不够敏捷等问题就凸现了出来。于是越来越多的公司开始推行”组件化”，通过对原有业务或新业务进行组件(或模块)拆分来提高并行开发效率。</p>\n<a id=\"more\"></a>\n<p>在笔者面试过程中发现，很多同学口中的”组件化”也只是把代码分库，然后在主项目中使用 CocoaPods 把各个子库聚合起来。对于怎样合理地对组件分层、如何管理组件(主要包括组件的生命周期管理和组件的通信管理)，如何管理不同版本的依赖，以及是否有整套集成和发布工具，这类问题的知之甚少。如果完全不了解这些问题，那么只是简单的对主项目进行组件拆分，并不能提高多少开发效率。</p>\n<p>笔者认为合理地进行组件拆分和管理各个组件之间的通信是组件化过程中最大的难点。合理地进行组件拆分是为了解耦，并且各个组件能更容易地独立变化。而对于一个完整的应用来说，每个组件不可能孤零零地存在，必定会互相调用。这样不同组件之间必须能进行通信而又没有<em>编译期的依赖</em>。</p>\n<h2 id=\"组件生命周期管理\"><a href=\"#组件生命周期管理\" class=\"headerlink\" title=\"组件生命周期管理\"></a>组件生命周期管理</h2><p>可能很多同学在实施组件化的过程中知道要解决组件通信的问题，却很少关注组件的生命周期。这里的生命周期主要是指 AppDelegate 中的生命周期方法。有时候一些组件需要在这些钩子方法中做一些事情，这时候就需要一个能够管理组件的工具，并在适当的时机执行组件相应的逻辑。</p>\n<p>比如笔者在项目中是这样做的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillResignActive:(<span class=\"built_in\">UIApplication</span> *)application</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] applicationWillResignActive:application];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidEnterBackground:(<span class=\"built_in\">UIApplication</span> *)application</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] applicationDidEnterBackground:application];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] applicationWillEnterForeground:application];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有注册的组件(模块)会在 AppDelegate 相应的生命周期方法调用时自动调用。例如有如下组件定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANT_MODULE_EXPORT(Module1App)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Module1App</span>() &lt;<span class=\"title\">ATModuleProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSInteger</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Module1App</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</span><br><span class=\"line\">    state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Module A state: %zd\"</span>, state);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">    state += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Module A state: %zd\"</span>, state);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>上面示例代码中第一行的 <code>ANT_MODULE_EXPORT(Module1App)</code> 是导出组件。<a href=\"https://github.com/hujewelz/Ant\" target=\"_blank\" rel=\"noopener\">Ant</a> 会在 dyld 加载完 image 后将导出的组件进行注册。当应用生命周期方法被调用时，会实例化所有注册过的组件，调用组件相应的方法，并进行缓存，之后再次调用就会从缓存中取出组件的实例对象。</p>\n<blockquote>\n<p>一般拥有完整生命周期的组件一般称为一个模块，一个模块其实也是一个独立的组件，它一般是包含一个完整的业务，列如：登录模块，外卖模块，消息模块等。</p>\n</blockquote>\n<p>组件的生命周期管理并不复杂，实现方案都没有太大区别，但它也是组件化中必不可少的部分。</p>\n<h2 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h2><p>业界关于组件通信的方案比较多，主要有：<code>url-block</code>, <code>target-action</code>, <code>protocol-class</code>。下面笔者会对这三种方案做个简单的介绍。</p>\n<h4 id=\"URL-Block\"><a href=\"#URL-Block\" class=\"headerlink\" title=\"URL-Block\"></a>URL-Block</h4><p>这是蘑菇街在组件化过程中使用的一种组件间通信方式，在应用启动时注册组件提供的服务，把调用组件使用的<code>url</code>和组件提供的服务<code>block</code>对应起来，保存到内存中。在使用组件的服务时，通过<code>url</code>找到对应的<code>block</code>，然后获取服务。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MGJRouter registerURLPattern:<span class=\"string\">@\"mgj://foo/bar\"</span> toHandler:^(<span class=\"built_in\">NSDictionary</span> *routerParameters) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"routerParameterUserInfo:%@\"</span>, routerParameters[MGJRouterParameterUserInfo]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[MGJRouter openURL:<span class=\"string\">@\"mgj://foo/bar\"</span>];</span><br></pre></td></tr></table></figure>\n<p>笔者是在15年开始学习组件化，那个时候就是使用的蘑菇街的这种发案。不过笔者从来没有在实际项目中使用这种方案。casa 在<a href=\"https://casatwy.com/iOS-Modulization.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>中批判了这种方案。笔者对 case 的观点很是赞同。</p>\n<p>如果项目中需要很多组件的服务，那么就需要在内存中维护大量的 <code>url-block</code>项，造成内存问题，对于服务注册的代码应该放在什么地方也是一个问题。笔者一直认为 <code>url-block</code> 注册是一种很粗暴的方式，比如某个应用在启动时注册了100个服务，但某些服务在用户使用过程中根本就没有触发，这就造成了内存浪费。比如我们点击应用中的按钮跳转到某个页面，如果用户没有点击按钮，下个页面就永远不会创建，我们一般不会提前创建这个页面的。笔者更倾向于在需要服务的时候才进行服务对象的创建，在特定场景下也提供服务对象的缓存。</p>\n<p>使用 <code>url</code> 传参也是一个不可忽略的问题，对于一些基础数据类型，使用这种方案倒是没有问题，但是对于一些非常规对象就无能为力了，如 <code>UIImage</code>, <code>NSData</code> 等类型。</p>\n<p>还有一个问题是 casa 在文章中没有指出的，这个问题在他的 <code>target-action</code> 方案中也存在。下面用一个例子来说明一下。</p>\n<p>比如在一个组件 A 中提供了一个服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MGJRouter registerURLPattern:<span class=\"string\">@\"mgj://foo/bar\"</span> toHandler:^(<span class=\"built_in\">NSDictionary</span> *routerParameters) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"routerParameterUserInfo:%@\"</span>, routerParameters[MGJRouterParameterUserInfo]);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>然后在一个组件 B 中使用了服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MGJRouter openURL:<span class=\"string\">@\"mgj://foo/bar\"</span>];</span><br></pre></td></tr></table></figure>\n<p>从上面示例代码中可以看到，两个不同组件能通信其实是通过一个字符串来定义的。如果服务使用方在写代码时写错了一个字符，那么使用方根本就不可能调起正确的服务，一旦出现这个问题，在开发过程中很难被发现。如果我们对组件多，注册的服务多，那么在使用时就存在很大的沟通问题，提供方和接入方可能会在每个字符串所代表的意义上浪费大量的时间。而这些问题都可以在工程设计上避免的。虽说我们在写代码时要低耦合，但并不代表不要耦合，有时候需要一些耦合来提高代码的健壮性和可维护性。</p>\n<p>在 Swift 中可以使用枚举来解决上面的问题，我们可以像下面这样做：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">URLPatternCompatible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"type\">URLPattern</span>: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SomeService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> orderDetail</span><br><span class=\"line\">    <span class=\"keyword\">case</span> others</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SomeService</span>: <span class=\"title\">URLPatternCompatible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"type\">URLPattern</span>: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .orderDetail:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"mgj://foo/bar/orderdetail\"</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .others:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"mgj://foo/bar/others\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 A (服务提供方)</span></span><br><span class=\"line\"><span class=\"type\">MGJRouter</span>.register(.orderDetail) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 B (服务使用方)</span></span><br><span class=\"line\"><span class=\"type\">MGJRouter</span>.<span class=\"keyword\">open</span>(.orderDetail)</span><br></pre></td></tr></table></figure>\n<p>SomeService 的定义可以放到一个专门的组件中，服务提供方和使用方都依赖这个专门的组件。我们这里不仅将字符串放到了一个统一的地方进行维护，而且还将一些在运行期才能发现的问题提前暴露到编译器。这里我们通过耦合来达到提高代码的健壮性和可维护性的目的。</p>\n<h4 id=\"Target-Action\"><a href=\"#Target-Action\" class=\"headerlink\" title=\"Target-Action\"></a>Target-Action</h4><p>Target-actin 是 casa 在批判蘑菇街的方案时提出的一种方案。它解决了 <code>url-block</code> 方案中内存问题、url 传参问题、没有区分本地调用和远程调用等问题。其核心就是使用了 NSObject 的 <code>- (id)performSelector:(SEL)aSelector withObject:(id)object;</code> 方法。</p>\n<p>在本地应用调用中，本地组件A在某处调用 <code>[[CTMediator sharedInstance] performTarget:targetName action:actionName params:@{...}]</code> 向 <code>CTMediator</code> 发起跨组件调用，<code>CTMediator</code> 根据获得的 target 和 action 信息，通过 objective-C 的 runtime 转化生成 target 实例以及对应的 action 选择子，然后最终调用到目标业务提供的逻辑，完成需求。</p>\n<p>casa 在文章中也给出了 demo，在具体的项目中，我们可以这样使用:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CTMediator+SomeAction.h</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)xx_someAction:(<span class=\"built_in\">NSDictionary</span> *)params;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CTMediator+SomeAction.m </span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)xx_someAction:(<span class=\"built_in\">NSDictionary</span> *)params &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> performTarget:<span class=\"string\">@\"A\"</span> action:<span class=\"string\">@\"someAction\"</span> params:params shouldCacheTarget:<span class=\"literal\">NO</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是提供给服务调用方的一个简洁的接口。其实就是对 CTMediator 方法的封装。我们一般将 CTMediator 的这个分类放到一个独立的组件中。调用方依赖这个独立的组件就可以了。</p>\n<p>在某个组件中调用服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件 A 中</span></span><br><span class=\"line\"><span class=\"built_in\">UIViewController</span> *vc = [<span class=\"built_in\">CTMediator</span> sharedInstance] xx_someAction:@&#123;<span class=\"string\">@\"key\"</span>: value&#125;];</span><br></pre></td></tr></table></figure>\n<p>针对上面服务的定义，服务提供方的定义就<em>必须</em>是下面这样：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TargetA.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Target_A</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)someAction:(<span class=\"built_in\">NSDictionary</span> *)params;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TargetA.m</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)someAction:(<span class=\"built_in\">NSDictionary</span> *)params &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>在这整个过程中可以看到，服务的调用方只需要依赖 CTMediator 这个中间件及其分类(定义服务)。服务提供方和调用方没有任何依赖。确实做到了组件解耦。可以肯定的是 target-action 方案确实解决了 url-block 方案的一些问题。但是仔细一看，也是存在一些问题的。</p>\n<p>跟 url-block 方案一样，两个不同组件能通信其实仍然是通过一个字符串来定义的。为什么这么说呢，我们可以看一下下面的代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CTMediator+SomeAction.m </span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)xx_someAction:(<span class=\"built_in\">NSDictionary</span> *)params &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> performTarget:<span class=\"string\">@\"A\"</span> action:<span class=\"string\">@\"someAction\"</span> params:params shouldCacheTarget:<span class=\"literal\">NO</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TargetA.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Target_A</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)someAction:(<span class=\"built_in\">NSDictionary</span> *)params;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>从上面的代码中可以看到，服务能调起主要是调用了 CTMediator 的 </p>\n<p><code>- (id)performTarget:(NSString *)targetName action:(NSString *)actionName params:(NSDictionary *)params shouldCacheTarget:(BOOL)shouldCacheTarget;</code> 方法。这里不管是 <code>targetName</code> 还是 <code>action</code> 都是字符串，在实现中 CTMediator 会示例化一个 <code>Target_targetName</code> 类的对象，并且创建一个 <code>Action_actionName</code> 的 selector，所有我们在服务提供的组件中的 Target 以及 Action 是不能随便定义的。Target 必须是以 <code>Target_</code>开头，方法必须以 <code>Action_</code>开头。这种强制要求感觉不是一种工程师的思维。这里想去耦合，却以一种不是很正确的方式造成了隐式的耦合。这也是让我抛弃 CTMediator 转而去开发自己的组件化通信方案的原因之一。</p>\n<h4 id=\"Protocol-Class\"><a href=\"#Protocol-Class\" class=\"headerlink\" title=\"Protocol-Class\"></a>Protocol-Class</h4><p>Protocol-Class 方案也是常用的组件化通信方式之一。这里把它放到最后，肯定是因为笔者使用的是这种方案咯(笑)。</p>\n<p>Protocol-Class 方案就是通过 protocol 定义服务接口，服务提供方通过实现该接口来提供接口定义的服务。具体实现就是把 protocol 和 class 做一个映射，同时在内存中保存一张映射表，使用的时候，就通过 protocol 找到对应的 class 来获取需要的服务。这种方案的优缺点先不说，可以先看一下具体的实践：<br><strong>示例图：</strong><br><img src=\"protocol-class.jpg\" alt=\"protocol-class使用示例图\"><br><strong>示例代码：</strong><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestService.h (定义服务)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">TestService</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 测试</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)service1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 A (服务提供方)</span></span><br><span class=\"line\">ANT_REGISTER_SERVICE(TestServiceImpl, TestService)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TestServiceImpl</span>() &lt;<span class=\"title\">TestService</span>&gt; @<span class=\"title\">end</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestServiceImpl</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)service1 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Service test from Impl\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 B (服务使用方)</span></span><br><span class=\"line\"><span class=\"keyword\">id</span> &lt;TestService&gt; obj = [Ant serviceImplFromProtocol:<span class=\"class\"><span class=\"keyword\">@protocol</span>(<span class=\"title\">TestService</span>)];</span></span><br><span class=\"line\">[obj service1];</span><br></pre></td></tr></table></figure></p>\n<p>像上面的方案一样，我们会将服务的定义放到独立的组件中。这个组件仅仅只包含了服务的声明。不管是服务提供方还是服务使用方都依赖这个独立的组件，服务提供方还是服务使用方互不依赖。</p>\n<p>这里将系统提供的服务定义为协议，通过耦合提高了代码的健壮性和可维护性。这里定义服务的 protocol 对服务提供方做了一个限定：你可以提供哪些服务，同时也给服务使用方做了限定：你可以使用哪些服务。这种设计将系统有哪些服务都交代的清清楚楚，通过服务的 protocol 我们就知道了每个服务的功能，调用需要的参数，返回值等。这里的定义服务的同时也可以作为系统服务的接口文档，这节省了服务提供方和使用方很多的沟通时间，让其能关注业务的开发。这在大型项目，多团队开发中优势尤为明显。</p>\n<p>当然 protocol-class 这种方案缺点也很明显，需要在内存中保存 protocol 到 Class 的映射关系。但是我们可以通过将服务分类，让系统注册的 protocol-class 项尽量少一些，不要一个服务定义一个实现。对于一个有100个服务的系统，定义10个服务实现，每个实现提供10个服务，肯定要比100个服务实现占用的内存少很多。这就要求我们在实践过程中能对系统中的服务能做好划分。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是笔者对组件化的一些思考，很多观点可能也不太成熟，如果有什么不合理的地方，也欢迎各位同学提出建议。组件解耦在 iOS 中其实有多种解决方案，各位同学可以根据项目实际情况选择适合自己的方案。</p>\n<blockquote>\n<p>上面代码中的 <a href=\"https://github.com/hujewelz/Ant\" target=\"_blank\" rel=\"noopener\">Ant</a> 是笔者最近开发的一个负责组件生命周期管理和通信的开源工具。因为笔者公司从17年开始就一直使用 Swift 进行开发，原来的工具是用 Swift 编写的，使用了很多 Swift 的特性，在 OC 中使用就显得不伦不类了，就针对 OC 进行了重新设计，于是就有了 <a href=\"https://github.com/hujewelz/Ant\" target=\"_blank\" rel=\"noopener\">Ant</a> 。</p>\n</blockquote>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>随着移动互联网的快速发展，项目的迭代速度越来越快，需求改变越来越频繁，传统开发方式的工程所面临的一些，如代码耦合严重、维护效率低、开发不够敏捷等问题就凸现了出来。于是越来越多的公司开始推行”组件化”，通过对原有业务或新业务进行组件(或模块)拆分来提高并行开发效率。</p>","more":"<p>在笔者面试过程中发现，很多同学口中的”组件化”也只是把代码分库，然后在主项目中使用 CocoaPods 把各个子库聚合起来。对于怎样合理地对组件分层、如何管理组件(主要包括组件的生命周期管理和组件的通信管理)，如何管理不同版本的依赖，以及是否有整套集成和发布工具，这类问题的知之甚少。如果完全不了解这些问题，那么只是简单的对主项目进行组件拆分，并不能提高多少开发效率。</p>\n<p>笔者认为合理地进行组件拆分和管理各个组件之间的通信是组件化过程中最大的难点。合理地进行组件拆分是为了解耦，并且各个组件能更容易地独立变化。而对于一个完整的应用来说，每个组件不可能孤零零地存在，必定会互相调用。这样不同组件之间必须能进行通信而又没有<em>编译期的依赖</em>。</p>\n<h2 id=\"组件生命周期管理\"><a href=\"#组件生命周期管理\" class=\"headerlink\" title=\"组件生命周期管理\"></a>组件生命周期管理</h2><p>可能很多同学在实施组件化的过程中知道要解决组件通信的问题，却很少关注组件的生命周期。这里的生命周期主要是指 AppDelegate 中的生命周期方法。有时候一些组件需要在这些钩子方法中做一些事情，这时候就需要一个能够管理组件的工具，并在适当的时机执行组件相应的逻辑。</p>\n<p>比如笔者在项目中是这样做的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillResignActive:(<span class=\"built_in\">UIApplication</span> *)application</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] applicationWillResignActive:application];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidEnterBackground:(<span class=\"built_in\">UIApplication</span> *)application</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] applicationDidEnterBackground:application];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[Ant shareInstance] applicationWillEnterForeground:application];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有注册的组件(模块)会在 AppDelegate 相应的生命周期方法调用时自动调用。例如有如下组件定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANT_MODULE_EXPORT(Module1App)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Module1App</span>() &lt;<span class=\"title\">ATModuleProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSInteger</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Module1App</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</span><br><span class=\"line\">    state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Module A state: %zd\"</span>, state);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">    state += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Module A state: %zd\"</span>, state);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>上面示例代码中第一行的 <code>ANT_MODULE_EXPORT(Module1App)</code> 是导出组件。<a href=\"https://github.com/hujewelz/Ant\" target=\"_blank\" rel=\"noopener\">Ant</a> 会在 dyld 加载完 image 后将导出的组件进行注册。当应用生命周期方法被调用时，会实例化所有注册过的组件，调用组件相应的方法，并进行缓存，之后再次调用就会从缓存中取出组件的实例对象。</p>\n<blockquote>\n<p>一般拥有完整生命周期的组件一般称为一个模块，一个模块其实也是一个独立的组件，它一般是包含一个完整的业务，列如：登录模块，外卖模块，消息模块等。</p>\n</blockquote>\n<p>组件的生命周期管理并不复杂，实现方案都没有太大区别，但它也是组件化中必不可少的部分。</p>\n<h2 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h2><p>业界关于组件通信的方案比较多，主要有：<code>url-block</code>, <code>target-action</code>, <code>protocol-class</code>。下面笔者会对这三种方案做个简单的介绍。</p>\n<h4 id=\"URL-Block\"><a href=\"#URL-Block\" class=\"headerlink\" title=\"URL-Block\"></a>URL-Block</h4><p>这是蘑菇街在组件化过程中使用的一种组件间通信方式，在应用启动时注册组件提供的服务，把调用组件使用的<code>url</code>和组件提供的服务<code>block</code>对应起来，保存到内存中。在使用组件的服务时，通过<code>url</code>找到对应的<code>block</code>，然后获取服务。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MGJRouter registerURLPattern:<span class=\"string\">@\"mgj://foo/bar\"</span> toHandler:^(<span class=\"built_in\">NSDictionary</span> *routerParameters) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"routerParameterUserInfo:%@\"</span>, routerParameters[MGJRouterParameterUserInfo]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[MGJRouter openURL:<span class=\"string\">@\"mgj://foo/bar\"</span>];</span><br></pre></td></tr></table></figure>\n<p>笔者是在15年开始学习组件化，那个时候就是使用的蘑菇街的这种发案。不过笔者从来没有在实际项目中使用这种方案。casa 在<a href=\"https://casatwy.com/iOS-Modulization.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>中批判了这种方案。笔者对 case 的观点很是赞同。</p>\n<p>如果项目中需要很多组件的服务，那么就需要在内存中维护大量的 <code>url-block</code>项，造成内存问题，对于服务注册的代码应该放在什么地方也是一个问题。笔者一直认为 <code>url-block</code> 注册是一种很粗暴的方式，比如某个应用在启动时注册了100个服务，但某些服务在用户使用过程中根本就没有触发，这就造成了内存浪费。比如我们点击应用中的按钮跳转到某个页面，如果用户没有点击按钮，下个页面就永远不会创建，我们一般不会提前创建这个页面的。笔者更倾向于在需要服务的时候才进行服务对象的创建，在特定场景下也提供服务对象的缓存。</p>\n<p>使用 <code>url</code> 传参也是一个不可忽略的问题，对于一些基础数据类型，使用这种方案倒是没有问题，但是对于一些非常规对象就无能为力了，如 <code>UIImage</code>, <code>NSData</code> 等类型。</p>\n<p>还有一个问题是 casa 在文章中没有指出的，这个问题在他的 <code>target-action</code> 方案中也存在。下面用一个例子来说明一下。</p>\n<p>比如在一个组件 A 中提供了一个服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MGJRouter registerURLPattern:<span class=\"string\">@\"mgj://foo/bar\"</span> toHandler:^(<span class=\"built_in\">NSDictionary</span> *routerParameters) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"routerParameterUserInfo:%@\"</span>, routerParameters[MGJRouterParameterUserInfo]);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>然后在一个组件 B 中使用了服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MGJRouter openURL:<span class=\"string\">@\"mgj://foo/bar\"</span>];</span><br></pre></td></tr></table></figure>\n<p>从上面示例代码中可以看到，两个不同组件能通信其实是通过一个字符串来定义的。如果服务使用方在写代码时写错了一个字符，那么使用方根本就不可能调起正确的服务，一旦出现这个问题，在开发过程中很难被发现。如果我们对组件多，注册的服务多，那么在使用时就存在很大的沟通问题，提供方和接入方可能会在每个字符串所代表的意义上浪费大量的时间。而这些问题都可以在工程设计上避免的。虽说我们在写代码时要低耦合，但并不代表不要耦合，有时候需要一些耦合来提高代码的健壮性和可维护性。</p>\n<p>在 Swift 中可以使用枚举来解决上面的问题，我们可以像下面这样做：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">URLPatternCompatible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"type\">URLPattern</span>: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SomeService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> orderDetail</span><br><span class=\"line\">    <span class=\"keyword\">case</span> others</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SomeService</span>: <span class=\"title\">URLPatternCompatible</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"type\">URLPattern</span>: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .orderDetail:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"mgj://foo/bar/orderdetail\"</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .others:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"mgj://foo/bar/others\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 A (服务提供方)</span></span><br><span class=\"line\"><span class=\"type\">MGJRouter</span>.register(.orderDetail) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 B (服务使用方)</span></span><br><span class=\"line\"><span class=\"type\">MGJRouter</span>.<span class=\"keyword\">open</span>(.orderDetail)</span><br></pre></td></tr></table></figure>\n<p>SomeService 的定义可以放到一个专门的组件中，服务提供方和使用方都依赖这个专门的组件。我们这里不仅将字符串放到了一个统一的地方进行维护，而且还将一些在运行期才能发现的问题提前暴露到编译器。这里我们通过耦合来达到提高代码的健壮性和可维护性的目的。</p>\n<h4 id=\"Target-Action\"><a href=\"#Target-Action\" class=\"headerlink\" title=\"Target-Action\"></a>Target-Action</h4><p>Target-actin 是 casa 在批判蘑菇街的方案时提出的一种方案。它解决了 <code>url-block</code> 方案中内存问题、url 传参问题、没有区分本地调用和远程调用等问题。其核心就是使用了 NSObject 的 <code>- (id)performSelector:(SEL)aSelector withObject:(id)object;</code> 方法。</p>\n<p>在本地应用调用中，本地组件A在某处调用 <code>[[CTMediator sharedInstance] performTarget:targetName action:actionName params:@{...}]</code> 向 <code>CTMediator</code> 发起跨组件调用，<code>CTMediator</code> 根据获得的 target 和 action 信息，通过 objective-C 的 runtime 转化生成 target 实例以及对应的 action 选择子，然后最终调用到目标业务提供的逻辑，完成需求。</p>\n<p>casa 在文章中也给出了 demo，在具体的项目中，我们可以这样使用:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CTMediator+SomeAction.h</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)xx_someAction:(<span class=\"built_in\">NSDictionary</span> *)params;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CTMediator+SomeAction.m </span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)xx_someAction:(<span class=\"built_in\">NSDictionary</span> *)params &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> performTarget:<span class=\"string\">@\"A\"</span> action:<span class=\"string\">@\"someAction\"</span> params:params shouldCacheTarget:<span class=\"literal\">NO</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是提供给服务调用方的一个简洁的接口。其实就是对 CTMediator 方法的封装。我们一般将 CTMediator 的这个分类放到一个独立的组件中。调用方依赖这个独立的组件就可以了。</p>\n<p>在某个组件中调用服务：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件 A 中</span></span><br><span class=\"line\"><span class=\"built_in\">UIViewController</span> *vc = [<span class=\"built_in\">CTMediator</span> sharedInstance] xx_someAction:@&#123;<span class=\"string\">@\"key\"</span>: value&#125;];</span><br></pre></td></tr></table></figure>\n<p>针对上面服务的定义，服务提供方的定义就<em>必须</em>是下面这样：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TargetA.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Target_A</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)someAction:(<span class=\"built_in\">NSDictionary</span> *)params;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TargetA.m</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)someAction:(<span class=\"built_in\">NSDictionary</span> *)params &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>在这整个过程中可以看到，服务的调用方只需要依赖 CTMediator 这个中间件及其分类(定义服务)。服务提供方和调用方没有任何依赖。确实做到了组件解耦。可以肯定的是 target-action 方案确实解决了 url-block 方案的一些问题。但是仔细一看，也是存在一些问题的。</p>\n<p>跟 url-block 方案一样，两个不同组件能通信其实仍然是通过一个字符串来定义的。为什么这么说呢，我们可以看一下下面的代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CTMediator+SomeAction.m </span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)xx_someAction:(<span class=\"built_in\">NSDictionary</span> *)params &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> performTarget:<span class=\"string\">@\"A\"</span> action:<span class=\"string\">@\"someAction\"</span> params:params shouldCacheTarget:<span class=\"literal\">NO</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TargetA.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Target_A</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *)someAction:(<span class=\"built_in\">NSDictionary</span> *)params;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>从上面的代码中可以看到，服务能调起主要是调用了 CTMediator 的 </p>\n<p><code>- (id)performTarget:(NSString *)targetName action:(NSString *)actionName params:(NSDictionary *)params shouldCacheTarget:(BOOL)shouldCacheTarget;</code> 方法。这里不管是 <code>targetName</code> 还是 <code>action</code> 都是字符串，在实现中 CTMediator 会示例化一个 <code>Target_targetName</code> 类的对象，并且创建一个 <code>Action_actionName</code> 的 selector，所有我们在服务提供的组件中的 Target 以及 Action 是不能随便定义的。Target 必须是以 <code>Target_</code>开头，方法必须以 <code>Action_</code>开头。这种强制要求感觉不是一种工程师的思维。这里想去耦合，却以一种不是很正确的方式造成了隐式的耦合。这也是让我抛弃 CTMediator 转而去开发自己的组件化通信方案的原因之一。</p>\n<h4 id=\"Protocol-Class\"><a href=\"#Protocol-Class\" class=\"headerlink\" title=\"Protocol-Class\"></a>Protocol-Class</h4><p>Protocol-Class 方案也是常用的组件化通信方式之一。这里把它放到最后，肯定是因为笔者使用的是这种方案咯(笑)。</p>\n<p>Protocol-Class 方案就是通过 protocol 定义服务接口，服务提供方通过实现该接口来提供接口定义的服务。具体实现就是把 protocol 和 class 做一个映射，同时在内存中保存一张映射表，使用的时候，就通过 protocol 找到对应的 class 来获取需要的服务。这种方案的优缺点先不说，可以先看一下具体的实践：<br><strong>示例图：</strong><br><img src=\"protocol-class.jpg\" alt=\"protocol-class使用示例图\"><br><strong>示例代码：</strong><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestService.h (定义服务)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">TestService</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 测试</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)service1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 A (服务提供方)</span></span><br><span class=\"line\">ANT_REGISTER_SERVICE(TestServiceImpl, TestService)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TestServiceImpl</span>() &lt;<span class=\"title\">TestService</span>&gt; @<span class=\"title\">end</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestServiceImpl</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)service1 &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Service test from Impl\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件 B (服务使用方)</span></span><br><span class=\"line\"><span class=\"keyword\">id</span> &lt;TestService&gt; obj = [Ant serviceImplFromProtocol:<span class=\"class\"><span class=\"keyword\">@protocol</span>(<span class=\"title\">TestService</span>)];</span></span><br><span class=\"line\">[obj service1];</span><br></pre></td></tr></table></figure></p>\n<p>像上面的方案一样，我们会将服务的定义放到独立的组件中。这个组件仅仅只包含了服务的声明。不管是服务提供方还是服务使用方都依赖这个独立的组件，服务提供方还是服务使用方互不依赖。</p>\n<p>这里将系统提供的服务定义为协议，通过耦合提高了代码的健壮性和可维护性。这里定义服务的 protocol 对服务提供方做了一个限定：你可以提供哪些服务，同时也给服务使用方做了限定：你可以使用哪些服务。这种设计将系统有哪些服务都交代的清清楚楚，通过服务的 protocol 我们就知道了每个服务的功能，调用需要的参数，返回值等。这里的定义服务的同时也可以作为系统服务的接口文档，这节省了服务提供方和使用方很多的沟通时间，让其能关注业务的开发。这在大型项目，多团队开发中优势尤为明显。</p>\n<p>当然 protocol-class 这种方案缺点也很明显，需要在内存中保存 protocol 到 Class 的映射关系。但是我们可以通过将服务分类，让系统注册的 protocol-class 项尽量少一些，不要一个服务定义一个实现。对于一个有100个服务的系统，定义10个服务实现，每个实现提供10个服务，肯定要比100个服务实现占用的内存少很多。这就要求我们在实践过程中能对系统中的服务能做好划分。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是笔者对组件化的一些思考，很多观点可能也不太成熟，如果有什么不合理的地方，也欢迎各位同学提出建议。组件解耦在 iOS 中其实有多种解决方案，各位同学可以根据项目实际情况选择适合自己的方案。</p>\n<blockquote>\n<p>上面代码中的 <a href=\"https://github.com/hujewelz/Ant\" target=\"_blank\" rel=\"noopener\">Ant</a> 是笔者最近开发的一个负责组件生命周期管理和通信的开源工具。因为笔者公司从17年开始就一直使用 Swift 进行开发，原来的工具是用 Swift 编写的，使用了很多 Swift 的特性，在 OC 中使用就显得不伦不类了，就针对 OC 进行了重新设计，于是就有了 <a href=\"https://github.com/hujewelz/Ant\" target=\"_blank\" rel=\"noopener\">Ant</a> 。</p>\n</blockquote>"},{"title":"说说iOS多线程","date":"2016-07-17T06:36:05.000Z","_content":"线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.\n\n<!--excerpt-->\n\n\n\n在说多线程之前我们必须先弄懂两个概念：`进程` 和 `线程`\n\n##### 进程\n>进程(Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。\n\n简单来说，进程是指在系统中正在运行的一个应用程序，每一个程序都是一个进程，并且进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。\n\n##### 线程\n>线程是程序执行流的最小单元线程是程序中一个单一的顺序控制流程。是进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。\n\n1个进程要想执行任务必须得有线程。线程中任务的执行是串行的，一个线程中的任务只能一个一个地按顺序执行，也就是说在同一时间内，1个线程只能执行1个任务。\n\n线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.多线程主要是为了节约CPU时间,发挥利用,根据具体情况而定. 线程的运行中需要使用计算机的内存资源和CPU。\n#### 多线程\n>多线程（英语：multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。\n\n所谓多线程，就是在单个程序中同时运行多个线程完成不同的工作\n注意，多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。\n\n### GCD\n在说GCD之前我们得先弄懂4个比较容易混淆的术语：`同步`、`异步`、 `并发`、 `串行` \n同步和异步主要影响：能不能开启新的线程\n* `同步`：只是在当前线程中执行任务，不具备开启新线程的能力\n* `异步`：可以在新的线程中执行任务，具备开启新线程的能力\n并行和串行主要影响：任务的执行方式\n* `并发`：多个任务并发（同时）执行\n* `串行`：一个任务执行完毕后，再执行下一个任务\n\nGCD是最常用的管理并行代码和执行异步操作的Unix系统层的API。GCD构造和管理队列中的任务。首先，让我们看看队列是什么。\n#### 队列是什么？\n队列是按 `先进先出(FIFO)` 管理对象的数据结构。队列类似电影院的售票窗口，票的销售是谁先到谁先服务。在等待线前面的人先去买他们的门票，在其余的后抵达的人之前。\n#### 调度队列\n调度队列是一种简单的同步和异步任务的方法。任务以 `block` 的形式被提交到其中。系统有两种调度队列: `串行队列` 和 `并行队列` 。任务分配给这两个队列都是在单独的线程执行的，而不是在创建任务的线程上。换句话说，你创建任务(block)再提交到主线程的调度队列，但所有这些任务任务将运行在单独的线程而不是主线程。\n#### 串行队列\n当你创建一个串行队列，队列一次只能执行一个任务。同一队列中的任务将按着顺序依次执行，然而它们并不关心任务是不是在单独的线程，所以你可以通过使用多个串行队列来并行地执行任务。例如，你可以创建两个串行队列，每个队列一次只执行一个任务，不过多达两个任务仍可并行执行。\n使用串行队列的优点：\n1. 保证序列化访问共享资源，避免竞争条件。\n2. 任务的执行顺序是可预测的。当你提交任务到一个串行调度队列，它们将按插入的顺序执行。\n3. 你可以创建任意数量的串行队列。\n\n#### 并行队列\n并行队列可以并行执行多个任务。任务按添加到队列的顺序开始，但它们的执行会同时发生，不会相互等待。并行队列保证任务开始的顺序，但你不知道执行的顺序。\n\n#### 使用队列\n默认情况下，系统为每个应用提供了一个串行队列和四个并行队列。主调度队列是全局可用的串行队列，它在应用的主线程执行任务，主要用来更新UI,同时只有一个任务执行。\n除了主队列，系统提供了4个并行队列，称之为全局调度队列。这些队列对于应用是全局的，区别只在于它们的优先级。使用`dispatch_get_global_queue`可以获取到一个全局队列，它有以下四个优先级：\n\n* `DISPATCH_QUEUE_PRIORITY_HIGH`\n* `DISPATCH_QUEUE_PRIORITY_DEFAULT`\n* `DISPATCH_QUEUE_PRIORITY_LOW`\n* `DISPATCH_QUEUE_PRIORITY_BACKGROUND`\n\n以上优先级由高到低，所有你可以根据任务的优先级决定你使用的队列。不过，你也可以创建任意数量的串行或并行队列。\n\n#### 任务\n即操作，你想要干什么，说白了就是一段代码，在 GCD 中就是一个 `Block`，所以添加任务十分方便。任务有两种执行方式： `同步执行` 和 `异步执行`，他们之间的区别是在于会不会阻塞当前线程，直到 `Block` 中的任务执行完毕！\n\n下面举几个栗子：\n```\nfunc GCD1() {\n    print(\"task 1\");\n    dispatch_sync(dispatch_get_main_queue()) { //会阻塞当前线程，task 2不会执行\n       print(\"task 2\")\n    }\n}\n```\n运行会发现控制台打印出`task 1`，因为主线程被阻塞了，task2不会执行。\n\n```\nfunc GCD2() {\n    print(\"task 1\");\n    \n    let queue = dispatch_queue_create(\"come.jewelez.serial\", DISPATCH_QUEUE_SERIAL);\n    dispatch_async(queue) {\n        print(\"task 2 \\(NSThread.currentThread())\")\n        dispatch_sync(queue, { () -> Void in  //会阻塞当前线程，task 3不会执行\n            print(\"task 3 \\(NSThread.currentThread())\")\n        })\n        print(\"task 4 \\(NSThread.currentThread())\")\n    }\n    print(\"task 5\")\n}\n```\n在这个例子中，你会发现控制台只会打印`task1, task5, task2`, 而`task3`和`task4`不会执行。首先我们创建了一个串行队列，然后以异步的方式提交了任务，所以`task2`可以执行，在任务中又以同步的方式向队列中提交了一个新的任务，由于是同步方式所以会阻塞当前线程，`task3`不会执行，因为是串行队列，当前线程又线程阻塞了，所以`task4`也不会执行。\n\n```\nfunc GCD3() {\n    print(\"task 1\")\n    \n    let queue = dispatch_queue_create(\"come.jewelez.serial\", DISPATCH_QUEUE_SERIAL);\n    dispatch_async(queue) {\n        print(\"task 2 \\(NSThread.currentThread())\")\n        \n        dispatch_sync(dispatch_get_main_queue(), { () -> Void in  //异步遇到同步回主线程, task 3执行完后才会执行task 4\n            print(\"task 3 \\(NSThread.currentThread())\")\n        })\n        \n         print(\"task 4 \\(NSThread.currentThread())\")\n    }\n    \n    print(\"task 5 \\(NSThread.currentThread())\")\n}\n```\n这个就很容易理解了，不过要注意的一点是异步遇到同步回主线程, `task 3`执行完后才会执行`task 4`，控制台打印如下:\n```\ntask 1\ntask 2 <NSThread: 0x7fe290e05d30>{number = 2, name = (null)}\ntask 5 <NSThread: 0x7fe290c045b0>{number = 1, name = main}\ntask 3 <NSThread: 0x7fe290c045b0>{number = 1, name = main}\ntask 4 <NSThread: 0x7fe290e05d30>{number = 2, name = (null)}\n```\n来看最后一个例子：\n```\nfunc GCD4() {\n    print(\"task 1\")\n    \n    let queue = dispatch_queue_create(\"come.jewelez.serial\", DISPATCH_QUEUE_SERIAL)\n    dispatch_async(queue) {\n        print(\"task 2 \\(NSThread.currentThread())\")\n        \n        dispatch_async(dispatch_get_main_queue(), { () -> Void in\n           \n            for i in 0..<1000 {\n                print(\"i: \\(i)\")\n            }\n            \n            print(\"task 3 \\(NSThread.currentThread())\")\n        })\n        \n        print(\"task 4 \\(NSThread.currentThread())\")\n    }\n    print(\"task 5 \\(NSThread.currentThread())\")\n}\n```\n这个例子与上个不同在于，主线程中的任务也是以异步的方式执行的，所以`task 4`不用等到`task 3`执行完才执行。\n\n#### dispatch_group\ndispatch_group是用于监视一任务（Block）的机制。例如，当我们向一个队列里添加了多个任务，当队列中的所有任务执行完成后，我们需要做某种操作，这个时候就可以使用`dispatch_group`：\n```\ndispatch_queue_t queue = dispatch_queue_create(\"com.hujewelz.test\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n  \n__block NSString *result1 = nil, *result2 = nil;\ndispatch_group_async(group, queue, ^{\n    NSLog(@\"任务1\");\n    result1 = @\"result 1\";\n});\n  \ndispatch_group_async(group, queue, ^{\n    NSLog(@\"任务2\");\n    result2 = @\"result 2\";\n});\n  \ndispatch_group_notify(group, queue, ^{\n    NSLog(@\"notify--result: %@-%@\", result1, result2);\n});\n```\n运行结果：\n```\n2016-07-17 17:27:32.536 多线程[16626:593137] 任务1\n2016-07-17 17:27:32.536 多线程[16626:593139] 任务2\n2016-07-17 17:27:32.537 多线程[16626:593139] notify--result: result 1-result 2\n```\n\n### NSOperationQueue\nNSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。\n```\nNSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  //主队列\nNSOperationQueue *queue = [[NSOperationQueue alloc] init]; //自定义队列\nNSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{\n                //任务执行\n            }];\n[queue addOperation:operation];\n```\n我们可以通过设置 maxConcurrentOperationCount 属性来控制并发任务的数量，当设置为 1 时， 那么它就是一个串行队列。主对列默认是串行队列，这一点和 dispatch_queue_t 是相似的。\n\n### NSOperation\n你可以使用系统提供的一些现成的 NSOperation 的子类， 如 `NSBlockOperation`、 `NSInvocationOperation`。\n\n#### NSInvocationOperation\nNSOperation的子类NSInvocationOperation为我们提供了一套简单的多线程编程方法：\n```\n  NSInvocationOperation *invo = [[NSInvocationOperation alloc]initWithTarget:self\n                                                                     selector:@selector(handleInvocation)\n                                                                       object:nil];\n  [invo start];\n```\n调用 `start`方法，就会马上执行封装好的操作，也就是会调用`self`的`handleInvocation`方法.\n> 注意：默认情况下，调用了start方法后并不会开一条新线程去执行操作，而是在当前线程同步执行操作。只有将operation放到一个NSOperationQueue中，才会异步执行操作。\n\n#### NSBlockOperation\n##### 1. 同步执行一个操作\n```\nNSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^{\n    NSLog(@\"执行一个新操作: %@\", [NSThread currentThread]);\n}];\n[blckOp start];\n```\n输出结果为：\n```\n执行一个新操作: <NSThread: 0x60800007a940>{number = 1, name = main}\n```\n从结果可以看出，初始化一个NSBlockOperation对象后，调用`start`方法，\n发现还是在当前线程同步执行操作，并没有异步执行。\n##### 2. 并发执行多个操作\n```\nNSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^{\n    NSLog(@\"执行一个新操作: %@\", [NSThread currentThread]);\n}];\n\n[blckOp addExecutionBlock:^{\n    NSLog(@\"又执行一个新操作 1: %@\", [NSThread currentThread]);\n}];\n  \n[blckOp addExecutionBlock:^{\n    NSLog(@\"又执行一个新操作 2: %@\", [NSThread currentThread]);\n}];\n  \n[blckOp addExecutionBlock:^{\n    NSLog(@\"又执行一个新操作 3: %@\", [NSThread currentThread]);\n}];\n\n[blckOp start];\n```\n输出结果为：\n```\n又执行一个新操作 1: <NSThread: 0x608000079280>{number = 3, name = (null)}\n执行一个新操作: <NSThread: 0x60000007c540>{number = 1, name = main}\n又执行一个新操作 2: <NSThread: 0x60800007eac0>{number = 4, name = (null)}\n又执行一个新操作 3: <NSThread: 0x60800007ecc0>{number = 5, name = (null)}\n```\n从结果可以看出，当我们通过 `addExecutionBlock:` 方法添加了新的操作后，就会并发地执行这些操作，也就是会在不同线程中执行。\n> 结论：只要NSBlockOperation封装的操作数 > 1，就会异步执行操作。\n\n#### 创建自己的Operation\n你也可以实现自己的子类， 通过重写 `main` 或者 `start` 方法 来定义自己的 operation 。\n使用 `main` 方法非常简单，开发者不需要管理一些状态属性（例如 `isExecuting` 和 `isFinished`），当 `main` 方法返回的时候，这个 operation 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 `start` 来说要少一些， 因为`main`方法执行完就认为operation结束了，所以一般可以用来执行同步任务。\n如果你希望拥有更多的控制权，或者想在一个操作中可以执行异步任务，那么就重写 `start` 方法, 但是注意：这种情况下，你必须手动管理操作的状态， 只有当发送 `isFinished` 的 KVO 消息时，才认为是 operation 结束.\n```\n@implementation YourOperation\n- (void)start\n{\n  self.isExecuting = YES;\n    // 任务代码 ...\n}\n- (void)finish //异步回调\n{\n  self.isExecuting = NO;\n  self.isFinished = YES;\n}\n@end\n```\n当实现了 `start` 方法时，默认会执行 `start` 方法，而不执行 `main` 方法\n为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 `setter` 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。\n需要手动管理的状态有：\n* `isExecuting` 代表任务正在执行中\n* `isFinished` 代表任务已经执行完成\n* `isCancelled` 代表任务已经取消执行\n\n手动的发送 KVO 消息， 通知状态更改如下 ：\n```\n[self willChangeValueForKey:@\"isCancelled\"];\n_isCancelled = YES;\n[self didChangeValueForKey:@\"isCancelled\"];\n```\n为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 `isCancelled ` 属性。\n```\n- (void)main {\n    // 新建一个自动释放池，如果是异步执行操作，那么将无法访问到主线程的自动释放池\n    @autoreleasepool {\n        // 如果已经取消，释放资源，并返回\n        if (self.isCancelled) {\n            [self reset];\n            return;\n        }\n        \n        NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];\n        self.session = [NSURLSession sessionWithConfiguration:configuration];\n        \n        NSURLRequest *repuest = [NSURLRequest requestWithURL:_url];\n        __weak __typeof(self) wself = self;\n        NSURLSessionDataTask *task = [_session dataTaskWithRequest:repuest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n            __strong __typeof(self) sself = wself;\n            if (!sself.completedBlock) {\n                return ;\n            }\n            if (data == nil) {\n                sself.completedBlock(nil, nil, error);\n                return ;\n            }\n            // 如果已经取消，释放资源，并返回\n            if (sself.isCancelled) {\n                [sself reset];\n                return;\n            }\n            \n            UIImage *image = [UIImage hu_imageFromData:data];\n            [[NSOperationQueue mainQueue] addOperationWithBlock:^{\n                sself.completedBlock(image, data, nil);\n            }];   \n        }];\n        [task resume];\n    }\n}\n\n```\n\n\n","source":"_posts/说说iOS多线程.md","raw":"---\ntitle: 说说iOS多线程\ndate: 2016-07-17 14:36:05\ntags: iOS\ncategory: iOS\n---\n线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.\n\n<!--excerpt-->\n\n\n\n在说多线程之前我们必须先弄懂两个概念：`进程` 和 `线程`\n\n##### 进程\n>进程(Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。\n\n简单来说，进程是指在系统中正在运行的一个应用程序，每一个程序都是一个进程，并且进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。\n\n##### 线程\n>线程是程序执行流的最小单元线程是程序中一个单一的顺序控制流程。是进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。\n\n1个进程要想执行任务必须得有线程。线程中任务的执行是串行的，一个线程中的任务只能一个一个地按顺序执行，也就是说在同一时间内，1个线程只能执行1个任务。\n\n线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.多线程主要是为了节约CPU时间,发挥利用,根据具体情况而定. 线程的运行中需要使用计算机的内存资源和CPU。\n#### 多线程\n>多线程（英语：multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。\n\n所谓多线程，就是在单个程序中同时运行多个线程完成不同的工作\n注意，多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。\n\n### GCD\n在说GCD之前我们得先弄懂4个比较容易混淆的术语：`同步`、`异步`、 `并发`、 `串行` \n同步和异步主要影响：能不能开启新的线程\n* `同步`：只是在当前线程中执行任务，不具备开启新线程的能力\n* `异步`：可以在新的线程中执行任务，具备开启新线程的能力\n并行和串行主要影响：任务的执行方式\n* `并发`：多个任务并发（同时）执行\n* `串行`：一个任务执行完毕后，再执行下一个任务\n\nGCD是最常用的管理并行代码和执行异步操作的Unix系统层的API。GCD构造和管理队列中的任务。首先，让我们看看队列是什么。\n#### 队列是什么？\n队列是按 `先进先出(FIFO)` 管理对象的数据结构。队列类似电影院的售票窗口，票的销售是谁先到谁先服务。在等待线前面的人先去买他们的门票，在其余的后抵达的人之前。\n#### 调度队列\n调度队列是一种简单的同步和异步任务的方法。任务以 `block` 的形式被提交到其中。系统有两种调度队列: `串行队列` 和 `并行队列` 。任务分配给这两个队列都是在单独的线程执行的，而不是在创建任务的线程上。换句话说，你创建任务(block)再提交到主线程的调度队列，但所有这些任务任务将运行在单独的线程而不是主线程。\n#### 串行队列\n当你创建一个串行队列，队列一次只能执行一个任务。同一队列中的任务将按着顺序依次执行，然而它们并不关心任务是不是在单独的线程，所以你可以通过使用多个串行队列来并行地执行任务。例如，你可以创建两个串行队列，每个队列一次只执行一个任务，不过多达两个任务仍可并行执行。\n使用串行队列的优点：\n1. 保证序列化访问共享资源，避免竞争条件。\n2. 任务的执行顺序是可预测的。当你提交任务到一个串行调度队列，它们将按插入的顺序执行。\n3. 你可以创建任意数量的串行队列。\n\n#### 并行队列\n并行队列可以并行执行多个任务。任务按添加到队列的顺序开始，但它们的执行会同时发生，不会相互等待。并行队列保证任务开始的顺序，但你不知道执行的顺序。\n\n#### 使用队列\n默认情况下，系统为每个应用提供了一个串行队列和四个并行队列。主调度队列是全局可用的串行队列，它在应用的主线程执行任务，主要用来更新UI,同时只有一个任务执行。\n除了主队列，系统提供了4个并行队列，称之为全局调度队列。这些队列对于应用是全局的，区别只在于它们的优先级。使用`dispatch_get_global_queue`可以获取到一个全局队列，它有以下四个优先级：\n\n* `DISPATCH_QUEUE_PRIORITY_HIGH`\n* `DISPATCH_QUEUE_PRIORITY_DEFAULT`\n* `DISPATCH_QUEUE_PRIORITY_LOW`\n* `DISPATCH_QUEUE_PRIORITY_BACKGROUND`\n\n以上优先级由高到低，所有你可以根据任务的优先级决定你使用的队列。不过，你也可以创建任意数量的串行或并行队列。\n\n#### 任务\n即操作，你想要干什么，说白了就是一段代码，在 GCD 中就是一个 `Block`，所以添加任务十分方便。任务有两种执行方式： `同步执行` 和 `异步执行`，他们之间的区别是在于会不会阻塞当前线程，直到 `Block` 中的任务执行完毕！\n\n下面举几个栗子：\n```\nfunc GCD1() {\n    print(\"task 1\");\n    dispatch_sync(dispatch_get_main_queue()) { //会阻塞当前线程，task 2不会执行\n       print(\"task 2\")\n    }\n}\n```\n运行会发现控制台打印出`task 1`，因为主线程被阻塞了，task2不会执行。\n\n```\nfunc GCD2() {\n    print(\"task 1\");\n    \n    let queue = dispatch_queue_create(\"come.jewelez.serial\", DISPATCH_QUEUE_SERIAL);\n    dispatch_async(queue) {\n        print(\"task 2 \\(NSThread.currentThread())\")\n        dispatch_sync(queue, { () -> Void in  //会阻塞当前线程，task 3不会执行\n            print(\"task 3 \\(NSThread.currentThread())\")\n        })\n        print(\"task 4 \\(NSThread.currentThread())\")\n    }\n    print(\"task 5\")\n}\n```\n在这个例子中，你会发现控制台只会打印`task1, task5, task2`, 而`task3`和`task4`不会执行。首先我们创建了一个串行队列，然后以异步的方式提交了任务，所以`task2`可以执行，在任务中又以同步的方式向队列中提交了一个新的任务，由于是同步方式所以会阻塞当前线程，`task3`不会执行，因为是串行队列，当前线程又线程阻塞了，所以`task4`也不会执行。\n\n```\nfunc GCD3() {\n    print(\"task 1\")\n    \n    let queue = dispatch_queue_create(\"come.jewelez.serial\", DISPATCH_QUEUE_SERIAL);\n    dispatch_async(queue) {\n        print(\"task 2 \\(NSThread.currentThread())\")\n        \n        dispatch_sync(dispatch_get_main_queue(), { () -> Void in  //异步遇到同步回主线程, task 3执行完后才会执行task 4\n            print(\"task 3 \\(NSThread.currentThread())\")\n        })\n        \n         print(\"task 4 \\(NSThread.currentThread())\")\n    }\n    \n    print(\"task 5 \\(NSThread.currentThread())\")\n}\n```\n这个就很容易理解了，不过要注意的一点是异步遇到同步回主线程, `task 3`执行完后才会执行`task 4`，控制台打印如下:\n```\ntask 1\ntask 2 <NSThread: 0x7fe290e05d30>{number = 2, name = (null)}\ntask 5 <NSThread: 0x7fe290c045b0>{number = 1, name = main}\ntask 3 <NSThread: 0x7fe290c045b0>{number = 1, name = main}\ntask 4 <NSThread: 0x7fe290e05d30>{number = 2, name = (null)}\n```\n来看最后一个例子：\n```\nfunc GCD4() {\n    print(\"task 1\")\n    \n    let queue = dispatch_queue_create(\"come.jewelez.serial\", DISPATCH_QUEUE_SERIAL)\n    dispatch_async(queue) {\n        print(\"task 2 \\(NSThread.currentThread())\")\n        \n        dispatch_async(dispatch_get_main_queue(), { () -> Void in\n           \n            for i in 0..<1000 {\n                print(\"i: \\(i)\")\n            }\n            \n            print(\"task 3 \\(NSThread.currentThread())\")\n        })\n        \n        print(\"task 4 \\(NSThread.currentThread())\")\n    }\n    print(\"task 5 \\(NSThread.currentThread())\")\n}\n```\n这个例子与上个不同在于，主线程中的任务也是以异步的方式执行的，所以`task 4`不用等到`task 3`执行完才执行。\n\n#### dispatch_group\ndispatch_group是用于监视一任务（Block）的机制。例如，当我们向一个队列里添加了多个任务，当队列中的所有任务执行完成后，我们需要做某种操作，这个时候就可以使用`dispatch_group`：\n```\ndispatch_queue_t queue = dispatch_queue_create(\"com.hujewelz.test\", DISPATCH_QUEUE_CONCURRENT);\ndispatch_group_t group = dispatch_group_create();\n  \n__block NSString *result1 = nil, *result2 = nil;\ndispatch_group_async(group, queue, ^{\n    NSLog(@\"任务1\");\n    result1 = @\"result 1\";\n});\n  \ndispatch_group_async(group, queue, ^{\n    NSLog(@\"任务2\");\n    result2 = @\"result 2\";\n});\n  \ndispatch_group_notify(group, queue, ^{\n    NSLog(@\"notify--result: %@-%@\", result1, result2);\n});\n```\n运行结果：\n```\n2016-07-17 17:27:32.536 多线程[16626:593137] 任务1\n2016-07-17 17:27:32.536 多线程[16626:593139] 任务2\n2016-07-17 17:27:32.537 多线程[16626:593139] notify--result: result 1-result 2\n```\n\n### NSOperationQueue\nNSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。\n```\nNSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  //主队列\nNSOperationQueue *queue = [[NSOperationQueue alloc] init]; //自定义队列\nNSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{\n                //任务执行\n            }];\n[queue addOperation:operation];\n```\n我们可以通过设置 maxConcurrentOperationCount 属性来控制并发任务的数量，当设置为 1 时， 那么它就是一个串行队列。主对列默认是串行队列，这一点和 dispatch_queue_t 是相似的。\n\n### NSOperation\n你可以使用系统提供的一些现成的 NSOperation 的子类， 如 `NSBlockOperation`、 `NSInvocationOperation`。\n\n#### NSInvocationOperation\nNSOperation的子类NSInvocationOperation为我们提供了一套简单的多线程编程方法：\n```\n  NSInvocationOperation *invo = [[NSInvocationOperation alloc]initWithTarget:self\n                                                                     selector:@selector(handleInvocation)\n                                                                       object:nil];\n  [invo start];\n```\n调用 `start`方法，就会马上执行封装好的操作，也就是会调用`self`的`handleInvocation`方法.\n> 注意：默认情况下，调用了start方法后并不会开一条新线程去执行操作，而是在当前线程同步执行操作。只有将operation放到一个NSOperationQueue中，才会异步执行操作。\n\n#### NSBlockOperation\n##### 1. 同步执行一个操作\n```\nNSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^{\n    NSLog(@\"执行一个新操作: %@\", [NSThread currentThread]);\n}];\n[blckOp start];\n```\n输出结果为：\n```\n执行一个新操作: <NSThread: 0x60800007a940>{number = 1, name = main}\n```\n从结果可以看出，初始化一个NSBlockOperation对象后，调用`start`方法，\n发现还是在当前线程同步执行操作，并没有异步执行。\n##### 2. 并发执行多个操作\n```\nNSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^{\n    NSLog(@\"执行一个新操作: %@\", [NSThread currentThread]);\n}];\n\n[blckOp addExecutionBlock:^{\n    NSLog(@\"又执行一个新操作 1: %@\", [NSThread currentThread]);\n}];\n  \n[blckOp addExecutionBlock:^{\n    NSLog(@\"又执行一个新操作 2: %@\", [NSThread currentThread]);\n}];\n  \n[blckOp addExecutionBlock:^{\n    NSLog(@\"又执行一个新操作 3: %@\", [NSThread currentThread]);\n}];\n\n[blckOp start];\n```\n输出结果为：\n```\n又执行一个新操作 1: <NSThread: 0x608000079280>{number = 3, name = (null)}\n执行一个新操作: <NSThread: 0x60000007c540>{number = 1, name = main}\n又执行一个新操作 2: <NSThread: 0x60800007eac0>{number = 4, name = (null)}\n又执行一个新操作 3: <NSThread: 0x60800007ecc0>{number = 5, name = (null)}\n```\n从结果可以看出，当我们通过 `addExecutionBlock:` 方法添加了新的操作后，就会并发地执行这些操作，也就是会在不同线程中执行。\n> 结论：只要NSBlockOperation封装的操作数 > 1，就会异步执行操作。\n\n#### 创建自己的Operation\n你也可以实现自己的子类， 通过重写 `main` 或者 `start` 方法 来定义自己的 operation 。\n使用 `main` 方法非常简单，开发者不需要管理一些状态属性（例如 `isExecuting` 和 `isFinished`），当 `main` 方法返回的时候，这个 operation 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 `start` 来说要少一些， 因为`main`方法执行完就认为operation结束了，所以一般可以用来执行同步任务。\n如果你希望拥有更多的控制权，或者想在一个操作中可以执行异步任务，那么就重写 `start` 方法, 但是注意：这种情况下，你必须手动管理操作的状态， 只有当发送 `isFinished` 的 KVO 消息时，才认为是 operation 结束.\n```\n@implementation YourOperation\n- (void)start\n{\n  self.isExecuting = YES;\n    // 任务代码 ...\n}\n- (void)finish //异步回调\n{\n  self.isExecuting = NO;\n  self.isFinished = YES;\n}\n@end\n```\n当实现了 `start` 方法时，默认会执行 `start` 方法，而不执行 `main` 方法\n为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 `setter` 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。\n需要手动管理的状态有：\n* `isExecuting` 代表任务正在执行中\n* `isFinished` 代表任务已经执行完成\n* `isCancelled` 代表任务已经取消执行\n\n手动的发送 KVO 消息， 通知状态更改如下 ：\n```\n[self willChangeValueForKey:@\"isCancelled\"];\n_isCancelled = YES;\n[self didChangeValueForKey:@\"isCancelled\"];\n```\n为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 `isCancelled ` 属性。\n```\n- (void)main {\n    // 新建一个自动释放池，如果是异步执行操作，那么将无法访问到主线程的自动释放池\n    @autoreleasepool {\n        // 如果已经取消，释放资源，并返回\n        if (self.isCancelled) {\n            [self reset];\n            return;\n        }\n        \n        NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];\n        self.session = [NSURLSession sessionWithConfiguration:configuration];\n        \n        NSURLRequest *repuest = [NSURLRequest requestWithURL:_url];\n        __weak __typeof(self) wself = self;\n        NSURLSessionDataTask *task = [_session dataTaskWithRequest:repuest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n            __strong __typeof(self) sself = wself;\n            if (!sself.completedBlock) {\n                return ;\n            }\n            if (data == nil) {\n                sself.completedBlock(nil, nil, error);\n                return ;\n            }\n            // 如果已经取消，释放资源，并返回\n            if (sself.isCancelled) {\n                [sself reset];\n                return;\n            }\n            \n            UIImage *image = [UIImage hu_imageFromData:data];\n            [[NSOperationQueue mainQueue] addOperationWithBlock:^{\n                sself.completedBlock(image, data, nil);\n            }];   \n        }];\n        [task resume];\n    }\n}\n\n```\n\n\n","slug":"说说iOS多线程","published":1,"updated":"2018-05-27T00:09:00.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zila002e1u0ojqxver1i","content":"<!--excerpt-->\n<p>在说多线程之前我们必须先弄懂两个概念：<code>进程</code> 和 <code>线程</code></p>\n<h5 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h5><blockquote>\n<p>进程(Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p>\n</blockquote>\n<p>简单来说，进程是指在系统中正在运行的一个应用程序，每一个程序都是一个进程，并且进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。</p>\n<h5 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h5><blockquote>\n<p>线程是程序执行流的最小单元线程是程序中一个单一的顺序控制流程。是进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。</p>\n</blockquote>\n<p>1个进程要想执行任务必须得有线程。线程中任务的执行是串行的，一个线程中的任务只能一个一个地按顺序执行，也就是说在同一时间内，1个线程只能执行1个任务。</p>\n<p>线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.多线程主要是为了节约CPU时间,发挥利用,根据具体情况而定. 线程的运行中需要使用计算机的内存资源和CPU。</p>\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><blockquote>\n<p>多线程（英语：multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。</p>\n</blockquote>\n<p>所谓多线程，就是在单个程序中同时运行多个线程完成不同的工作<br>注意，多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p>\n<h3 id=\"GCD\"><a href=\"#GCD\" class=\"headerlink\" title=\"GCD\"></a>GCD</h3><p>在说GCD之前我们得先弄懂4个比较容易混淆的术语：<code>同步</code>、<code>异步</code>、 <code>并发</code>、 <code>串行</code><br>同步和异步主要影响：能不能开启新的线程</p>\n<ul>\n<li><code>同步</code>：只是在当前线程中执行任务，不具备开启新线程的能力</li>\n<li><code>异步</code>：可以在新的线程中执行任务，具备开启新线程的能力<br>并行和串行主要影响：任务的执行方式</li>\n<li><code>并发</code>：多个任务并发（同时）执行</li>\n<li><code>串行</code>：一个任务执行完毕后，再执行下一个任务</li>\n</ul>\n<p>GCD是最常用的管理并行代码和执行异步操作的Unix系统层的API。GCD构造和管理队列中的任务。首先，让我们看看队列是什么。</p>\n<h4 id=\"队列是什么？\"><a href=\"#队列是什么？\" class=\"headerlink\" title=\"队列是什么？\"></a>队列是什么？</h4><p>队列是按 <code>先进先出(FIFO)</code> 管理对象的数据结构。队列类似电影院的售票窗口，票的销售是谁先到谁先服务。在等待线前面的人先去买他们的门票，在其余的后抵达的人之前。</p>\n<h4 id=\"调度队列\"><a href=\"#调度队列\" class=\"headerlink\" title=\"调度队列\"></a>调度队列</h4><p>调度队列是一种简单的同步和异步任务的方法。任务以 <code>block</code> 的形式被提交到其中。系统有两种调度队列: <code>串行队列</code> 和 <code>并行队列</code> 。任务分配给这两个队列都是在单独的线程执行的，而不是在创建任务的线程上。换句话说，你创建任务(block)再提交到主线程的调度队列，但所有这些任务任务将运行在单独的线程而不是主线程。</p>\n<h4 id=\"串行队列\"><a href=\"#串行队列\" class=\"headerlink\" title=\"串行队列\"></a>串行队列</h4><p>当你创建一个串行队列，队列一次只能执行一个任务。同一队列中的任务将按着顺序依次执行，然而它们并不关心任务是不是在单独的线程，所以你可以通过使用多个串行队列来并行地执行任务。例如，你可以创建两个串行队列，每个队列一次只执行一个任务，不过多达两个任务仍可并行执行。<br>使用串行队列的优点：</p>\n<ol>\n<li>保证序列化访问共享资源，避免竞争条件。</li>\n<li>任务的执行顺序是可预测的。当你提交任务到一个串行调度队列，它们将按插入的顺序执行。</li>\n<li>你可以创建任意数量的串行队列。</li>\n</ol>\n<h4 id=\"并行队列\"><a href=\"#并行队列\" class=\"headerlink\" title=\"并行队列\"></a>并行队列</h4><p>并行队列可以并行执行多个任务。任务按添加到队列的顺序开始，但它们的执行会同时发生，不会相互等待。并行队列保证任务开始的顺序，但你不知道执行的顺序。</p>\n<h4 id=\"使用队列\"><a href=\"#使用队列\" class=\"headerlink\" title=\"使用队列\"></a>使用队列</h4><p>默认情况下，系统为每个应用提供了一个串行队列和四个并行队列。主调度队列是全局可用的串行队列，它在应用的主线程执行任务，主要用来更新UI,同时只有一个任务执行。<br>除了主队列，系统提供了4个并行队列，称之为全局调度队列。这些队列对于应用是全局的，区别只在于它们的优先级。使用<code>dispatch_get_global_queue</code>可以获取到一个全局队列，它有以下四个优先级：</p>\n<ul>\n<li><code>DISPATCH_QUEUE_PRIORITY_HIGH</code></li>\n<li><code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code></li>\n<li><code>DISPATCH_QUEUE_PRIORITY_LOW</code></li>\n<li><code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code></li>\n</ul>\n<p>以上优先级由高到低，所有你可以根据任务的优先级决定你使用的队列。不过，你也可以创建任意数量的串行或并行队列。</p>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><p>即操作，你想要干什么，说白了就是一段代码，在 GCD 中就是一个 <code>Block</code>，所以添加任务十分方便。任务有两种执行方式： <code>同步执行</code> 和 <code>异步执行</code>，他们之间的区别是在于会不会阻塞当前线程，直到 <code>Block</code> 中的任务执行完毕！</p>\n<p>下面举几个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD1() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;);</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue()) &#123; //会阻塞当前线程，task 2不会执行</span><br><span class=\"line\">       print(&quot;task 2&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行会发现控制台打印出<code>task 1</code>，因为主线程被阻塞了，task2不会执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD2() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    let queue = dispatch_queue_create(&quot;come.jewelez.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        print(&quot;task 2 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        dispatch_sync(queue, &#123; () -&gt; Void in  //会阻塞当前线程，task 3不会执行</span><br><span class=\"line\">            print(&quot;task 3 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(&quot;task 4 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(&quot;task 5&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，你会发现控制台只会打印<code>task1, task5, task2</code>, 而<code>task3</code>和<code>task4</code>不会执行。首先我们创建了一个串行队列，然后以异步的方式提交了任务，所以<code>task2</code>可以执行，在任务中又以同步的方式向队列中提交了一个新的任务，由于是同步方式所以会阻塞当前线程，<code>task3</code>不会执行，因为是串行队列，当前线程又线程阻塞了，所以<code>task4</code>也不会执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD3() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let queue = dispatch_queue_create(&quot;come.jewelez.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        print(&quot;task 2 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        dispatch_sync(dispatch_get_main_queue(), &#123; () -&gt; Void in  //异步遇到同步回主线程, task 3执行完后才会执行task 4</span><br><span class=\"line\">            print(&quot;task 3 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">         print(&quot;task 4 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(&quot;task 5 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个就很容易理解了，不过要注意的一点是异步遇到同步回主线程, <code>task 3</code>执行完后才会执行<code>task 4</code>，控制台打印如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task 1</span><br><span class=\"line\">task 2 &lt;NSThread: 0x7fe290e05d30&gt;&#123;number = 2, name = (null)&#125;</span><br><span class=\"line\">task 5 &lt;NSThread: 0x7fe290c045b0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">task 3 &lt;NSThread: 0x7fe290c045b0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">task 4 &lt;NSThread: 0x7fe290e05d30&gt;&#123;number = 2, name = (null)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来看最后一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD4() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let queue = dispatch_queue_create(&quot;come.jewelez.serial&quot;, DISPATCH_QUEUE_SERIAL)</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        print(&quot;task 2 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; Void in</span><br><span class=\"line\">           </span><br><span class=\"line\">            for i in 0..&lt;1000 &#123;</span><br><span class=\"line\">                print(&quot;i: \\(i)&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            print(&quot;task 3 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        print(&quot;task 4 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(&quot;task 5 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子与上个不同在于，主线程中的任务也是以异步的方式执行的，所以<code>task 4</code>不用等到<code>task 3</code>执行完才执行。</p>\n<h4 id=\"dispatch-group\"><a href=\"#dispatch-group\" class=\"headerlink\" title=\"dispatch_group\"></a>dispatch_group</h4><p>dispatch_group是用于监视一任务（Block）的机制。例如，当我们向一个队列里添加了多个任务，当队列中的所有任务执行完成后，我们需要做某种操作，这个时候就可以使用<code>dispatch_group</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;com.hujewelz.test&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\">  </span><br><span class=\"line\">__block NSString *result1 = nil, *result2 = nil;</span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;任务1&quot;);</span><br><span class=\"line\">    result1 = @&quot;result 1&quot;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;任务2&quot;);</span><br><span class=\"line\">    result2 = @&quot;result 2&quot;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">dispatch_group_notify(group, queue, ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;notify--result: %@-%@&quot;, result1, result2);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-17 17:27:32.536 多线程[16626:593137] 任务1</span><br><span class=\"line\">2016-07-17 17:27:32.536 多线程[16626:593139] 任务2</span><br><span class=\"line\">2016-07-17 17:27:32.537 多线程[16626:593139] notify--result: result 1-result 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"NSOperationQueue\"><a href=\"#NSOperationQueue\" class=\"headerlink\" title=\"NSOperationQueue\"></a>NSOperationQueue</h3><p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  //主队列</span><br><span class=\"line\">NSOperationQueue *queue = [[NSOperationQueue alloc] init]; //自定义队列</span><br><span class=\"line\">NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">                //任务执行</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">[queue addOperation:operation];</span><br></pre></td></tr></table></figure></p>\n<p>我们可以通过设置 maxConcurrentOperationCount 属性来控制并发任务的数量，当设置为 1 时， 那么它就是一个串行队列。主对列默认是串行队列，这一点和 dispatch_queue_t 是相似的。</p>\n<h3 id=\"NSOperation\"><a href=\"#NSOperation\" class=\"headerlink\" title=\"NSOperation\"></a>NSOperation</h3><p>你可以使用系统提供的一些现成的 NSOperation 的子类， 如 <code>NSBlockOperation</code>、 <code>NSInvocationOperation</code>。</p>\n<h4 id=\"NSInvocationOperation\"><a href=\"#NSInvocationOperation\" class=\"headerlink\" title=\"NSInvocationOperation\"></a>NSInvocationOperation</h4><p>NSOperation的子类NSInvocationOperation为我们提供了一套简单的多线程编程方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSInvocationOperation *invo = [[NSInvocationOperation alloc]initWithTarget:self</span><br><span class=\"line\">                                                                   selector:@selector(handleInvocation)</span><br><span class=\"line\">                                                                     object:nil];</span><br><span class=\"line\">[invo start];</span><br></pre></td></tr></table></figure></p>\n<p>调用 <code>start</code>方法，就会马上执行封装好的操作，也就是会调用<code>self</code>的<code>handleInvocation</code>方法.</p>\n<blockquote>\n<p>注意：默认情况下，调用了start方法后并不会开一条新线程去执行操作，而是在当前线程同步执行操作。只有将operation放到一个NSOperationQueue中，才会异步执行操作。</p>\n</blockquote>\n<h4 id=\"NSBlockOperation\"><a href=\"#NSBlockOperation\" class=\"headerlink\" title=\"NSBlockOperation\"></a>NSBlockOperation</h4><h5 id=\"1-同步执行一个操作\"><a href=\"#1-同步执行一个操作\" class=\"headerlink\" title=\"1. 同步执行一个操作\"></a>1. 同步执行一个操作</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;执行一个新操作: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">[blckOp start];</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行一个新操作: &lt;NSThread: 0x60800007a940&gt;&#123;number = 1, name = main&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从结果可以看出，初始化一个NSBlockOperation对象后，调用<code>start</code>方法，<br>发现还是在当前线程同步执行操作，并没有异步执行。</p>\n<h5 id=\"2-并发执行多个操作\"><a href=\"#2-并发执行多个操作\" class=\"headerlink\" title=\"2. 并发执行多个操作\"></a>2. 并发执行多个操作</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;执行一个新操作: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[blckOp addExecutionBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;又执行一个新操作 1: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[blckOp addExecutionBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;又执行一个新操作 2: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[blckOp addExecutionBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;又执行一个新操作 3: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[blckOp start];</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">又执行一个新操作 1: &lt;NSThread: 0x608000079280&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">执行一个新操作: &lt;NSThread: 0x60000007c540&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">又执行一个新操作 2: &lt;NSThread: 0x60800007eac0&gt;&#123;number = 4, name = (null)&#125;</span><br><span class=\"line\">又执行一个新操作 3: &lt;NSThread: 0x60800007ecc0&gt;&#123;number = 5, name = (null)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从结果可以看出，当我们通过 <code>addExecutionBlock:</code> 方法添加了新的操作后，就会并发地执行这些操作，也就是会在不同线程中执行。</p>\n<blockquote>\n<p>结论：只要NSBlockOperation封装的操作数 &gt; 1，就会异步执行操作。</p>\n</blockquote>\n<h4 id=\"创建自己的Operation\"><a href=\"#创建自己的Operation\" class=\"headerlink\" title=\"创建自己的Operation\"></a>创建自己的Operation</h4><p>你也可以实现自己的子类， 通过重写 <code>main</code> 或者 <code>start</code> 方法 来定义自己的 operation 。<br>使用 <code>main</code> 方法非常简单，开发者不需要管理一些状态属性（例如 <code>isExecuting</code> 和 <code>isFinished</code>），当 <code>main</code> 方法返回的时候，这个 operation 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 <code>start</code> 来说要少一些， 因为<code>main</code>方法执行完就认为operation结束了，所以一般可以用来执行同步任务。<br>如果你希望拥有更多的控制权，或者想在一个操作中可以执行异步任务，那么就重写 <code>start</code> 方法, 但是注意：这种情况下，你必须手动管理操作的状态， 只有当发送 <code>isFinished</code> 的 KVO 消息时，才认为是 operation 结束.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation YourOperation</span><br><span class=\"line\">- (void)start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  self.isExecuting = YES;</span><br><span class=\"line\">    // 任务代码 ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)finish //异步回调</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  self.isExecuting = NO;</span><br><span class=\"line\">  self.isFinished = YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>当实现了 <code>start</code> 方法时，默认会执行 <code>start</code> 方法，而不执行 <code>main</code> 方法<br>为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 <code>setter</code> 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。<br>需要手动管理的状态有：</p>\n<ul>\n<li><code>isExecuting</code> 代表任务正在执行中</li>\n<li><code>isFinished</code> 代表任务已经执行完成</li>\n<li><code>isCancelled</code> 代表任务已经取消执行</li>\n</ul>\n<p>手动的发送 KVO 消息， 通知状态更改如下 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self willChangeValueForKey:@&quot;isCancelled&quot;];</span><br><span class=\"line\">_isCancelled = YES;</span><br><span class=\"line\">[self didChangeValueForKey:@&quot;isCancelled&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 <code>isCancelled</code> 属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)main &#123;</span><br><span class=\"line\">    // 新建一个自动释放池，如果是异步执行操作，那么将无法访问到主线程的自动释放池</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        // 如果已经取消，释放资源，并返回</span><br><span class=\"line\">        if (self.isCancelled) &#123;</span><br><span class=\"line\">            [self reset];</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];</span><br><span class=\"line\">        self.session = [NSURLSession sessionWithConfiguration:configuration];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSURLRequest *repuest = [NSURLRequest requestWithURL:_url];</span><br><span class=\"line\">        __weak __typeof(self) wself = self;</span><br><span class=\"line\">        NSURLSessionDataTask *task = [_session dataTaskWithRequest:repuest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) &#123;</span><br><span class=\"line\">            __strong __typeof(self) sself = wself;</span><br><span class=\"line\">            if (!sself.completedBlock) &#123;</span><br><span class=\"line\">                return ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (data == nil) &#123;</span><br><span class=\"line\">                sself.completedBlock(nil, nil, error);</span><br><span class=\"line\">                return ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 如果已经取消，释放资源，并返回</span><br><span class=\"line\">            if (sself.isCancelled) &#123;</span><br><span class=\"line\">                [sself reset];</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            UIImage *image = [UIImage hu_imageFromData:data];</span><br><span class=\"line\">            [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\">                sself.completedBlock(image, data, nil);</span><br><span class=\"line\">            &#125;];   </span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        [task resume];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.</p>","more":"<p>线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.</p>\n<!--excerpt-->\n<p>在说多线程之前我们必须先弄懂两个概念：<code>进程</code> 和 <code>线程</code></p>\n<h5 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h5><blockquote>\n<p>进程(Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p>\n</blockquote>\n<p>简单来说，进程是指在系统中正在运行的一个应用程序，每一个程序都是一个进程，并且进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。</p>\n<h5 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h5><blockquote>\n<p>线程是程序执行流的最小单元线程是程序中一个单一的顺序控制流程。是进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指运行中的程序的调度单位。</p>\n</blockquote>\n<p>1个进程要想执行任务必须得有线程。线程中任务的执行是串行的，一个线程中的任务只能一个一个地按顺序执行，也就是说在同一时间内，1个线程只能执行1个任务。</p>\n<p>线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.多线程主要是为了节约CPU时间,发挥利用,根据具体情况而定. 线程的运行中需要使用计算机的内存资源和CPU。</p>\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><blockquote>\n<p>多线程（英语：multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。</p>\n</blockquote>\n<p>所谓多线程，就是在单个程序中同时运行多个线程完成不同的工作<br>注意，多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p>\n<h3 id=\"GCD\"><a href=\"#GCD\" class=\"headerlink\" title=\"GCD\"></a>GCD</h3><p>在说GCD之前我们得先弄懂4个比较容易混淆的术语：<code>同步</code>、<code>异步</code>、 <code>并发</code>、 <code>串行</code><br>同步和异步主要影响：能不能开启新的线程</p>\n<ul>\n<li><code>同步</code>：只是在当前线程中执行任务，不具备开启新线程的能力</li>\n<li><code>异步</code>：可以在新的线程中执行任务，具备开启新线程的能力<br>并行和串行主要影响：任务的执行方式</li>\n<li><code>并发</code>：多个任务并发（同时）执行</li>\n<li><code>串行</code>：一个任务执行完毕后，再执行下一个任务</li>\n</ul>\n<p>GCD是最常用的管理并行代码和执行异步操作的Unix系统层的API。GCD构造和管理队列中的任务。首先，让我们看看队列是什么。</p>\n<h4 id=\"队列是什么？\"><a href=\"#队列是什么？\" class=\"headerlink\" title=\"队列是什么？\"></a>队列是什么？</h4><p>队列是按 <code>先进先出(FIFO)</code> 管理对象的数据结构。队列类似电影院的售票窗口，票的销售是谁先到谁先服务。在等待线前面的人先去买他们的门票，在其余的后抵达的人之前。</p>\n<h4 id=\"调度队列\"><a href=\"#调度队列\" class=\"headerlink\" title=\"调度队列\"></a>调度队列</h4><p>调度队列是一种简单的同步和异步任务的方法。任务以 <code>block</code> 的形式被提交到其中。系统有两种调度队列: <code>串行队列</code> 和 <code>并行队列</code> 。任务分配给这两个队列都是在单独的线程执行的，而不是在创建任务的线程上。换句话说，你创建任务(block)再提交到主线程的调度队列，但所有这些任务任务将运行在单独的线程而不是主线程。</p>\n<h4 id=\"串行队列\"><a href=\"#串行队列\" class=\"headerlink\" title=\"串行队列\"></a>串行队列</h4><p>当你创建一个串行队列，队列一次只能执行一个任务。同一队列中的任务将按着顺序依次执行，然而它们并不关心任务是不是在单独的线程，所以你可以通过使用多个串行队列来并行地执行任务。例如，你可以创建两个串行队列，每个队列一次只执行一个任务，不过多达两个任务仍可并行执行。<br>使用串行队列的优点：</p>\n<ol>\n<li>保证序列化访问共享资源，避免竞争条件。</li>\n<li>任务的执行顺序是可预测的。当你提交任务到一个串行调度队列，它们将按插入的顺序执行。</li>\n<li>你可以创建任意数量的串行队列。</li>\n</ol>\n<h4 id=\"并行队列\"><a href=\"#并行队列\" class=\"headerlink\" title=\"并行队列\"></a>并行队列</h4><p>并行队列可以并行执行多个任务。任务按添加到队列的顺序开始，但它们的执行会同时发生，不会相互等待。并行队列保证任务开始的顺序，但你不知道执行的顺序。</p>\n<h4 id=\"使用队列\"><a href=\"#使用队列\" class=\"headerlink\" title=\"使用队列\"></a>使用队列</h4><p>默认情况下，系统为每个应用提供了一个串行队列和四个并行队列。主调度队列是全局可用的串行队列，它在应用的主线程执行任务，主要用来更新UI,同时只有一个任务执行。<br>除了主队列，系统提供了4个并行队列，称之为全局调度队列。这些队列对于应用是全局的，区别只在于它们的优先级。使用<code>dispatch_get_global_queue</code>可以获取到一个全局队列，它有以下四个优先级：</p>\n<ul>\n<li><code>DISPATCH_QUEUE_PRIORITY_HIGH</code></li>\n<li><code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code></li>\n<li><code>DISPATCH_QUEUE_PRIORITY_LOW</code></li>\n<li><code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code></li>\n</ul>\n<p>以上优先级由高到低，所有你可以根据任务的优先级决定你使用的队列。不过，你也可以创建任意数量的串行或并行队列。</p>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><p>即操作，你想要干什么，说白了就是一段代码，在 GCD 中就是一个 <code>Block</code>，所以添加任务十分方便。任务有两种执行方式： <code>同步执行</code> 和 <code>异步执行</code>，他们之间的区别是在于会不会阻塞当前线程，直到 <code>Block</code> 中的任务执行完毕！</p>\n<p>下面举几个栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD1() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;);</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue()) &#123; //会阻塞当前线程，task 2不会执行</span><br><span class=\"line\">       print(&quot;task 2&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行会发现控制台打印出<code>task 1</code>，因为主线程被阻塞了，task2不会执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD2() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    let queue = dispatch_queue_create(&quot;come.jewelez.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        print(&quot;task 2 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        dispatch_sync(queue, &#123; () -&gt; Void in  //会阻塞当前线程，task 3不会执行</span><br><span class=\"line\">            print(&quot;task 3 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(&quot;task 4 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(&quot;task 5&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，你会发现控制台只会打印<code>task1, task5, task2</code>, 而<code>task3</code>和<code>task4</code>不会执行。首先我们创建了一个串行队列，然后以异步的方式提交了任务，所以<code>task2</code>可以执行，在任务中又以同步的方式向队列中提交了一个新的任务，由于是同步方式所以会阻塞当前线程，<code>task3</code>不会执行，因为是串行队列，当前线程又线程阻塞了，所以<code>task4</code>也不会执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD3() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let queue = dispatch_queue_create(&quot;come.jewelez.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        print(&quot;task 2 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        dispatch_sync(dispatch_get_main_queue(), &#123; () -&gt; Void in  //异步遇到同步回主线程, task 3执行完后才会执行task 4</span><br><span class=\"line\">            print(&quot;task 3 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">         print(&quot;task 4 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(&quot;task 5 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个就很容易理解了，不过要注意的一点是异步遇到同步回主线程, <code>task 3</code>执行完后才会执行<code>task 4</code>，控制台打印如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task 1</span><br><span class=\"line\">task 2 &lt;NSThread: 0x7fe290e05d30&gt;&#123;number = 2, name = (null)&#125;</span><br><span class=\"line\">task 5 &lt;NSThread: 0x7fe290c045b0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">task 3 &lt;NSThread: 0x7fe290c045b0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">task 4 &lt;NSThread: 0x7fe290e05d30&gt;&#123;number = 2, name = (null)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来看最后一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func GCD4() &#123;</span><br><span class=\"line\">    print(&quot;task 1&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    let queue = dispatch_queue_create(&quot;come.jewelez.serial&quot;, DISPATCH_QUEUE_SERIAL)</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        print(&quot;task 2 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; Void in</span><br><span class=\"line\">           </span><br><span class=\"line\">            for i in 0..&lt;1000 &#123;</span><br><span class=\"line\">                print(&quot;i: \\(i)&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            print(&quot;task 3 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        print(&quot;task 4 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(&quot;task 5 \\(NSThread.currentThread())&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个例子与上个不同在于，主线程中的任务也是以异步的方式执行的，所以<code>task 4</code>不用等到<code>task 3</code>执行完才执行。</p>\n<h4 id=\"dispatch-group\"><a href=\"#dispatch-group\" class=\"headerlink\" title=\"dispatch_group\"></a>dispatch_group</h4><p>dispatch_group是用于监视一任务（Block）的机制。例如，当我们向一个队列里添加了多个任务，当队列中的所有任务执行完成后，我们需要做某种操作，这个时候就可以使用<code>dispatch_group</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_queue_t queue = dispatch_queue_create(&quot;com.hujewelz.test&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\">  </span><br><span class=\"line\">__block NSString *result1 = nil, *result2 = nil;</span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;任务1&quot;);</span><br><span class=\"line\">    result1 = @&quot;result 1&quot;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">dispatch_group_async(group, queue, ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;任务2&quot;);</span><br><span class=\"line\">    result2 = @&quot;result 2&quot;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">dispatch_group_notify(group, queue, ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;notify--result: %@-%@&quot;, result1, result2);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-17 17:27:32.536 多线程[16626:593137] 任务1</span><br><span class=\"line\">2016-07-17 17:27:32.536 多线程[16626:593139] 任务2</span><br><span class=\"line\">2016-07-17 17:27:32.537 多线程[16626:593139] notify--result: result 1-result 2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"NSOperationQueue\"><a href=\"#NSOperationQueue\" class=\"headerlink\" title=\"NSOperationQueue\"></a>NSOperationQueue</h3><p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  //主队列</span><br><span class=\"line\">NSOperationQueue *queue = [[NSOperationQueue alloc] init]; //自定义队列</span><br><span class=\"line\">NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">                //任务执行</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">[queue addOperation:operation];</span><br></pre></td></tr></table></figure></p>\n<p>我们可以通过设置 maxConcurrentOperationCount 属性来控制并发任务的数量，当设置为 1 时， 那么它就是一个串行队列。主对列默认是串行队列，这一点和 dispatch_queue_t 是相似的。</p>\n<h3 id=\"NSOperation\"><a href=\"#NSOperation\" class=\"headerlink\" title=\"NSOperation\"></a>NSOperation</h3><p>你可以使用系统提供的一些现成的 NSOperation 的子类， 如 <code>NSBlockOperation</code>、 <code>NSInvocationOperation</code>。</p>\n<h4 id=\"NSInvocationOperation\"><a href=\"#NSInvocationOperation\" class=\"headerlink\" title=\"NSInvocationOperation\"></a>NSInvocationOperation</h4><p>NSOperation的子类NSInvocationOperation为我们提供了一套简单的多线程编程方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSInvocationOperation *invo = [[NSInvocationOperation alloc]initWithTarget:self</span><br><span class=\"line\">                                                                   selector:@selector(handleInvocation)</span><br><span class=\"line\">                                                                     object:nil];</span><br><span class=\"line\">[invo start];</span><br></pre></td></tr></table></figure></p>\n<p>调用 <code>start</code>方法，就会马上执行封装好的操作，也就是会调用<code>self</code>的<code>handleInvocation</code>方法.</p>\n<blockquote>\n<p>注意：默认情况下，调用了start方法后并不会开一条新线程去执行操作，而是在当前线程同步执行操作。只有将operation放到一个NSOperationQueue中，才会异步执行操作。</p>\n</blockquote>\n<h4 id=\"NSBlockOperation\"><a href=\"#NSBlockOperation\" class=\"headerlink\" title=\"NSBlockOperation\"></a>NSBlockOperation</h4><h5 id=\"1-同步执行一个操作\"><a href=\"#1-同步执行一个操作\" class=\"headerlink\" title=\"1. 同步执行一个操作\"></a>1. 同步执行一个操作</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;执行一个新操作: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">[blckOp start];</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行一个新操作: &lt;NSThread: 0x60800007a940&gt;&#123;number = 1, name = main&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从结果可以看出，初始化一个NSBlockOperation对象后，调用<code>start</code>方法，<br>发现还是在当前线程同步执行操作，并没有异步执行。</p>\n<h5 id=\"2-并发执行多个操作\"><a href=\"#2-并发执行多个操作\" class=\"headerlink\" title=\"2. 并发执行多个操作\"></a>2. 并发执行多个操作</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSBlockOperation *blckOp = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;执行一个新操作: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[blckOp addExecutionBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;又执行一个新操作 1: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[blckOp addExecutionBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;又执行一个新操作 2: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">  </span><br><span class=\"line\">[blckOp addExecutionBlock:^&#123;</span><br><span class=\"line\">    NSLog(@&quot;又执行一个新操作 3: %@&quot;, [NSThread currentThread]);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[blckOp start];</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">又执行一个新操作 1: &lt;NSThread: 0x608000079280&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">执行一个新操作: &lt;NSThread: 0x60000007c540&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">又执行一个新操作 2: &lt;NSThread: 0x60800007eac0&gt;&#123;number = 4, name = (null)&#125;</span><br><span class=\"line\">又执行一个新操作 3: &lt;NSThread: 0x60800007ecc0&gt;&#123;number = 5, name = (null)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从结果可以看出，当我们通过 <code>addExecutionBlock:</code> 方法添加了新的操作后，就会并发地执行这些操作，也就是会在不同线程中执行。</p>\n<blockquote>\n<p>结论：只要NSBlockOperation封装的操作数 &gt; 1，就会异步执行操作。</p>\n</blockquote>\n<h4 id=\"创建自己的Operation\"><a href=\"#创建自己的Operation\" class=\"headerlink\" title=\"创建自己的Operation\"></a>创建自己的Operation</h4><p>你也可以实现自己的子类， 通过重写 <code>main</code> 或者 <code>start</code> 方法 来定义自己的 operation 。<br>使用 <code>main</code> 方法非常简单，开发者不需要管理一些状态属性（例如 <code>isExecuting</code> 和 <code>isFinished</code>），当 <code>main</code> 方法返回的时候，这个 operation 就结束了。这种方式使用起来非常简单，但是灵活性相对重写 <code>start</code> 来说要少一些， 因为<code>main</code>方法执行完就认为operation结束了，所以一般可以用来执行同步任务。<br>如果你希望拥有更多的控制权，或者想在一个操作中可以执行异步任务，那么就重写 <code>start</code> 方法, 但是注意：这种情况下，你必须手动管理操作的状态， 只有当发送 <code>isFinished</code> 的 KVO 消息时，才认为是 operation 结束.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation YourOperation</span><br><span class=\"line\">- (void)start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  self.isExecuting = YES;</span><br><span class=\"line\">    // 任务代码 ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)finish //异步回调</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  self.isExecuting = NO;</span><br><span class=\"line\">  self.isFinished = YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>当实现了 <code>start</code> 方法时，默认会执行 <code>start</code> 方法，而不执行 <code>main</code> 方法<br>为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 <code>setter</code> 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。<br>需要手动管理的状态有：</p>\n<ul>\n<li><code>isExecuting</code> 代表任务正在执行中</li>\n<li><code>isFinished</code> 代表任务已经执行完成</li>\n<li><code>isCancelled</code> 代表任务已经取消执行</li>\n</ul>\n<p>手动的发送 KVO 消息， 通知状态更改如下 ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self willChangeValueForKey:@&quot;isCancelled&quot;];</span><br><span class=\"line\">_isCancelled = YES;</span><br><span class=\"line\">[self didChangeValueForKey:@&quot;isCancelled&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 <code>isCancelled</code> 属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)main &#123;</span><br><span class=\"line\">    // 新建一个自动释放池，如果是异步执行操作，那么将无法访问到主线程的自动释放池</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        // 如果已经取消，释放资源，并返回</span><br><span class=\"line\">        if (self.isCancelled) &#123;</span><br><span class=\"line\">            [self reset];</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];</span><br><span class=\"line\">        self.session = [NSURLSession sessionWithConfiguration:configuration];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSURLRequest *repuest = [NSURLRequest requestWithURL:_url];</span><br><span class=\"line\">        __weak __typeof(self) wself = self;</span><br><span class=\"line\">        NSURLSessionDataTask *task = [_session dataTaskWithRequest:repuest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) &#123;</span><br><span class=\"line\">            __strong __typeof(self) sself = wself;</span><br><span class=\"line\">            if (!sself.completedBlock) &#123;</span><br><span class=\"line\">                return ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (data == nil) &#123;</span><br><span class=\"line\">                sself.completedBlock(nil, nil, error);</span><br><span class=\"line\">                return ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 如果已经取消，释放资源，并返回</span><br><span class=\"line\">            if (sself.isCancelled) &#123;</span><br><span class=\"line\">                [sself reset];</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            UIImage *image = [UIImage hu_imageFromData:data];</span><br><span class=\"line\">            [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\">                sself.completedBlock(image, data, nil);</span><br><span class=\"line\">            &#125;];   </span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        [task resume];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"设计模式—开篇","date":"2017-05-26T10:09:45.000Z","thumbnailImage":"design-patterns.png","coverImage":"cover.jpg","_content":"\n根据《设计模式》一书，设计模式是对定制来解决特定场景下一般设计问题的类和互相通讯对象的描述。\n\n<!--more-->\n\n在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 **Design Patterns - Elements of Reusable Object-Oriented Software**  的书，在书中首次提到了软件开发中设计模式的概念。\n\n\n\n设计模式主要基于以下的面向对象设计原则：\n\n* 针对接口编程，而不是针对实现编程\n* 优先使用对象组合，而不是继承\n\n\n\n### 设计模式的分类\n\n根据设计模式的参考书 **Design Patterns - Elements of Reusable Object-Oriented Software** 中所提到的，总共有 23 种设计模式。这些模式可以分为以下三类：\n\n**创建型**：工厂方法，抽象工厂，单例模式，建造者模式，原型模式；\n\n**结构型**：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式；\n\n**行为型**：策略模式，模板方法，观察者模式，迭代器模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式；\n\n\n\n### 设计模式的六大原则\n\n**单一职责原则(SRP)**\n> 就一个类而言，应该仅有一个引起它变化的原因。\n\n从这句定义我们很难理解它的含义，通俗讲就是我们不要让一个类承担过多的职责。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到破坏。 \n\n\n\n**开发封闭原则(ASD)**\n\n> 软件实体（类、模块、函数等等）应该是可以拓展的，但是不可修改。\n\n开放封闭有两个含义，一个是对于拓展是开放的，另一个是对于修改是封闭的。对于开发来说需求肯定是要变化的，但是新需求一来，我们就要把类重新改一遍这显然是令人头疼的，所以我们设计程序时面对需求的改变要尽可能的保证相对的稳定，尽量用新代码实现拓展来修改需求，而不是通过修改原有的代码来实现。 \n\n\n\n**里氏替换原则(LSP)**\n\n> 所有引用基类（父类）的地方必须能透明地使用其子类的对象。\n\n里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。 \n里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。\n\n在使用里氏代换原则时需要注意如下几个问题：\n* 子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。\n* 我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。\n\n\n\n**依赖倒置原则(DIP)**\n> 高层模块不应该依赖低层模块，两个都应该依赖于抽象。\n> 抽象不应该依赖于细节，细节应该依赖于抽象。\n\n\n\n**迪米特原则(LOD)**\n> 一个软件实体应当尽可能少地与其他实体发生相互作用。 \n\n也称为最少知识原则。如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。 \n迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。 \n\n\n\n**接口隔离原则(ISP)**\n\n> 一个类对另一个类的依赖应该建立在最小的接口上。\n\n建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。\n\n采用接口隔离原则对接口进行约束时，要注意以下几点：\n* 接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。\n* 为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。\n* 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。","source":"_posts/设计模式—开篇.md","raw":"---\ntitle: 设计模式—开篇\ndate: 2017-05-26 18:09:45\ntags: \n  - 架构\n  - 设计模式\ncategories: 架构\nthumbnailImage: design-patterns.png\ncoverImage: cover.jpg\n---\n\n根据《设计模式》一书，设计模式是对定制来解决特定场景下一般设计问题的类和互相通讯对象的描述。\n\n<!--more-->\n\n在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 **Design Patterns - Elements of Reusable Object-Oriented Software**  的书，在书中首次提到了软件开发中设计模式的概念。\n\n\n\n设计模式主要基于以下的面向对象设计原则：\n\n* 针对接口编程，而不是针对实现编程\n* 优先使用对象组合，而不是继承\n\n\n\n### 设计模式的分类\n\n根据设计模式的参考书 **Design Patterns - Elements of Reusable Object-Oriented Software** 中所提到的，总共有 23 种设计模式。这些模式可以分为以下三类：\n\n**创建型**：工厂方法，抽象工厂，单例模式，建造者模式，原型模式；\n\n**结构型**：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式；\n\n**行为型**：策略模式，模板方法，观察者模式，迭代器模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式；\n\n\n\n### 设计模式的六大原则\n\n**单一职责原则(SRP)**\n> 就一个类而言，应该仅有一个引起它变化的原因。\n\n从这句定义我们很难理解它的含义，通俗讲就是我们不要让一个类承担过多的职责。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到破坏。 \n\n\n\n**开发封闭原则(ASD)**\n\n> 软件实体（类、模块、函数等等）应该是可以拓展的，但是不可修改。\n\n开放封闭有两个含义，一个是对于拓展是开放的，另一个是对于修改是封闭的。对于开发来说需求肯定是要变化的，但是新需求一来，我们就要把类重新改一遍这显然是令人头疼的，所以我们设计程序时面对需求的改变要尽可能的保证相对的稳定，尽量用新代码实现拓展来修改需求，而不是通过修改原有的代码来实现。 \n\n\n\n**里氏替换原则(LSP)**\n\n> 所有引用基类（父类）的地方必须能透明地使用其子类的对象。\n\n里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。 \n里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。\n\n在使用里氏代换原则时需要注意如下几个问题：\n* 子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。\n* 我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。\n\n\n\n**依赖倒置原则(DIP)**\n> 高层模块不应该依赖低层模块，两个都应该依赖于抽象。\n> 抽象不应该依赖于细节，细节应该依赖于抽象。\n\n\n\n**迪米特原则(LOD)**\n> 一个软件实体应当尽可能少地与其他实体发生相互作用。 \n\n也称为最少知识原则。如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。 \n迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。 \n\n\n\n**接口隔离原则(ISP)**\n\n> 一个类对另一个类的依赖应该建立在最小的接口上。\n\n建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。\n\n采用接口隔离原则对接口进行约束时，要注意以下几点：\n* 接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。\n* 为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。\n* 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。","slug":"设计模式—开篇","published":1,"updated":"2018-05-26T11:06:39.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto6zilb002h1u0om07f7b36","content":"<p>根据《设计模式》一书，设计模式是对定制来解决特定场景下一般设计问题的类和互相通讯对象的描述。</p>\n<a id=\"more\"></a>\n<p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software</strong>  的书，在书中首次提到了软件开发中设计模式的概念。</p>\n<p>设计模式主要基于以下的面向对象设计原则：</p>\n<ul>\n<li>针对接口编程，而不是针对实现编程</li>\n<li>优先使用对象组合，而不是继承</li>\n</ul>\n<h3 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h3><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为以下三类：</p>\n<p><strong>创建型</strong>：工厂方法，抽象工厂，单例模式，建造者模式，原型模式；</p>\n<p><strong>结构型</strong>：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式；</p>\n<p><strong>行为型</strong>：策略模式，模板方法，观察者模式，迭代器模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式；</p>\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><p><strong>单一职责原则(SRP)</strong></p>\n<blockquote>\n<p>就一个类而言，应该仅有一个引起它变化的原因。</p>\n</blockquote>\n<p>从这句定义我们很难理解它的含义，通俗讲就是我们不要让一个类承担过多的职责。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到破坏。 </p>\n<p><strong>开发封闭原则(ASD)</strong></p>\n<blockquote>\n<p>软件实体（类、模块、函数等等）应该是可以拓展的，但是不可修改。</p>\n</blockquote>\n<p>开放封闭有两个含义，一个是对于拓展是开放的，另一个是对于修改是封闭的。对于开发来说需求肯定是要变化的，但是新需求一来，我们就要把类重新改一遍这显然是令人头疼的，所以我们设计程序时面对需求的改变要尽可能的保证相对的稳定，尽量用新代码实现拓展来修改需求，而不是通过修改原有的代码来实现。 </p>\n<p><strong>里氏替换原则(LSP)</strong></p>\n<blockquote>\n<p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p>\n</blockquote>\n<p>里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。<br>里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</p>\n<p>在使用里氏代换原则时需要注意如下几个问题：</p>\n<ul>\n<li>子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</li>\n<li>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。</li>\n</ul>\n<p><strong>依赖倒置原则(DIP)</strong></p>\n<blockquote>\n<p>高层模块不应该依赖低层模块，两个都应该依赖于抽象。<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n</blockquote>\n<p><strong>迪米特原则(LOD)</strong></p>\n<blockquote>\n<p>一个软件实体应当尽可能少地与其他实体发生相互作用。 </p>\n</blockquote>\n<p>也称为最少知识原则。如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。<br>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。 </p>\n<p><strong>接口隔离原则(ISP)</strong></p>\n<blockquote>\n<p>一个类对另一个类的依赖应该建立在最小的接口上。</p>\n</blockquote>\n<p>建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p>\n<p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p>\n<ul>\n<li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li>\n<li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":"https://hujewelz.github.io/cjto6zilb002h1u0om07f7b36/design-patterns.png","excerpt":"<p>根据《设计模式》一书，设计模式是对定制来解决特定场景下一般设计问题的类和互相通讯对象的描述。</p>","more":"<p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software</strong>  的书，在书中首次提到了软件开发中设计模式的概念。</p>\n<p>设计模式主要基于以下的面向对象设计原则：</p>\n<ul>\n<li>针对接口编程，而不是针对实现编程</li>\n<li>优先使用对象组合，而不是继承</li>\n</ul>\n<h3 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h3><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为以下三类：</p>\n<p><strong>创建型</strong>：工厂方法，抽象工厂，单例模式，建造者模式，原型模式；</p>\n<p><strong>结构型</strong>：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式；</p>\n<p><strong>行为型</strong>：策略模式，模板方法，观察者模式，迭代器模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式；</p>\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><p><strong>单一职责原则(SRP)</strong></p>\n<blockquote>\n<p>就一个类而言，应该仅有一个引起它变化的原因。</p>\n</blockquote>\n<p>从这句定义我们很难理解它的含义，通俗讲就是我们不要让一个类承担过多的职责。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到破坏。 </p>\n<p><strong>开发封闭原则(ASD)</strong></p>\n<blockquote>\n<p>软件实体（类、模块、函数等等）应该是可以拓展的，但是不可修改。</p>\n</blockquote>\n<p>开放封闭有两个含义，一个是对于拓展是开放的，另一个是对于修改是封闭的。对于开发来说需求肯定是要变化的，但是新需求一来，我们就要把类重新改一遍这显然是令人头疼的，所以我们设计程序时面对需求的改变要尽可能的保证相对的稳定，尽量用新代码实现拓展来修改需求，而不是通过修改原有的代码来实现。 </p>\n<p><strong>里氏替换原则(LSP)</strong></p>\n<blockquote>\n<p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p>\n</blockquote>\n<p>里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。<br>里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</p>\n<p>在使用里氏代换原则时需要注意如下几个问题：</p>\n<ul>\n<li>子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</li>\n<li>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。</li>\n</ul>\n<p><strong>依赖倒置原则(DIP)</strong></p>\n<blockquote>\n<p>高层模块不应该依赖低层模块，两个都应该依赖于抽象。<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n</blockquote>\n<p><strong>迪米特原则(LOD)</strong></p>\n<blockquote>\n<p>一个软件实体应当尽可能少地与其他实体发生相互作用。 </p>\n</blockquote>\n<p>也称为最少知识原则。如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。<br>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。 </p>\n<p><strong>接口隔离原则(ISP)</strong></p>\n<blockquote>\n<p>一个类对另一个类的依赖应该建立在最小的接口上。</p>\n</blockquote>\n<p>建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p>\n<p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p>\n<ul>\n<li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li>\n<li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/Swift-中的-Sequence-协议/Swift_logo.png","slug":"Swift_logo.png","post":"cjto6zijn00061u0odvag9i3v","modified":1,"renderable":0},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/01.png","slug":"01.png","post":"cjto6zik0000e1u0ocn89rbp4","modified":1,"renderable":0},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/03.png","slug":"03.png","post":"cjto6zik0000e1u0ocn89rbp4","modified":1,"renderable":0},{"_id":"source/_posts/用 Swift 写一个响应式编程库/cover.png","slug":"cover.png","post":"cjto6zikq001v1u0orwj3f23u","modified":1,"renderable":0},{"_id":"source/_posts/设计模式—开篇/cover.jpg","slug":"cover.jpg","post":"cjto6zilb002h1u0om07f7b36","modified":1,"renderable":0},{"_id":"source/_posts/Swift-面向协议编程的那些事/loading.gif","slug":"loading.gif","post":"cjto6ziju00091u0ogsx0c09i","modified":1,"renderable":0},{"_id":"source/_posts/入坑Webpack/cover.png","slug":"cover.png","post":"cjto6zikh00151u0osn2d18b0","modified":1,"renderable":0},{"_id":"source/_posts/教你如何用Swift写个json转模型的开源库/thumbnail.jpg","slug":"thumbnail.jpg","post":"cjto6zikr001z1u0o2fy6gioq","modified":1,"renderable":0},{"_id":"source/_posts/在-Swift-中使用值类型/array_in_stack.png","post":"cjto6zikl001j1u0oarq02yfk","slug":"array_in_stack.png","modified":1,"renderable":1},{"_id":"source/_posts/开启 RxSwift 之旅——开篇/rxlogo.png","post":"cjto6zikn001p1u0o6t03zo1m","slug":"rxlogo.png","modified":1,"renderable":1},{"_id":"source/_posts/组件生命周期管理和通信方案/protocol-class.jpg","post":"cjto6zil9002a1u0o3x7nhu2q","slug":"protocol-class.jpg","modified":1,"renderable":1},{"_id":"source/_posts/iOS渲染原理/18436043320170222133323050.png","post":"cjto6zik5000j1u0ommwrdmhk","slug":"18436043320170222133323050.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS渲染原理/18436043320170222134916051.jpg","post":"cjto6zik5000j1u0ommwrdmhk","slug":"18436043320170222134916051.jpg","modified":1,"renderable":1},{"_id":"source/_posts/xcodebuild的使用/cover.jpg","slug":"cover.jpg","post":"cjto6zikb000q1u0o8w8ot82w","modified":1,"renderable":0},{"_id":"source/_posts/xcodebuild的使用/thumbnail.jpg","slug":"thumbnail.jpg","post":"cjto6zikb000q1u0o8w8ot82w","modified":1,"renderable":0},{"_id":"source/_posts/从零开始开发一个-Status-Bar-App/cover.png","post":"cjto6zikc000t1u0o9puoolt1","slug":"cover.png","modified":1,"renderable":1},{"_id":"source/_posts/从零开始开发一个-Status-Bar-App/thumbnail.png","post":"cjto6zikc000t1u0o9puoolt1","slug":"thumbnail.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Core-Graphics绘制图形/18436043320170222133323050.png","post":"cjto6zikf00101u0og54ejzgv","slug":"18436043320170222133323050.png","modified":1,"renderable":1},{"_id":"source/_posts/使用Core-Graphics绘制图形/18436043320170222164112080.png","post":"cjto6zikf00101u0og54ejzgv","slug":"18436043320170222164112080.png","modified":1,"renderable":1},{"_id":"source/_posts/设计模式—开篇/design-patterns.png","post":"cjto6zilb002h1u0om07f7b36","slug":"design-patterns.png","modified":1,"renderable":1},{"_id":"source/_posts/初识Core-Data/18436043320170227154154030_640.png","post":"cjto6ziki00181u0ol2giduv5","slug":"18436043320170227154154030_640.png","modified":1,"renderable":1},{"_id":"source/_posts/初识Core-Data/18436043320170227155859067_640.jpg","post":"cjto6ziki00181u0ol2giduv5","slug":"18436043320170227155859067_640.jpg","modified":1,"renderable":1},{"_id":"source/_posts/初识Core-Data/18436043320170227160223054_640.jpg","post":"cjto6ziki00181u0ol2giduv5","slug":"18436043320170227160223054_640.jpg","modified":1,"renderable":1},{"_id":"source/_posts/初识Core-Data/18436043320170227162725013_640.png","post":"cjto6ziki00181u0ol2giduv5","slug":"18436043320170227162725013_640.png","modified":1,"renderable":1},{"_id":"source/_posts/打造一个流畅的UITableView/18436043320170221103826037.png","post":"cjto6zikp001t1u0ocxkce5qv","slug":"18436043320170221103826037.png","modified":1,"renderable":1},{"_id":"source/_posts/打造一个流畅的UITableView/18436043320170221104310077.png","post":"cjto6zikp001t1u0ocxkce5qv","slug":"18436043320170221104310077.png","modified":1,"renderable":1},{"_id":"source/_posts/打造一个流畅的UITableView/opaque.png","post":"cjto6zikp001t1u0ocxkce5qv","slug":"opaque.png","modified":1,"renderable":1},{"_id":"source/_posts/打造一个流畅的UITableView/yellow.png","post":"cjto6zikp001t1u0ocxkce5qv","slug":"yellow.png","modified":1,"renderable":1},{"_id":"source/_posts/Swift-面向协议编程的那些事/binarysearch1.png","post":"cjto6ziju00091u0ogsx0c09i","slug":"binarysearch1.png","modified":1,"renderable":1},{"_id":"source/_posts/Swift-面向协议编程的那些事/binarysearch2.png","post":"cjto6ziju00091u0ogsx0c09i","slug":"binarysearch2.png","modified":1,"renderable":1},{"_id":"source/_posts/Swift-面向协议编程的那些事/render.png","slug":"render.png","post":"cjto6ziju00091u0ogsx0c09i","modified":1,"renderable":0},{"_id":"source/_posts/Swift-面向协议编程的那些事/render2.png","post":"cjto6ziju00091u0ogsx0c09i","slug":"render2.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/02.png","post":"cjto6zik0000e1u0ocn89rbp4","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/04.png","post":"cjto6zik0000e1u0ocn89rbp4","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-应用启动流程分析-dyld/05.png","slug":"05.png","post":"cjto6zik0000e1u0ocn89rbp4","modified":1,"renderable":0},{"_id":"source/_posts/iOS核心动画-Core-Animation/18436043320170223145213034.gif","slug":"18436043320170223145213034.gif","post":"cjto6zik8000l1u0o05ace6or","modified":1,"renderable":0},{"_id":"source/_posts/iOS核心动画-Core-Animation/18436043320170223160215019.gif","slug":"18436043320170223160215019.gif","post":"cjto6zik8000l1u0o05ace6or","modified":1,"renderable":0},{"_id":"source/_posts/iOS核心动画-Core-Animation/18436043320170223160237065.gif","slug":"18436043320170223160237065.gif","post":"cjto6zik8000l1u0o05ace6or","modified":1,"renderable":0},{"_id":"source/_posts/iOS核心动画-Core-Animation/1843604332017022316310707.png","post":"cjto6zik8000l1u0o05ace6or","slug":"1843604332017022316310707.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS核心动画-Core-Animation/car.gif","slug":"car.gif","post":"cjto6zik8000l1u0o05ace6or","modified":1,"renderable":0},{"_id":"source/_posts/iOS核心动画-Core-Animation/cover.jpg","post":"cjto6zik8000l1u0o05ace6or","slug":"cover.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjto6zijd00001u0or3w8r3ul","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zik1000f1u0ow03bq0zz"},{"post_id":"cjto6zijx000d1u0ot1e9fw94","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zik9000m1u0ohl082vqu"},{"post_id":"cjto6ziji00021u0obgec7jv8","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zikb000r1u0ohw7x96xh"},{"post_id":"cjto6zik0000e1u0ocn89rbp4","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zikd000u1u0o7wr1g18x"},{"post_id":"cjto6zik5000j1u0ommwrdmhk","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zikf000y1u0o1h2np4vb"},{"post_id":"cjto6zijn00061u0odvag9i3v","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zikg00111u0oxaxrnyg5"},{"post_id":"cjto6zik8000l1u0o05ace6or","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zikh00161u0ojdyjv2nf"},{"post_id":"cjto6zijr00081u0of844dkoo","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6ziki00191u0o9g46n01k"},{"post_id":"cjto6zike000x1u0ol1rqnox1","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zikj001e1u0o017bgron"},{"post_id":"cjto6ziju00091u0ogsx0c09i","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zikk001h1u0o0y62kd44"},{"post_id":"cjto6zikf00101u0og54ejzgv","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zikm001k1u0oikof5rys"},{"post_id":"cjto6zikc000t1u0o9puoolt1","category_id":"cjto6zikg00121u0o5j83zz0b","_id":"cjto6zikn001n1u0ov2ihq6v9"},{"post_id":"cjto6ziki00181u0ol2giduv5","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6ziko001q1u0oxjksefvw"},{"post_id":"cjto6zikj001d1u0o5p8kprek","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zikp001u1u0odff11she"},{"post_id":"cjto6zikk001g1u0o582y5tau","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zikq001w1u0o6malwx44"},{"post_id":"cjto6zikh00151u0osn2d18b0","category_id":"cjto6zikj001b1u0ogravm07t","_id":"cjto6zil600201u0obrnyzzxa"},{"post_id":"cjto6zikl001j1u0oarq02yfk","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zil700231u0owo7gmipt"},{"post_id":"cjto6zikn001p1u0o6t03zo1m","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zil800271u0ott1npx0x"},{"post_id":"cjto6zikp001t1u0ocxkce5qv","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zila002b1u0okcpe981h"},{"post_id":"cjto6zikq001v1u0orwj3f23u","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zilb002f1u0ob4lcv029"},{"post_id":"cjto6zikr001z1u0o2fy6gioq","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zilc002j1u0onk9bxf63"},{"post_id":"cjto6zil800261u0ov6zecqnf","category_id":"cjto6ziju000a1u0onr1g2gei","_id":"cjto6zild002l1u0om7itldjh"},{"post_id":"cjto6zila002e1u0ojqxver1i","category_id":"cjto6zijl00041u0oubxh6t7a","_id":"cjto6zild002o1u0o6tdl2ela"},{"post_id":"cjto6zil700221u0oqvk3pe4h","category_id":"cjto6zil900281u0ouedjrw60","_id":"cjto6zile002q1u0ooxluu6w8"},{"post_id":"cjto6zilb002h1u0om07f7b36","category_id":"cjto6zil900281u0ouedjrw60","_id":"cjto6zile002t1u0olm3tkcsy"},{"post_id":"cjto6zil9002a1u0o3x7nhu2q","category_id":"cjto6zil900281u0ouedjrw60","_id":"cjto6zile002v1u0onzmoltpr"}],"PostTag":[{"post_id":"cjto6zijd00001u0or3w8r3ul","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zijx000c1u0o2x8o0tgs"},{"post_id":"cjto6zijx000d1u0ot1e9fw94","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zik5000i1u0oixdyraqh"},{"post_id":"cjto6ziji00021u0obgec7jv8","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zik8000k1u0o4g13zq6z"},{"post_id":"cjto6zik5000j1u0ommwrdmhk","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zika000p1u0o9tdxxs6s"},{"post_id":"cjto6zijn00061u0odvag9i3v","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zikc000s1u0osejuu1b9"},{"post_id":"cjto6zijr00081u0of844dkoo","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zikf000z1u0olbrit1lc"},{"post_id":"cjto6zike000x1u0ol1rqnox1","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zikg00141u0octnmaq1s"},{"post_id":"cjto6ziju00091u0ogsx0c09i","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zikh00171u0ocx2jqz24"},{"post_id":"cjto6zikf00101u0og54ejzgv","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zikj001c1u0oloacdlqj"},{"post_id":"cjto6zik0000e1u0ocn89rbp4","tag_id":"cjto6zikg00131u0oyj5zjnnx","_id":"cjto6zikk001f1u0ofqnv0fu2"},{"post_id":"cjto6zik8000l1u0o05ace6or","tag_id":"cjto6ziki001a1u0oetoe90tp","_id":"cjto6zikm001l1u0o9vst8ffq"},{"post_id":"cjto6zikl001j1u0oarq02yfk","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zikn001o1u0otc2q8sxu"},{"post_id":"cjto6zikb000q1u0o8w8ot82w","tag_id":"cjto6zikl001i1u0o3l94qswq","_id":"cjto6zikp001s1u0ojgrrjsu6"},{"post_id":"cjto6zikp001t1u0ocxkce5qv","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zikr001y1u0opa4r01ie"},{"post_id":"cjto6zikc000t1u0o9puoolt1","tag_id":"cjto6ziko001r1u0ovsvdshdy","_id":"cjto6zil600211u0oahhbo1mi"},{"post_id":"cjto6zikc000t1u0o9puoolt1","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zil800251u0odd49yesy"},{"post_id":"cjto6zikr001z1u0o2fy6gioq","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zil900291u0onk6fdm4n"},{"post_id":"cjto6zikh00151u0osn2d18b0","tag_id":"cjto6zikr001x1u0oudyeldcn","_id":"cjto6zila002c1u0oethz51b9"},{"post_id":"cjto6zil800261u0ov6zecqnf","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zilb002g1u0o2sp2xm6u"},{"post_id":"cjto6ziki00181u0ol2giduv5","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zild002k1u0o6lfr9wpi"},{"post_id":"cjto6ziki00181u0ol2giduv5","tag_id":"cjto6zil800241u0ojyj4bqi0","_id":"cjto6zild002n1u0o5q12rdo4"},{"post_id":"cjto6zila002e1u0ojqxver1i","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zild002p1u0o72j4rlhz"},{"post_id":"cjto6zikj001d1u0o5p8kprek","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zile002s1u0ojwo99ks2"},{"post_id":"cjto6zikj001d1u0o5p8kprek","tag_id":"cjto6zila002d1u0ocyb205h3","_id":"cjto6zile002u1u0ors4bbpji"},{"post_id":"cjto6zikk001g1u0o582y5tau","tag_id":"cjto6zild002m1u0o0x5eppf0","_id":"cjto6zile002x1u0o2muabstx"},{"post_id":"cjto6zikm001m1u0o4gsi2n95","tag_id":"cjto6zile002r1u0oo7jyip5y","_id":"cjto6zilf002y1u0oospc8y9e"},{"post_id":"cjto6zikn001p1u0o6t03zo1m","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zilf00301u0owoxgpti4"},{"post_id":"cjto6zikn001p1u0o6t03zo1m","tag_id":"cjto6zile002w1u0omn88f67p","_id":"cjto6zilf00311u0opuz6k35o"},{"post_id":"cjto6zikq001v1u0orwj3f23u","tag_id":"cjto6zijv000b1u0o1lnlevc7","_id":"cjto6zilf00331u0olxfh1ol5"},{"post_id":"cjto6zikq001v1u0orwj3f23u","tag_id":"cjto6zilf002z1u0o5f0u9mls","_id":"cjto6zilg00341u0onqx6ahey"},{"post_id":"cjto6zil700221u0oqvk3pe4h","tag_id":"cjto6zilf00321u0o1j01k9z7","_id":"cjto6zilg00361u0olgd13se5"},{"post_id":"cjto6zil9002a1u0o3x7nhu2q","tag_id":"cjto6zijm00051u0o64ch0xn0","_id":"cjto6zilh00381u0oue8nzowr"},{"post_id":"cjto6zil9002a1u0o3x7nhu2q","tag_id":"cjto6zilf00321u0o1j01k9z7","_id":"cjto6zilh00391u0ox8daxw3a"},{"post_id":"cjto6zilb002h1u0om07f7b36","tag_id":"cjto6zilf00321u0o1j01k9z7","_id":"cjto6zilh003b1u0ok1gmgvfd"},{"post_id":"cjto6zilb002h1u0om07f7b36","tag_id":"cjto6zilh003a1u0o7gp5zqxa","_id":"cjto6zilh003c1u0o99adgmac"}],"Tag":[{"name":"iOS","_id":"cjto6zijm00051u0o64ch0xn0"},{"name":"Swift","_id":"cjto6zijv000b1u0o1lnlevc7"},{"name":"原理 dyld","_id":"cjto6zikg00131u0oyj5zjnnx"},{"name":"iOS Animations","_id":"cjto6ziki001a1u0oetoe90tp"},{"name":"Xcode","_id":"cjto6zikl001i1u0o3l94qswq"},{"name":"Cocoa","_id":"cjto6ziko001r1u0ovsvdshdy"},{"name":"Webpack","_id":"cjto6zikr001x1u0oudyeldcn"},{"name":"Core Data","_id":"cjto6zil800241u0ojyj4bqi0"},{"name":"CocoaPods","_id":"cjto6zila002d1u0ocyb205h3"},{"name":"Objective-C","_id":"cjto6zild002m1u0o0x5eppf0"},{"name":"直播","_id":"cjto6zile002r1u0oo7jyip5y"},{"name":"响应式编程","_id":"cjto6zile002w1u0omn88f67p"},{"name":"Reactive programing","_id":"cjto6zilf002z1u0o5f0u9mls"},{"name":"架构","_id":"cjto6zilf00321u0o1j01k9z7"},{"name":"设计模式","_id":"cjto6zilh003a1u0o7gp5zqxa"}]}}